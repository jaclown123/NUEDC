
AFE_AWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005020  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000002c  0800504c  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800504c  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017260  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec2  00000000  00000000  0001e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00021180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001021  00000000  00000000  00022628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026da5  00000000  00000000  00023649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ba3  00000000  00000000  0004a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde74  00000000  00000000  00062f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005838  00000000  00000000  00160e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00166680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004fb8 	.word	0x08004fb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08004fb8 	.word	0x08004fb8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <sigma_delta>:
}

/**
  * @brief  set sigma_delta modulation
 */
void sigma_delta(uint16_t value_16bit, uint16_t* seq_12bit) {
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	80fb      	strh	r3, [r7, #6]
  uint16_t base = value_16bit >> 4;
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	091b      	lsrs	r3, r3, #4
 8000518:	81fb      	strh	r3, [r7, #14]
  uint8_t n = value_16bit & 0xf;
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	737b      	strb	r3, [r7, #13]
  uint8_t e=0;
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
  for (int i=0;i<16;i++) {
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	e01b      	b.n	8000566 <sigma_delta+0x5e>
    e+=n;
 800052e:	7dfa      	ldrb	r2, [r7, #23]
 8000530:	7b7b      	ldrb	r3, [r7, #13]
 8000532:	4413      	add	r3, r2
 8000534:	75fb      	strb	r3, [r7, #23]
    if (e>=8) {
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	2b07      	cmp	r3, #7
 800053a:	d90b      	bls.n	8000554 <sigma_delta+0x4c>
      e-=16;
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	3b10      	subs	r3, #16
 8000540:	75fb      	strb	r3, [r7, #23]
      seq_12bit[i]=base+1;
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4413      	add	r3, r2
 800054a:	89fa      	ldrh	r2, [r7, #14]
 800054c:	3201      	adds	r2, #1
 800054e:	b292      	uxth	r2, r2
 8000550:	801a      	strh	r2, [r3, #0]
 8000552:	e005      	b.n	8000560 <sigma_delta+0x58>
    }
    else{
      seq_12bit[i]=base;
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	89fa      	ldrh	r2, [r7, #14]
 800055e:	801a      	strh	r2, [r3, #0]
  for (int i=0;i<16;i++) {
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	3301      	adds	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	dde0      	ble.n	800052e <sigma_delta+0x26>
    }
  }
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <AWG_Offset>:

/**
  * @brief  set AWG offset
  * @param  offset_level uint16_t from 0 to 65520, 16bit DAC ,from -5V to 5V
  */
void AWG_Offset(uint16_t offset_level){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level > 65520) {
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800058c:	4293      	cmp	r3, r2
 800058e:	d805      	bhi.n	800059c <AWG_Offset+0x20>
      return ;
    }
  else {
    sigma_delta(offset_level,awg_offset_level_buffer);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	4904      	ldr	r1, [pc, #16]	@ (80005a4 <AWG_Offset+0x28>)
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffb7 	bl	8000508 <sigma_delta>
 800059a:	e000      	b.n	800059e <AWG_Offset+0x22>
      return ;
 800059c:	bf00      	nop
  }
}
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <AWG_Offset_Init>:



void AWG_Offset_Init(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af02      	add	r7, sp, #8
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)awg_offset_level_buffer, 16, DAC_ALIGN_12B_R);
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2310      	movs	r3, #16
 80005b4:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <AWG_Offset_Init+0x24>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <AWG_Offset_Init+0x28>)
 80005ba:	f000 ff8d 	bl	80014d8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim7);
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <AWG_Offset_Init+0x2c>)
 80005c0:	f003 f902 	bl	80037c8 <HAL_TIM_Base_Start>
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	2000006c 	.word	0x2000006c
 80005d4:	20000190 	.word	0x20000190

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fce7 	bl	8000fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f818 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa08 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 f9c8 	bl	800097c <MX_DMA_Init>
  MX_CRC_Init();
 80005ec:	f000 f86a 	bl	80006c4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f978 	bl	80008e4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005f4:	f000 f8cc 	bl	8000790 <MX_SPI3_Init>
  MX_DAC1_Init();
 80005f8:	f000 f890 	bl	800071c <MX_DAC1_Init>
  MX_TIM6_Init();
 80005fc:	f000 f906 	bl	800080c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000600:	f000 f93a 	bl	8000878 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //AFE_Gain(4);
  //AFE_Offset(130);
  AWG_Offset_Init();
 8000604:	f7ff ffd0 	bl	80005a8 <AWG_Offset_Init>
  AWG_Offset(32768);
 8000608:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800060c:	f7ff ffb6 	bl	800057c <AWG_Offset>
  //AWG_Gain(1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x38>

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	@ 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fc9c 	bl	8004f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800063a:	f001 ff4d 	bl	80024d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800063e:	2303      	movs	r3, #3
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2340      	movs	r3, #64	@ 0x40
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	2303      	movs	r3, #3
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 800065a:	2305      	movs	r3, #5
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800065e:	233c      	movs	r3, #60	@ 0x3c
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ffe4 	bl	8002640 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067e:	f000 fa4f 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fae2 	bl	8002c64 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a6:	f000 fa3b 	bl	8000b20 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SystemClock_Config+0xac>)
 80006b2:	f002 fc13 	bl	8002edc <HAL_RCC_MCOConfig>
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	00060400 	.word	0x00060400

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_CRC_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <MX_CRC_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_CRC_Init+0x50>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_CRC_Init+0x50>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_CRC_Init+0x50>)
 80006dc:	f241 0221 	movw	r2, #4129	@ 0x1021
 80006e0:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_CRC_Init+0x50>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_CRC_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_CRC_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_CRC_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_CRC_Init+0x50>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_CRC_Init+0x50>)
 8000702:	f000 fdd5 	bl	80012b0 <HAL_CRC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 fa08 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000048 	.word	0x20000048
 8000718:	40023000 	.word	0x40023000

0800071c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2230      	movs	r2, #48	@ 0x30
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f004 fc19 	bl	8004f60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_DAC1_Init+0x6c>)
 8000730:	4a16      	ldr	r2, [pc, #88]	@ (800078c <MX_DAC1_Init+0x70>)
 8000732:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000734:	4814      	ldr	r0, [pc, #80]	@ (8000788 <MX_DAC1_Init+0x6c>)
 8000736:	f000 fead 	bl	8001494 <HAL_DAC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000740:	f000 f9ee 	bl	8000b20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000744:	2302      	movs	r3, #2
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000754:	230a      	movs	r3, #10
 8000756:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_DAC1_Init+0x6c>)
 8000770:	f000 ffa4 	bl	80016bc <HAL_DAC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800077a:	f000 f9d1 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3730      	adds	r7, #48	@ 0x30
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000006c 	.word	0x2000006c
 800078c:	50000800 	.word	0x50000800

08000790 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_SPI3_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_SPI3_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_SPI3_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007c6:	2218      	movs	r2, #24
 80007c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007f0:	f002 fee8 	bl	80035c4 <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f991 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000e0 	.word	0x200000e0
 8000808:	40003c00 	.word	0x40003c00

0800080c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_TIM6_Init+0x64>)
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_TIM6_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_TIM6_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_TIM6_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_TIM6_Init+0x64>)
 8000830:	2295      	movs	r2, #149	@ 0x95
 8000832:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_TIM6_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_TIM6_Init+0x64>)
 800083c:	f002 ff6d 	bl	800371a <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000846:	f000 f96b 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084a:	2320      	movs	r3, #32
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM6_Init+0x64>)
 8000858:	f003 f8da 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000862:	f000 f95d 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000144 	.word	0x20000144
 8000874:	40001000 	.word	0x40001000

08000878 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_TIM7_Init+0x64>)
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_TIM7_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_TIM7_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_TIM7_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 149;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM7_Init+0x64>)
 800089c:	2295      	movs	r2, #149	@ 0x95
 800089e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM7_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM7_Init+0x64>)
 80008a8:	f002 ff37 	bl	800371a <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80008b2:	f000 f935 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008b6:	2320      	movs	r3, #32
 80008b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM7_Init+0x64>)
 80008c4:	f003 f8a4 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80008ce:	f000 f927 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000190 	.word	0x20000190
 80008e0:	40001400 	.word	0x40001400

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <MX_USART2_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 800092e:	f003 f905 	bl	8003b3c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f8f2 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000940:	f004 fa43 	bl	8004dca <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f8e9 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000952:	f004 fa78 	bl	8004e46 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f8e0 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_USART2_UART_Init+0x90>)
 8000962:	f004 f9f9 	bl	8004d58 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f8d8 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001dc 	.word	0x200001dc
 8000978:	40004400 	.word	0x40004400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_DMA_Init+0x78>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000986:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <MX_DMA_Init+0x78>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	@ 0x48
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_DMA_Init+0x78>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_DMA_Init+0x78>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800099e:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <MX_DMA_Init+0x78>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_DMA_Init+0x78>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_DMA_Init+0x78>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_DMA_Init+0x78>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <MX_DMA_Init+0x78>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	200b      	movs	r0, #11
 80009d0:	f000 fc39 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d4:	200b      	movs	r0, #11
 80009d6:	f000 fc50 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2063      	movs	r0, #99	@ 0x63
 80009e0:	f000 fc31 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 80009e4:	2063      	movs	r0, #99	@ 0x63
 80009e6:	f000 fc48 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a40      	ldr	r2, [pc, #256]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a34      	ldr	r2, [pc, #208]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_GPIO_Init+0x11c>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_CS_GPIO_Port, DDS_CS_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f001 fd0a 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9a:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0x120>)
 8000a9c:	f001 fd04 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa6:	481c      	ldr	r0, [pc, #112]	@ (8000b18 <MX_GPIO_Init+0x120>)
 8000aa8:	f001 fcfe 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <MX_GPIO_Init+0x124>)
 8000aca:	f001 fb6b 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_CS_Pin */
  GPIO_InitStruct.Pin = DDS_CS_Pin;
 8000ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DDS_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f001 fb5b 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8000aee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_GPIO_Init+0x120>)
 8000b08:	f001 fb4c 	bl	80021a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	@ 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48001800 	.word	0x48001800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b62:	f001 fd5d 	bl	8002620 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_CRC_MspInit+0x38>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023000 	.word	0x40023000
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c80 <HAL_DAC_MspInit+0xcc>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d14f      	bne.n	8000c76 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a2a      	ldr	r2, [pc, #168]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a24      	ldr	r2, [pc, #144]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <HAL_DAC_MspInit+0xd0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c06:	2310      	movs	r3, #16
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f001 fac2 	bl	80021a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c22:	4a1a      	ldr	r2, [pc, #104]	@ (8000c8c <HAL_DAC_MspInit+0xd8>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c28:	2206      	movs	r2, #6
 8000c2a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c2e:	2210      	movs	r2, #16
 8000c30:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c3a:	2280      	movs	r2, #128	@ 0x80
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c44:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c50:	2220      	movs	r2, #32
 8000c52:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c5a:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c5c:	f000 ff70 	bl	8001b40 <HAL_DMA_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000c66:	f7ff ff5b 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <HAL_DAC_MspInit+0xd4>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	50000800 	.word	0x50000800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	40020008 	.word	0x40020008

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_SPI_MspInit+0x7c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d128      	bne.n	8000d04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a16      	ldr	r2, [pc, #88]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ce2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <HAL_SPI_MspInit+0x84>)
 8000d00:	f001 fa50 	bl	80021a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	@ 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40003c00 	.word	0x40003c00
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000800 	.word	0x48000800

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_TIM_Base_MspInit+0x5c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10c      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d42:	e010      	b.n	8000d66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0c      	ldr	r2, [pc, #48]	@ (8000d7c <HAL_TIM_Base_MspInit+0x64>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10b      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <HAL_TIM_Base_MspInit+0x60>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40001400 	.word	0x40001400

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09e      	sub	sp, #120	@ 0x78
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2254      	movs	r2, #84	@ 0x54
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 f8dd 	bl	8004f60 <memset>
  if(huart->Instance==USART2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a37      	ldr	r2, [pc, #220]	@ (8000e88 <HAL_UART_MspInit+0x108>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d167      	bne.n	8000e80 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000db4:	2304      	movs	r3, #4
 8000db6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 f9b3 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc8:	f7ff feaa 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de8:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_UART_MspInit+0x10c>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dfc:	2318      	movs	r3, #24
 8000dfe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e14:	4619      	mov	r1, r3
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <HAL_UART_MspInit+0x110>)
 8000e18:	f001 f9c4 	bl	80021a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e98 <HAL_UART_MspInit+0x118>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e24:	221a      	movs	r2, #26
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e54:	f000 fe74 	bl	8001b40 <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8000e5e:	f7ff fe5f 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_UART_MspInit+0x114>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2026      	movs	r0, #38	@ 0x26
 8000e76:	f000 f9e6 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e7a:	2026      	movs	r0, #38	@ 0x26
 8000e7c:	f000 f9fd 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3778      	adds	r7, #120	@ 0x78
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	20000270 	.word	0x20000270
 8000e98:	40020494 	.word	0x40020494

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f8af 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <DMA1_Channel1_IRQHandler+0x10>)
 8000f02:	f001 f800 	bl	8001f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000080 	.word	0x20000080

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f002 fe61 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001dc 	.word	0x200001dc

08000f24 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <DMA2_Channel8_IRQHandler+0x10>)
 8000f2a:	f000 ffec 	bl	8001f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000270 	.word	0x20000270

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f003 fff1 	bl	8004f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8e:	f7ff fb23 	bl	80005d8 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   r0, =_estack
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fa0:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8000fa4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fa8:	200002d4 	.word	0x200002d4

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>

08000fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f939 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f80e 	bl	8000fe0 <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	e001      	b.n	8000fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd0:	f7ff fdac 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]

}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_InitTick+0x68>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d022      	beq.n	800103a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_InitTick+0x6c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <HAL_InitTick+0x68>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001000:	fbb1 f3f3 	udiv	r3, r1, r3
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f944 	bl	8001296 <HAL_SYSTICK_Config>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10f      	bne.n	8001034 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d809      	bhi.n	800102e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	2200      	movs	r2, #0
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	f04f 30ff 	mov.w	r0, #4294967295
 8001022:	f000 f910 	bl	8001246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_InitTick+0x70>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e007      	b.n	800103e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e004      	b.n	800103e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000028 	.word	0x20000028
 800104c:	20000020 	.word	0x20000020
 8001050:	20000024 	.word	0x20000024

08001054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_IncTick+0x1c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_IncTick+0x20>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	4a03      	ldr	r2, [pc, #12]	@ (8001070 <HAL_IncTick+0x1c>)
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	200002d0 	.word	0x200002d0
 8001074:	20000028 	.word	0x20000028

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200002d0 	.word	0x200002d0

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff40 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff90 	bl	8001184 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5f 	bl	8001130 <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff33 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa4 	bl	80011ec <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e054      	b.n	800136c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fc4e 	bl	8000b74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <HAL_CRC_Init+0xc4>)
 80012ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0218 	bic.w	r2, r2, #24
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e00c      	b.n	800131a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6899      	ldr	r1, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	461a      	mov	r2, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f834 	bl	8001378 <HAL_CRCEx_Polynomial_Set>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e028      	b.n	800136c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	795b      	ldrb	r3, [r3, #5]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f04f 32ff 	mov.w	r2, #4294967295
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	e004      	b.n	8001338 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6912      	ldr	r2, [r2, #16]
 8001336:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	04c11db7 	.word	0x04c11db7

08001378 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001388:	231f      	movs	r3, #31
 800138a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
 800139a:	e063      	b.n	8001464 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800139c:	bf00      	nop
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1e5a      	subs	r2, r3, #1
 80013a2:	613a      	str	r2, [r7, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <HAL_CRCEx_Polynomial_Set+0x44>
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b18      	cmp	r3, #24
 80013c0:	d846      	bhi.n	8001450 <HAL_CRCEx_Polynomial_Set+0xd8>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001457 	.word	0x08001457
 80013cc:	08001451 	.word	0x08001451
 80013d0:	08001451 	.word	0x08001451
 80013d4:	08001451 	.word	0x08001451
 80013d8:	08001451 	.word	0x08001451
 80013dc:	08001451 	.word	0x08001451
 80013e0:	08001451 	.word	0x08001451
 80013e4:	08001451 	.word	0x08001451
 80013e8:	08001445 	.word	0x08001445
 80013ec:	08001451 	.word	0x08001451
 80013f0:	08001451 	.word	0x08001451
 80013f4:	08001451 	.word	0x08001451
 80013f8:	08001451 	.word	0x08001451
 80013fc:	08001451 	.word	0x08001451
 8001400:	08001451 	.word	0x08001451
 8001404:	08001451 	.word	0x08001451
 8001408:	08001439 	.word	0x08001439
 800140c:	08001451 	.word	0x08001451
 8001410:	08001451 	.word	0x08001451
 8001414:	08001451 	.word	0x08001451
 8001418:	08001451 	.word	0x08001451
 800141c:	08001451 	.word	0x08001451
 8001420:	08001451 	.word	0x08001451
 8001424:	08001451 	.word	0x08001451
 8001428:	0800142d 	.word	0x0800142d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d913      	bls.n	800145a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001436:	e010      	b.n	800145a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d90f      	bls.n	800145e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001442:	e00c      	b.n	800145e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d90b      	bls.n	8001462 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800144e:	e008      	b.n	8001462 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	75fb      	strb	r3, [r7, #23]
        break;
 8001454:	e006      	b.n	8001464 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001456:	bf00      	nop
 8001458:	e004      	b.n	8001464 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800145a:	bf00      	nop
 800145c:	e002      	b.n	8001464 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001462:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10d      	bne.n	8001486 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 0118 	bic.w	r1, r3, #24
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e014      	b.n	80014d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	791b      	ldrb	r3, [r3, #4]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fb7c 	bl	8000bb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b2      	b.n	8001656 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	795b      	ldrb	r3, [r3, #5]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_DAC_Start_DMA+0x24>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e0ac      	b.n	8001656 <HAL_DAC_Start_DMA+0x17e>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2202      	movs	r2, #2
 8001506:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d129      	bne.n	8001562 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	4a53      	ldr	r2, [pc, #332]	@ (8001660 <HAL_DAC_Start_DMA+0x188>)
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4a52      	ldr	r2, [pc, #328]	@ (8001664 <HAL_DAC_Start_DMA+0x18c>)
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4a51      	ldr	r2, [pc, #324]	@ (8001668 <HAL_DAC_Start_DMA+0x190>)
 8001524:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001534:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_DAC_Start_DMA+0x6c>
 800153c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153e:	2b04      	cmp	r3, #4
 8001540:	d005      	beq.n	800154e <HAL_DAC_Start_DMA+0x76>
 8001542:	e009      	b.n	8001558 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3308      	adds	r3, #8
 800154a:	61bb      	str	r3, [r7, #24]
        break;
 800154c:	e033      	b.n	80015b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	330c      	adds	r3, #12
 8001554:	61bb      	str	r3, [r7, #24]
        break;
 8001556:	e02e      	b.n	80015b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3310      	adds	r3, #16
 800155e:	61bb      	str	r3, [r7, #24]
        break;
 8001560:	e029      	b.n	80015b6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a41      	ldr	r2, [pc, #260]	@ (800166c <HAL_DAC_Start_DMA+0x194>)
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4a40      	ldr	r2, [pc, #256]	@ (8001670 <HAL_DAC_Start_DMA+0x198>)
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	4a3f      	ldr	r2, [pc, #252]	@ (8001674 <HAL_DAC_Start_DMA+0x19c>)
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001588:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_DAC_Start_DMA+0xc0>
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	2b04      	cmp	r3, #4
 8001594:	d005      	beq.n	80015a2 <HAL_DAC_Start_DMA+0xca>
 8001596:	e009      	b.n	80015ac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3314      	adds	r3, #20
 800159e:	61bb      	str	r3, [r7, #24]
        break;
 80015a0:	e009      	b.n	80015b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3318      	adds	r3, #24
 80015a8:	61bb      	str	r3, [r7, #24]
        break;
 80015aa:	e004      	b.n	80015b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	331c      	adds	r3, #28
 80015b2:	61bb      	str	r3, [r7, #24]
        break;
 80015b4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6898      	ldr	r0, [r3, #8]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f000 fb5b 	bl	8001c90 <HAL_DMA_Start_IT>
 80015da:	4603      	mov	r3, r0
 80015dc:	77fb      	strb	r3, [r7, #31]
 80015de:	e010      	b.n	8001602 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68d8      	ldr	r0, [r3, #12]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f000 fb49 	bl	8001c90 <HAL_DMA_Start_IT>
 80015fe:	4603      	mov	r3, r0
 8001600:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001608:	7ffb      	ldrb	r3, [r7, #31]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11c      	bne.n	8001648 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2201      	movs	r2, #1
 800161c:	409a      	lsls	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <HAL_DAC_Start_DMA+0x1a0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	4a13      	ldr	r2, [pc, #76]	@ (800167c <HAL_DAC_Start_DMA+0x1a4>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	099b      	lsrs	r3, r3, #6
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001638:	e002      	b.n	8001640 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3b01      	subs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_DAC_Start_DMA+0x162>
 8001646:	e005      	b.n	8001654 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001654:	7ffb      	ldrb	r3, [r7, #31]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	08001a2d 	.word	0x08001a2d
 8001664:	08001a4f 	.word	0x08001a4f
 8001668:	08001a6b 	.word	0x08001a6b
 800166c:	08001ad5 	.word	0x08001ad5
 8001670:	08001af7 	.word	0x08001af7
 8001674:	08001b13 	.word	0x08001b13
 8001678:	20000020 	.word	0x20000020
 800167c:	053e2d63 	.word	0x053e2d63

08001680 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_DAC_ConfigChannel+0x1c>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e19e      	b.n	8001a1a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	795b      	ldrb	r3, [r3, #5]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_DAC_ConfigChannel+0x2c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e198      	b.n	8001a1a <HAL_DAC_ConfigChannel+0x35e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d17a      	bne.n	80017f2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80016fc:	f7ff fcbc 	bl	8001078 <HAL_GetTick>
 8001700:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d13d      	bne.n	8001784 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001708:	e018      	b.n	800173c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800170a:	f7ff fcb5 	bl	8001078 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d911      	bls.n	800173c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f043 0208 	orr.w	r2, r3, #8
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2203      	movs	r2, #3
 8001736:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e16e      	b.n	8001a1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1df      	bne.n	800170a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001752:	641a      	str	r2, [r3, #64]	@ 0x40
 8001754:	e020      	b.n	8001798 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001756:	f7ff fc8f 	bl	8001078 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d90f      	bls.n	8001784 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176a:	2b00      	cmp	r3, #0
 800176c:	da0a      	bge.n	8001784 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f043 0208 	orr.w	r2, r3, #8
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2203      	movs	r2, #3
 800177e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e14a      	b.n	8001a1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	dbe3      	blt.n	8001756 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001796:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	ea02 0103 	and.w	r1, r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	409a      	lsls	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	21ff      	movs	r1, #255	@ 0xff
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	ea02 0103 	and.w	r1, r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	409a      	lsls	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d11d      	bne.n	8001836 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	221f      	movs	r2, #31
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001812:	4013      	ands	r3, r2
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182a:	4313      	orrs	r3, r2
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001834:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2207      	movs	r2, #7
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184e:	4013      	ands	r3, r2
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	e00f      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d102      	bne.n	800186e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	e008      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	e001      	b.n	8001880 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a2:	4013      	ands	r3, r2
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_DAC_ConfigChannel+0x1f8>
 80018ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018b2:	e000      	b.n	80018b6 <HAL_DAC_ConfigChannel+0x1fa>
 80018b4:	2300      	movs	r3, #0
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	4013      	ands	r3, r2
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_DAC_ConfigChannel+0x224>
 80018da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018de:	e000      	b.n	80018e2 <HAL_DAC_ConfigChannel+0x226>
 80018e0:	2300      	movs	r3, #0
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d114      	bne.n	8001922 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80018f8:	f001 fb98 	bl	800302c <HAL_RCC_GetHCLKFreq>
 80018fc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_DAC_ConfigChannel+0x368>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d904      	bls.n	8001910 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
 800190e:	e00f      	b.n	8001930 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4a45      	ldr	r2, [pc, #276]	@ (8001a28 <HAL_DAC_ConfigChannel+0x36c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d90a      	bls.n	800192e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001920:	e006      	b.n	8001930 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	4313      	orrs	r3, r2
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
 800192c:	e000      	b.n	8001930 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800192e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193e:	4313      	orrs	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001982:	4013      	ands	r3, r2
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199a:	4313      	orrs	r3, r2
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	22c0      	movs	r2, #192	@ 0xc0
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	ea02 0103 	and.w	r1, r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	09896800 	.word	0x09896800
 8001a28:	04c4b400 	.word	0x04c4b400

08001a2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fe20 	bl	8001680 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	711a      	strb	r2, [r3, #4]
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff fe19 	bl	8001694 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f043 0204 	orr.w	r2, r3, #4
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fe0f 	bl	80016a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	711a      	strb	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff ffd8 	bl	8001a98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	711a      	strb	r2, [r3, #4]
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff ffd1 	bl	8001aac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ffc7 	bl	8001ac0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	711a      	strb	r2, [r3, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e08d      	b.n	8001c6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_DMA_Init+0x138>)
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d80f      	bhi.n	8001b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b45      	ldr	r3, [pc, #276]	@ (8001c7c <HAL_DMA_Init+0x13c>)
 8001b66:	4413      	add	r3, r2
 8001b68:	4a45      	ldr	r2, [pc, #276]	@ (8001c80 <HAL_DMA_Init+0x140>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	009a      	lsls	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a42      	ldr	r2, [pc, #264]	@ (8001c84 <HAL_DMA_Init+0x144>)
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b7c:	e00e      	b.n	8001b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b40      	ldr	r3, [pc, #256]	@ (8001c88 <HAL_DMA_Init+0x148>)
 8001b86:	4413      	add	r3, r2
 8001b88:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_DMA_Init+0x140>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	009a      	lsls	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a3c      	ldr	r2, [pc, #240]	@ (8001c8c <HAL_DMA_Init+0x14c>)
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fa76 	bl	80020e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bfc:	d102      	bne.n	8001c04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_DMA_Init+0x104>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d80c      	bhi.n	8001c44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa96 	bl	800215c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	e008      	b.n	8001c56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40020407 	.word	0x40020407
 8001c7c:	bffdfff8 	.word	0xbffdfff8
 8001c80:	cccccccd 	.word	0xcccccccd
 8001c84:	40020000 	.word	0x40020000
 8001c88:	bffdfbf8 	.word	0xbffdfbf8
 8001c8c:	40020400 	.word	0x40020400

08001c90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Start_IT+0x20>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e066      	b.n	8001d7e <HAL_DMA_Start_IT+0xee>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d155      	bne.n	8001d70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f9bb 	bl	8002064 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 020e 	orr.w	r2, r2, #14
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e00f      	b.n	8001d28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 020a 	orr.w	r2, r2, #10
 8001d26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e005      	b.n	8001d7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d005      	beq.n	8001daa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e037      	b.n	8001e1a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 020e 	bic.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f003 021f 	and.w	r2, r3, #31
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001df6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e0e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e18:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d00d      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2204      	movs	r2, #4
 8001e54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e047      	b.n	8001efc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 020e 	bic.w	r2, r2, #14
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    }
  }
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2204      	movs	r2, #4
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d026      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x7a>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0204 	bic.w	r2, r2, #4
 8001f58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f003 021f 	and.w	r2, r3, #31
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2104      	movs	r1, #4
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d071      	beq.n	800205a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f7e:	e06c      	b.n	800205a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2202      	movs	r2, #2
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02e      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d029      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 020a 	bic.w	r2, r2, #10
 8001fba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d038      	beq.n	800205a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ff0:	e033      	b.n	800205a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d02a      	beq.n	800205c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d025      	beq.n	800205c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020e 	bic.w	r2, r2, #14
 800201e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800205a:	bf00      	nop
 800205c:	bf00      	nop
}
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800207a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800208c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f003 021f 	and.w	r2, r3, #31
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d108      	bne.n	80020c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020c2:	e007      	b.n	80020d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b16      	ldr	r3, [pc, #88]	@ (8002148 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d802      	bhi.n	80020fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80020f4:	4b15      	ldr	r3, [pc, #84]	@ (800214c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e001      	b.n	80020fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3b08      	subs	r3, #8
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800212a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2201      	movs	r2, #1
 8002134:	409a      	lsls	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40020407 	.word	0x40020407
 800214c:	40020800 	.word	0x40020800
 8002150:	40020820 	.word	0x40020820
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	40020880 	.word	0x40020880

0800215c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3b01      	subs	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	1000823f 	.word	0x1000823f
 80021a0:	40020940 	.word	0x40020940

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021b2:	e15a      	b.n	800246a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 814c 	beq.w	8002464 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d005      	beq.n	80021e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d130      	bne.n	8002246 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221a:	2201      	movs	r2, #1
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 0201 	and.w	r2, r3, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b03      	cmp	r3, #3
 8002250:	d017      	beq.n	8002282 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d123      	bne.n	80022d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	6939      	ldr	r1, [r7, #16]
 80022d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0203 	and.w	r2, r3, #3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80a6 	beq.w	8002464 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002318:	4b5b      	ldr	r3, [pc, #364]	@ (8002488 <HAL_GPIO_Init+0x2e4>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	4a5a      	ldr	r2, [pc, #360]	@ (8002488 <HAL_GPIO_Init+0x2e4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6613      	str	r3, [r2, #96]	@ 0x60
 8002324:	4b58      	ldr	r3, [pc, #352]	@ (8002488 <HAL_GPIO_Init+0x2e4>)
 8002326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002330:	4a56      	ldr	r2, [pc, #344]	@ (800248c <HAL_GPIO_Init+0x2e8>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800235a:	d01f      	beq.n	800239c <HAL_GPIO_Init+0x1f8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4c      	ldr	r2, [pc, #304]	@ (8002490 <HAL_GPIO_Init+0x2ec>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d019      	beq.n	8002398 <HAL_GPIO_Init+0x1f4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a4b      	ldr	r2, [pc, #300]	@ (8002494 <HAL_GPIO_Init+0x2f0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x1f0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4a      	ldr	r2, [pc, #296]	@ (8002498 <HAL_GPIO_Init+0x2f4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1ec>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_GPIO_Init+0x2f8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1e8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a48      	ldr	r2, [pc, #288]	@ (80024a0 <HAL_GPIO_Init+0x2fc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1e4>
 8002384:	2305      	movs	r3, #5
 8002386:	e00a      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 8002388:	2306      	movs	r3, #6
 800238a:	e008      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 800238c:	2304      	movs	r3, #4
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 8002390:	2303      	movs	r3, #3
 8002392:	e004      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 8002394:	2302      	movs	r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_Init+0x1fa>
 800239c:	2300      	movs	r3, #0
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	f002 0203 	and.w	r2, r2, #3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4093      	lsls	r3, r2
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ae:	4937      	ldr	r1, [pc, #220]	@ (800248c <HAL_GPIO_Init+0x2e8>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023bc:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e0:	4a30      	ldr	r2, [pc, #192]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023e6:	4b2f      	ldr	r3, [pc, #188]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800240a:	4a26      	ldr	r2, [pc, #152]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800245e:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_GPIO_Init+0x300>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	f47f ae9d 	bne.w	80021b4 <HAL_GPIO_Init+0x10>
  }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40021000 	.word	0x40021000
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	48000c00 	.word	0x48000c00
 800249c:	48001000 	.word	0x48001000
 80024a0:	48001400 	.word	0x48001400
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d141      	bne.n	800256a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f2:	d131      	bne.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f4:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024fa:	4a46      	ldr	r2, [pc, #280]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002500:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800250c:	4a41      	ldr	r2, [pc, #260]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002514:	4b40      	ldr	r3, [pc, #256]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2232      	movs	r2, #50	@ 0x32
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a3f      	ldr	r2, [pc, #252]	@ (800261c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252a:	e002      	b.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3b01      	subs	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002532:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d102      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f2      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002546:	4b33      	ldr	r3, [pc, #204]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002552:	d158      	bne.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e057      	b.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002558:	4b2e      	ldr	r3, [pc, #184]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255e:	4a2d      	ldr	r2, [pc, #180]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002568:	e04d      	b.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002570:	d141      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002572:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257e:	d131      	bne.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002586:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002590:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002598:	4a1e      	ldr	r2, [pc, #120]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2232      	movs	r2, #50	@ 0x32
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9b      	lsrs	r3, r3, #18
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b6:	e002      	b.n	80025be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d102      	bne.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f2      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025de:	d112      	bne.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e011      	b.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025f4:	e007      	b.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fe:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002604:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40007000 	.word	0x40007000
 8002618:	20000020 	.word	0x20000020
 800261c:	431bde83 	.word	0x431bde83

08002620 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800262a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262e:	6093      	str	r3, [r2, #8]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40007000 	.word	0x40007000

08002640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e2fe      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d075      	beq.n	800274a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265e:	4b97      	ldr	r3, [pc, #604]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	4b94      	ldr	r3, [pc, #592]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d102      	bne.n	800267e <HAL_RCC_OscConfig+0x3e>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d002      	beq.n	8002684 <HAL_RCC_OscConfig+0x44>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05b      	beq.n	8002748 <HAL_RCC_OscConfig+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d157      	bne.n	8002748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e2d9      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x74>
 80026a6:	4b85      	ldr	r3, [pc, #532]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a84      	ldr	r2, [pc, #528]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026d8:	4b78      	ldr	r3, [pc, #480]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a77      	ldr	r2, [pc, #476]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a74      	ldr	r2, [pc, #464]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fcbe 	bl	8001078 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fcba 	bl	8001078 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e29e      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002712:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xc0>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fcaa 	bl	8001078 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fca6 	bl	8001078 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e28a      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273a:	4b60      	ldr	r3, [pc, #384]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0xe8>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d075      	beq.n	8002842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b56      	ldr	r3, [pc, #344]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0x136>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d002      	beq.n	800277c <HAL_RCC_OscConfig+0x13c>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11f      	bne.n	80027bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	4b4f      	ldr	r3, [pc, #316]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_OscConfig+0x154>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e25d      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4946      	ldr	r1, [pc, #280]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a8:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fc17 	bl	8000fe0 <HAL_InitTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d043      	beq.n	8002840 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e249      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c4:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3c      	ldr	r2, [pc, #240]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fc52 	bl	8001078 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fc4e 	bl	8001078 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e232      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ea:	4b34      	ldr	r3, [pc, #208]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	492d      	ldr	r1, [pc, #180]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
 800280a:	e01a      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280c:	4b2b      	ldr	r3, [pc, #172]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2a      	ldr	r2, [pc, #168]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002812:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fc2e 	bl	8001078 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7fe fc2a 	bl	8001078 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e20e      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1e0>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d041      	beq.n	80028d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01c      	beq.n	8002890 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285c:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fc07 	bl	8001078 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fc03 	bl	8001078 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1e7      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ef      	beq.n	800286e <HAL_RCC_OscConfig+0x22e>
 800288e:	e020      	b.n	80028d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002896:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fbea 	bl	8001078 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a6:	e00d      	b.n	80028c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fbe6 	bl	8001078 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d906      	bls.n	80028c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1ca      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b8c      	ldr	r3, [pc, #560]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ea      	bne.n	80028a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e4:	4b84      	ldr	r3, [pc, #528]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2b4>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x2b6>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	4b7f      	ldr	r3, [pc, #508]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002922:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x4bc>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe fba3 	bl	8001078 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe fb9f 	bl	8001078 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e183      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	4b6c      	ldr	r3, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x4bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_RCC_OscConfig+0x32e>
 800295c:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800296c:	e024      	b.n	80029b8 <HAL_RCC_OscConfig+0x378>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d110      	bne.n	8002998 <HAL_RCC_OscConfig+0x358>
 8002976:	4b60      	ldr	r3, [pc, #384]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297c:	4a5e      	ldr	r2, [pc, #376]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	4a5a      	ldr	r2, [pc, #360]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002996:	e00f      	b.n	80029b8 <HAL_RCC_OscConfig+0x378>
 8002998:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	4a52      	ldr	r2, [pc, #328]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fb5a 	bl	8001078 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe fb56 	bl	8001078 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e138      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	4b46      	ldr	r3, [pc, #280]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ed      	beq.n	80029c8 <HAL_RCC_OscConfig+0x388>
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fb43 	bl	8001078 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fb3f 	bl	8001078 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e121      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ed      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	4a34      	ldr	r2, [pc, #208]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a46:	4a2c      	ldr	r2, [pc, #176]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fb12 	bl	8001078 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fe fb0e 	bl	8001078 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0f2      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x418>
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a80:	4a1d      	ldr	r2, [pc, #116]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe faf5 	bl	8001078 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe faf1 	bl	8001078 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0d5      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ef      	bne.n	8002a92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80c9 	beq.w	8002c4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	f000 8083 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d15e      	bne.n	8002b90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe facb 	bl	8001078 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	e00c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fac7 	bl	8001078 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d905      	bls.n	8002b00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0ab      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	4b55      	ldr	r3, [pc, #340]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ec      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <HAL_RCC_OscConfig+0x61c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a11      	ldr	r1, [r2, #32]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b26:	0212      	lsls	r2, r2, #8
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0552      	lsls	r2, r2, #21
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b3a:	0852      	lsrs	r2, r2, #1
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0652      	lsls	r2, r2, #25
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b46:	06d2      	lsls	r2, r2, #27
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4943      	ldr	r1, [pc, #268]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a40      	ldr	r2, [pc, #256]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a3d      	ldr	r2, [pc, #244]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fa86 	bl	8001078 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fa82 	bl	8001078 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e066      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	4b35      	ldr	r3, [pc, #212]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x530>
 8002b8e:	e05e      	b.n	8002c4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a30      	ldr	r2, [pc, #192]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fa6c 	bl	8001078 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fa68 	bl	8001078 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e04c      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb6:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bc2:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4924      	ldr	r1, [pc, #144]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002bc8:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_RCC_OscConfig+0x620>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
 8002bce:	e03e      	b.n	8002c4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e039      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_RCC_OscConfig+0x618>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d12c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d123      	bne.n	8002c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d113      	bne.n	8002c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	019f800c 	.word	0x019f800c
 8002c60:	feeefffc 	.word	0xfeeefffc

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e11e      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b91      	ldr	r3, [pc, #580]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 020f 	bic.w	r2, r3, #15
 8002c92:	498c      	ldr	r1, [pc, #560]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e106      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d073      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d129      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc0:	4b81      	ldr	r3, [pc, #516]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0f4      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002cd0:	f000 f9e4 	bl	800309c <RCC_GetSysClockFreqFromPLLSource>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4a7c      	ldr	r2, [pc, #496]	@ (8002ecc <HAL_RCC_ClockConfig+0x268>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d93f      	bls.n	8002d5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cde:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d033      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d12f      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfe:	4b72      	ldr	r3, [pc, #456]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d06:	4a70      	ldr	r2, [pc, #448]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e024      	b.n	8002d5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0c6      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0be      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d3c:	f000 f914 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4a61      	ldr	r2, [pc, #388]	@ (8002ecc <HAL_RCC_ClockConfig+0x268>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d909      	bls.n	8002d5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d52:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4957      	ldr	r1, [pc, #348]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe f982 	bl	8001078 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7fe f97e 	bl	8001078 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e095      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a42      	ldr	r2, [pc, #264]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4936      	ldr	r1, [pc, #216]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b80      	cmp	r3, #128	@ 0x80
 8002df8:	d105      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dfa:	4b33      	ldr	r3, [pc, #204]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d21d      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 020f 	bic.w	r2, r3, #15
 8002e1c:	4929      	ldr	r1, [pc, #164]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e24:	f7fe f928 	bl	8001078 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f924 	bl	8001078 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e03b      	b.n	8002eba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1ed      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4917      	ldr	r1, [pc, #92]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490f      	ldr	r1, [pc, #60]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8e:	f000 f86b 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <HAL_RCC_ClockConfig+0x264>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490c      	ldr	r1, [pc, #48]	@ (8002ed0 <HAL_RCC_ClockConfig+0x26c>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <HAL_RCC_ClockConfig+0x270>)
 8002eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f894 	bl	8000fe0 <HAL_InitTick>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	04c4b400 	.word	0x04c4b400
 8002ed0:	08004fd0 	.word	0x08004fd0
 8002ed4:	20000020 	.word	0x20000020
 8002ed8:	20000024 	.word	0x20000024

08002edc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	@ 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002f16:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_RCC_MCOConfig+0x88>)
 8002f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	4910      	ldr	r1, [pc, #64]	@ (8002f64 <HAL_RCC_MCOConfig+0x88>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0d1b      	lsrs	r3, r3, #20
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002f36:	f107 0310 	add.w	r3, r7, #16
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f3e:	f7ff f931 	bl	80021a4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCC_MCOConfig+0x88>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_MCOConfig+0x88>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e047      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f80:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e03e      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f92:	4b23      	ldr	r3, [pc, #140]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d136      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9e:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc6:	68d2      	ldr	r2, [r2, #12]
 8002fc8:	0a12      	lsrs	r2, r2, #8
 8002fca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	617b      	str	r3, [r7, #20]
      break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fd6:	4a13      	ldr	r2, [pc, #76]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	0a12      	lsrs	r2, r2, #8
 8002fe4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
      break;
 8002fee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0e5b      	lsrs	r3, r3, #25
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e001      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003010:	693b      	ldr	r3, [r7, #16]
}
 8003012:	4618      	mov	r0, r3
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000020 	.word	0x20000020

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08004fe0 	.word	0x08004fe0

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003074:	f7ff ffda 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0adb      	lsrs	r3, r3, #11
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4904      	ldr	r1, [pc, #16]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	08004fe0 	.word	0x08004fe0

0800309c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d10c      	bne.n	80030da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c0:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ca:	68d2      	ldr	r2, [r2, #12]
 80030cc:	0a12      	lsrs	r2, r2, #8
 80030ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
    break;
 80030d8:	e00c      	b.n	80030f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4a0e      	ldr	r2, [pc, #56]	@ (800311c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	0a12      	lsrs	r2, r2, #8
 80030e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    break;
 80030f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0e5b      	lsrs	r3, r3, #25
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	017d7840 	.word	0x017d7840
 8003124:	00f42400 	.word	0x00f42400

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003130:	2300      	movs	r3, #0
 8003132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2300      	movs	r3, #0
 8003136:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8098 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b40      	ldr	r3, [pc, #256]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	4a3f      	ldr	r2, [pc, #252]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003160:	6593      	str	r3, [r2, #88]	@ 0x58
 8003162:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a39      	ldr	r2, [pc, #228]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317e:	f7fd ff7b 	bl	8001078 <HAL_GetTick>
 8003182:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003184:	e009      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd ff77 	bl	8001078 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d902      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	74fb      	strb	r3, [r7, #19]
        break;
 8003198:	e005      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800319a:	4b30      	ldr	r3, [pc, #192]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ef      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d159      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d019      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f4:	4a18      	ldr	r2, [pc, #96]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd ff37 	bl	8001078 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320c:	e00b      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd ff33 	bl	8001078 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d902      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	74fb      	strb	r3, [r7, #19]
            break;
 8003224:	e006      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ec      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003248:	4903      	ldr	r1, [pc, #12]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003250:	e008      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	74bb      	strb	r3, [r7, #18]
 8003256:	e005      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003264:	7c7b      	ldrb	r3, [r7, #17]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326a:	4ba7      	ldr	r3, [pc, #668]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	4aa6      	ldr	r2, [pc, #664]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003282:	4ba1      	ldr	r3, [pc, #644]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003288:	f023 0203 	bic.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	499d      	ldr	r1, [pc, #628]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a4:	4b98      	ldr	r3, [pc, #608]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f023 020c 	bic.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4995      	ldr	r1, [pc, #596]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c6:	4b90      	ldr	r3, [pc, #576]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	498c      	ldr	r1, [pc, #560]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e8:	4b87      	ldr	r3, [pc, #540]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	4984      	ldr	r1, [pc, #528]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	497b      	ldr	r1, [pc, #492]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	4973      	ldr	r1, [pc, #460]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334e:	4b6e      	ldr	r3, [pc, #440]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003354:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	496a      	ldr	r1, [pc, #424]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003370:	4b65      	ldr	r3, [pc, #404]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003376:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4962      	ldr	r1, [pc, #392]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003392:	4b5d      	ldr	r3, [pc, #372]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	4959      	ldr	r1, [pc, #356]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033b4:	4b54      	ldr	r3, [pc, #336]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	4951      	ldr	r1, [pc, #324]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	4948      	ldr	r1, [pc, #288]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f8:	4b43      	ldr	r3, [pc, #268]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	4940      	ldr	r1, [pc, #256]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003416:	d105      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b3b      	ldr	r3, [pc, #236]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a3a      	ldr	r2, [pc, #232]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003430:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343e:	4932      	ldr	r1, [pc, #200]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003450:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003468:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003476:	4924      	ldr	r1, [pc, #144]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003486:	d105      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003488:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003492:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	4916      	ldr	r1, [pc, #88]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034be:	d105      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d019      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	4908      	ldr	r1, [pc, #32]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034f6:	d109      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f8:	4b03      	ldr	r3, [pc, #12]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a02      	ldr	r2, [pc, #8]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003502:	60d3      	str	r3, [r2, #12]
 8003504:	e002      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003518:	4b29      	ldr	r3, [pc, #164]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4926      	ldr	r1, [pc, #152]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003536:	d105      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003538:	4b21      	ldr	r3, [pc, #132]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4a20      	ldr	r2, [pc, #128]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003542:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d015      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355e:	4918      	ldr	r1, [pc, #96]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356e:	d105      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003570:	4b13      	ldr	r3, [pc, #76]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003588:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800358a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800358e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	490a      	ldr	r1, [pc, #40]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a6:	d105      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e09d      	b.n	8003712 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e6:	d009      	beq.n	80035fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
 80035ee:	e005      	b.n	80035fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fb3a 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003632:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800363c:	d902      	bls.n	8003644 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e002      	b.n	800364a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003648:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003652:	d007      	beq.n	8003664 <HAL_SPI_Init+0xa0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800365c:	d002      	beq.n	8003664 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	ea42 0103 	orr.w	r1, r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	f003 0204 	and.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036e0:	ea42 0103 	orr.w	r1, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e049      	b.n	80037c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fd fae9 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 f8a5 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e04c      	b.n	800387a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <HAL_TIM_Base_Start+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d01d      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a22      	ldr	r2, [pc, #136]	@ (800388c <HAL_TIM_Base_Start+0xc4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a21      	ldr	r2, [pc, #132]	@ (8003890 <HAL_TIM_Base_Start+0xc8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1f      	ldr	r2, [pc, #124]	@ (8003894 <HAL_TIM_Base_Start+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1e      	ldr	r2, [pc, #120]	@ (8003898 <HAL_TIM_Base_Start+0xd0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <HAL_TIM_Base_Start+0xd4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start+0x70>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <HAL_TIM_Base_Start+0xd8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d115      	bne.n	8003864 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_TIM_Base_Start+0xdc>)
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d015      	beq.n	8003876 <HAL_TIM_Base_Start+0xae>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d011      	beq.n	8003876 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	e008      	b.n	8003876 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e000      	b.n	8003878 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	40000c00 	.word	0x40000c00
 8003898:	40013400 	.word	0x40013400
 800389c:	40014000 	.word	0x40014000
 80038a0:	40015000 	.word	0x40015000
 80038a4:	00010007 	.word	0x00010007

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a4c      	ldr	r2, [pc, #304]	@ (80039ec <TIM_Base_SetConfig+0x144>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d017      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a49      	ldr	r2, [pc, #292]	@ (80039f0 <TIM_Base_SetConfig+0x148>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a48      	ldr	r2, [pc, #288]	@ (80039f4 <TIM_Base_SetConfig+0x14c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <TIM_Base_SetConfig+0x150>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <TIM_Base_SetConfig+0x154>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a45      	ldr	r2, [pc, #276]	@ (8003a00 <TIM_Base_SetConfig+0x158>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a39      	ldr	r2, [pc, #228]	@ (80039ec <TIM_Base_SetConfig+0x144>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d023      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003910:	d01f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a36      	ldr	r2, [pc, #216]	@ (80039f0 <TIM_Base_SetConfig+0x148>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a35      	ldr	r2, [pc, #212]	@ (80039f4 <TIM_Base_SetConfig+0x14c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a34      	ldr	r2, [pc, #208]	@ (80039f8 <TIM_Base_SetConfig+0x150>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a33      	ldr	r2, [pc, #204]	@ (80039fc <TIM_Base_SetConfig+0x154>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a33      	ldr	r2, [pc, #204]	@ (8003a04 <TIM_Base_SetConfig+0x15c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <TIM_Base_SetConfig+0x160>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <TIM_Base_SetConfig+0x164>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <TIM_Base_SetConfig+0x158>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <TIM_Base_SetConfig+0x144>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1a      	ldr	r2, [pc, #104]	@ (80039fc <TIM_Base_SetConfig+0x154>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <TIM_Base_SetConfig+0x15c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <TIM_Base_SetConfig+0x160>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <TIM_Base_SetConfig+0x164>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <TIM_Base_SetConfig+0x158>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
  }
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40015000 	.word	0x40015000
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800

08003a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e074      	b.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a34      	ldr	r2, [pc, #208]	@ (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a33      	ldr	r2, [pc, #204]	@ (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a21      	ldr	r2, [pc, #132]	@ (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1f      	ldr	r2, [pc, #124]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10c      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40015000 	.word	0x40015000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e042      	b.n	8003bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fd f90d 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	@ 0x24
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fe68 	bl	800485c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb69 	bl	8004264 <UART_SetConfig>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e01b      	b.n	8003bd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fee7 	bl	80049a0 <UART_CheckIdleState>
 8003bd2:	4603      	mov	r3, r0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0ba      	sub	sp, #232	@ 0xe8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11b      	bne.n	8003c50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 82e3 	beq.w	800420c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
      }
      return;
 8003c4e:	e2dd      	b.n	800420c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8123 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003e94 <HAL_UART_IRQHandler+0x2b8>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e98 <HAL_UART_IRQHandler+0x2bc>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8116 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xc8>
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xf8>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d011      	beq.n	8003d04 <HAL_UART_IRQHandler+0x128>
 8003ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d20:	4b5c      	ldr	r3, [pc, #368]	@ (8003e94 <HAL_UART_IRQHandler+0x2b8>)
 8003d22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d36:	f043 0208 	orr.w	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_UART_IRQHandler+0x196>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8249 	beq.w	8004210 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d054      	beq.n	8003e80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fef9 	bl	8004bce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d146      	bne.n	8003e78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1d9      	bne.n	8003dea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e46:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <HAL_UART_IRQHandler+0x2c0>)
 8003e48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd fff1 	bl	8001e38 <HAL_DMA_Abort_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d019      	beq.n	8003e90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6e:	e00f      	b.n	8003e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f9e1 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e76:	e00b      	b.n	8003e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f9dd 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7e:	e007      	b.n	8003e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9d9 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003e8e:	e1bf      	b.n	8004210 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e90:	bf00      	nop
    return;
 8003e92:	e1bd      	b.n	8004210 <HAL_UART_IRQHandler+0x634>
 8003e94:	10000001 	.word	0x10000001
 8003e98:	04000120 	.word	0x04000120
 8003e9c:	08004c9b 	.word	0x08004c9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 8153 	bne.w	8004150 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 814c 	beq.w	8004150 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8145 	beq.w	8004150 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2210      	movs	r2, #16
 8003ecc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b40      	cmp	r3, #64	@ 0x40
 8003eda:	f040 80bb 	bne.w	8004054 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 818f 	beq.w	8004214 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003efc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f080 8187 	bcs.w	8004214 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 8087 	bne.w	8004032 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1da      	bne.n	8003f24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e1      	bne.n	8003f6e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e3      	bne.n	8003faa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004012:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004014:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e4      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402c:	4618      	mov	r0, r3
 800402e:	f7fd feaa 	bl	8001d86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004044:	b29b      	uxth	r3, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	b29b      	uxth	r3, r3
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f8fd 	bl	800424c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004052:	e0df      	b.n	8004214 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004060:	b29b      	uxth	r3, r3
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80d1 	beq.w	8004218 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80cc 	beq.w	8004218 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e4      	bne.n	8004080 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	623b      	str	r3, [r7, #32]
   return(result);
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040de:	633a      	str	r2, [r7, #48]	@ 0x30
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e1      	bne.n	80040b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	60fb      	str	r3, [r7, #12]
   return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0310 	bic.w	r3, r3, #16
 800411a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	617b      	str	r3, [r7, #20]
   return(result);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e4      	bne.n	8004106 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f87f 	bl	800424c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414e:	e063      	b.n	8004218 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <HAL_UART_IRQHandler+0x59e>
 800415c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fdd2 	bl	8004d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004178:	e051      	b.n	800421e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03a      	beq.n	800421c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
    }
    return;
 80041ae:	e035      	b.n	800421c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_UART_IRQHandler+0x5f4>
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fd7c 	bl	8004cc6 <UART_EndTransmit_IT>
    return;
 80041ce:	e026      	b.n	800421e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_UART_IRQHandler+0x614>
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fdab 	bl	8004d44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041ee:	e016      	b.n	800421e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_UART_IRQHandler+0x642>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0c      	bge.n	800421e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fd93 	bl	8004d30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800420a:	e008      	b.n	800421e <HAL_UART_IRQHandler+0x642>
      return;
 800420c:	bf00      	nop
 800420e:	e006      	b.n	800421e <HAL_UART_IRQHandler+0x642>
    return;
 8004210:	bf00      	nop
 8004212:	e004      	b.n	800421e <HAL_UART_IRQHandler+0x642>
      return;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_UART_IRQHandler+0x642>
      return;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_UART_IRQHandler+0x642>
    return;
 800421c:	bf00      	nop
  }
}
 800421e:	37e8      	adds	r7, #232	@ 0xe8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b08c      	sub	sp, #48	@ 0x30
 800426a:	af00      	add	r7, sp, #0
 800426c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	431a      	orrs	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	431a      	orrs	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	4313      	orrs	r3, r2
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4baa      	ldr	r3, [pc, #680]	@ (800453c <UART_SetConfig+0x2d8>)
 8004294:	4013      	ands	r3, r2
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800429c:	430b      	orrs	r3, r1
 800429e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004540 <UART_SetConfig+0x2dc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042cc:	4313      	orrs	r3, r2
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80042da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	f023 010f 	bic.w	r1, r3, #15
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	@ (8004544 <UART_SetConfig+0x2e0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d125      	bne.n	8004354 <UART_SetConfig+0xf0>
 8004308:	4b8f      	ldr	r3, [pc, #572]	@ (8004548 <UART_SetConfig+0x2e4>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d81a      	bhi.n	800434c <UART_SetConfig+0xe8>
 8004316:	a201      	add	r2, pc, #4	@ (adr r2, 800431c <UART_SetConfig+0xb8>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	0800432d 	.word	0x0800432d
 8004320:	0800433d 	.word	0x0800433d
 8004324:	08004335 	.word	0x08004335
 8004328:	08004345 	.word	0x08004345
 800432c:	2301      	movs	r3, #1
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004332:	e116      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433a:	e112      	b.n	8004562 <UART_SetConfig+0x2fe>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004342:	e10e      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434a:	e10a      	b.n	8004562 <UART_SetConfig+0x2fe>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004352:	e106      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7c      	ldr	r2, [pc, #496]	@ (800454c <UART_SetConfig+0x2e8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d138      	bne.n	80043d0 <UART_SetConfig+0x16c>
 800435e:	4b7a      	ldr	r3, [pc, #488]	@ (8004548 <UART_SetConfig+0x2e4>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d82d      	bhi.n	80043c8 <UART_SetConfig+0x164>
 800436c:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0x110>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043c9 	.word	0x080043c9
 800437c:	080043c9 	.word	0x080043c9
 8004380:	080043c9 	.word	0x080043c9
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080043c9 	.word	0x080043c9
 800438c:	080043c9 	.word	0x080043c9
 8004390:	080043c9 	.word	0x080043c9
 8004394:	080043b1 	.word	0x080043b1
 8004398:	080043c9 	.word	0x080043c9
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043c1 	.word	0x080043c1
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ae:	e0d8      	b.n	8004562 <UART_SetConfig+0x2fe>
 80043b0:	2302      	movs	r3, #2
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e0d4      	b.n	8004562 <UART_SetConfig+0x2fe>
 80043b8:	2304      	movs	r3, #4
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e0d0      	b.n	8004562 <UART_SetConfig+0x2fe>
 80043c0:	2308      	movs	r3, #8
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e0cc      	b.n	8004562 <UART_SetConfig+0x2fe>
 80043c8:	2310      	movs	r3, #16
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e0c8      	b.n	8004562 <UART_SetConfig+0x2fe>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004550 <UART_SetConfig+0x2ec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d125      	bne.n	8004426 <UART_SetConfig+0x1c2>
 80043da:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <UART_SetConfig+0x2e4>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043e4:	2b30      	cmp	r3, #48	@ 0x30
 80043e6:	d016      	beq.n	8004416 <UART_SetConfig+0x1b2>
 80043e8:	2b30      	cmp	r3, #48	@ 0x30
 80043ea:	d818      	bhi.n	800441e <UART_SetConfig+0x1ba>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d00a      	beq.n	8004406 <UART_SetConfig+0x1a2>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d814      	bhi.n	800441e <UART_SetConfig+0x1ba>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <UART_SetConfig+0x19a>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d008      	beq.n	800440e <UART_SetConfig+0x1aa>
 80043fc:	e00f      	b.n	800441e <UART_SetConfig+0x1ba>
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004404:	e0ad      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004406:	2302      	movs	r3, #2
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440c:	e0a9      	b.n	8004562 <UART_SetConfig+0x2fe>
 800440e:	2304      	movs	r3, #4
 8004410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004414:	e0a5      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004416:	2308      	movs	r3, #8
 8004418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441c:	e0a1      	b.n	8004562 <UART_SetConfig+0x2fe>
 800441e:	2310      	movs	r3, #16
 8004420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004424:	e09d      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <UART_SetConfig+0x2f0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d125      	bne.n	800447c <UART_SetConfig+0x218>
 8004430:	4b45      	ldr	r3, [pc, #276]	@ (8004548 <UART_SetConfig+0x2e4>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800443a:	2bc0      	cmp	r3, #192	@ 0xc0
 800443c:	d016      	beq.n	800446c <UART_SetConfig+0x208>
 800443e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004440:	d818      	bhi.n	8004474 <UART_SetConfig+0x210>
 8004442:	2b80      	cmp	r3, #128	@ 0x80
 8004444:	d00a      	beq.n	800445c <UART_SetConfig+0x1f8>
 8004446:	2b80      	cmp	r3, #128	@ 0x80
 8004448:	d814      	bhi.n	8004474 <UART_SetConfig+0x210>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <UART_SetConfig+0x1f0>
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d008      	beq.n	8004464 <UART_SetConfig+0x200>
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x210>
 8004454:	2300      	movs	r3, #0
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445a:	e082      	b.n	8004562 <UART_SetConfig+0x2fe>
 800445c:	2302      	movs	r3, #2
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004462:	e07e      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004464:	2304      	movs	r3, #4
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446a:	e07a      	b.n	8004562 <UART_SetConfig+0x2fe>
 800446c:	2308      	movs	r3, #8
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004472:	e076      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004474:	2310      	movs	r3, #16
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e072      	b.n	8004562 <UART_SetConfig+0x2fe>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <UART_SetConfig+0x2f4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d12a      	bne.n	80044dc <UART_SetConfig+0x278>
 8004486:	4b30      	ldr	r3, [pc, #192]	@ (8004548 <UART_SetConfig+0x2e4>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004494:	d01a      	beq.n	80044cc <UART_SetConfig+0x268>
 8004496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449a:	d81b      	bhi.n	80044d4 <UART_SetConfig+0x270>
 800449c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a0:	d00c      	beq.n	80044bc <UART_SetConfig+0x258>
 80044a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a6:	d815      	bhi.n	80044d4 <UART_SetConfig+0x270>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <UART_SetConfig+0x250>
 80044ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b0:	d008      	beq.n	80044c4 <UART_SetConfig+0x260>
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x270>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ba:	e052      	b.n	8004562 <UART_SetConfig+0x2fe>
 80044bc:	2302      	movs	r3, #2
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c2:	e04e      	b.n	8004562 <UART_SetConfig+0x2fe>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ca:	e04a      	b.n	8004562 <UART_SetConfig+0x2fe>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d2:	e046      	b.n	8004562 <UART_SetConfig+0x2fe>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e042      	b.n	8004562 <UART_SetConfig+0x2fe>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <UART_SetConfig+0x2dc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d13a      	bne.n	800455c <UART_SetConfig+0x2f8>
 80044e6:	4b18      	ldr	r3, [pc, #96]	@ (8004548 <UART_SetConfig+0x2e4>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044f4:	d01a      	beq.n	800452c <UART_SetConfig+0x2c8>
 80044f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044fa:	d81b      	bhi.n	8004534 <UART_SetConfig+0x2d0>
 80044fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004500:	d00c      	beq.n	800451c <UART_SetConfig+0x2b8>
 8004502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004506:	d815      	bhi.n	8004534 <UART_SetConfig+0x2d0>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <UART_SetConfig+0x2b0>
 800450c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004510:	d008      	beq.n	8004524 <UART_SetConfig+0x2c0>
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x2d0>
 8004514:	2300      	movs	r3, #0
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451a:	e022      	b.n	8004562 <UART_SetConfig+0x2fe>
 800451c:	2302      	movs	r3, #2
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004522:	e01e      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452a:	e01a      	b.n	8004562 <UART_SetConfig+0x2fe>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004532:	e016      	b.n	8004562 <UART_SetConfig+0x2fe>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453a:	e012      	b.n	8004562 <UART_SetConfig+0x2fe>
 800453c:	cfff69f3 	.word	0xcfff69f3
 8004540:	40008000 	.word	0x40008000
 8004544:	40013800 	.word	0x40013800
 8004548:	40021000 	.word	0x40021000
 800454c:	40004400 	.word	0x40004400
 8004550:	40004800 	.word	0x40004800
 8004554:	40004c00 	.word	0x40004c00
 8004558:	40005000 	.word	0x40005000
 800455c:	2310      	movs	r3, #16
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4aae      	ldr	r2, [pc, #696]	@ (8004820 <UART_SetConfig+0x5bc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	f040 8097 	bne.w	800469c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800456e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004572:	2b08      	cmp	r3, #8
 8004574:	d823      	bhi.n	80045be <UART_SetConfig+0x35a>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <UART_SetConfig+0x318>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045bf 	.word	0x080045bf
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045bf 	.word	0x080045bf
 800458c:	080045af 	.word	0x080045af
 8004590:	080045bf 	.word	0x080045bf
 8004594:	080045bf 	.word	0x080045bf
 8004598:	080045bf 	.word	0x080045bf
 800459c:	080045b7 	.word	0x080045b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe fd50 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80045a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045a6:	e010      	b.n	80045ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004824 <UART_SetConfig+0x5c0>)
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045ac:	e00d      	b.n	80045ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ae:	f7fe fcdb 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80045b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045b4:	e009      	b.n	80045ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045bc:	e005      	b.n	80045ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8130 	beq.w	8004832 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	4a94      	ldr	r2, [pc, #592]	@ (8004828 <UART_SetConfig+0x5c4>)
 80045d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045dc:	461a      	mov	r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d305      	bcc.n	8004602 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004608:	e113      	b.n	8004832 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	2200      	movs	r2, #0
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	60fa      	str	r2, [r7, #12]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	4a84      	ldr	r2, [pc, #528]	@ (8004828 <UART_SetConfig+0x5c4>)
 8004618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461c:	b29b      	uxth	r3, r3
 800461e:	2200      	movs	r2, #0
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004628:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800462c:	f7fb fdf4 	bl	8000218 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	020b      	lsls	r3, r1, #8
 8004642:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004646:	0202      	lsls	r2, r0, #8
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	6849      	ldr	r1, [r1, #4]
 800464c:	0849      	lsrs	r1, r1, #1
 800464e:	2000      	movs	r0, #0
 8004650:	460c      	mov	r4, r1
 8004652:	4605      	mov	r5, r0
 8004654:	eb12 0804 	adds.w	r8, r2, r4
 8004658:	eb43 0905 	adc.w	r9, r3, r5
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	469a      	mov	sl, r3
 8004664:	4693      	mov	fp, r2
 8004666:	4652      	mov	r2, sl
 8004668:	465b      	mov	r3, fp
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fdd3 	bl	8000218 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4613      	mov	r3, r2
 8004678:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004680:	d308      	bcc.n	8004694 <UART_SetConfig+0x430>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004688:	d204      	bcs.n	8004694 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e0ce      	b.n	8004832 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800469a:	e0ca      	b.n	8004832 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a4:	d166      	bne.n	8004774 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d827      	bhi.n	80046fe <UART_SetConfig+0x49a>
 80046ae:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0x450>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fe fcb4 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80046dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046de:	e014      	b.n	800470a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fcc6 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80046e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046e6:	e010      	b.n	800470a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004824 <UART_SetConfig+0x5c0>)
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046ec:	e00d      	b.n	800470a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe fc3b 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80046f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046f4:	e009      	b.n	800470a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046fc:	e005      	b.n	800470a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8090 	beq.w	8004832 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	4a44      	ldr	r2, [pc, #272]	@ (8004828 <UART_SetConfig+0x5c4>)
 8004718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800471c:	461a      	mov	r2, r3
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	fbb3 f3f2 	udiv	r3, r3, r2
 8004724:	005a      	lsls	r2, r3, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	441a      	add	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d916      	bls.n	800476c <UART_SetConfig+0x508>
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d212      	bcs.n	800476c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f023 030f 	bic.w	r3, r3, #15
 800474e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	b29a      	uxth	r2, r3
 800475c:	8bfb      	ldrh	r3, [r7, #30]
 800475e:	4313      	orrs	r3, r2
 8004760:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	8bfa      	ldrh	r2, [r7, #30]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e062      	b.n	8004832 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004772:	e05e      	b.n	8004832 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004774:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004778:	2b08      	cmp	r3, #8
 800477a:	d828      	bhi.n	80047ce <UART_SetConfig+0x56a>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x520>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe fc4c 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ae:	e014      	b.n	80047da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe fc5e 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <UART_SetConfig+0x5c0>)
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe fbd3 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d8:	bf00      	nop
    }

    if (pclk != 0U)
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d028      	beq.n	8004832 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	4a10      	ldr	r2, [pc, #64]	@ (8004828 <UART_SetConfig+0x5c4>)
 80047e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d910      	bls.n	800482c <UART_SetConfig+0x5c8>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d20c      	bcs.n	800482c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	b29a      	uxth	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	e009      	b.n	8004832 <UART_SetConfig+0x5ce>
 800481e:	bf00      	nop
 8004820:	40008000 	.word	0x40008000
 8004824:	00f42400 	.word	0x00f42400
 8004828:	08004fe8 	.word	0x08004fe8
      }
      else
      {
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2201      	movs	r2, #1
 8004836:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2201      	movs	r2, #1
 800483e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800484e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004852:	4618      	mov	r0, r3
 8004854:	3730      	adds	r7, #48	@ 0x30
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800485c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800495a:	d10a      	bne.n	8004972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b098      	sub	sp, #96	@ 0x60
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b0:	f7fc fb62 	bl	8001078 <HAL_GetTick>
 80049b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d12f      	bne.n	8004a24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f88e 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d022      	beq.n	8004a24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e6      	bne.n	80049de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e063      	b.n	8004aec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d149      	bne.n	8004ac6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f857 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d03c      	beq.n	8004ac6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	623b      	str	r3, [r7, #32]
   return(result);
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e6      	bne.n	8004a4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a9e:	61fa      	str	r2, [r7, #28]
 8004aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	69b9      	ldr	r1, [r7, #24]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e012      	b.n	8004aec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3758      	adds	r7, #88	@ 0x58
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	e04f      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d04b      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fc fab3 	bl	8001078 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e04e      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d037      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b80      	cmp	r3, #128	@ 0x80
 8004b3a:	d034      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d031      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d110      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2208      	movs	r2, #8
 8004b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f838 	bl	8004bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2208      	movs	r2, #8
 8004b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e029      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d111      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f81e 	bl	8004bce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e00f      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d0a0      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b095      	sub	sp, #84	@ 0x54
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e3      	bne.n	8004c08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d118      	bne.n	8004c7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6979      	ldr	r1, [r7, #20]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	613b      	str	r3, [r7, #16]
   return(result);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e6      	bne.n	8004c48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c8e:	bf00      	nop
 8004c90:	3754      	adds	r7, #84	@ 0x54
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fabd 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b088      	sub	sp, #32
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6979      	ldr	r1, [r7, #20]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e6      	bne.n	8004cce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fa88 	bl	8004224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d14:	bf00      	nop
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e027      	b.n	8004dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	@ 0x24
 8004d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e02d      	b.n	8004e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	@ 0x24
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f850 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e02d      	b.n	8004eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2224      	movs	r2, #36	@ 0x24
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f812 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ee4:	e031      	b.n	8004f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eea:	2308      	movs	r3, #8
 8004eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	0e5b      	lsrs	r3, r3, #25
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	0f5b      	lsrs	r3, r3, #29
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	7b3a      	ldrb	r2, [r7, #12]
 8004f12:	4911      	ldr	r1, [pc, #68]	@ (8004f58 <UARTEx_SetNbDataToProcess+0x94>)
 8004f14:	5c8a      	ldrb	r2, [r1, r2]
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f1a:	7b3a      	ldrb	r2, [r7, #12]
 8004f1c:	490f      	ldr	r1, [pc, #60]	@ (8004f5c <UARTEx_SetNbDataToProcess+0x98>)
 8004f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	7b7a      	ldrb	r2, [r7, #13]
 8004f30:	4909      	ldr	r1, [pc, #36]	@ (8004f58 <UARTEx_SetNbDataToProcess+0x94>)
 8004f32:	5c8a      	ldrb	r2, [r1, r2]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f38:	7b7a      	ldrb	r2, [r7, #13]
 8004f3a:	4908      	ldr	r1, [pc, #32]	@ (8004f5c <UARTEx_SetNbDataToProcess+0x98>)
 8004f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	08005000 	.word	0x08005000
 8004f5c:	08005008 	.word	0x08005008

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4d0d      	ldr	r5, [pc, #52]	@ (8004fa8 <__libc_init_array+0x38>)
 8004f74:	4c0d      	ldr	r4, [pc, #52]	@ (8004fac <__libc_init_array+0x3c>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	4d0b      	ldr	r5, [pc, #44]	@ (8004fb0 <__libc_init_array+0x40>)
 8004f82:	4c0c      	ldr	r4, [pc, #48]	@ (8004fb4 <__libc_init_array+0x44>)
 8004f84:	f000 f818 	bl	8004fb8 <_init>
 8004f88:	1b64      	subs	r4, r4, r5
 8004f8a:	10a4      	asrs	r4, r4, #2
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08005018 	.word	0x08005018
 8004fac:	08005018 	.word	0x08005018
 8004fb0:	08005018 	.word	0x08005018
 8004fb4:	0800501c 	.word	0x0800501c

08004fb8 <_init>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_fini>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr
