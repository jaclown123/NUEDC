
AFE_AWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e8  080045e8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045ec  080045ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080045fc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080045fc  000061ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd2d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b5  00000000  00000000  00015d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00018120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c7  00000000  00000000  00018dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c90  00000000  00000000  00019797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010450  00000000  00000000  0003e427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b81  00000000  00000000  0004e877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001373f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  0013743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0013a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004580 	.word	0x08004580

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004580 	.word	0x08004580

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if (gain_level<=0 || gain_level>6){
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d02a      	beq.n	800056e <AFE_Gain+0x66>
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d827      	bhi.n	800056e <AFE_Gain+0x66>
    return;
  }
  else {

    uint8_t Gain_Levels[6]={
 800051e:	4a16      	ldr	r2, [pc, #88]	@ (8000578 <AFE_Gain+0x70>)
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3b01      	subs	r3, #1
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <AFE_Gain+0x74>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	4313      	orrs	r3, r2
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <AFE_Gain+0x74>)
 8000544:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <AFE_Gain+0x78>)
 800054e:	f001 fa0d 	bl	800196c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &gain_state, 1, 1000);
 8000552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000556:	2201      	movs	r2, #1
 8000558:	4908      	ldr	r1, [pc, #32]	@ (800057c <AFE_Gain+0x74>)
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <AFE_Gain+0x7c>)
 800055c:	f002 faf9 	bl	8002b52 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <AFE_Gain+0x78>)
 8000568:	f001 fa00 	bl	800196c <HAL_GPIO_WritePin>
 800056c:	e000      	b.n	8000570 <AFE_Gain+0x68>
    return;
 800056e:	bf00      	nop
  }
}
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	08004598 	.word	0x08004598
 800057c:	200001a4 	.word	0x200001a4
 8000580:	48000400 	.word	0x48000400
 8000584:	2000004c 	.word	0x2000004c

08000588 <AFE_Offset>:

/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4096, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level > 4096) {
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000598:	d81e      	bhi.n	80005d8 <AFE_Offset+0x50>
    return ;
  }
  else {
    uint8_t AFE_cmd[2];
    AFE_cmd[0]= DAC_AFE_OFF2*16+offset_level/256;
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3310      	adds	r3, #16
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	733b      	strb	r3, [r7, #12]
    AFE_cmd[1]= offset_level%256;
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <AFE_Offset+0x58>)
 80005b6:	f001 f9d9 	bl	800196c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, AFE_cmd, 2, 1000);
 80005ba:	f107 010c 	add.w	r1, r7, #12
 80005be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c2:	2202      	movs	r2, #2
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <AFE_Offset+0x5c>)
 80005c6:	f002 fac4 	bl	8002b52 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <AFE_Offset+0x58>)
 80005d2:	f001 f9cb 	bl	800196c <HAL_GPIO_WritePin>
 80005d6:	e000      	b.n	80005da <AFE_Offset+0x52>
    return ;
 80005d8:	bf00      	nop
  }
}
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	48000400 	.word	0x48000400
 80005e4:	2000004c 	.word	0x2000004c

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb4f 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f812 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f93a 	bl	800086c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f8:	f000 f90e 	bl	8000818 <MX_DMA_Init>
  MX_CRC_Init();
 80005fc:	f000 f856 	bl	80006ac <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f8be 	bl	8000780 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000604:	f000 f87e 	bl	8000704 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  AFE_Gain(4);
 8000608:	2004      	movs	r0, #4
 800060a:	f7ff ff7d 	bl	8000508 <AFE_Gain>
  AFE_Offset(0);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ffba 	bl	8000588 <AFE_Offset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x2c>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 ff7e 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800063e:	f001 f9ad 	bl	800199c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	2303      	movs	r3, #3
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000654:	2305      	movs	r3, #5
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000658:	233c      	movs	r3, #60	@ 0x3c
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fa49 	bl	8001b04 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000678:	f000 f96e 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fd47 	bl	8002128 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f95a 	bl	8000958 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	@ 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_CRC_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_CRC_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_CRC_Init+0x50>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_CRC_Init+0x50>)
 80006be:	2201      	movs	r2, #1
 80006c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_CRC_Init+0x50>)
 80006c4:	f241 0221 	movw	r2, #4129	@ 0x1021
 80006c8:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_CRC_Init+0x50>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_CRC_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_CRC_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_CRC_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_CRC_Init+0x50>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_CRC_Init+0x50>)
 80006ea:	f000 fc51 	bl	8000f90 <HAL_CRC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f930 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000028 	.word	0x20000028
 8000700:	40023000 	.word	0x40023000

08000704 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_SPI3_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_SPI3_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000710:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_SPI3_Init+0x74>)
 800071e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000722:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000736:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_SPI3_Init+0x74>)
 800073a:	2218      	movs	r2, #24
 800073c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_SPI3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000752:	2207      	movs	r2, #7
 8000754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_SPI3_Init+0x74>)
 800075e:	2208      	movs	r2, #8
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_SPI3_Init+0x74>)
 8000764:	f002 f94a 	bl	80029fc <HAL_SPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f8f3 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000004c 	.word	0x2000004c
 800077c:	40003c00 	.word	0x40003c00

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007ca:	f002 fc9b 	bl	8003104 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f8c0 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007dc:	f003 fdd9 	bl	8004392 <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f8b7 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007ee:	f003 fe0e 	bl	800440e <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f8ae 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_USART2_UART_Init+0x90>)
 80007fe:	f003 fd8f 	bl	8004320 <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f8a6 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000b0 	.word	0x200000b0
 8000814:	40004400 	.word	0x40004400

08000818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_DMA_Init+0x50>)
 8000820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000822:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <MX_DMA_Init+0x50>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6493      	str	r3, [r2, #72]	@ 0x48
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_DMA_Init+0x50>)
 800082c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_DMA_Init+0x50>)
 8000838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <MX_DMA_Init+0x50>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6493      	str	r3, [r2, #72]	@ 0x48
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_DMA_Init+0x50>)
 8000844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2063      	movs	r0, #99	@ 0x63
 8000854:	f000 fb67 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8000858:	2063      	movs	r0, #99	@ 0x63
 800085a:	f000 fb7e 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_GPIO_Init+0xe4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a32      	ldr	r2, [pc, #200]	@ (8000950 <MX_GPIO_Init+0xe4>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <MX_GPIO_Init+0xe4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_GPIO_Init+0xe4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a2c      	ldr	r2, [pc, #176]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a26      	ldr	r2, [pc, #152]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a20      	ldr	r2, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_GPIO_Init+0xe4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_CS_GPIO_Port, DDS_CS_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f001 f83e 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4817      	ldr	r0, [pc, #92]	@ (8000954 <MX_GPIO_Init+0xe8>)
 80008f8:	f001 f838 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <MX_GPIO_Init+0xe8>)
 8000904:	f001 f832 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DDS_CS_Pin */
  GPIO_InitStruct.Pin = DDS_CS_Pin;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DDS_CS_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f000 fea0 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8000928:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0xe8>)
 8000942:	f000 fe91 	bl	8001668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	@ 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	@ 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800099a:	f001 f8a3 	bl	8001ae4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_CRC_MspInit+0x38>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10b      	bne.n	80009d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <HAL_CRC_MspInit+0x3c>)
 80009cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023000 	.word	0x40023000
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <HAL_SPI_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d128      	bne.n	8000a60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a50:	2306      	movs	r3, #6
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_SPI_MspInit+0x84>)
 8000a5c:	f000 fe04 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40003c00 	.word	0x40003c00
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09e      	sub	sp, #120	@ 0x78
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2254      	movs	r2, #84	@ 0x54
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fd47 	bl	8004528 <memset>
  if(huart->Instance==USART2)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a37      	ldr	r2, [pc, #220]	@ (8000b7c <HAL_UART_MspInit+0x108>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d167      	bne.n	8000b74 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fd55 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000abc:	f7ff ff4c 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a28      	ldr	r2, [pc, #160]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <HAL_UART_MspInit+0x10c>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000af0:	2318      	movs	r3, #24
 8000af2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481e      	ldr	r0, [pc, #120]	@ (8000b84 <HAL_UART_MspInit+0x110>)
 8000b0c:	f000 fdac 	bl	8001668 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <HAL_UART_MspInit+0x118>)
 8000b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b18:	221a      	movs	r2, #26
 8000b1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b46:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b48:	f000 fb14 	bl	8001174 <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8000b52:	f7ff ff01 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_UART_MspInit+0x114>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2026      	movs	r0, #38	@ 0x26
 8000b6a:	f000 f9dc 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b6e:	2026      	movs	r0, #38	@ 0x26
 8000b70:	f000 f9f3 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3778      	adds	r7, #120	@ 0x78
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400
 8000b88:	20000144 	.word	0x20000144
 8000b8c:	40020494 	.word	0x40020494

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f8a5 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <USART2_IRQHandler+0x10>)
 8000bf6:	f002 fad5 	bl	80031a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000b0 	.word	0x200000b0

08000c04 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DMA2_Channel8_IRQHandler+0x10>)
 8000c0a:	f000 fc1b 	bl	8001444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000144 	.word	0x20000144

08000c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopForever+0xe>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopForever+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f003 fc65 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fcbb 	bl	80005e8 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   r0, =_estack
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c80:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8000c84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c88:	200001ac 	.word	0x200001ac

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f939 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f80e 	bl	8000cc0 <HAL_InitTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e001      	b.n	8000cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb0:	f7ff fe58 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ccc:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <HAL_InitTick+0x68>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d022      	beq.n	8000d1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_InitTick+0x6c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <HAL_InitTick+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f944 	bl	8000f76 <HAL_SYSTICK_Config>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10f      	bne.n	8000d14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	d809      	bhi.n	8000d0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000d02:	f000 f910 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_InitTick+0x70>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e007      	b.n	8000d1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e004      	b.n	8000d1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e001      	b.n	8000d1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_IncTick+0x1c>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200001a8 	.word	0x200001a8
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200001a8 	.word	0x200001a8

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff40 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff90 	bl	8000e64 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5f 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff33 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa4 	bl	8000ecc <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e054      	b.n	800104c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7f5b      	ldrb	r3, [r3, #29]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d105      	bne.n	8000fb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fcfa 	bl	80009ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <HAL_CRC_Init+0xc4>)
 8000fcc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0218 	bic.w	r2, r2, #24
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	e00c      	b.n	8000ffa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6899      	ldr	r1, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f834 	bl	8001058 <HAL_CRCEx_Polynomial_Set>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e028      	b.n	800104c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 32ff 	mov.w	r2, #4294967295
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	e004      	b.n	8001018 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6912      	ldr	r2, [r2, #16]
 8001016:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	04c11db7 	.word	0x04c11db7

08001058 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001068:	231f      	movs	r3, #31
 800106a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
 800107a:	e063      	b.n	8001144 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800107c:	bf00      	nop
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	613a      	str	r2, [r7, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <HAL_CRCEx_Polynomial_Set+0x44>
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b18      	cmp	r3, #24
 80010a0:	d846      	bhi.n	8001130 <HAL_CRCEx_Polynomial_Set+0xd8>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001131 	.word	0x08001131
 80010b0:	08001131 	.word	0x08001131
 80010b4:	08001131 	.word	0x08001131
 80010b8:	08001131 	.word	0x08001131
 80010bc:	08001131 	.word	0x08001131
 80010c0:	08001131 	.word	0x08001131
 80010c4:	08001131 	.word	0x08001131
 80010c8:	08001125 	.word	0x08001125
 80010cc:	08001131 	.word	0x08001131
 80010d0:	08001131 	.word	0x08001131
 80010d4:	08001131 	.word	0x08001131
 80010d8:	08001131 	.word	0x08001131
 80010dc:	08001131 	.word	0x08001131
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001131 	.word	0x08001131
 80010e8:	08001119 	.word	0x08001119
 80010ec:	08001131 	.word	0x08001131
 80010f0:	08001131 	.word	0x08001131
 80010f4:	08001131 	.word	0x08001131
 80010f8:	08001131 	.word	0x08001131
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001131 	.word	0x08001131
 8001104:	08001131 	.word	0x08001131
 8001108:	0800110d 	.word	0x0800110d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b06      	cmp	r3, #6
 8001110:	d913      	bls.n	800113a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001116:	e010      	b.n	800113a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d90f      	bls.n	800113e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001122:	e00c      	b.n	800113e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d90b      	bls.n	8001142 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800112e:	e008      	b.n	8001142 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	75fb      	strb	r3, [r7, #23]
        break;
 8001134:	e006      	b.n	8001144 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001136:	bf00      	nop
 8001138:	e004      	b.n	8001144 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800113a:	bf00      	nop
 800113c:	e002      	b.n	8001144 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800113e:	bf00      	nop
 8001140:	e000      	b.n	8001144 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001142:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f023 0118 	bic.w	r1, r3, #24
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	430a      	orrs	r2, r1
 8001164:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e08d      	b.n	80012a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <HAL_DMA_Init+0x138>)
 800118e:	429a      	cmp	r2, r3
 8001190:	d80f      	bhi.n	80011b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <HAL_DMA_Init+0x13c>)
 800119a:	4413      	add	r3, r2
 800119c:	4a45      	ldr	r2, [pc, #276]	@ (80012b4 <HAL_DMA_Init+0x140>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	009a      	lsls	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a42      	ldr	r2, [pc, #264]	@ (80012b8 <HAL_DMA_Init+0x144>)
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b0:	e00e      	b.n	80011d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <HAL_DMA_Init+0x148>)
 80011ba:	4413      	add	r3, r2
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <HAL_DMA_Init+0x140>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	009a      	lsls	r2, r3, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a3c      	ldr	r2, [pc, #240]	@ (80012c0 <HAL_DMA_Init+0x14c>)
 80011ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80011e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f9be 	bl	80015a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001230:	d102      	bne.n	8001238 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800124c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <HAL_DMA_Init+0x104>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b04      	cmp	r3, #4
 800125c:	d80c      	bhi.n	8001278 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f9de 	bl	8001620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	e008      	b.n	800128a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020407 	.word	0x40020407
 80012b0:	bffdfff8 	.word	0xbffdfff8
 80012b4:	cccccccd 	.word	0xcccccccd
 80012b8:	40020000 	.word	0x40020000
 80012bc:	bffdfbf8 	.word	0xbffdfbf8
 80012c0:	40020400 	.word	0x40020400

080012c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d005      	beq.n	80012e8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e037      	b.n	8001358 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020e 	bic.w	r2, r2, #14
 80012f6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001306:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001334:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00c      	beq.n	8001358 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800134c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001356:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d00d      	beq.n	80013aa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e047      	b.n	800143a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020e 	bic.w	r2, r2, #14
 80013b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f003 021f 	and.w	r2, r3, #31
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00c      	beq.n	800141a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800140e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001418:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
    }
  }
  return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2204      	movs	r2, #4
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d026      	beq.n	80014be <HAL_DMA_IRQHandler+0x7a>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d021      	beq.n	80014be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0204 	bic.w	r2, r2, #4
 8001496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	2104      	movs	r1, #4
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d071      	beq.n	8001598 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014bc:	e06c      	b.n	8001598 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	2202      	movs	r2, #2
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d02e      	beq.n	8001530 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d029      	beq.n	8001530 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10b      	bne.n	8001502 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 020a 	bic.w	r2, r2, #10
 80014f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f003 021f 	and.w	r2, r3, #31
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	2102      	movs	r1, #2
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d038      	beq.n	8001598 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800152e:	e033      	b.n	8001598 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2208      	movs	r2, #8
 800153a:	409a      	lsls	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d02a      	beq.n	800159a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d025      	beq.n	800159a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020e 	bic.w	r2, r2, #14
 800155c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f003 021f 	and.w	r2, r3, #31
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001598:	bf00      	nop
 800159a:	bf00      	nop
}
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d802      	bhi.n	80015be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e001      	b.n	80015c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80015c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b08      	subs	r3, #8
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	009a      	lsls	r2, r3, #2
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80015ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2201      	movs	r2, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40020407 	.word	0x40020407
 8001610:	40020800 	.word	0x40020800
 8001614:	40020820 	.word	0x40020820
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	40020880 	.word	0x40020880

08001620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001642:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3b01      	subs	r3, #1
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	2201      	movs	r2, #1
 800164e:	409a      	lsls	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	1000823f 	.word	0x1000823f
 8001664:	40020940 	.word	0x40020940

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001676:	e15a      	b.n	800192e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 814c 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d005      	beq.n	80016a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d130      	bne.n	800170a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016de:	2201      	movs	r2, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 0201 	and.w	r2, r3, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b03      	cmp	r3, #3
 8001714:	d017      	beq.n	8001746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d123      	bne.n	800179a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0203 	and.w	r2, r3, #3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a6 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017dc:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e0:	4a5a      	ldr	r2, [pc, #360]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f4:	4a56      	ldr	r2, [pc, #344]	@ (8001950 <HAL_GPIO_Init+0x2e8>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800181e:	d01f      	beq.n	8001860 <HAL_GPIO_Init+0x1f8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4c      	ldr	r2, [pc, #304]	@ (8001954 <HAL_GPIO_Init+0x2ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d019      	beq.n	800185c <HAL_GPIO_Init+0x1f4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4b      	ldr	r2, [pc, #300]	@ (8001958 <HAL_GPIO_Init+0x2f0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1f0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4a      	ldr	r2, [pc, #296]	@ (800195c <HAL_GPIO_Init+0x2f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a49      	ldr	r2, [pc, #292]	@ (8001960 <HAL_GPIO_Init+0x2f8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <HAL_GPIO_Init+0x2fc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e4>
 8001848:	2305      	movs	r3, #5
 800184a:	e00a      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800184c:	2306      	movs	r3, #6
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001850:	2304      	movs	r3, #4
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	@ (8001950 <HAL_GPIO_Init+0x2e8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae9d 	bne.w	8001678 <HAL_GPIO_Init+0x10>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48001000 	.word	0x48001000
 8001964:	48001400 	.word	0x48001400
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001988:	e002      	b.n	8001990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d141      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019aa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d131      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b8:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019be:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019d0:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2232      	movs	r2, #50	@ 0x32
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ee:	e002      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a02:	d102      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f2      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a16:	d158      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e057      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a22:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a2c:	e04d      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a34:	d141      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d131      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2232      	movs	r2, #50	@ 0x32
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7a:	e002      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d102      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f2      	bne.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d112      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e011      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ab8:	e007      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af2:	6093      	str	r3, [r2, #8]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40007000 	.word	0x40007000

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e2fe      	b.n	8002114 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d075      	beq.n	8001c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b97      	ldr	r3, [pc, #604]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b94      	ldr	r3, [pc, #592]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3e>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_OscConfig+0x44>
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b8d      	ldr	r3, [pc, #564]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x108>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e2d9      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x74>
 8001b6a:	4b85      	ldr	r3, [pc, #532]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a84      	ldr	r2, [pc, #528]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7e      	ldr	r2, [pc, #504]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7b      	ldr	r2, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a77      	ldr	r2, [pc, #476]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a74      	ldr	r2, [pc, #464]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f8cc 	bl	8000d58 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f8c8 	bl	8000d58 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e29e      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xc0>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f8b8 	bl	8000d58 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f8b4 	bl	8000d58 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e28a      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	4b60      	ldr	r3, [pc, #384]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0xe8>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d075      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b56      	ldr	r3, [pc, #344]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0x136>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_OscConfig+0x13c>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d11f      	bne.n	8001c80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x154>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e25d      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	4946      	ldr	r1, [pc, #280]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c6c:	4b45      	ldr	r3, [pc, #276]	@ (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f825 	bl	8000cc0 <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d043      	beq.n	8001d04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e249      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f860 	bl	8000d58 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f85c 	bl	8000d58 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e232      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	492d      	ldr	r1, [pc, #180]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
 8001cce:	e01a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f83c 	bl	8000d58 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f838 	bl	8000d58 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e20e      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d041      	beq.n	8001d96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f815 	bl	8000d58 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff f811 	bl	8000d58 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1e7      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ef      	beq.n	8001d32 <HAL_RCC_OscConfig+0x22e>
 8001d52:	e020      	b.n	8001d96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	4a09      	ldr	r2, [pc, #36]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7fe fff8 	bl	8000d58 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6a:	e00d      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fff4 	bl	8000d58 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d906      	bls.n	8001d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1ca      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d88:	4b8c      	ldr	r3, [pc, #560]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ea      	bne.n	8001d6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a6 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da8:	4b84      	ldr	r3, [pc, #528]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2b4>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x2b6>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dca:	4b7c      	ldr	r3, [pc, #496]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dda:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de6:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7fe ffb1 	bl	8000d58 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7fe ffad 	bl	8000d58 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e183      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0x32e>
 8001e20:	4b66      	ldr	r3, [pc, #408]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a65      	ldr	r2, [pc, #404]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e30:	e024      	b.n	8001e7c <HAL_RCC_OscConfig+0x378>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d110      	bne.n	8001e5c <HAL_RCC_OscConfig+0x358>
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e40:	4a5e      	ldr	r2, [pc, #376]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e50:	4a5a      	ldr	r2, [pc, #360]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x378>
 8001e5c:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e62:	4a56      	ldr	r2, [pc, #344]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e6c:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	4a52      	ldr	r2, [pc, #328]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d016      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe ff68 	bl	8000d58 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ff64 	bl	8000d58 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e138      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	4b46      	ldr	r3, [pc, #280]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ed      	beq.n	8001e8c <HAL_RCC_OscConfig+0x388>
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7fe ff51 	bl	8000d58 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe ff4d 	bl	8000d58 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e121      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ed      	bne.n	8001eba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b35      	ldr	r3, [pc, #212]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f04:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff20 	bl	8000d58 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1c:	f7fe ff1c 	bl	8000d58 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0f2      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x418>
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7fe ff03 	bl	8000d58 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f56:	f7fe feff 	bl	8000d58 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0d5      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ef      	bne.n	8001f56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80c9 	beq.w	8002112 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	f000 8083 	beq.w	8002094 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d15e      	bne.n	8002054 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fed9 	bl	8000d58 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	e00c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fed5 	bl	8000d58 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d905      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0ab      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	4b55      	ldr	r3, [pc, #340]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ec      	bne.n	8001faa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	4b52      	ldr	r3, [pc, #328]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCC_OscConfig+0x61c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6a11      	ldr	r1, [r2, #32]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fea:	0212      	lsls	r2, r2, #8
 8001fec:	4311      	orrs	r1, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ff2:	0852      	lsrs	r2, r2, #1
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	0552      	lsls	r2, r2, #21
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	3a01      	subs	r2, #1
 8002002:	0652      	lsls	r2, r2, #25
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800200a:	06d2      	lsls	r2, r2, #27
 800200c:	430a      	orrs	r2, r1
 800200e:	4943      	ldr	r1, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a40      	ldr	r2, [pc, #256]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002020:	4b3e      	ldr	r3, [pc, #248]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a3d      	ldr	r2, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800202a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fe94 	bl	8000d58 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fe90 	bl	8000d58 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e066      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x530>
 8002052:	e05e      	b.n	8002112 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a30      	ldr	r2, [pc, #192]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800205a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fe7a 	bl	8000d58 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe fe76 	bl	8000d58 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04c      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002086:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4924      	ldr	r1, [pc, #144]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_RCC_OscConfig+0x620>)
 800208e:	4013      	ands	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
 8002092:	e03e      	b.n	8002112 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e039      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d12c      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	3b01      	subs	r3, #1
 80020c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d123      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d11b      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d113      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	019f800c 	.word	0x019f800c
 8002124:	feeefffc 	.word	0xfeeefffc

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e11e      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b91      	ldr	r3, [pc, #580]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b8e      	ldr	r3, [pc, #568]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	498c      	ldr	r1, [pc, #560]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b8a      	ldr	r3, [pc, #552]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e106      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d073      	beq.n	8002264 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d129      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002184:	4b81      	ldr	r3, [pc, #516]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0f4      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002194:	f000 f99e 	bl	80024d4 <RCC_GetSysClockFreqFromPLLSource>
 8002198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4a7c      	ldr	r2, [pc, #496]	@ (8002390 <HAL_RCC_ClockConfig+0x268>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d93f      	bls.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021a2:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d033      	beq.n	8002222 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12f      	bne.n	8002222 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021c2:	4b72      	ldr	r3, [pc, #456]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021ca:	4a70      	ldr	r2, [pc, #448]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e024      	b.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e0:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0c6      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0be      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002200:	f000 f8ce 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a61      	ldr	r2, [pc, #388]	@ (8002390 <HAL_RCC_ClockConfig+0x268>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d909      	bls.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800220e:	4b5f      	ldr	r3, [pc, #380]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002216:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4957      	ldr	r1, [pc, #348]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002234:	f7fe fd90 	bl	8000d58 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fd8c 	bl	8000d58 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e095      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b43      	ldr	r3, [pc, #268]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a42      	ldr	r2, [pc, #264]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002286:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002294:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800229c:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b39      	ldr	r3, [pc, #228]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4936      	ldr	r1, [pc, #216]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e008      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b80      	cmp	r3, #128	@ 0x80
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4a32      	ldr	r2, [pc, #200]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d21d      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 020f 	bic.w	r2, r3, #15
 80022e0:	4929      	ldr	r1, [pc, #164]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fd36 	bl	8000d58 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fd32 	bl	8000d58 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e03b      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d1ed      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4917      	ldr	r1, [pc, #92]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490f      	ldr	r1, [pc, #60]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002352:	f000 f825 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490c      	ldr	r1, [pc, #48]	@ (8002394 <HAL_RCC_ClockConfig+0x26c>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_RCC_ClockConfig+0x270>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fca2 	bl	8000cc0 <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	04c4b400 	.word	0x04c4b400
 8002394:	080045a0 	.word	0x080045a0
 8002398:	20000000 	.word	0x20000000
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e047      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e03e      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023ca:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d136      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	68d2      	ldr	r2, [r2, #12]
 8002400:	0a12      	lsrs	r2, r2, #8
 8002402:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
      break;
 800240c:	e00c      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0a12      	lsrs	r2, r2, #8
 800241c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0e5b      	lsrs	r3, r3, #25
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e001      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002448:	693b      	ldr	r3, [r7, #16]
}
 800244a:	4618      	mov	r0, r3
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	00f42400 	.word	0x00f42400
 8002460:	017d7840 	.word	0x017d7840

08002464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002480:	f7ff fff0 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	080045b0 	.word	0x080045b0

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024ac:	f7ff ffda 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4904      	ldr	r1, [pc, #16]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	080045b0 	.word	0x080045b0

080024d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024da:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f8:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002502:	68d2      	ldr	r2, [r2, #12]
 8002504:	0a12      	lsrs	r2, r2, #8
 8002506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
    break;
 8002510:	e00c      	b.n	800252c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0a12      	lsrs	r2, r2, #8
 8002520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
    break;
 800252a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000
 8002558:	017d7840 	.word	0x017d7840
 800255c:	00f42400 	.word	0x00f42400

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002568:	2300      	movs	r3, #0
 800256a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800256c:	2300      	movs	r3, #0
 800256e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8098 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a3f      	ldr	r2, [pc, #252]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a39      	ldr	r2, [pc, #228]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fbcf 	bl	8000d58 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe fbcb 	bl	8000d58 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d902      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	74fb      	strb	r3, [r7, #19]
        break;
 80025d0:	e005      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025d2:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ef      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d159      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01e      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d019      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800260a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800262c:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fb8b 	bl	8000d58 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002644:	e00b      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fb87 	bl	8000d58 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d902      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	74fb      	strb	r3, [r7, #19]
            break;
 800265c:	e006      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ec      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	74bb      	strb	r3, [r7, #18]
 800268e:	e005      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4ba7      	ldr	r3, [pc, #668]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4aa6      	ldr	r2, [pc, #664]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	499d      	ldr	r1, [pc, #628]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026dc:	4b98      	ldr	r3, [pc, #608]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f023 020c 	bic.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4995      	ldr	r1, [pc, #596]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fe:	4b90      	ldr	r3, [pc, #576]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	498c      	ldr	r1, [pc, #560]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002720:	4b87      	ldr	r3, [pc, #540]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4984      	ldr	r1, [pc, #528]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	497b      	ldr	r1, [pc, #492]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002764:	4b76      	ldr	r3, [pc, #472]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4973      	ldr	r1, [pc, #460]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002786:	4b6e      	ldr	r3, [pc, #440]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	496a      	ldr	r1, [pc, #424]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a8:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4962      	ldr	r1, [pc, #392]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	4959      	ldr	r1, [pc, #356]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ec:	4b54      	ldr	r3, [pc, #336]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	4951      	ldr	r1, [pc, #324]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280e:	4b4c      	ldr	r3, [pc, #304]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	4948      	ldr	r1, [pc, #288]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002830:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4940      	ldr	r1, [pc, #256]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800284e:	d105      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a3a      	ldr	r2, [pc, #232]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002868:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	4932      	ldr	r1, [pc, #200]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a2c      	ldr	r2, [pc, #176]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	4924      	ldr	r1, [pc, #144]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	4916      	ldr	r1, [pc, #88]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d019      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4908      	ldr	r1, [pc, #32]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800292e:	d109      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a02      	ldr	r2, [pc, #8]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
 800293c:	e002      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002950:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	4926      	ldr	r1, [pc, #152]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002970:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002996:	4918      	ldr	r1, [pc, #96]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029a8:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	490a      	ldr	r1, [pc, #40]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09d      	b.n	8002b4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a1e:	d009      	beq.n	8002a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
 8002a26:	e005      	b.n	8002a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd ffcc 	bl	80009ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a74:	d902      	bls.n	8002a7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	e002      	b.n	8002a82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a8a:	d007      	beq.n	8002a9c <HAL_SPI_Init+0xa0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ade:	ea42 0103 	orr.w	r1, r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	f003 0204 	and.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b18:	ea42 0103 	orr.w	r1, r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_SPI_Transmit+0x22>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e15f      	b.n	8002e34 <HAL_SPI_Transmit+0x2e2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7c:	f7fe f8ec 	bl	8000d58 <HAL_GetTick>
 8002b80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b96:	e148      	b.n	8002e2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_Transmit+0x52>
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba8:	e13f      	b.n	8002e2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2203      	movs	r2, #3
 8002bae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf4:	d10f      	bne.n	8002c16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b40      	cmp	r3, #64	@ 0x40
 8002c22:	d007      	beq.n	8002c34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c3c:	d94f      	bls.n	8002cde <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_Transmit+0xfa>
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d142      	bne.n	8002cd2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c70:	e02f      	b.n	8002cd2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d112      	bne.n	8002ca6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ca4:	e015      	b.n	8002cd2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca6:	f7fe f857 	bl	8000d58 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d803      	bhi.n	8002cbe <HAL_SPI_Transmit+0x16c>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d102      	bne.n	8002cc4 <HAL_SPI_Transmit+0x172>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002cd0:	e0ab      	b.n	8002e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ca      	bne.n	8002c72 <HAL_SPI_Transmit+0x120>
 8002cdc:	e080      	b.n	8002de0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0x19a>
 8002ce6:	8afb      	ldrh	r3, [r7, #22]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d174      	bne.n	8002dd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d912      	bls.n	8002d1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b02      	subs	r3, #2
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d1a:	e05c      	b.n	8002dd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d42:	e048      	b.n	8002dd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d12b      	bne.n	8002daa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d912      	bls.n	8002d82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	1c9a      	adds	r2, r3, #2
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b02      	subs	r3, #2
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d80:	e029      	b.n	8002dd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002da8:	e015      	b.n	8002dd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002daa:	f7fd ffd5 	bl	8000d58 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d803      	bhi.n	8002dc2 <HAL_SPI_Transmit+0x270>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d102      	bne.n	8002dc8 <HAL_SPI_Transmit+0x276>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002dd4:	e029      	b.n	8002e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1b1      	bne.n	8002d44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	6839      	ldr	r1, [r7, #0]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f947 	bl	8003078 <SPI_EndRxTxTransaction>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e003      	b.n	8002e2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e4c:	f7fd ff84 	bl	8000d58 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e5c:	f7fd ff7c 	bl	8000d58 <HAL_GetTick>
 8002e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	0d1b      	lsrs	r3, r3, #20
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e72:	e054      	b.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d050      	beq.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e7c:	f7fd ff6c 	bl	8000d58 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d902      	bls.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d13d      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eaa:	d111      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb4:	d004      	beq.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ebe:	d107      	bne.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed8:	d10f      	bne.n	8002efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e017      	b.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d19b      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000

08002f4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f5e:	f7fd fefb 	bl	8000d58 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002f6e:	f7fd fef3 	bl	8000d58 <HAL_GetTick>
 8002f72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00da      	lsls	r2, r3, #3
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	0d1b      	lsrs	r3, r3, #20
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f94:	e060      	b.n	8003058 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f9c:	d107      	bne.n	8002fae <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d050      	beq.n	8003058 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fb6:	f7fd fecf 	bl	8000d58 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d902      	bls.n	8002fcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d13d      	bne.n	8003048 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fe4:	d111      	bne.n	800300a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fee:	d004      	beq.n	8002ffa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d107      	bne.n	800300a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003012:	d10f      	bne.n	8003034 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e010      	b.n	800306a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	3b01      	subs	r3, #1
 8003056:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d196      	bne.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3728      	adds	r7, #40	@ 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000

08003078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff ff5b 	bl	8002f4c <SPI_WaitFifoStateUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e027      	b.n	80030fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2180      	movs	r1, #128	@ 0x80
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fec0 	bl	8002e3c <SPI_WaitFlagStateUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e014      	b.n	80030fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff34 	bl	8002f4c <SPI_WaitFifoStateUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e000      	b.n	80030fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e042      	b.n	800319c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd fca3 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	@ 0x24
 8003132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fe68 	bl	8003e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb69 	bl	800382c <UART_SetConfig>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01b      	b.n	800319c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fee7 	bl	8003f68 <UART_CheckIdleState>
 800319a:	4603      	mov	r3, r0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b0ba      	sub	sp, #232	@ 0xe8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80031ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80031d2:	4013      	ands	r3, r2
 80031d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80031d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11b      	bne.n	8003218 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 82e3 	beq.w	80037d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
      }
      return;
 8003216:	e2dd      	b.n	80037d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8123 	beq.w	8003468 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003222:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003226:	4b8d      	ldr	r3, [pc, #564]	@ (800345c <HAL_UART_IRQHandler+0x2b8>)
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800322e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003232:	4b8b      	ldr	r3, [pc, #556]	@ (8003460 <HAL_UART_IRQHandler+0x2bc>)
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8116 	beq.w	8003468 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800323c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d011      	beq.n	800326c <HAL_UART_IRQHandler+0xc8>
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800326c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d011      	beq.n	800329c <HAL_UART_IRQHandler+0xf8>
 8003278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2202      	movs	r2, #2
 800328a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	f043 0204 	orr.w	r2, r3, #4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d011      	beq.n	80032cc <HAL_UART_IRQHandler+0x128>
 80032a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2204      	movs	r2, #4
 80032ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c2:	f043 0202 	orr.w	r2, r3, #2
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80032e8:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <HAL_UART_IRQHandler+0x2b8>)
 80032ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	f043 0208 	orr.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <HAL_UART_IRQHandler+0x196>
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8249 	beq.w	80037d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d013      	beq.n	800337a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800335e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003380:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d005      	beq.n	800339e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003396:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800339a:	2b00      	cmp	r3, #0
 800339c:	d054      	beq.n	8003448 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fef9 	bl	8004196 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d146      	bne.n	8003440 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1d9      	bne.n	80033b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_UART_IRQHandler+0x2c0>)
 8003410:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd ffac 	bl	8001376 <HAL_DMA_Abort_IT>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d019      	beq.n	8003458 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003432:	4610      	mov	r0, r2
 8003434:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003436:	e00f      	b.n	8003458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f9e1 	bl	8003800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343e:	e00b      	b.n	8003458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9dd 	bl	8003800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	e007      	b.n	8003458 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f9d9 	bl	8003800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003456:	e1bf      	b.n	80037d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	bf00      	nop
    return;
 800345a:	e1bd      	b.n	80037d8 <HAL_UART_IRQHandler+0x634>
 800345c:	10000001 	.word	0x10000001
 8003460:	04000120 	.word	0x04000120
 8003464:	08004263 	.word	0x08004263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 8153 	bne.w	8003718 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 814c 	beq.w	8003718 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8145 	beq.w	8003718 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	f040 80bb 	bne.w	800361c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 818f 	beq.w	80037dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f080 8187 	bcs.w	80037dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8087 	bne.w	80035fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003500:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800351a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003522:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800352e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1da      	bne.n	80034ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800355a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800355e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003562:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800356c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e1      	bne.n	8003536 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3308      	adds	r3, #8
 8003578:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003588:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003596:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003598:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800359c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e3      	bne.n	8003572 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c8:	f023 0310 	bic.w	r3, r3, #16
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e4      	bne.n	80035b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fe65 	bl	80012c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800360c:	b29b      	uxth	r3, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8fd 	bl	8003814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800361a:	e0df      	b.n	80037dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003628:	b29b      	uxth	r3, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80d1 	beq.w	80037e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800363e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80cc 	beq.w	80037e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800366a:	647b      	str	r3, [r7, #68]	@ 0x44
 800366c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e4      	bne.n	8003648 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	623b      	str	r3, [r7, #32]
   return(result);
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3308      	adds	r3, #8
 80036a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e1      	bne.n	800367e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60fb      	str	r3, [r7, #12]
   return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	617b      	str	r3, [r7, #20]
   return(result);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e4      	bne.n	80036ce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f87f 	bl	8003814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003716:	e063      	b.n	80037e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <HAL_UART_IRQHandler+0x59e>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fdd2 	bl	80042e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003740:	e051      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800375a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
    }
    return;
 8003776:	e035      	b.n	80037e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_UART_IRQHandler+0x5f4>
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fd7c 	bl	800428e <UART_EndTransmit_IT>
    return;
 8003796:	e026      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_UART_IRQHandler+0x614>
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fdab 	bl	800430c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037b6:	e016      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <HAL_UART_IRQHandler+0x642>
 80037c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da0c      	bge.n	80037e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fd93 	bl	80042f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037d2:	e008      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
      return;
 80037d4:	bf00      	nop
 80037d6:	e006      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
    return;
 80037d8:	bf00      	nop
 80037da:	e004      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
      return;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
      return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_UART_IRQHandler+0x642>
    return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	37e8      	adds	r7, #232	@ 0xe8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003830:	b08c      	sub	sp, #48	@ 0x30
 8003832:	af00      	add	r7, sp, #0
 8003834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	431a      	orrs	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4313      	orrs	r3, r2
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4baa      	ldr	r3, [pc, #680]	@ (8003b04 <UART_SetConfig+0x2d8>)
 800385c:	4013      	ands	r3, r2
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003864:	430b      	orrs	r3, r1
 8003866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a9f      	ldr	r2, [pc, #636]	@ (8003b08 <UART_SetConfig+0x2dc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003894:	4313      	orrs	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	f023 010f 	bic.w	r1, r3, #15
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a90      	ldr	r2, [pc, #576]	@ (8003b0c <UART_SetConfig+0x2e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d125      	bne.n	800391c <UART_SetConfig+0xf0>
 80038d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b10 <UART_SetConfig+0x2e4>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d81a      	bhi.n	8003914 <UART_SetConfig+0xe8>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <UART_SetConfig+0xb8>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003905 	.word	0x08003905
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	e116      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003902:	e112      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003904:	2304      	movs	r3, #4
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390a:	e10e      	b.n	8003b2a <UART_SetConfig+0x2fe>
 800390c:	2308      	movs	r3, #8
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003912:	e10a      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003914:	2310      	movs	r3, #16
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391a:	e106      	b.n	8003b2a <UART_SetConfig+0x2fe>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a7c      	ldr	r2, [pc, #496]	@ (8003b14 <UART_SetConfig+0x2e8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d138      	bne.n	8003998 <UART_SetConfig+0x16c>
 8003926:	4b7a      	ldr	r3, [pc, #488]	@ (8003b10 <UART_SetConfig+0x2e4>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d82d      	bhi.n	8003990 <UART_SetConfig+0x164>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x110>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003971 	.word	0x08003971
 8003940:	08003991 	.word	0x08003991
 8003944:	08003991 	.word	0x08003991
 8003948:	08003991 	.word	0x08003991
 800394c:	08003981 	.word	0x08003981
 8003950:	08003991 	.word	0x08003991
 8003954:	08003991 	.word	0x08003991
 8003958:	08003991 	.word	0x08003991
 800395c:	08003979 	.word	0x08003979
 8003960:	08003991 	.word	0x08003991
 8003964:	08003991 	.word	0x08003991
 8003968:	08003991 	.word	0x08003991
 800396c:	08003989 	.word	0x08003989
 8003970:	2300      	movs	r3, #0
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e0d8      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e0d4      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003986:	e0d0      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e0cc      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e0c8      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5e      	ldr	r2, [pc, #376]	@ (8003b18 <UART_SetConfig+0x2ec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d125      	bne.n	80039ee <UART_SetConfig+0x1c2>
 80039a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b10 <UART_SetConfig+0x2e4>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039ac:	2b30      	cmp	r3, #48	@ 0x30
 80039ae:	d016      	beq.n	80039de <UART_SetConfig+0x1b2>
 80039b0:	2b30      	cmp	r3, #48	@ 0x30
 80039b2:	d818      	bhi.n	80039e6 <UART_SetConfig+0x1ba>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d00a      	beq.n	80039ce <UART_SetConfig+0x1a2>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d814      	bhi.n	80039e6 <UART_SetConfig+0x1ba>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <UART_SetConfig+0x19a>
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d008      	beq.n	80039d6 <UART_SetConfig+0x1aa>
 80039c4:	e00f      	b.n	80039e6 <UART_SetConfig+0x1ba>
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039cc:	e0ad      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80039ce:	2302      	movs	r3, #2
 80039d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d4:	e0a9      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80039d6:	2304      	movs	r3, #4
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039dc:	e0a5      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80039de:	2308      	movs	r3, #8
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e4:	e0a1      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80039e6:	2310      	movs	r3, #16
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ec:	e09d      	b.n	8003b2a <UART_SetConfig+0x2fe>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4a      	ldr	r2, [pc, #296]	@ (8003b1c <UART_SetConfig+0x2f0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d125      	bne.n	8003a44 <UART_SetConfig+0x218>
 80039f8:	4b45      	ldr	r3, [pc, #276]	@ (8003b10 <UART_SetConfig+0x2e4>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d016      	beq.n	8003a34 <UART_SetConfig+0x208>
 8003a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a08:	d818      	bhi.n	8003a3c <UART_SetConfig+0x210>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d00a      	beq.n	8003a24 <UART_SetConfig+0x1f8>
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d814      	bhi.n	8003a3c <UART_SetConfig+0x210>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <UART_SetConfig+0x1f0>
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d008      	beq.n	8003a2c <UART_SetConfig+0x200>
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x210>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a22:	e082      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a2a:	e07e      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a32:	e07a      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3a:	e076      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a42:	e072      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a35      	ldr	r2, [pc, #212]	@ (8003b20 <UART_SetConfig+0x2f4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12a      	bne.n	8003aa4 <UART_SetConfig+0x278>
 8003a4e:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <UART_SetConfig+0x2e4>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a5c:	d01a      	beq.n	8003a94 <UART_SetConfig+0x268>
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a62:	d81b      	bhi.n	8003a9c <UART_SetConfig+0x270>
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a68:	d00c      	beq.n	8003a84 <UART_SetConfig+0x258>
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	d815      	bhi.n	8003a9c <UART_SetConfig+0x270>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0x250>
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a78:	d008      	beq.n	8003a8c <UART_SetConfig+0x260>
 8003a7a:	e00f      	b.n	8003a9c <UART_SetConfig+0x270>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a82:	e052      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8a:	e04e      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a92:	e04a      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9a:	e046      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa2:	e042      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <UART_SetConfig+0x2dc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d13a      	bne.n	8003b24 <UART_SetConfig+0x2f8>
 8003aae:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <UART_SetConfig+0x2e4>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003abc:	d01a      	beq.n	8003af4 <UART_SetConfig+0x2c8>
 8003abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac2:	d81b      	bhi.n	8003afc <UART_SetConfig+0x2d0>
 8003ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac8:	d00c      	beq.n	8003ae4 <UART_SetConfig+0x2b8>
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ace:	d815      	bhi.n	8003afc <UART_SetConfig+0x2d0>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <UART_SetConfig+0x2b0>
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad8:	d008      	beq.n	8003aec <UART_SetConfig+0x2c0>
 8003ada:	e00f      	b.n	8003afc <UART_SetConfig+0x2d0>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e022      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e01e      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e01a      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e016      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e012      	b.n	8003b2a <UART_SetConfig+0x2fe>
 8003b04:	cfff69f3 	.word	0xcfff69f3
 8003b08:	40008000 	.word	0x40008000
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40004400 	.word	0x40004400
 8003b18:	40004800 	.word	0x40004800
 8003b1c:	40004c00 	.word	0x40004c00
 8003b20:	40005000 	.word	0x40005000
 8003b24:	2310      	movs	r3, #16
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4aae      	ldr	r2, [pc, #696]	@ (8003de8 <UART_SetConfig+0x5bc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	f040 8097 	bne.w	8003c64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d823      	bhi.n	8003b86 <UART_SetConfig+0x35a>
 8003b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <UART_SetConfig+0x318>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b77 	.word	0x08003b77
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b87 	.word	0x08003b87
 8003b60:	08003b87 	.word	0x08003b87
 8003b64:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe fc88 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b6e:	e010      	b.n	8003b92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b9e      	ldr	r3, [pc, #632]	@ (8003dec <UART_SetConfig+0x5c0>)
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b74:	e00d      	b.n	8003b92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe fc13 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003b7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b7c:	e009      	b.n	8003b92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b84:	e005      	b.n	8003b92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8130 	beq.w	8003dfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	4a94      	ldr	r2, [pc, #592]	@ (8003df0 <UART_SetConfig+0x5c4>)
 8003ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d305      	bcc.n	8003bca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d903      	bls.n	8003bd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bd0:	e113      	b.n	8003dfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	60fa      	str	r2, [r7, #12]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	4a84      	ldr	r2, [pc, #528]	@ (8003df0 <UART_SetConfig+0x5c4>)
 8003be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2200      	movs	r2, #0
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bf4:	f7fc fb10 	bl	8000218 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	020b      	lsls	r3, r1, #8
 8003c0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c0e:	0202      	lsls	r2, r0, #8
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	6849      	ldr	r1, [r1, #4]
 8003c14:	0849      	lsrs	r1, r1, #1
 8003c16:	2000      	movs	r0, #0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	eb12 0804 	adds.w	r8, r2, r4
 8003c20:	eb43 0905 	adc.w	r9, r3, r5
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	469a      	mov	sl, r3
 8003c2c:	4693      	mov	fp, r2
 8003c2e:	4652      	mov	r2, sl
 8003c30:	465b      	mov	r3, fp
 8003c32:	4640      	mov	r0, r8
 8003c34:	4649      	mov	r1, r9
 8003c36:	f7fc faef 	bl	8000218 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c48:	d308      	bcc.n	8003c5c <UART_SetConfig+0x430>
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c50:	d204      	bcs.n	8003c5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	e0ce      	b.n	8003dfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c62:	e0ca      	b.n	8003dfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6c:	d166      	bne.n	8003d3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d827      	bhi.n	8003cc6 <UART_SetConfig+0x49a>
 8003c76:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <UART_SetConfig+0x450>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cc7 	.word	0x08003cc7
 8003c8c:	08003cb7 	.word	0x08003cb7
 8003c90:	08003cc7 	.word	0x08003cc7
 8003c94:	08003cc7 	.word	0x08003cc7
 8003c98:	08003cc7 	.word	0x08003cc7
 8003c9c:	08003cbf 	.word	0x08003cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca0:	f7fe fbec 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ca6:	e014      	b.n	8003cd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca8:	f7fe fbfe 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cae:	e010      	b.n	8003cd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8003dec <UART_SetConfig+0x5c0>)
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cb4:	e00d      	b.n	8003cd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb6:	f7fe fb73 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003cba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cbc:	e009      	b.n	8003cd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cc4:	e005      	b.n	8003cd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8090 	beq.w	8003dfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	4a44      	ldr	r2, [pc, #272]	@ (8003df0 <UART_SetConfig+0x5c4>)
 8003ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cec:	005a      	lsls	r2, r3, #1
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	441a      	add	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	d916      	bls.n	8003d34 <UART_SetConfig+0x508>
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0c:	d212      	bcs.n	8003d34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f023 030f 	bic.w	r3, r3, #15
 8003d16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	8bfb      	ldrh	r3, [r7, #30]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	8bfa      	ldrh	r2, [r7, #30]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e062      	b.n	8003dfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d3a:	e05e      	b.n	8003dfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d828      	bhi.n	8003d96 <UART_SetConfig+0x56a>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <UART_SetConfig+0x520>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe fb84 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d76:	e014      	b.n	8003da2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe fb96 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7e:	e010      	b.n	8003da2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <UART_SetConfig+0x5c0>)
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe fb0b 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003d8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d8c:	e009      	b.n	8003da2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d94:	e005      	b.n	8003da2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003da0:	bf00      	nop
    }

    if (pclk != 0U)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d028      	beq.n	8003dfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <UART_SetConfig+0x5c4>)
 8003dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	441a      	add	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d910      	bls.n	8003df4 <UART_SetConfig+0x5c8>
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd8:	d20c      	bcs.n	8003df4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	e009      	b.n	8003dfa <UART_SetConfig+0x5ce>
 8003de6:	bf00      	nop
 8003de8:	40008000 	.word	0x40008000
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	080045b8 	.word	0x080045b8
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2200      	movs	r2, #0
 8003e14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3730      	adds	r7, #48	@ 0x30
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f22:	d10a      	bne.n	8003f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b098      	sub	sp, #96	@ 0x60
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f78:	f7fc feee 	bl	8000d58 <HAL_GetTick>
 8003f7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d12f      	bne.n	8003fec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f88e 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d022      	beq.n	8003fec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e063      	b.n	80040b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d149      	bne.n	800408e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004002:	2200      	movs	r2, #0
 8004004:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f857 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03c      	beq.n	800408e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	623b      	str	r3, [r7, #32]
   return(result);
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
 8004034:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60fb      	str	r3, [r7, #12]
   return(result);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	617b      	str	r3, [r7, #20]
   return(result);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e012      	b.n	80040b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3758      	adds	r7, #88	@ 0x58
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040cc:	e04f      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d04b      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fc fe3f 	bl	8000d58 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <UART_WaitOnFlagUntilTimeout+0x30>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e04e      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d037      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b80      	cmp	r3, #128	@ 0x80
 8004102:	d034      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d031      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d110      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f838 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2208      	movs	r2, #8
 800412a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e029      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004148:	d111      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f81e 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e00f      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d0a0      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004196:	b480      	push	{r7}
 8004198:	b095      	sub	sp, #84	@ 0x54
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d118      	bne.n	8004242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	60bb      	str	r3, [r7, #8]
   return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f023 0310 	bic.w	r3, r3, #16
 8004224:	647b      	str	r3, [r7, #68]	@ 0x44
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	613b      	str	r3, [r7, #16]
   return(result);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e6      	bne.n	8004210 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004256:	bf00      	nop
 8004258:	3754      	adds	r7, #84	@ 0x54
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fabd 	bl	8003800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6979      	ldr	r1, [r7, #20]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	613b      	str	r3, [r7, #16]
   return(result);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fa88 	bl	80037ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042dc:	bf00      	nop
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_UARTEx_DisableFifoMode+0x16>
 8004332:	2302      	movs	r3, #2
 8004334:	e027      	b.n	8004386 <HAL_UARTEx_DisableFifoMode+0x66>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2224      	movs	r2, #36	@ 0x24
 8004342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e02d      	b.n	8004406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2224      	movs	r2, #36	@ 0x24
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f850 	bl	800448c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004422:	2302      	movs	r3, #2
 8004424:	e02d      	b.n	8004482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2224      	movs	r2, #36	@ 0x24
 8004432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f812 	bl	800448c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004498:	2b00      	cmp	r3, #0
 800449a:	d108      	bne.n	80044ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044ac:	e031      	b.n	8004512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ae:	2308      	movs	r3, #8
 80044b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044b2:	2308      	movs	r3, #8
 80044b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	0e5b      	lsrs	r3, r3, #25
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	0f5b      	lsrs	r3, r3, #29
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	7b3a      	ldrb	r2, [r7, #12]
 80044da:	4911      	ldr	r1, [pc, #68]	@ (8004520 <UARTEx_SetNbDataToProcess+0x94>)
 80044dc:	5c8a      	ldrb	r2, [r1, r2]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044e2:	7b3a      	ldrb	r2, [r7, #12]
 80044e4:	490f      	ldr	r1, [pc, #60]	@ (8004524 <UARTEx_SetNbDataToProcess+0x98>)
 80044e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	7b7a      	ldrb	r2, [r7, #13]
 80044f8:	4909      	ldr	r1, [pc, #36]	@ (8004520 <UARTEx_SetNbDataToProcess+0x94>)
 80044fa:	5c8a      	ldrb	r2, [r1, r2]
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004500:	7b7a      	ldrb	r2, [r7, #13]
 8004502:	4908      	ldr	r1, [pc, #32]	@ (8004524 <UARTEx_SetNbDataToProcess+0x98>)
 8004504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004506:	fb93 f3f2 	sdiv	r3, r3, r2
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	080045d0 	.word	0x080045d0
 8004524:	080045d8 	.word	0x080045d8

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4d0d      	ldr	r5, [pc, #52]	@ (8004570 <__libc_init_array+0x38>)
 800453c:	4c0d      	ldr	r4, [pc, #52]	@ (8004574 <__libc_init_array+0x3c>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	2600      	movs	r6, #0
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	4d0b      	ldr	r5, [pc, #44]	@ (8004578 <__libc_init_array+0x40>)
 800454a:	4c0c      	ldr	r4, [pc, #48]	@ (800457c <__libc_init_array+0x44>)
 800454c:	f000 f818 	bl	8004580 <_init>
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	2600      	movs	r6, #0
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	080045e8 	.word	0x080045e8
 8004574:	080045e8 	.word	0x080045e8
 8004578:	080045e8 	.word	0x080045e8
 800457c:	080045ec 	.word	0x080045ec

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
