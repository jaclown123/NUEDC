
AFE_AWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e94  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b4  080050b4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080050b4  080050b4  000060b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050bc  080050bc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050c0  080050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  080050d0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080050d0  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164f6  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c60  00000000  00000000  0001d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00020198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b94  00000000  00000000  0002250e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017da4  00000000  00000000  000490a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdc04  00000000  00000000  00060e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ea4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054fc  00000000  00000000  0015ea90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00163f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005054 	.word	0x08005054

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005054 	.word	0x08005054

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <AFE_Offset_LDAC_Init>:
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
/**
 * @brief  AFE Offset DAC init,must run is before set offset of AFE
 */
void AFE_Offset_LDAC_Init(){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  uint8_t cmd[2]={144,0};
 800050e:	2390      	movs	r3, #144	@ 0x90
 8000510:	80bb      	strh	r3, [r7, #4]
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <AFE_Offset_LDAC_Init+0x38>)
 800051a:	f001 fda9 	bl	8002070 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, cmd, 2, 1000);
 800051e:	1d39      	adds	r1, r7, #4
 8000520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000524:	2202      	movs	r2, #2
 8000526:	4807      	ldr	r0, [pc, #28]	@ (8000544 <AFE_Offset_LDAC_Init+0x3c>)
 8000528:	f002 fedb 	bl	80032e2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <AFE_Offset_LDAC_Init+0x38>)
 8000534:	f001 fd9c 	bl	8002070 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	48000400 	.word	0x48000400
 8000544:	200000c0 	.word	0x200000c0

08000548 <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  if (gain_level<=0 || gain_level>6){
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d02a      	beq.n	80005ae <AFE_Gain+0x66>
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b06      	cmp	r3, #6
 800055c:	d827      	bhi.n	80005ae <AFE_Gain+0x66>
    return;
  }
  else {

    uint8_t Gain_Levels[6]={
 800055e:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <AFE_Gain+0x70>)
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000568:	6018      	str	r0, [r3, #0]
 800056a:	3304      	adds	r3, #4
 800056c:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	3b01      	subs	r3, #1
 8000572:	3310      	adds	r3, #16
 8000574:	443b      	add	r3, r7
 8000576:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <AFE_Gain+0x74>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4313      	orrs	r3, r2
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <AFE_Gain+0x74>)
 8000584:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <AFE_Gain+0x78>)
 800058e:	f001 fd6f 	bl	8002070 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &gain_state, 1, 1000);
 8000592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000596:	2201      	movs	r2, #1
 8000598:	4908      	ldr	r1, [pc, #32]	@ (80005bc <AFE_Gain+0x74>)
 800059a:	480a      	ldr	r0, [pc, #40]	@ (80005c4 <AFE_Gain+0x7c>)
 800059c:	f002 fea1 	bl	80032e2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <AFE_Gain+0x78>)
 80005a8:	f001 fd62 	bl	8002070 <HAL_GPIO_WritePin>
 80005ac:	e000      	b.n	80005b0 <AFE_Gain+0x68>
    return;
 80005ae:	bf00      	nop
  }
}
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	0800506c 	.word	0x0800506c
 80005bc:	200002b0 	.word	0x200002b0
 80005c0:	48000400 	.word	0x48000400
 80005c4:	200000c0 	.word	0x200000c0

080005c8 <AFE_Offset>:

/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4095, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level >= 4096) {
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005d8:	d21e      	bcs.n	8000618 <AFE_Offset+0x50>
    return ;
  }
  else {
    uint8_t AFE_cmd[2];
    AFE_cmd[0]= DAC_AFE_OFF2*16+offset_level/256;
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	b29b      	uxth	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	3310      	adds	r3, #16
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	733b      	strb	r3, [r7, #12]
    AFE_cmd[1]= offset_level%256;
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <AFE_Offset+0x58>)
 80005f6:	f001 fd3b 	bl	8002070 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, AFE_cmd, 2, 1000);
 80005fa:	f107 010c 	add.w	r1, r7, #12
 80005fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000602:	2202      	movs	r2, #2
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <AFE_Offset+0x5c>)
 8000606:	f002 fe6c 	bl	80032e2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <AFE_Offset+0x58>)
 8000612:	f001 fd2d 	bl	8002070 <HAL_GPIO_WritePin>
 8000616:	e000      	b.n	800061a <AFE_Offset+0x52>
    return ;
 8000618:	bf00      	nop
  }
}
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48000400 	.word	0x48000400
 8000624:	200000c0 	.word	0x200000c0

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fcd7 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f81a 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 fa02 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f000 f9ca 	bl	80009d0 <MX_DMA_Init>
  MX_CRC_Init();
 800063c:	f000 f86c 	bl	8000718 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f97a 	bl	8000938 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000644:	f000 f8ce 	bl	80007e4 <MX_SPI3_Init>
  MX_DAC1_Init();
 8000648:	f000 f892 	bl	8000770 <MX_DAC1_Init>
  MX_TIM6_Init();
 800064c:	f000 f908 	bl	8000860 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000650:	f000 f93c 	bl	80008cc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  AFE_Offset_LDAC_Init();
 8000654:	f7ff ff58 	bl	8000508 <AFE_Offset_LDAC_Init>
  AFE_Gain(4);
 8000658:	2004      	movs	r0, #4
 800065a:	f7ff ff75 	bl	8000548 <AFE_Gain>
  AFE_Offset(130);
 800065e:	2082      	movs	r0, #130	@ 0x82
 8000660:	f7ff ffb2 	bl	80005c8 <AFE_Offset>
  //AWG_Gain(1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x3c>

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	@ 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fcc0 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f001 fd07 	bl	80020a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000692:	2303      	movs	r3, #3
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2340      	movs	r3, #64	@ 0x40
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	2303      	movs	r3, #3
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 80006ae:	2305      	movs	r3, #5
 80006b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006b2:	233c      	movs	r3, #60	@ 0x3c
 80006b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd9e 	bl	8002208 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fa47 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f89c 	bl	800282c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 fa33 	bl	8000b64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006fe:	2200      	movs	r2, #0
 8000700:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000704:	4803      	ldr	r0, [pc, #12]	@ (8000714 <SystemClock_Config+0xac>)
 8000706:	f002 f9cd 	bl	8002aa4 <HAL_RCC_MCOConfig>
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	00060400 	.word	0x00060400

08000718 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_CRC_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_CRC_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_CRC_Init+0x50>)
 8000724:	2201      	movs	r2, #1
 8000726:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_CRC_Init+0x50>)
 800072a:	2201      	movs	r2, #1
 800072c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_CRC_Init+0x50>)
 8000730:	f241 0221 	movw	r2, #4129	@ 0x1021
 8000734:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_CRC_Init+0x50>)
 8000738:	2208      	movs	r2, #8
 800073a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_CRC_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_CRC_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_CRC_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_CRC_Init+0x50>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_CRC_Init+0x50>)
 8000756:	f000 fdc3 	bl	80012e0 <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa00 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40023000 	.word	0x40023000

08000770 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2230      	movs	r2, #48	@ 0x30
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f004 fc3d 	bl	8004ffc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_DAC1_Init+0x6c>)
 8000784:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <MX_DAC1_Init+0x70>)
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000788:	4814      	ldr	r0, [pc, #80]	@ (80007dc <MX_DAC1_Init+0x6c>)
 800078a:	f000 fe9b 	bl	80014c4 <HAL_DAC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000794:	f000 f9e6 	bl	8000b64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000798:	2302      	movs	r3, #2
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80007a8:	230a      	movs	r3, #10
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_DAC1_Init+0x6c>)
 80007c4:	f000 fea0 	bl	8001508 <HAL_DAC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007ce:	f000 f9c9 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000004c 	.word	0x2000004c
 80007e0:	50000800 	.word	0x50000800

080007e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_SPI3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000802:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000816:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI3_Init+0x74>)
 800081a:	2218      	movs	r2, #24
 800081c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI3_Init+0x74>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000844:	f002 fca2 	bl	800318c <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f989 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c0 	.word	0x200000c0
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000870:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_TIM6_Init+0x64>)
 8000872:	4a15      	ldr	r2, [pc, #84]	@ (80008c8 <MX_TIM6_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <MX_TIM6_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_TIM6_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_TIM6_Init+0x64>)
 8000884:	2295      	movs	r2, #149	@ 0x95
 8000886:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_TIM6_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800088e:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <MX_TIM6_Init+0x64>)
 8000890:	f003 f800 	bl	8003894 <HAL_TIM_Base_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800089a:	f000 f963 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800089e:	2320      	movs	r3, #32
 80008a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <MX_TIM6_Init+0x64>)
 80008ac:	f003 f8fe 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008b6:	f000 f955 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000124 	.word	0x20000124
 80008c8:	40001000 	.word	0x40001000

080008cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <MX_TIM7_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 149;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008f0:	2295      	movs	r2, #149	@ 0x95
 80008f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_TIM7_Init+0x64>)
 80008fc:	f002 ffca 	bl	8003894 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000906:	f000 f92d 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090a:	2320      	movs	r3, #32
 800090c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <MX_TIM7_Init+0x64>)
 8000918:	f003 f8c8 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000922:	f000 f91f 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000170 	.word	0x20000170
 8000934:	40001400 	.word	0x40001400

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <MX_USART2_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000982:	f003 f929 	bl	8003bd8 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f8ea 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 8000994:	f004 fa67 	bl	8004e66 <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f000 f8e1 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 80009a6:	f004 fa9c 	bl	8004ee2 <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f8d8 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_USART2_UART_Init+0x90>)
 80009b6:	f004 fa1d 	bl	8004df4 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f8d0 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001bc 	.word	0x200001bc
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009f2:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_DMA_Init+0x68>)
 8000a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <MX_DMA_Init+0x68>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_DMA_Init+0x68>)
 8000a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2063      	movs	r0, #99	@ 0x63
 8000a24:	f000 fc27 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8000a28:	2063      	movs	r0, #99	@ 0x63
 8000a2a:	f000 fc3e 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b41      	ldr	r3, [pc, #260]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a40      	ldr	r2, [pc, #256]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b38      	ldr	r3, [pc, #224]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b35      	ldr	r3, [pc, #212]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a34      	ldr	r2, [pc, #208]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a28      	ldr	r2, [pc, #160]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <MX_GPIO_Init+0x11c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DDS_CS_GPIO_Port, DDS_CS_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f001 facc 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ade:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000ae0:	f001 fac6 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aea:	481c      	ldr	r0, [pc, #112]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000aec:	f001 fac0 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4814      	ldr	r0, [pc, #80]	@ (8000b60 <MX_GPIO_Init+0x124>)
 8000b0e:	f001 f92d 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DDS_CS_Pin */
  GPIO_InitStruct.Pin = DDS_CS_Pin;
 8000b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DDS_CS_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2e:	f001 f91d 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_GPIO_Init+0x120>)
 8000b4c:	f001 f90e 	bl	8001d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48001800 	.word	0x48001800

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ba6:	f001 fb1f 	bl	80021e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <HAL_CRC_MspInit+0x38>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10b      	bne.n	8000be2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_CRC_MspInit+0x3c>)
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <HAL_CRC_MspInit+0x3c>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_CRC_MspInit+0x3c>)
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40023000 	.word	0x40023000
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc4 <HAL_DAC_MspInit+0xcc>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d14f      	bne.n	8000cba <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c26:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <HAL_DAC_MspInit+0xd0>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f001 f884 	bl	8001d6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c66:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd0 <HAL_DAC_MspInit+0xd8>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c6c:	2206      	movs	r2, #6
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c72:	2210      	movs	r2, #16
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c94:	2220      	movs	r2, #32
 8000c96:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000ca0:	f000 fdea 	bl	8001878 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000caa:	f7ff ff5b 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <HAL_DAC_MspInit+0xd4>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	50000800 	.word	0x50000800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	20000060 	.word	0x20000060
 8000cd0:	40020008 	.word	0x40020008

08000cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_SPI_MspInit+0x7c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d128      	bne.n	8000d48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	4a16      	ldr	r2, [pc, #88]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a10      	ldr	r2, [pc, #64]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_SPI_MspInit+0x84>)
 8000d44:	f001 f812 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	@ 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40003c00 	.word	0x40003c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000800 	.word	0x48000800

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <HAL_TIM_Base_MspInit+0x5c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10c      	bne.n	8000d88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d86:	e010      	b.n	8000daa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x64>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10b      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f003 0320 	and.w	r3, r3, #32
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40001000 	.word	0x40001000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40001400 	.word	0x40001400

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09e      	sub	sp, #120	@ 0x78
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2254      	movs	r2, #84	@ 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f909 	bl	8004ffc <memset>
  if(huart->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a37      	ldr	r2, [pc, #220]	@ (8000ecc <HAL_UART_MspInit+0x108>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d167      	bne.n	8000ec4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 ff75 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e0c:	f7ff feaa 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e14:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	4a28      	ldr	r2, [pc, #160]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <HAL_UART_MspInit+0x10c>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e40:	2318      	movs	r3, #24
 8000e42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e50:	2307      	movs	r3, #7
 8000e52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481e      	ldr	r0, [pc, #120]	@ (8000ed4 <HAL_UART_MspInit+0x110>)
 8000e5c:	f000 ff86 	bl	8001d6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e62:	4a1e      	ldr	r2, [pc, #120]	@ (8000edc <HAL_UART_MspInit+0x118>)
 8000e64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e68:	221a      	movs	r2, #26
 8000e6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e96:	4810      	ldr	r0, [pc, #64]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000e98:	f000 fcee 	bl	8001878 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8000ea2:	f7ff fe5f 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_UART_MspInit+0x114>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2026      	movs	r0, #38	@ 0x26
 8000eba:	f000 f9dc 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ebe:	2026      	movs	r0, #38	@ 0x26
 8000ec0:	f000 f9f3 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3778      	adds	r7, #120	@ 0x78
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400
 8000ed8:	20000250 	.word	0x20000250
 8000edc:	40020494 	.word	0x40020494

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f8a5 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <USART2_IRQHandler+0x10>)
 8000f46:	f002 fe97 	bl	8003c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001bc 	.word	0x200001bc

08000f54 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA2_Channel8_IRQHandler+0x10>)
 8000f5a:	f000 fdf5 	bl	8001b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000250 	.word	0x20000250

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff ffea 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f004 f827 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f7ff fb33 	bl	8000628 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	080050c4 	.word	0x080050c4
  ldr r2, =_sbss
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd8:	200002b8 	.word	0x200002b8

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fdb6 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008
 800107c:	20000000 	.word	0x20000000
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	@ (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200002b4 	.word	0x200002b4
 80010a4:	20000008 	.word	0x20000008

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200002b4 	.word	0x200002b4

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e054      	b.n	800139c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7f5b      	ldrb	r3, [r3, #29]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d105      	bne.n	8001308 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fc58 	bl	8000bb8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	791b      	ldrb	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <HAL_CRC_Init+0xc4>)
 800131c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0218 	bic.w	r2, r2, #24
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	e00c      	b.n	800134a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6899      	ldr	r1, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	461a      	mov	r2, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f834 	bl	80013a8 <HAL_CRCEx_Polynomial_Set>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e028      	b.n	800139c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	795b      	ldrb	r3, [r3, #5]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	e004      	b.n	8001368 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6912      	ldr	r2, [r2, #16]
 8001366:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	04c11db7 	.word	0x04c11db7

080013a8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80013b8:	231f      	movs	r3, #31
 80013ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
 80013ca:	e063      	b.n	8001494 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80013cc:	bf00      	nop
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	613a      	str	r2, [r7, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_CRCEx_Polynomial_Set+0x44>
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b18      	cmp	r3, #24
 80013f0:	d846      	bhi.n	8001480 <HAL_CRCEx_Polynomial_Set+0xd8>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001487 	.word	0x08001487
 80013fc:	08001481 	.word	0x08001481
 8001400:	08001481 	.word	0x08001481
 8001404:	08001481 	.word	0x08001481
 8001408:	08001481 	.word	0x08001481
 800140c:	08001481 	.word	0x08001481
 8001410:	08001481 	.word	0x08001481
 8001414:	08001481 	.word	0x08001481
 8001418:	08001475 	.word	0x08001475
 800141c:	08001481 	.word	0x08001481
 8001420:	08001481 	.word	0x08001481
 8001424:	08001481 	.word	0x08001481
 8001428:	08001481 	.word	0x08001481
 800142c:	08001481 	.word	0x08001481
 8001430:	08001481 	.word	0x08001481
 8001434:	08001481 	.word	0x08001481
 8001438:	08001469 	.word	0x08001469
 800143c:	08001481 	.word	0x08001481
 8001440:	08001481 	.word	0x08001481
 8001444:	08001481 	.word	0x08001481
 8001448:	08001481 	.word	0x08001481
 800144c:	08001481 	.word	0x08001481
 8001450:	08001481 	.word	0x08001481
 8001454:	08001481 	.word	0x08001481
 8001458:	0800145d 	.word	0x0800145d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b06      	cmp	r3, #6
 8001460:	d913      	bls.n	800148a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001466:	e010      	b.n	800148a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d90f      	bls.n	800148e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001472:	e00c      	b.n	800148e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d90b      	bls.n	8001492 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800147e:	e008      	b.n	8001492 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
        break;
 8001484:	e006      	b.n	8001494 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001486:	bf00      	nop
 8001488:	e004      	b.n	8001494 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800148a:	bf00      	nop
 800148c:	e002      	b.n	8001494 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001492:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 0118 	bic.w	r1, r3, #24
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e014      	b.n	8001500 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fb86 	bl	8000bf8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_DAC_ConfigChannel+0x1c>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e19e      	b.n	8001866 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	795b      	ldrb	r3, [r3, #5]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_DAC_ConfigChannel+0x2c>
 8001530:	2302      	movs	r3, #2
 8001532:	e198      	b.n	8001866 <HAL_DAC_ConfigChannel+0x35e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2202      	movs	r2, #2
 800153e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d17a      	bne.n	800163e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001548:	f7ff fdae 	bl	80010a8 <HAL_GetTick>
 800154c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d13d      	bne.n	80015d0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001554:	e018      	b.n	8001588 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001556:	f7ff fda7 	bl	80010a8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d911      	bls.n	8001588 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f043 0208 	orr.w	r2, r3, #8
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2203      	movs	r2, #3
 8001582:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e16e      	b.n	8001866 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1df      	bne.n	8001556 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40
 80015a0:	e020      	b.n	80015e4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015a2:	f7ff fd81 	bl	80010a8 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d90f      	bls.n	80015d0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da0a      	bge.n	80015d0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f043 0208 	orr.w	r2, r3, #8
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2203      	movs	r2, #3
 80015ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e14a      	b.n	8001866 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dbe3      	blt.n	80015a2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	ea02 0103 	and.w	r1, r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	21ff      	movs	r1, #255	@ 0xff
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	ea02 0103 	and.w	r1, r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11d      	bne.n	8001682 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	221f      	movs	r2, #31
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165e:	4013      	ands	r3, r2
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001676:	4313      	orrs	r3, r2
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2207      	movs	r2, #7
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169a:	4013      	ands	r3, r2
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d102      	bne.n	80016ac <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	e00f      	b.n	80016cc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d102      	bne.n	80016ba <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
 80016b8:	e008      	b.n	80016cc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	e001      	b.n	80016cc <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ee:	4013      	ands	r3, r2
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	791b      	ldrb	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <HAL_DAC_ConfigChannel+0x1f8>
 80016fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fe:	e000      	b.n	8001702 <HAL_DAC_ConfigChannel+0x1fa>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171a:	4013      	ands	r3, r2
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	795b      	ldrb	r3, [r3, #5]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_DAC_ConfigChannel+0x224>
 8001726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800172a:	e000      	b.n	800172e <HAL_DAC_ConfigChannel+0x226>
 800172c:	2300      	movs	r3, #0
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d114      	bne.n	800176e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001744:	f001 fa56 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8001748:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4a48      	ldr	r2, [pc, #288]	@ (8001870 <HAL_DAC_ConfigChannel+0x368>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d904      	bls.n	800175c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
 800175a:	e00f      	b.n	800177c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4a45      	ldr	r2, [pc, #276]	@ (8001874 <HAL_DAC_ConfigChannel+0x36c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d90a      	bls.n	800177a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
 800176c:	e006      	b.n	800177c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001774:	4313      	orrs	r3, r2
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e000      	b.n	800177c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800177a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178a:	4313      	orrs	r3, r2
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ce:	4013      	ands	r3, r2
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e6:	4313      	orrs	r3, r2
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	22c0      	movs	r2, #192	@ 0xc0
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	ea02 0103 	and.w	r1, r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001864:	7ffb      	ldrb	r3, [r7, #31]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	09896800 	.word	0x09896800
 8001874:	04c4b400 	.word	0x04c4b400

08001878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e08d      	b.n	80019a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <HAL_DMA_Init+0x138>)
 8001892:	429a      	cmp	r2, r3
 8001894:	d80f      	bhi.n	80018b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b45      	ldr	r3, [pc, #276]	@ (80019b4 <HAL_DMA_Init+0x13c>)
 800189e:	4413      	add	r3, r2
 80018a0:	4a45      	ldr	r2, [pc, #276]	@ (80019b8 <HAL_DMA_Init+0x140>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	009a      	lsls	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a42      	ldr	r2, [pc, #264]	@ (80019bc <HAL_DMA_Init+0x144>)
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018b4:	e00e      	b.n	80018d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b40      	ldr	r3, [pc, #256]	@ (80019c0 <HAL_DMA_Init+0x148>)
 80018be:	4413      	add	r3, r2
 80018c0:	4a3d      	ldr	r2, [pc, #244]	@ (80019b8 <HAL_DMA_Init+0x140>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a3c      	ldr	r2, [pc, #240]	@ (80019c4 <HAL_DMA_Init+0x14c>)
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f9be 	bl	8001ca8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001934:	d102      	bne.n	800193c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001950:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <HAL_DMA_Init+0x104>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d80c      	bhi.n	800197c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f9de 	bl	8001d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	e008      	b.n	800198e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020407 	.word	0x40020407
 80019b4:	bffdfff8 	.word	0xbffdfff8
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	40020000 	.word	0x40020000
 80019c0:	bffdfbf8 	.word	0xbffdfbf8
 80019c4:	40020400 	.word	0x40020400

080019c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d005      	beq.n	80019ec <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2204      	movs	r2, #4
 80019e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e037      	b.n	8001a5c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 020e 	bic.w	r2, r2, #14
 80019fa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a0a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a38:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00c      	beq.n	8001a5c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a50:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a5a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d00d      	beq.n	8001aae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2204      	movs	r2, #4
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e047      	b.n	8001b3e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020e 	bic.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f003 021f 	and.w	r2, r3, #31
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001afa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00c      	beq.n	8001b1e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
    }
  }
  return status;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2204      	movs	r2, #4
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d026      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x7a>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d021      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	2104      	movs	r1, #4
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d071      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bc0:	e06c      	b.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2202      	movs	r2, #2
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d02e      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d029      	beq.n	8001c34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020a 	bic.w	r2, r2, #10
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f003 021f 	and.w	r2, r3, #31
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2102      	movs	r1, #2
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d038      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c32:	e033      	b.n	8001c9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02a      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d025      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 021f 	and.w	r2, r3, #31
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
}
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d802      	bhi.n	8001cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e001      	b.n	8001cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001cc4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3b08      	subs	r3, #8
 8001cd2:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	009a      	lsls	r2, r3, #2
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001cf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40020407 	.word	0x40020407
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020820 	.word	0x40020820
 8001d1c:	cccccccd 	.word	0xcccccccd
 8001d20:	40020880 	.word	0x40020880

08001d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	1000823f 	.word	0x1000823f
 8001d68:	40020940 	.word	0x40020940

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d7a:	e15a      	b.n	8002032 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 814c 	beq.w	800202c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a6 	beq.w	800202c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8002050 <HAL_GPIO_Init+0x2e4>)
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	4a5a      	ldr	r2, [pc, #360]	@ (8002050 <HAL_GPIO_Init+0x2e4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eec:	4b58      	ldr	r3, [pc, #352]	@ (8002050 <HAL_GPIO_Init+0x2e4>)
 8001eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef8:	4a56      	ldr	r2, [pc, #344]	@ (8002054 <HAL_GPIO_Init+0x2e8>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f22:	d01f      	beq.n	8001f64 <HAL_GPIO_Init+0x1f8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a4c      	ldr	r2, [pc, #304]	@ (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d019      	beq.n	8001f60 <HAL_GPIO_Init+0x1f4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800205c <HAL_GPIO_Init+0x2f0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x1f0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	@ (8002060 <HAL_GPIO_Init+0x2f4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1ec>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a49      	ldr	r2, [pc, #292]	@ (8002064 <HAL_GPIO_Init+0x2f8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1e8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a48      	ldr	r2, [pc, #288]	@ (8002068 <HAL_GPIO_Init+0x2fc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1e4>
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	e00a      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f50:	2306      	movs	r3, #6
 8001f52:	e008      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f64:	2300      	movs	r3, #0
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f76:	4937      	ldr	r1, [pc, #220]	@ (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f84:	4b39      	ldr	r3, [pc, #228]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa8:	4a30      	ldr	r2, [pc, #192]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd2:	4a26      	ldr	r2, [pc, #152]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fd8:	4b24      	ldr	r3, [pc, #144]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_GPIO_Init+0x300>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_GPIO_Init+0x300>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	f47f ae9d 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	48000400 	.word	0x48000400
 800205c:	48000800 	.word	0x48000800
 8002060:	48000c00 	.word	0x48000c00
 8002064:	48001000 	.word	0x48001000
 8002068:	48001400 	.word	0x48001400
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800208c:	e002      	b.n	8002094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d141      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ae:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d131      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c2:	4a46      	ldr	r2, [pc, #280]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020cc:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020d4:	4a41      	ldr	r2, [pc, #260]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020dc:	4b40      	ldr	r3, [pc, #256]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2232      	movs	r2, #50	@ 0x32
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	4a3f      	ldr	r2, [pc, #252]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	3301      	adds	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f2:	e002      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fa:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d102      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f2      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d158      	bne.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e057      	b.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002126:	4a2d      	ldr	r2, [pc, #180]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002130:	e04d      	b.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002138:	d141      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800213a:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d131      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214e:	4a23      	ldr	r2, [pc, #140]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002160:	4a1e      	ldr	r2, [pc, #120]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2232      	movs	r2, #50	@ 0x32
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217e:	e002      	b.n	8002186 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3b01      	subs	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002192:	d102      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a6:	d112      	bne.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e011      	b.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021bc:	e007      	b.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40007000 	.word	0x40007000
 80021e0:	20000000 	.word	0x20000000
 80021e4:	431bde83 	.word	0x431bde83

080021e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e2fe      	b.n	8002818 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d075      	beq.n	8002312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b97      	ldr	r3, [pc, #604]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b94      	ldr	r3, [pc, #592]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0x3e>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d002      	beq.n	800224c <HAL_RCC_OscConfig+0x44>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b8d      	ldr	r3, [pc, #564]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05b      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e2d9      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x74>
 800226e:	4b85      	ldr	r3, [pc, #532]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a84      	ldr	r2, [pc, #528]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b7f      	ldr	r3, [pc, #508]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a7e      	ldr	r2, [pc, #504]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b7c      	ldr	r3, [pc, #496]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7b      	ldr	r2, [pc, #492]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a77      	ldr	r2, [pc, #476]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b75      	ldr	r3, [pc, #468]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a74      	ldr	r2, [pc, #464]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fef2 	bl	80010a8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe feee 	bl	80010a8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	@ 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e29e      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022da:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fede 	bl	80010a8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe feda 	bl	80010a8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e28a      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002302:	4b60      	ldr	r3, [pc, #384]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d075      	beq.n	800240a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b59      	ldr	r3, [pc, #356]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	4b56      	ldr	r3, [pc, #344]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x136>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d002      	beq.n	8002344 <HAL_RCC_OscConfig+0x13c>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d11f      	bne.n	8002384 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002344:	4b4f      	ldr	r3, [pc, #316]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_OscConfig+0x154>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e25d      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	4946      	ldr	r1, [pc, #280]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002370:	4b45      	ldr	r3, [pc, #276]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fe4b 	bl	8001010 <HAL_InitTick>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d043      	beq.n	8002408 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e249      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d023      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b3d      	ldr	r3, [pc, #244]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3c      	ldr	r2, [pc, #240]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fe86 	bl	80010a8 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fe82 	bl	80010a8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e232      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b2:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	492d      	ldr	r1, [pc, #180]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e01a      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe62 	bl	80010a8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fe5e 	bl	80010a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e20e      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fa:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e0>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d041      	beq.n	800249a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01c      	beq.n	8002458 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fe3b 	bl	80010a8 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fe37 	bl	80010a8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1e7      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ef      	beq.n	8002436 <HAL_RCC_OscConfig+0x22e>
 8002456:	e020      	b.n	800249a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245e:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe fe1e 	bl	80010a8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246e:	e00d      	b.n	800248c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7fe fe1a 	bl	80010a8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d906      	bls.n	800248c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1ca      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248c:	4b8c      	ldr	r3, [pc, #560]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ea      	bne.n	8002470 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80a6 	beq.w	80025f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ac:	4b84      	ldr	r3, [pc, #528]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x2b4>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x2b6>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c6:	4a7e      	ldr	r2, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ce:	4b7c      	ldr	r3, [pc, #496]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <HAL_RCC_OscConfig+0x4bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ea:	4b76      	ldr	r3, [pc, #472]	@ (80026c4 <HAL_RCC_OscConfig+0x4bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	@ (80026c4 <HAL_RCC_OscConfig+0x4bc>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fdd7 	bl	80010a8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fdd3 	bl	80010a8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e183      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002510:	4b6c      	ldr	r3, [pc, #432]	@ (80026c4 <HAL_RCC_OscConfig+0x4bc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_RCC_OscConfig+0x32e>
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002534:	e024      	b.n	8002580 <HAL_RCC_OscConfig+0x378>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b05      	cmp	r3, #5
 800253c:	d110      	bne.n	8002560 <HAL_RCC_OscConfig+0x358>
 800253e:	4b60      	ldr	r3, [pc, #384]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	4a5e      	ldr	r2, [pc, #376]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800254e:	4b5c      	ldr	r3, [pc, #368]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	4a5a      	ldr	r2, [pc, #360]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x378>
 8002560:	4b57      	ldr	r3, [pc, #348]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a56      	ldr	r2, [pc, #344]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fd8e 	bl	80010a8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fd8a 	bl	80010a8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e138      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b46      	ldr	r3, [pc, #280]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ed      	beq.n	8002590 <HAL_RCC_OscConfig+0x388>
 80025b4:	e015      	b.n	80025e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe fd77 	bl	80010a8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fd73 	bl	80010a8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e121      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ed      	bne.n	80025be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03c      	beq.n	800267a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800260e:	4a2c      	ldr	r2, [pc, #176]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fd46 	bl	80010a8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002620:	f7fe fd42 	bl	80010a8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0f2      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002632:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002634:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCC_OscConfig+0x418>
 8002640:	e01b      	b.n	800267a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002642:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002648:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fd29 	bl	80010a8 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800265a:	f7fe fd25 	bl	80010a8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0d5      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800266c:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ef      	bne.n	800265a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80c9 	beq.w	8002816 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f000 8083 	beq.w	8002798 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d15e      	bne.n	8002758 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a08      	ldr	r2, [pc, #32]	@ (80026c0 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7fe fcff 	bl	80010a8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ac:	e00c      	b.n	80026c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fcfb 	bl	80010a8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d905      	bls.n	80026c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0ab      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ec      	bne.n	80026ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d4:	4b52      	ldr	r3, [pc, #328]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b52      	ldr	r3, [pc, #328]	@ (8002824 <HAL_RCC_OscConfig+0x61c>)
 80026da:	4013      	ands	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6a11      	ldr	r1, [r2, #32]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026ee:	0212      	lsls	r2, r2, #8
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026f6:	0852      	lsrs	r2, r2, #1
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0552      	lsls	r2, r2, #21
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002702:	0852      	lsrs	r2, r2, #1
 8002704:	3a01      	subs	r2, #1
 8002706:	0652      	lsls	r2, r2, #25
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800270e:	06d2      	lsls	r2, r2, #27
 8002710:	430a      	orrs	r2, r1
 8002712:	4943      	ldr	r1, [pc, #268]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b41      	ldr	r3, [pc, #260]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a40      	ldr	r2, [pc, #256]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002724:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a3d      	ldr	r2, [pc, #244]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800272a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fcba 	bl	80010a8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fcb6 	bl	80010a8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e066      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x530>
 8002756:	e05e      	b.n	8002816 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b31      	ldr	r3, [pc, #196]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800275e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fca0 	bl	80010a8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fc9c 	bl	80010a8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04c      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277e:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800278a:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	4924      	ldr	r1, [pc, #144]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCC_OscConfig+0x620>)
 8002792:	4013      	ands	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
 8002796:	e03e      	b.n	8002816 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e039      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <HAL_RCC_OscConfig+0x618>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d12c      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	3b01      	subs	r3, #1
 80027c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d123      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11b      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d113      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	019f800c 	.word	0x019f800c
 8002828:	feeefffc 	.word	0xfeeefffc

0800282c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e11e      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b91      	ldr	r3, [pc, #580]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d910      	bls.n	8002874 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 020f 	bic.w	r2, r3, #15
 800285a:	498c      	ldr	r1, [pc, #560]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b8a      	ldr	r3, [pc, #552]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e106      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d073      	beq.n	8002968 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d129      	bne.n	80028dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	4b81      	ldr	r3, [pc, #516]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0f4      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002898:	f000 f9e4 	bl	8002c64 <RCC_GetSysClockFreqFromPLLSource>
 800289c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002a94 <HAL_RCC_ClockConfig+0x268>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d93f      	bls.n	8002926 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d033      	beq.n	8002926 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d12f      	bne.n	8002926 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c6:	4b72      	ldr	r3, [pc, #456]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ce:	4a70      	ldr	r2, [pc, #448]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e024      	b.n	8002926 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0c6      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f4:	4b66      	ldr	r3, [pc, #408]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0be      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002904:	f000 f914 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4a61      	ldr	r2, [pc, #388]	@ (8002a94 <HAL_RCC_ClockConfig+0x268>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d909      	bls.n	8002926 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002912:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800291a:	4a5d      	ldr	r2, [pc, #372]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002920:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b5a      	ldr	r3, [pc, #360]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4957      	ldr	r1, [pc, #348]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe fbb6 	bl	80010a8 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe fbb2 	bl	80010a8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e095      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002986:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800298a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002998:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80029a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4936      	ldr	r1, [pc, #216]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
 80029ba:	e008      	b.n	80029ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b80      	cmp	r3, #128	@ 0x80
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029c2:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4a32      	ldr	r2, [pc, #200]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d21d      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 020f 	bic.w	r2, r3, #15
 80029e4:	4929      	ldr	r1, [pc, #164]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fb5c 	bl	80010a8 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe fb58 	bl	80010a8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e03b      	b.n	8002a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1ed      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4917      	ldr	r1, [pc, #92]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490f      	ldr	r1, [pc, #60]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a56:	f000 f86b 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490c      	ldr	r1, [pc, #48]	@ (8002a98 <HAL_RCC_ClockConfig+0x26c>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x270>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_RCC_ClockConfig+0x274>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fac8 	bl	8001010 <HAL_InitTick>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	04c4b400 	.word	0x04c4b400
 8002a98:	08005074 	.word	0x08005074
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	20000004 	.word	0x20000004

08002aa4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002ad0:	029b      	lsls	r3, r3, #10
 8002ad2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002ade:	4b13      	ldr	r3, [pc, #76]	@ (8002b2c <HAL_RCC_MCOConfig+0x88>)
 8002ae0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	4910      	ldr	r1, [pc, #64]	@ (8002b2c <HAL_RCC_MCOConfig+0x88>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0d1b      	lsrs	r3, r3, #20
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4619      	mov	r1, r3
 8002b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b06:	f7ff f931 	bl	8001d6c <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_RCC_MCOConfig+0x88>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCC_MCOConfig+0x88>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
  }
}
 8002b24:	bf00      	nop
 8002b26:	3730      	adds	r7, #48	@ 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b36:	4b2c      	ldr	r3, [pc, #176]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b42:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e047      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b48:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e03e      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b5a:	4b23      	ldr	r3, [pc, #140]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d136      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b66:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b84:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8e:	68d2      	ldr	r2, [r2, #12]
 8002b90:	0a12      	lsrs	r2, r2, #8
 8002b92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
      break;
 8002b9c:	e00c      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4a10      	ldr	r2, [pc, #64]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba8:	68d2      	ldr	r2, [r2, #12]
 8002baa:	0a12      	lsrs	r2, r2, #8
 8002bac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
      break;
 8002bb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0e5b      	lsrs	r3, r3, #25
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e001      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd8:	693b      	ldr	r3, [r7, #16]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	017d7840 	.word	0x017d7840

08002bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4904      	ldr	r1, [pc, #16]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08005084 	.word	0x08005084

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c3c:	f7ff ffda 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0adb      	lsrs	r3, r3, #11
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4904      	ldr	r1, [pc, #16]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08005084 	.word	0x08005084

08002c64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d10c      	bne.n	8002ca2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c88:	4a17      	ldr	r2, [pc, #92]	@ (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c92:	68d2      	ldr	r2, [r2, #12]
 8002c94:	0a12      	lsrs	r2, r2, #8
 8002c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
    break;
 8002ca0:	e00c      	b.n	8002cbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	0a12      	lsrs	r2, r2, #8
 8002cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cb4:	fb02 f303 	mul.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]
    break;
 8002cba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0e5b      	lsrs	r3, r3, #25
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cd6:	687b      	ldr	r3, [r7, #4]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	017d7840 	.word	0x017d7840
 8002cec:	00f42400 	.word	0x00f42400

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8098 	beq.w	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b43      	ldr	r3, [pc, #268]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	4a3f      	ldr	r2, [pc, #252]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a39      	ldr	r2, [pc, #228]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f9af 	bl	80010a8 <HAL_GetTick>
 8002d4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe f9ab 	bl	80010a8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d902      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8002d60:	e005      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d62:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ef      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d159      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d74:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01e      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d019      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d90:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d9c:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dac:	4b1c      	ldr	r3, [pc, #112]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dbc:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe f96b 	bl	80010a8 <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd4:	e00b      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f967 	bl	80010a8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d902      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	74fb      	strb	r3, [r7, #19]
            break;
 8002dec:	e006      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dee:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ec      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e10:	4903      	ldr	r1, [pc, #12]	@ (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e18:	e008      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
 8002e1e:	e005      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2c:	7c7b      	ldrb	r3, [r7, #17]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4ba7      	ldr	r3, [pc, #668]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	4aa6      	ldr	r2, [pc, #664]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4a:	4ba1      	ldr	r3, [pc, #644]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f023 0203 	bic.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	499d      	ldr	r1, [pc, #628]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e6c:	4b98      	ldr	r3, [pc, #608]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	f023 020c 	bic.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4995      	ldr	r1, [pc, #596]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e8e:	4b90      	ldr	r3, [pc, #576]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	498c      	ldr	r1, [pc, #560]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb0:	4b87      	ldr	r3, [pc, #540]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4984      	ldr	r1, [pc, #528]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	497b      	ldr	r1, [pc, #492]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef4:	4b76      	ldr	r3, [pc, #472]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4973      	ldr	r1, [pc, #460]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f16:	4b6e      	ldr	r3, [pc, #440]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	496a      	ldr	r1, [pc, #424]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f38:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4962      	ldr	r1, [pc, #392]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	4959      	ldr	r1, [pc, #356]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f7c:	4b54      	ldr	r3, [pc, #336]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	4951      	ldr	r1, [pc, #324]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	4948      	ldr	r1, [pc, #288]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fc0:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	4940      	ldr	r1, [pc, #256]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fde:	d105      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ff8:	4b35      	ldr	r3, [pc, #212]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	4932      	ldr	r1, [pc, #200]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003018:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a2c      	ldr	r2, [pc, #176]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003022:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003030:	4b27      	ldr	r3, [pc, #156]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	4924      	ldr	r1, [pc, #144]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003076:	4916      	ldr	r1, [pc, #88]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d019      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4908      	ldr	r1, [pc, #32]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030be:	d109      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a02      	ldr	r2, [pc, #8]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d015      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030e0:	4b29      	ldr	r3, [pc, #164]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	4926      	ldr	r1, [pc, #152]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030fe:	d105      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003100:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a20      	ldr	r2, [pc, #128]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003118:	4b1b      	ldr	r3, [pc, #108]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003126:	4918      	ldr	r1, [pc, #96]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003136:	d105      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003138:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003142:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003150:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	490a      	ldr	r1, [pc, #40]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800316e:	d105      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800317a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800317c:	7cbb      	ldrb	r3, [r7, #18]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e09d      	b.n	80032da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ae:	d009      	beq.n	80031c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
 80031b6:	e005      	b.n	80031c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fd78 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003204:	d902      	bls.n	800320c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e002      	b.n	8003212 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800320c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003210:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800321a:	d007      	beq.n	800322c <HAL_SPI_Init+0xa0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003224:	d002      	beq.n	800322c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326e:	ea42 0103 	orr.w	r1, r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	f003 0204 	and.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_SPI_Transmit+0x22>
 8003300:	2302      	movs	r3, #2
 8003302:	e15f      	b.n	80035c4 <HAL_SPI_Transmit+0x2e2>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330c:	f7fd fecc 	bl	80010a8 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003326:	e148      	b.n	80035ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Transmit+0x52>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003338:	e13f      	b.n	80035ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003384:	d10f      	bne.n	80033a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d007      	beq.n	80033c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033cc:	d94f      	bls.n	800346e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_Transmit+0xfa>
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d142      	bne.n	8003462 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003400:	e02f      	b.n	8003462 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d112      	bne.n	8003436 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003434:	e015      	b.n	8003462 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003436:	f7fd fe37 	bl	80010a8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_Transmit+0x16c>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d102      	bne.n	8003454 <HAL_SPI_Transmit+0x172>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003460:	e0ab      	b.n	80035ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ca      	bne.n	8003402 <HAL_SPI_Transmit+0x120>
 800346c:	e080      	b.n	8003570 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_SPI_Transmit+0x19a>
 8003476:	8afb      	ldrh	r3, [r7, #22]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d174      	bne.n	8003566 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d912      	bls.n	80034ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b02      	subs	r3, #2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034aa:	e05c      	b.n	8003566 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80034d2:	e048      	b.n	8003566 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d12b      	bne.n	800353a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d912      	bls.n	8003512 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b02      	subs	r3, #2
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003510:	e029      	b.n	8003566 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003538:	e015      	b.n	8003566 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800353a:	f7fd fdb5 	bl	80010a8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d803      	bhi.n	8003552 <HAL_SPI_Transmit+0x270>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d102      	bne.n	8003558 <HAL_SPI_Transmit+0x276>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003564:	e029      	b.n	80035ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1b1      	bne.n	80034d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f947 	bl	8003808 <SPI_EndRxTxTransaction>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e003      	b.n	80035ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035dc:	f7fd fd64 	bl	80010a8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	4413      	add	r3, r2
 80035ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035ec:	f7fd fd5c 	bl	80010a8 <HAL_GetTick>
 80035f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035f2:	4b39      	ldr	r3, [pc, #228]	@ (80036d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	015b      	lsls	r3, r3, #5
 80035f8:	0d1b      	lsrs	r3, r3, #20
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003602:	e054      	b.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d050      	beq.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800360c:	f7fd fd4c 	bl	80010a8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	429a      	cmp	r2, r3
 800361a:	d902      	bls.n	8003622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d13d      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800363a:	d111      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003644:	d004      	beq.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364e:	d107      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003668:	d10f      	bne.n	800368a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e017      	b.n	80036ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d19b      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000

080036dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036ee:	f7fd fcdb 	bl	80010a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036fe:	f7fd fcd3 	bl	80010a8 <HAL_GetTick>
 8003702:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800370c:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00da      	lsls	r2, r3, #3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	0d1b      	lsrs	r3, r3, #20
 800371c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003724:	e060      	b.n	80037e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800372c:	d107      	bne.n	800373e <SPI_WaitFifoStateUntilTimeout+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800373c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d050      	beq.n	80037e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003746:	f7fd fcaf 	bl	80010a8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003752:	429a      	cmp	r2, r3
 8003754:	d902      	bls.n	800375c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d13d      	bne.n	80037d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800376a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003774:	d111      	bne.n	800379a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800377e:	d004      	beq.n	800378a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003788:	d107      	bne.n	800379a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003798:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a2:	d10f      	bne.n	80037c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e010      	b.n	80037fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d196      	bne.n	8003726 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3728      	adds	r7, #40	@ 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff ff5b 	bl	80036dc <SPI_WaitFifoStateUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e027      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fec0 	bl	80035cc <SPI_WaitFlagStateUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e014      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ff34 	bl	80036dc <SPI_WaitFifoStateUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e000      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e049      	b.n	800393a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fa4e 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 f836 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a4c      	ldr	r2, [pc, #304]	@ (8003a88 <TIM_Base_SetConfig+0x144>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d017      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a49      	ldr	r2, [pc, #292]	@ (8003a8c <TIM_Base_SetConfig+0x148>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a48      	ldr	r2, [pc, #288]	@ (8003a90 <TIM_Base_SetConfig+0x14c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a47      	ldr	r2, [pc, #284]	@ (8003a94 <TIM_Base_SetConfig+0x150>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a46      	ldr	r2, [pc, #280]	@ (8003a98 <TIM_Base_SetConfig+0x154>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a45      	ldr	r2, [pc, #276]	@ (8003a9c <TIM_Base_SetConfig+0x158>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a39      	ldr	r2, [pc, #228]	@ (8003a88 <TIM_Base_SetConfig+0x144>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d023      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d01f      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a36      	ldr	r2, [pc, #216]	@ (8003a8c <TIM_Base_SetConfig+0x148>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01b      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a35      	ldr	r2, [pc, #212]	@ (8003a90 <TIM_Base_SetConfig+0x14c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d017      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <TIM_Base_SetConfig+0x150>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a33      	ldr	r2, [pc, #204]	@ (8003a98 <TIM_Base_SetConfig+0x154>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a33      	ldr	r2, [pc, #204]	@ (8003aa0 <TIM_Base_SetConfig+0x15c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <TIM_Base_SetConfig+0x160>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <TIM_Base_SetConfig+0x164>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a9c <TIM_Base_SetConfig+0x158>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <TIM_Base_SetConfig+0x144>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <TIM_Base_SetConfig+0x110>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <TIM_Base_SetConfig+0x154>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00f      	beq.n	8003a54 <TIM_Base_SetConfig+0x110>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <TIM_Base_SetConfig+0x15c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <TIM_Base_SetConfig+0x110>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <TIM_Base_SetConfig+0x160>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_Base_SetConfig+0x110>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <TIM_Base_SetConfig+0x164>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_Base_SetConfig+0x110>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <TIM_Base_SetConfig+0x158>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d103      	bne.n	8003a5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40015000 	.word	0x40015000
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e074      	b.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a34      	ldr	r2, [pc, #208]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a33      	ldr	r2, [pc, #204]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a31      	ldr	r2, [pc, #196]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b44:	d01d      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10c      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40015000 	.word	0x40015000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40014000 	.word	0x40014000

08003bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd f8e1 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	@ 0x24
 8003c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fe68 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb69 	bl	8004300 <UART_SetConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01b      	b.n	8003c70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fee7 	bl	8004a3c <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ca2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11b      	bne.n	8003cec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 82e3 	beq.w	80042a8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
      }
      return;
 8003cea:	e2dd      	b.n	80042a8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8123 	beq.w	8003f3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8003f30 <HAL_UART_IRQHandler+0x2b8>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d06:	4b8b      	ldr	r3, [pc, #556]	@ (8003f34 <HAL_UART_IRQHandler+0x2bc>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8116 	beq.w	8003f3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_UART_IRQHandler+0xc8>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d36:	f043 0201 	orr.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_UART_IRQHandler+0xf8>
 8003d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f043 0204 	orr.w	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_UART_IRQHandler+0x128>
 8003d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f043 0202 	orr.w	r2, r3, #2
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d017      	beq.n	8003ddc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003db8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f30 <HAL_UART_IRQHandler+0x2b8>)
 8003dbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f043 0208 	orr.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <HAL_UART_IRQHandler+0x196>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8249 	beq.w	80042ac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d013      	beq.n	8003e4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d005      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d054      	beq.n	8003f1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fef9 	bl	8004c6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b40      	cmp	r3, #64	@ 0x40
 8003e84:	d146      	bne.n	8003f14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1d9      	bne.n	8003e86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee2:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <HAL_UART_IRQHandler+0x2c0>)
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fdc4 	bl	8001a7a <HAL_DMA_Abort_IT>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003f06:	4610      	mov	r0, r2
 8003f08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0a:	e00f      	b.n	8003f2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9e1 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f12:	e00b      	b.n	8003f2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f9dd 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1a:	e007      	b.n	8003f2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f9d9 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003f2a:	e1bf      	b.n	80042ac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	bf00      	nop
    return;
 8003f2e:	e1bd      	b.n	80042ac <HAL_UART_IRQHandler+0x634>
 8003f30:	10000001 	.word	0x10000001
 8003f34:	04000120 	.word	0x04000120
 8003f38:	08004d37 	.word	0x08004d37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 8153 	bne.w	80041ec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 814c 	beq.w	80041ec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8145 	beq.w	80041ec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2210      	movs	r2, #16
 8003f68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	f040 80bb 	bne.w	80040f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 818f 	beq.w	80042b0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f080 8187 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8087 	bne.w	80040ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1da      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3308      	adds	r3, #8
 8004010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800401a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800402e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004032:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e1      	bne.n	800400a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800405c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800406a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800406c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800409a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e4      	bne.n	800408c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fc7d 	bl	80019c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8fd 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040ee:	e0df      	b.n	80042b0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80d1 	beq.w	80042b4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80cc 	beq.w	80042b4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800412a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800413e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004140:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800414c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	623b      	str	r3, [r7, #32]
   return(result);
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800417a:	633a      	str	r2, [r7, #48]	@ 0x30
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e1      	bne.n	8004152 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	617b      	str	r3, [r7, #20]
   return(result);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e4      	bne.n	80041a2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f87f 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041ea:	e063      	b.n	80042b4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <HAL_UART_IRQHandler+0x59e>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800420c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fdd2 	bl	8004db8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004214:	e051      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d014      	beq.n	800424c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03a      	beq.n	80042b8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
    }
    return;
 800424a:	e035      	b.n	80042b8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_UART_IRQHandler+0x5f4>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fd7c 	bl	8004d62 <UART_EndTransmit_IT>
    return;
 800426a:	e026      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_IRQHandler+0x614>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800427c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fdab 	bl	8004de0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800428a:	e016      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_UART_IRQHandler+0x642>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429c:	2b00      	cmp	r3, #0
 800429e:	da0c      	bge.n	80042ba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fd93 	bl	8004dcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042a6:	e008      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
      return;
 80042a8:	bf00      	nop
 80042aa:	e006      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
    return;
 80042ac:	bf00      	nop
 80042ae:	e004      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
      return;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
      return;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_UART_IRQHandler+0x642>
    return;
 80042b8:	bf00      	nop
  }
}
 80042ba:	37e8      	adds	r7, #232	@ 0xe8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b08c      	sub	sp, #48	@ 0x30
 8004306:	af00      	add	r7, sp, #0
 8004308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	431a      	orrs	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4313      	orrs	r3, r2
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4baa      	ldr	r3, [pc, #680]	@ (80045d8 <UART_SetConfig+0x2d8>)
 8004330:	4013      	ands	r3, r2
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004338:	430b      	orrs	r3, r1
 800433a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a9f      	ldr	r2, [pc, #636]	@ (80045dc <UART_SetConfig+0x2dc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004368:	4313      	orrs	r3, r2
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004376:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004380:	430b      	orrs	r3, r1
 8004382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	f023 010f 	bic.w	r1, r3, #15
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a90      	ldr	r2, [pc, #576]	@ (80045e0 <UART_SetConfig+0x2e0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d125      	bne.n	80043f0 <UART_SetConfig+0xf0>
 80043a4:	4b8f      	ldr	r3, [pc, #572]	@ (80045e4 <UART_SetConfig+0x2e4>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d81a      	bhi.n	80043e8 <UART_SetConfig+0xe8>
 80043b2:	a201      	add	r2, pc, #4	@ (adr r2, 80043b8 <UART_SetConfig+0xb8>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ce:	e116      	b.n	80045fe <UART_SetConfig+0x2fe>
 80043d0:	2302      	movs	r3, #2
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e112      	b.n	80045fe <UART_SetConfig+0x2fe>
 80043d8:	2304      	movs	r3, #4
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e10e      	b.n	80045fe <UART_SetConfig+0x2fe>
 80043e0:	2308      	movs	r3, #8
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e10a      	b.n	80045fe <UART_SetConfig+0x2fe>
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ee:	e106      	b.n	80045fe <UART_SetConfig+0x2fe>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7c      	ldr	r2, [pc, #496]	@ (80045e8 <UART_SetConfig+0x2e8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d138      	bne.n	800446c <UART_SetConfig+0x16c>
 80043fa:	4b7a      	ldr	r3, [pc, #488]	@ (80045e4 <UART_SetConfig+0x2e4>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d82d      	bhi.n	8004464 <UART_SetConfig+0x164>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0x110>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004445 	.word	0x08004445
 8004414:	08004465 	.word	0x08004465
 8004418:	08004465 	.word	0x08004465
 800441c:	08004465 	.word	0x08004465
 8004420:	08004455 	.word	0x08004455
 8004424:	08004465 	.word	0x08004465
 8004428:	08004465 	.word	0x08004465
 800442c:	08004465 	.word	0x08004465
 8004430:	0800444d 	.word	0x0800444d
 8004434:	08004465 	.word	0x08004465
 8004438:	08004465 	.word	0x08004465
 800443c:	08004465 	.word	0x08004465
 8004440:	0800445d 	.word	0x0800445d
 8004444:	2300      	movs	r3, #0
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444a:	e0d8      	b.n	80045fe <UART_SetConfig+0x2fe>
 800444c:	2302      	movs	r3, #2
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004452:	e0d4      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445a:	e0d0      	b.n	80045fe <UART_SetConfig+0x2fe>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004462:	e0cc      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446a:	e0c8      	b.n	80045fe <UART_SetConfig+0x2fe>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5e      	ldr	r2, [pc, #376]	@ (80045ec <UART_SetConfig+0x2ec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d125      	bne.n	80044c2 <UART_SetConfig+0x1c2>
 8004476:	4b5b      	ldr	r3, [pc, #364]	@ (80045e4 <UART_SetConfig+0x2e4>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004480:	2b30      	cmp	r3, #48	@ 0x30
 8004482:	d016      	beq.n	80044b2 <UART_SetConfig+0x1b2>
 8004484:	2b30      	cmp	r3, #48	@ 0x30
 8004486:	d818      	bhi.n	80044ba <UART_SetConfig+0x1ba>
 8004488:	2b20      	cmp	r3, #32
 800448a:	d00a      	beq.n	80044a2 <UART_SetConfig+0x1a2>
 800448c:	2b20      	cmp	r3, #32
 800448e:	d814      	bhi.n	80044ba <UART_SetConfig+0x1ba>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <UART_SetConfig+0x19a>
 8004494:	2b10      	cmp	r3, #16
 8004496:	d008      	beq.n	80044aa <UART_SetConfig+0x1aa>
 8004498:	e00f      	b.n	80044ba <UART_SetConfig+0x1ba>
 800449a:	2300      	movs	r3, #0
 800449c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a0:	e0ad      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044a2:	2302      	movs	r3, #2
 80044a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a8:	e0a9      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044aa:	2304      	movs	r3, #4
 80044ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b0:	e0a5      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044b2:	2308      	movs	r3, #8
 80044b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b8:	e0a1      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044ba:	2310      	movs	r3, #16
 80044bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044c0:	e09d      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4a      	ldr	r2, [pc, #296]	@ (80045f0 <UART_SetConfig+0x2f0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d125      	bne.n	8004518 <UART_SetConfig+0x218>
 80044cc:	4b45      	ldr	r3, [pc, #276]	@ (80045e4 <UART_SetConfig+0x2e4>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d8:	d016      	beq.n	8004508 <UART_SetConfig+0x208>
 80044da:	2bc0      	cmp	r3, #192	@ 0xc0
 80044dc:	d818      	bhi.n	8004510 <UART_SetConfig+0x210>
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d00a      	beq.n	80044f8 <UART_SetConfig+0x1f8>
 80044e2:	2b80      	cmp	r3, #128	@ 0x80
 80044e4:	d814      	bhi.n	8004510 <UART_SetConfig+0x210>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <UART_SetConfig+0x1f0>
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d008      	beq.n	8004500 <UART_SetConfig+0x200>
 80044ee:	e00f      	b.n	8004510 <UART_SetConfig+0x210>
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f6:	e082      	b.n	80045fe <UART_SetConfig+0x2fe>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fe:	e07e      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004506:	e07a      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450e:	e076      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004516:	e072      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a35      	ldr	r2, [pc, #212]	@ (80045f4 <UART_SetConfig+0x2f4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12a      	bne.n	8004578 <UART_SetConfig+0x278>
 8004522:	4b30      	ldr	r3, [pc, #192]	@ (80045e4 <UART_SetConfig+0x2e4>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004530:	d01a      	beq.n	8004568 <UART_SetConfig+0x268>
 8004532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004536:	d81b      	bhi.n	8004570 <UART_SetConfig+0x270>
 8004538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453c:	d00c      	beq.n	8004558 <UART_SetConfig+0x258>
 800453e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004542:	d815      	bhi.n	8004570 <UART_SetConfig+0x270>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <UART_SetConfig+0x250>
 8004548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454c:	d008      	beq.n	8004560 <UART_SetConfig+0x260>
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x270>
 8004550:	2300      	movs	r3, #0
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004556:	e052      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455e:	e04e      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004566:	e04a      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800456e:	e046      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e042      	b.n	80045fe <UART_SetConfig+0x2fe>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <UART_SetConfig+0x2dc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d13a      	bne.n	80045f8 <UART_SetConfig+0x2f8>
 8004582:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <UART_SetConfig+0x2e4>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800458c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004590:	d01a      	beq.n	80045c8 <UART_SetConfig+0x2c8>
 8004592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004596:	d81b      	bhi.n	80045d0 <UART_SetConfig+0x2d0>
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459c:	d00c      	beq.n	80045b8 <UART_SetConfig+0x2b8>
 800459e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a2:	d815      	bhi.n	80045d0 <UART_SetConfig+0x2d0>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <UART_SetConfig+0x2b0>
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ac:	d008      	beq.n	80045c0 <UART_SetConfig+0x2c0>
 80045ae:	e00f      	b.n	80045d0 <UART_SetConfig+0x2d0>
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b6:	e022      	b.n	80045fe <UART_SetConfig+0x2fe>
 80045b8:	2302      	movs	r3, #2
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045be:	e01e      	b.n	80045fe <UART_SetConfig+0x2fe>
 80045c0:	2304      	movs	r3, #4
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	e01a      	b.n	80045fe <UART_SetConfig+0x2fe>
 80045c8:	2308      	movs	r3, #8
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ce:	e016      	b.n	80045fe <UART_SetConfig+0x2fe>
 80045d0:	2310      	movs	r3, #16
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d6:	e012      	b.n	80045fe <UART_SetConfig+0x2fe>
 80045d8:	cfff69f3 	.word	0xcfff69f3
 80045dc:	40008000 	.word	0x40008000
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40004400 	.word	0x40004400
 80045ec:	40004800 	.word	0x40004800
 80045f0:	40004c00 	.word	0x40004c00
 80045f4:	40005000 	.word	0x40005000
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4aae      	ldr	r2, [pc, #696]	@ (80048bc <UART_SetConfig+0x5bc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	f040 8097 	bne.w	8004738 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800460a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800460e:	2b08      	cmp	r3, #8
 8004610:	d823      	bhi.n	800465a <UART_SetConfig+0x35a>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0x318>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800463d 	.word	0x0800463d
 800461c:	0800465b 	.word	0x0800465b
 8004620:	08004645 	.word	0x08004645
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800464b 	.word	0x0800464b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800465b 	.word	0x0800465b
 8004638:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fae6 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b9e      	ldr	r3, [pc, #632]	@ (80048c0 <UART_SetConfig+0x5c0>)
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fa71 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 800464e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8130 	beq.w	80048ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	4a94      	ldr	r2, [pc, #592]	@ (80048c4 <UART_SetConfig+0x5c4>)
 8004674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004678:	461a      	mov	r2, r3
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004680:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d305      	bcc.n	800469e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	429a      	cmp	r2, r3
 800469c:	d903      	bls.n	80046a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046a4:	e113      	b.n	80048ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	60fa      	str	r2, [r7, #12]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	4a84      	ldr	r2, [pc, #528]	@ (80048c4 <UART_SetConfig+0x5c4>)
 80046b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2200      	movs	r2, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c8:	f7fb fda6 	bl	8000218 <__aeabi_uldivmod>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	020b      	lsls	r3, r1, #8
 80046de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e2:	0202      	lsls	r2, r0, #8
 80046e4:	6979      	ldr	r1, [r7, #20]
 80046e6:	6849      	ldr	r1, [r1, #4]
 80046e8:	0849      	lsrs	r1, r1, #1
 80046ea:	2000      	movs	r0, #0
 80046ec:	460c      	mov	r4, r1
 80046ee:	4605      	mov	r5, r0
 80046f0:	eb12 0804 	adds.w	r8, r2, r4
 80046f4:	eb43 0905 	adc.w	r9, r3, r5
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	469a      	mov	sl, r3
 8004700:	4693      	mov	fp, r2
 8004702:	4652      	mov	r2, sl
 8004704:	465b      	mov	r3, fp
 8004706:	4640      	mov	r0, r8
 8004708:	4649      	mov	r1, r9
 800470a:	f7fb fd85 	bl	8000218 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4613      	mov	r3, r2
 8004714:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800471c:	d308      	bcc.n	8004730 <UART_SetConfig+0x430>
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004724:	d204      	bcs.n	8004730 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e0ce      	b.n	80048ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004736:	e0ca      	b.n	80048ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d166      	bne.n	8004810 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004742:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004746:	2b08      	cmp	r3, #8
 8004748:	d827      	bhi.n	800479a <UART_SetConfig+0x49a>
 800474a:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <UART_SetConfig+0x450>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479b 	.word	0x0800479b
 8004760:	0800478b 	.word	0x0800478b
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800479b 	.word	0x0800479b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe fa4a 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8004778:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800477a:	e014      	b.n	80047a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fa5c 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b4e      	ldr	r3, [pc, #312]	@ (80048c0 <UART_SetConfig+0x5c0>)
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fe f9d1 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 800478e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8090 	beq.w	80048ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	4a44      	ldr	r2, [pc, #272]	@ (80048c4 <UART_SetConfig+0x5c4>)
 80047b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c0:	005a      	lsls	r2, r3, #1
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	441a      	add	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	d916      	bls.n	8004808 <UART_SetConfig+0x508>
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d212      	bcs.n	8004808 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f023 030f 	bic.w	r3, r3, #15
 80047ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	8bfa      	ldrh	r2, [r7, #30]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	e062      	b.n	80048ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800480e:	e05e      	b.n	80048ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004810:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004814:	2b08      	cmp	r3, #8
 8004816:	d828      	bhi.n	800486a <UART_SetConfig+0x56a>
 8004818:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <UART_SetConfig+0x520>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	0800486b 	.word	0x0800486b
 8004830:	0800485b 	.word	0x0800485b
 8004834:	0800486b 	.word	0x0800486b
 8004838:	0800486b 	.word	0x0800486b
 800483c:	0800486b 	.word	0x0800486b
 8004840:	08004863 	.word	0x08004863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe f9e2 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800484a:	e014      	b.n	8004876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800484c:	f7fe f9f4 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8004850:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004852:	e010      	b.n	8004876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004854:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <UART_SetConfig+0x5c0>)
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485a:	f7fe f969 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 800485e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004860:	e009      	b.n	8004876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004868:	e005      	b.n	8004876 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004874:	bf00      	nop
    }

    if (pclk != 0U)
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d028      	beq.n	80048ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	4a10      	ldr	r2, [pc, #64]	@ (80048c4 <UART_SetConfig+0x5c4>)
 8004882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004886:	461a      	mov	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	fbb3 f2f2 	udiv	r2, r3, r2
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	441a      	add	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d910      	bls.n	80048c8 <UART_SetConfig+0x5c8>
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d20c      	bcs.n	80048c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	e009      	b.n	80048ce <UART_SetConfig+0x5ce>
 80048ba:	bf00      	nop
 80048bc:	40008000 	.word	0x40008000
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	0800508c 	.word	0x0800508c
      }
      else
      {
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2201      	movs	r2, #1
 80048da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3730      	adds	r7, #48	@ 0x30
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	@ 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fb2c 	bl	80010a8 <HAL_GetTick>
 8004a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d12f      	bne.n	8004ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88e 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d022      	beq.n	8004ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e063      	b.n	8004b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d149      	bne.n	8004b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f857 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d03c      	beq.n	8004b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	617b      	str	r3, [r7, #20]
   return(result);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e012      	b.n	8004b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3758      	adds	r7, #88	@ 0x58
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	e04f      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d04b      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fc fa7d 	bl	80010a8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e04e      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d037      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b80      	cmp	r3, #128	@ 0x80
 8004bd6:	d034      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b40      	cmp	r3, #64	@ 0x40
 8004bdc:	d031      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d110      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f838 	bl	8004c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e029      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1c:	d111      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f81e 	bl	8004c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e00f      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0a0      	beq.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b095      	sub	sp, #84	@ 0x54
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d118      	bne.n	8004d16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e6      	bne.n	8004ce4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d2a:	bf00      	nop
 8004d2c:	3754      	adds	r7, #84	@ 0x54
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fabd 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b088      	sub	sp, #32
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6979      	ldr	r1, [r7, #20]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	613b      	str	r3, [r7, #16]
   return(result);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fa88 	bl	80042c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e027      	b.n	8004e5a <HAL_UARTEx_DisableFifoMode+0x66>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2224      	movs	r2, #36	@ 0x24
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e02d      	b.n	8004eda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	@ 0x24
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f850 	bl	8004f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e02d      	b.n	8004f56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2224      	movs	r2, #36	@ 0x24
 8004f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f812 	bl	8004f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d108      	bne.n	8004f82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f80:	e031      	b.n	8004fe6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f82:	2308      	movs	r3, #8
 8004f84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f86:	2308      	movs	r3, #8
 8004f88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	0e5b      	lsrs	r3, r3, #25
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	0f5b      	lsrs	r3, r3, #29
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	7b3a      	ldrb	r2, [r7, #12]
 8004fae:	4911      	ldr	r1, [pc, #68]	@ (8004ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fb0:	5c8a      	ldrb	r2, [r1, r2]
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fb6:	7b3a      	ldrb	r2, [r7, #12]
 8004fb8:	490f      	ldr	r1, [pc, #60]	@ (8004ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	7b7a      	ldrb	r2, [r7, #13]
 8004fcc:	4909      	ldr	r1, [pc, #36]	@ (8004ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fce:	5c8a      	ldrb	r2, [r1, r2]
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fd4:	7b7a      	ldrb	r2, [r7, #13]
 8004fd6:	4908      	ldr	r1, [pc, #32]	@ (8004ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	080050a4 	.word	0x080050a4
 8004ff8:	080050ac 	.word	0x080050ac

08004ffc <memset>:
 8004ffc:	4402      	add	r2, r0
 8004ffe:	4603      	mov	r3, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4d0d      	ldr	r5, [pc, #52]	@ (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	@ (8005048 <__libc_init_array+0x3c>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2600      	movs	r6, #0
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4d0b      	ldr	r5, [pc, #44]	@ (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	@ (8005050 <__libc_init_array+0x44>)
 8005020:	f000 f818 	bl	8005054 <_init>
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2600      	movs	r6, #0
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	080050bc 	.word	0x080050bc
 8005048:	080050bc 	.word	0x080050bc
 800504c:	080050bc 	.word	0x080050bc
 8005050:	080050c0 	.word	0x080050c0

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
