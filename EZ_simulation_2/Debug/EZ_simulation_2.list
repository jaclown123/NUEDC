
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bdc  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f37c  0800f37c  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800f37c  0800f37c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f384  0800f384  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800f384  0800f384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800f390  0800f390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800f398  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002060  20000068  0800f400  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020c8  0800f400  000110c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   002ad618  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007185  00000000  00000000  002be6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000b650  00000000  00000000  002c5838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000898e  00000000  00000000  002d0e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003394a  00000000  00000000  002d9816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000563db  00000000  00000000  0030d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00a8beb4  00000000  00000000  0036353b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00def3ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00036b5c  00000000  00000000  00def4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00e26004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  00e2606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00e29a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c788 	.word	0x0800c788

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800c788 	.word	0x0800c788

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_ldivmod>:
 8000ae4:	b97b      	cbnz	r3, 8000b06 <__aeabi_ldivmod+0x22>
 8000ae6:	b972      	cbnz	r2, 8000b06 <__aeabi_ldivmod+0x22>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bfbe      	ittt	lt
 8000aec:	2000      	movlt	r0, #0
 8000aee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000af2:	e006      	blt.n	8000b02 <__aeabi_ldivmod+0x1e>
 8000af4:	bf08      	it	eq
 8000af6:	2800      	cmpeq	r0, #0
 8000af8:	bf1c      	itt	ne
 8000afa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000afe:	f04f 30ff 	movne.w	r0, #4294967295
 8000b02:	f000 b9eb 	b.w	8000edc <__aeabi_idiv0>
 8000b06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0e:	2900      	cmp	r1, #0
 8000b10:	db09      	blt.n	8000b26 <__aeabi_ldivmod+0x42>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db1a      	blt.n	8000b4c <__aeabi_ldivmod+0x68>
 8000b16:	f000 f883 	bl	8000c20 <__udivmoddi4>
 8000b1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b22:	b004      	add	sp, #16
 8000b24:	4770      	bx	lr
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db1b      	blt.n	8000b68 <__aeabi_ldivmod+0x84>
 8000b30:	f000 f876 	bl	8000c20 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4240      	negs	r0, r0
 8000b40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	f000 f865 	bl	8000c20 <__udivmoddi4>
 8000b56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5e:	b004      	add	sp, #16
 8000b60:	4240      	negs	r0, r0
 8000b62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b66:	4770      	bx	lr
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	f000 f857 	bl	8000c20 <__udivmoddi4>
 8000b72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_uldivmod>:
 8000b84:	b953      	cbnz	r3, 8000b9c <__aeabi_uldivmod+0x18>
 8000b86:	b94a      	cbnz	r2, 8000b9c <__aeabi_uldivmod+0x18>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	2800      	cmpeq	r0, #0
 8000b8e:	bf1c      	itt	ne
 8000b90:	f04f 31ff 	movne.w	r1, #4294967295
 8000b94:	f04f 30ff 	movne.w	r0, #4294967295
 8000b98:	f000 b9a0 	b.w	8000edc <__aeabi_idiv0>
 8000b9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba4:	f000 f83c 	bl	8000c20 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2lz>:
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4604      	mov	r4, r0
 8000bbc:	460d      	mov	r5, r1
 8000bbe:	f000 f9ef 	bl	8000fa0 <__aeabi_dcmplt>
 8000bc2:	b928      	cbnz	r0, 8000bd0 <__aeabi_d2lz+0x1c>
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	4629      	mov	r1, r5
 8000bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bcc:	f000 b80a 	b.w	8000be4 <__aeabi_d2ulz>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bd6:	f000 f805 	bl	8000be4 <__aeabi_d2ulz>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop

08000be4 <__aeabi_d2ulz>:
 8000be4:	b5d0      	push	{r4, r6, r7, lr}
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__aeabi_d2ulz+0x34>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	4606      	mov	r6, r0
 8000bec:	460f      	mov	r7, r1
 8000bee:	f7ff fccf 	bl	8000590 <__aeabi_dmul>
 8000bf2:	f7ff ff07 	bl	8000a04 <__aeabi_d2uiz>
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	f7ff fc50 	bl	800049c <__aeabi_ui2d>
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <__aeabi_d2ulz+0x38>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f7ff fcc6 	bl	8000590 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4630      	mov	r0, r6
 8000c0a:	4639      	mov	r1, r7
 8000c0c:	f7ff fb08 	bl	8000220 <__aeabi_dsub>
 8000c10:	f7ff fef8 	bl	8000a04 <__aeabi_d2uiz>
 8000c14:	4621      	mov	r1, r4
 8000c16:	bdd0      	pop	{r4, r6, r7, pc}
 8000c18:	3df00000 	.word	0x3df00000
 8000c1c:	41f00000 	.word	0x41f00000

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9d08      	ldr	r5, [sp, #32]
 8000c26:	460c      	mov	r4, r1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d14e      	bne.n	8000cca <__udivmoddi4+0xaa>
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	458c      	cmp	ip, r1
 8000c30:	4686      	mov	lr, r0
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	d962      	bls.n	8000cfe <__udivmoddi4+0xde>
 8000c38:	b14a      	cbz	r2, 8000c4e <__udivmoddi4+0x2e>
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	fa20 f303 	lsr.w	r3, r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	4319      	orrs	r1, r3
 8000c4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f f68c 	uxth.w	r6, ip
 8000c56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb04 f106 	mul.w	r1, r4, r6
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x64>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c76:	f080 8112 	bcs.w	8000e9e <__udivmoddi4+0x27e>
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	f240 810f 	bls.w	8000e9e <__udivmoddi4+0x27e>
 8000c80:	3c02      	subs	r4, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	fa1f f38e 	uxth.w	r3, lr
 8000c8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb00 f606 	mul.w	r6, r0, r6
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x94>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca6:	f080 80fc 	bcs.w	8000ea2 <__udivmoddi4+0x282>
 8000caa:	429e      	cmp	r6, r3
 8000cac:	f240 80f9 	bls.w	8000ea2 <__udivmoddi4+0x282>
 8000cb0:	4463      	add	r3, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa6>
 8000cbe:	40d3      	lsrs	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xba>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb4>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x150>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xcc>
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	f0c0 80f0 	bcc.w	8000ecc <__udivmoddi4+0x2ac>
 8000cec:	1a86      	subs	r6, r0, r2
 8000cee:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d0e6      	beq.n	8000cc6 <__udivmoddi4+0xa6>
 8000cf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cfc:	e7e3      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x204>
 8000d04:	eba1 040c 	sub.w	r4, r1, ip
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb07 f006 	mul.w	r0, r7, r6
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x11c>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x11a>
 8000d34:	4298      	cmp	r0, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2b4>
 8000d3a:	4626      	mov	r6, r4
 8000d3c:	1a1c      	subs	r4, r3, r0
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d46:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4e:	fb00 f707 	mul.w	r7, r0, r7
 8000d52:	429f      	cmp	r7, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x148>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x146>
 8000d60:	429f      	cmp	r7, r3
 8000d62:	f200 80b0 	bhi.w	8000ec6 <__udivmoddi4+0x2a6>
 8000d66:	4620      	mov	r0, r4
 8000d68:	1bdb      	subs	r3, r3, r7
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x9c>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d80:	fa04 f301 	lsl.w	r3, r4, r1
 8000d84:	ea43 030c 	orr.w	r3, r3, ip
 8000d88:	40f4      	lsrs	r4, r6
 8000d8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8e:	0c38      	lsrs	r0, r7, #16
 8000d90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d94:	fbb4 fef0 	udiv	lr, r4, r0
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000da0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da4:	fb0e f90c 	mul.w	r9, lr, ip
 8000da8:	45a1      	cmp	r9, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x1a6>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db6:	f080 8084 	bcs.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dba:	45a1      	cmp	r9, r4
 8000dbc:	f240 8081 	bls.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	eba4 0409 	sub.w	r4, r4, r9
 8000dca:	fa1f f983 	uxth.w	r9, r3
 8000dce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x1d2>
 8000de2:	193c      	adds	r4, r7, r4
 8000de4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de8:	d267      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d965      	bls.n	8000eba <__udivmoddi4+0x29a>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	46ce      	mov	lr, r9
 8000e02:	469c      	mov	ip, r3
 8000e04:	d351      	bcc.n	8000eaa <__udivmoddi4+0x28a>
 8000e06:	d04e      	beq.n	8000ea6 <__udivmoddi4+0x286>
 8000e08:	b155      	cbz	r5, 8000e20 <__udivmoddi4+0x200>
 8000e0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431e      	orrs	r6, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e750      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f103 	lsr.w	r1, r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa24 f303 	lsr.w	r3, r4, r3
 8000e34:	4094      	lsls	r4, r2
 8000e36:	430c      	orrs	r4, r1
 8000e38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3110 	mls	r1, r8, r0, r3
 8000e4c:	0c23      	lsrs	r3, r4, #16
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f107 	mul.w	r1, r0, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x24c>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e62:	d22c      	bcs.n	8000ebe <__udivmoddi4+0x29e>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d92a      	bls.n	8000ebe <__udivmoddi4+0x29e>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e74:	fb08 3311 	mls	r3, r8, r1, r3
 8000e78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e7c:	fb01 f307 	mul.w	r3, r1, r7
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x276>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e8c:	d213      	bcs.n	8000eb6 <__udivmoddi4+0x296>
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	d911      	bls.n	8000eb6 <__udivmoddi4+0x296>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	1ae4      	subs	r4, r4, r3
 8000e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e9c:	e739      	b.n	8000d12 <__udivmoddi4+0xf2>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	e6f0      	b.n	8000c84 <__udivmoddi4+0x64>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e706      	b.n	8000cb4 <__udivmoddi4+0x94>
 8000ea6:	45c8      	cmp	r8, r9
 8000ea8:	d2ae      	bcs.n	8000e08 <__udivmoddi4+0x1e8>
 8000eaa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb2:	3801      	subs	r0, #1
 8000eb4:	e7a8      	b.n	8000e08 <__udivmoddi4+0x1e8>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	e7ed      	b.n	8000e96 <__udivmoddi4+0x276>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	e799      	b.n	8000df2 <__udivmoddi4+0x1d2>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e7d4      	b.n	8000e6c <__udivmoddi4+0x24c>
 8000ec2:	46d6      	mov	lr, sl
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1a6>
 8000ec6:	4463      	add	r3, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e74d      	b.n	8000d68 <__udivmoddi4+0x148>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	4623      	mov	r3, r4
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e70f      	b.n	8000cf4 <__udivmoddi4+0xd4>
 8000ed4:	3e02      	subs	r6, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	e730      	b.n	8000d3c <__udivmoddi4+0x11c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__gedf2>:
 8000ee0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ee4:	e006      	b.n	8000ef4 <__cmpdf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__ledf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	e002      	b.n	8000ef4 <__cmpdf2+0x4>
 8000eee:	bf00      	nop

08000ef0 <__cmpdf2>:
 8000ef0:	f04f 0c01 	mov.w	ip, #1
 8000ef4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f04:	bf18      	it	ne
 8000f06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000f0a:	d01b      	beq.n	8000f44 <__cmpdf2+0x54>
 8000f0c:	b001      	add	sp, #4
 8000f0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000f12:	bf0c      	ite	eq
 8000f14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000f18:	ea91 0f03 	teqne	r1, r3
 8000f1c:	bf02      	ittt	eq
 8000f1e:	ea90 0f02 	teqeq	r0, r2
 8000f22:	2000      	moveq	r0, #0
 8000f24:	4770      	bxeq	lr
 8000f26:	f110 0f00 	cmn.w	r0, #0
 8000f2a:	ea91 0f03 	teq	r1, r3
 8000f2e:	bf58      	it	pl
 8000f30:	4299      	cmppl	r1, r3
 8000f32:	bf08      	it	eq
 8000f34:	4290      	cmpeq	r0, r2
 8000f36:	bf2c      	ite	cs
 8000f38:	17d8      	asrcs	r0, r3, #31
 8000f3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000f3e:	f040 0001 	orr.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f4c:	d102      	bne.n	8000f54 <__cmpdf2+0x64>
 8000f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f52:	d107      	bne.n	8000f64 <__cmpdf2+0x74>
 8000f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f5c:	d1d6      	bne.n	8000f0c <__cmpdf2+0x1c>
 8000f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f62:	d0d3      	beq.n	8000f0c <__cmpdf2+0x1c>
 8000f64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <__aeabi_cdrcmple>:
 8000f6c:	4684      	mov	ip, r0
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4662      	mov	r2, ip
 8000f72:	468c      	mov	ip, r1
 8000f74:	4619      	mov	r1, r3
 8000f76:	4663      	mov	r3, ip
 8000f78:	e000      	b.n	8000f7c <__aeabi_cdcmpeq>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_cdcmpeq>:
 8000f7c:	b501      	push	{r0, lr}
 8000f7e:	f7ff ffb7 	bl	8000ef0 <__cmpdf2>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	bf48      	it	mi
 8000f86:	f110 0f00 	cmnmi.w	r0, #0
 8000f8a:	bd01      	pop	{r0, pc}

08000f8c <__aeabi_dcmpeq>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff fff4 	bl	8000f7c <__aeabi_cdcmpeq>
 8000f94:	bf0c      	ite	eq
 8000f96:	2001      	moveq	r0, #1
 8000f98:	2000      	movne	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_dcmplt>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffea 	bl	8000f7c <__aeabi_cdcmpeq>
 8000fa8:	bf34      	ite	cc
 8000faa:	2001      	movcc	r0, #1
 8000fac:	2000      	movcs	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_dcmple>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffe0 	bl	8000f7c <__aeabi_cdcmpeq>
 8000fbc:	bf94      	ite	ls
 8000fbe:	2001      	movls	r0, #1
 8000fc0:	2000      	movhi	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_dcmpge>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffce 	bl	8000f6c <__aeabi_cdrcmple>
 8000fd0:	bf94      	ite	ls
 8000fd2:	2001      	movls	r0, #1
 8000fd4:	2000      	movhi	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop

08000fdc <__aeabi_dcmpgt>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff ffc4 	bl	8000f6c <__aeabi_cdrcmple>
 8000fe4:	bf34      	ite	cc
 8000fe6:	2001      	movcc	r0, #1
 8000fe8:	2000      	movcs	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <set_freq>:
//#include <stm32g4xx_hal_cordic.h>
#include <main.h>
#include "dds.h"
//0: sine    1:triangle    2:square    out:sqr
void set_freq(void (*send_data)(uint16_t), long long int freq, int waveform)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	e9c7 2300 	strd	r2, r3, [r7]

	long long int temp = (freq * 268435456 / 25000000);
 8000ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	f04f 0100 	mov.w	r1, #0
 8001008:	0719      	lsls	r1, r3, #28
 800100a:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 800100e:	0710      	lsls	r0, r2, #28
 8001010:	a337      	add	r3, pc, #220	@ (adr r3, 80010f0 <set_freq+0x100>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fd65 	bl	8000ae4 <__aeabi_ldivmod>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t fr = temp;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 8001026:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800102a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 800102c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001030:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	e029      	b.n	800108c <set_freq+0x9c>
	    if (fr & (1 << i)) {
 8001038:	2201      	movs	r2, #1
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	461a      	mov	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <set_freq+0x6e>
	        lsb |= (1 << i);
 800104a:	2201      	movs	r2, #1
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	b21a      	sxth	r2, r3
 8001054:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	330e      	adds	r3, #14
 8001062:	2201      	movs	r2, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	461a      	mov	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d009      	beq.n	8001086 <set_freq+0x96>
	        msb |= (1 << i);
 8001072:	2201      	movs	r2, #1
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	b21a      	sxth	r2, r3
 800107c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	3301      	adds	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	2b0d      	cmp	r3, #13
 8001090:	ddd2      	ble.n	8001038 <set_freq+0x48>
	    }
	}

	send_data(0x2100);//send_data(0x2300);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001098:	4798      	blx	r3
	send_data(lsb);//freq0
 800109a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4610      	mov	r0, r2
 80010a0:	4798      	blx	r3
	send_data(msb);
 80010a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
	send_data(0xC000);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80010b0:	4798      	blx	r3
//	send_data(0x2100);
//	send_data(0x8000);
//	send_data(0x8432);
	switch(waveform)
 80010b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d011      	beq.n	80010dc <set_freq+0xec>
 80010b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	dc12      	bgt.n	80010e4 <set_freq+0xf4>
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <set_freq+0xdc>
 80010c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d004      	beq.n	80010d4 <set_freq+0xe4>
		case 0: send_data(0x0000); break;//send_data(0x0200);
		case 1: send_data(0x0002); break;
		case 2: send_data(0x0028); break;
	}
	//send_data(0x2200);
}
 80010ca:	e00b      	b.n	80010e4 <set_freq+0xf4>
		case 0: send_data(0x0000); break;//send_data(0x0200);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2000      	movs	r0, #0
 80010d0:	4798      	blx	r3
 80010d2:	e007      	b.n	80010e4 <set_freq+0xf4>
		case 1: send_data(0x0002); break;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2002      	movs	r0, #2
 80010d8:	4798      	blx	r3
 80010da:	e003      	b.n	80010e4 <set_freq+0xf4>
		case 2: send_data(0x0028); break;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	4798      	blx	r3
 80010e2:	bf00      	nop
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	@ 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	f3af 8000 	nop.w
 80010f0:	017d7840 	.word	0x017d7840
 80010f4:	00000000 	.word	0x00000000

080010f8 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	bf00      	nop
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f813 	bl	8001186 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8001160:	4604      	mov	r4, r0
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f818 	bl	800119c <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4621      	mov	r1, r4
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f81b 	bl	80011b2 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 800117c:	bf00      	nop
 800117e:	4628      	mov	r0, r5
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}

08001186 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>:
  FixedInt() {}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>:
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>:
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <_Z41__static_initialization_and_destruction_0ii>:
      }
  //Vector2f x = A.colPivHouseholderQr().solve(b);
      Vector3f x = A.householderQr().solve(b);
  auto mag =  x(0)* x(0) + x(1)*x(1);
  return mag;
}
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d11d      	bne.n	800125c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001226:	4293      	cmp	r3, r2
 8001228:	d118      	bne.n	800125c <_Z41__static_initialization_and_destruction_0ii+0x4c>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800122c:	f7ff ff6f 	bl	800110e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8001230:	480d      	ldr	r0, [pc, #52]	@ (8001268 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001232:	f7ff ff77 	bl	8001124 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001238:	f7ff ff7f 	bl	800113a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 800123c:	4621      	mov	r1, r4
 800123e:	4809      	ldr	r0, [pc, #36]	@ (8001264 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001240:	f7ff ff86 	bl	8001150 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001246:	f7ff ff57 	bl	80010f8 <_ZN5Eigen8internal5all_tC1Ev>
 800124a:	4809      	ldr	r0, [pc, #36]	@ (8001270 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800124c:	f7ff ffbe 	bl	80011cc <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>
 8001250:	4808      	ldr	r0, [pc, #32]	@ (8001274 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001252:	f7ff ffc6 	bl	80011e2 <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>
 8001256:	4808      	ldr	r0, [pc, #32]	@ (8001278 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001258:	f7ff ffce 	bl	80011f8 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000084 	.word	0x20000084
 8001268:	2000008c 	.word	0x2000008c
 800126c:	20000088 	.word	0x20000088
 8001270:	20000090 	.word	0x20000090
 8001274:	20000094 	.word	0x20000094
 8001278:	20000098 	.word	0x20000098

0800127c <_GLOBAL__sub_I_ic_fitting>:
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
 8001280:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff ffc3 	bl	8001210 <_Z41__static_initialization_and_destruction_0ii>
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <HAL_ADC_ConvCpltCallback+0x30>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 fa30 	bl	8004708 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 80012a8:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <HAL_ADC_ConvCpltCallback+0x34>)
 80012aa:	f007 fd09 	bl	8008cc0 <HAL_TIM_Base_Stop>
 80012ae:	e000      	b.n	80012b2 <HAL_ADC_ConvCpltCallback+0x26>
		return;
 80012b0:	bf00      	nop
}
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000009c 	.word	0x2000009c
 80012bc:	20001d50 	.word	0x20001d50
 80012c0:	20000314 	.word	0x20000314

080012c4 <send_ad9834>:

void send_ad9834(uint16_t cmd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d8:	f005 fee6 	bl	80070a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 80012dc:	1db9      	adds	r1, r7, #6
 80012de:	230a      	movs	r3, #10
 80012e0:	2201      	movs	r2, #1
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <send_ad9834+0x3c>)
 80012e4:	f007 f94b 	bl	800857e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f005 fed9 	bl	80070a8 <HAL_GPIO_WritePin>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000218 	.word	0x20000218

08001304 <send_ad9833>:
void send_ad9833(uint16_t cmd)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f005 fec6 	bl	80070a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 800131c:	1db9      	adds	r1, r7, #6
 800131e:	230a      	movs	r3, #10
 8001320:	2201      	movs	r2, #1
 8001322:	4807      	ldr	r0, [pc, #28]	@ (8001340 <send_ad9833+0x3c>)
 8001324:	f007 f92b 	bl	800857e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001332:	f005 feb9 	bl	80070a8 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000218 	.word	0x20000218

08001344 <roundToNearest5>:
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
  }
}*/

int roundToNearest5(int num)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <roundToNearest5+0x44>)
 8001350:	fb83 1302 	smull	r1, r3, r3, r2
 8001354:	1059      	asrs	r1, r3, #1
 8001356:	17d3      	asrs	r3, r2, #31
 8001358:	1ac9      	subs	r1, r1, r3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b02      	cmp	r3, #2
 8001368:	dd05      	ble.n	8001376 <roundToNearest5+0x32>
        return num + (5 - remainder);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1c3 0205 	rsb	r2, r3, #5
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	e002      	b.n	800137c <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
    }

}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	66666667 	.word	0x66666667
 800138c:	00000000 	.word	0x00000000

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	f5ad 5d62 	sub.w	sp, sp, #14464	@ 0x3880
 8001396:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f002 fc49 	bl	8003c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 fdb6 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f001 f9a0 	bl	80026e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a4:	f001 f958 	bl	8002658 <MX_DMA_Init>
  MX_CRC_Init();
 80013a8:	f000 fea0 	bl	80020ec <MX_CRC_Init>
  MX_USART2_UART_Init();
 80013ac:	f001 f908 	bl	80025c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013b0:	f000 fdfe 	bl	8001fb0 <MX_ADC1_Init>
  MX_SPI3_Init();
 80013b4:	f000 ff40 	bl	8002238 <MX_SPI3_Init>
  MX_TIM6_Init();
 80013b8:	f001 f844 	bl	8002444 <MX_TIM6_Init>
  MX_I2C1_Init();
 80013bc:	f000 fefc 	bl	80021b8 <MX_I2C1_Init>
  MX_DAC1_Init();
 80013c0:	f000 fec0 	bl	8002144 <MX_DAC1_Init>
  MX_COMP3_Init();
 80013c4:	f000 fe6c 	bl	80020a0 <MX_COMP3_Init>
  MX_TIM3_Init();
 80013c8:	f000 ffee 	bl	80023a8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013cc:	f000 ff72 	bl	80022b4 <MX_TIM2_Init>
  MX_TIM7_Init();
 80013d0:	f001 f86e 	bl	80024b0 <MX_TIM7_Init>
  MX_TIM15_Init();
 80013d4:	f001 f8a2 	bl	800251c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 80013d8:	2300      	movs	r3, #0
 80013da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80013de:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e03c      	b.n	8001460 <main+0xd0>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 80013e6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013ea:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001674 <main+0x2e4>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	f00a fc6c 	bl	800bce0 <arm_cos_f32>
 8001408:	ee10 3a10 	vmov	r3, s0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f867 	bl	80004e0 <__aeabi_f2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b98      	ldr	r3, [pc, #608]	@ (8001678 <main+0x2e8>)
 8001418:	f7ff f8ba 	bl	8000590 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	f04f 0000 	mov.w	r0, #0
 8001424:	4994      	ldr	r1, [pc, #592]	@ (8001678 <main+0x2e8>)
 8001426:	f7fe fefb 	bl	8000220 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb07 	bl	8000a44 <__aeabi_d2f>
 8001436:	4602      	mov	r2, r0
 8001438:	4990      	ldr	r1, [pc, #576]	@ (800167c <main+0x2ec>)
 800143a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800143e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; ++i)
 800144a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800144e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800145a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001464:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146e:	dbba      	blt.n	80013e6 <main+0x56>

//AFE_Offset_LDAC_Init();
//AFE_Gain(3);
//AFE_Offset(256);

  float fft_in[N] = {0};
 8001470:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8001474:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001478:	3b44      	subs	r3, #68	@ 0x44
 800147a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f00b f8af 	bl	800c5e4 <memset>
  float fft_out[N] = {0};
 8001486:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800148a:	f103 0318 	add.w	r3, r3, #24
 800148e:	3b44      	subs	r3, #68	@ 0x44
 8001490:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f00b f8a4 	bl	800c5e4 <memset>
  float deal_mag[N] = {0};
 800149c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014a0:	3b44      	subs	r3, #68	@ 0x44
 80014a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00b f89b 	bl	800c5e4 <memset>

  GPIO_PinState prev = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014b4:	f102 0233 	add.w	r2, r2, #51	@ 0x33
 80014b8:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPIO_PinState curr = HAL_GPIO_ReadPin(UI_SW3_GPIO_Port, UI_SW3_Pin);
 80014ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014be:	4870      	ldr	r0, [pc, #448]	@ (8001680 <main+0x2f0>)
 80014c0:	f005 fdda 	bl	8007078 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80014ca:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 80014ce:	7013      	strb	r3, [r2, #0]
      if(curr && !prev)
 80014d0:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 80014d4:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8500 	beq.w	8001ee0 <main+0xb50>
 80014e0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014e4:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 84f8 	bne.w	8001ee0 <main+0xb50>
      {
		  set_sm_freq(1e6 , &htim6);
 80014f0:	4964      	ldr	r1, [pc, #400]	@ (8001684 <main+0x2f4>)
 80014f2:	4865      	ldr	r0, [pc, #404]	@ (8001688 <main+0x2f8>)
 80014f4:	f001 f9fa 	bl	80028ec <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 80014f8:	4b64      	ldr	r3, [pc, #400]	@ (800168c <main+0x2fc>)
 80014fa:	4a62      	ldr	r2, [pc, #392]	@ (8001684 <main+0x2f4>)
 80014fc:	f240 4101 	movw	r1, #1025	@ 0x401
 8001500:	4863      	ldr	r0, [pc, #396]	@ (8001690 <main+0x300>)
 8001502:	f001 f9d5 	bl	80028b0 <samp>
		  uint16_t temp_buffer[1025];
		  make_8to16(adc_buffer, 2050, temp_buffer);
 8001506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150a:	3b38      	subs	r3, #56	@ 0x38
 800150c:	461a      	mov	r2, r3
 800150e:	f640 0102 	movw	r1, #2050	@ 0x802
 8001512:	485f      	ldr	r0, [pc, #380]	@ (8001690 <main+0x300>)
 8001514:	f001 f996 	bl	8002844 <make_8to16>
		  int_to_float(temp_buffer + 1, fft_in);
 8001518:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800151c:	3b38      	subs	r3, #56	@ 0x38
 800151e:	3302      	adds	r3, #2
 8001520:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 8001524:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001528:	3a04      	subs	r2, #4
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f9fb 	bl	8002928 <int_to_float>
		  for (int i = 0; i < N; ++i)
 8001532:	2300      	movs	r3, #0
 8001534:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001538:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e034      	b.n	80015aa <main+0x21a>
		  {
			  fft_in[i] *= window[i];
 8001540:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8001544:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001548:	461a      	mov	r2, r3
 800154a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800154e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b44      	subs	r3, #68	@ 0x44
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	4a47      	ldr	r2, [pc, #284]	@ (800167c <main+0x2ec>)
 8001560:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001564:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 800157a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800157e:	461a      	mov	r2, r3
 8001580:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001584:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b44      	subs	r3, #68	@ 0x44
 8001590:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8001594:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001598:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015a4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015ae:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b8:	dbc2      	blt.n	8001540 <main+0x1b0>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 80015ba:	f607 0238 	addw	r2, r7, #2104	@ 0x838
 80015be:	3a04      	subs	r2, #4
 80015c0:	f507 51c1 	add.w	r1, r7, #6176	@ 0x1820
 80015c4:	f101 0118 	add.w	r1, r1, #24
 80015c8:	3904      	subs	r1, #4
 80015ca:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 80015ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80015d2:	3b04      	subs	r3, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 f9cc 	bl	8002972 <fft_transfer>

		  int freq_1 = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015e0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80015e4:	6013      	str	r3, [r2, #0]
		  int freq_2 = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015ec:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80015f0:	6013      	str	r3, [r2, #0]
		  int waveform_1 = 0;//waveform = 0: sine, waveform = 1: triangle
 80015f2:	2300      	movs	r3, #0
 80015f4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015f8:	f102 0220 	add.w	r2, r2, #32
 80015fc:	6013      	str	r3, [r2, #0]
		  int waveform_2 = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001604:	f102 021c 	add.w	r2, r2, #28
 8001608:	6013      	str	r3, [r2, #0]

		  float max = 0;
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001612:	f102 0218 	add.w	r2, r2, #24
 8001616:	6013      	str	r3, [r2, #0]
		  float sec = 0;
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001620:	f102 0214 	add.w	r2, r2, #20
 8001624:	6013      	str	r3, [r2, #0]
		  /*set_freq_wave(deal_mag);*/
		  uint32_t big_mag[6] = {0};
 8001626:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800162a:	3b5c      	subs	r3, #92	@ 0x5c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
		  int index[6] = {0};
 800163a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800163e:	3b74      	subs	r3, #116	@ 0x74
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
		  int freq_counter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001654:	f102 0210 	add.w	r2, r2, #16
 8001658:	6013      	str	r3, [r2, #0]
		  uint8_t k = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001660:	f102 020f 	add.w	r2, r2, #15
 8001664:	7013      	strb	r3, [r2, #0]
		  for(int i = 2; i < 512; ++i)
 8001666:	2302      	movs	r3, #2
 8001668:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800166c:	f102 0208 	add.w	r2, r2, #8
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e0ac      	b.n	80017ce <main+0x43e>
 8001674:	3bc9422c 	.word	0x3bc9422c
 8001678:	3fe00000 	.word	0x3fe00000
 800167c:	20000d50 	.word	0x20000d50
 8001680:	48000800 	.word	0x48000800
 8001684:	20000314 	.word	0x20000314
 8001688:	000f4240 	.word	0x000f4240
 800168c:	2000009c 	.word	0x2000009c
 8001690:	2000054c 	.word	0x2000054c
 8001694:	45160000 	.word	0x45160000
		  {
			  if((deal_mag[i]) > 2400)
 8001698:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800169c:	461a      	mov	r2, r3
 800169e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016a2:	f103 0308 	add.w	r3, r3, #8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b44      	subs	r3, #68	@ 0x44
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001694 <main+0x304>
 80016b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dd74      	ble.n	80017aa <main+0x41a>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 80016c0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016c4:	461a      	mov	r2, r3
 80016c6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016ca:	f103 0308 	add.w	r3, r3, #8
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b44      	subs	r3, #68	@ 0x44
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016de:	f103 0308 	add.w	r3, r3, #8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3b44      	subs	r3, #68	@ 0x44
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	dd55      	ble.n	80017aa <main+0x41a>
 80016fe:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001702:	461a      	mov	r2, r3
 8001704:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001708:	f103 0308 	add.w	r3, r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b44      	subs	r3, #68	@ 0x44
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b44      	subs	r3, #68	@ 0x44
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd36      	ble.n	80017aa <main+0x41a>
				  {
					  big_mag[k] = deal_mag[i];
 800173c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001740:	461a      	mov	r2, r3
 8001742:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001746:	f103 0308 	add.w	r3, r3, #8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b44      	subs	r3, #68	@ 0x44
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800175a:	f103 030f 	add.w	r3, r3, #15
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 1a90 	vmov	r1, s15
 8001768:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	f843 1c5c 	str.w	r1, [r3, #-92]
					  index[k] = i;
 8001774:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001778:	f103 030f 	add.w	r3, r3, #15
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800178a:	f102 0208 	add.w	r2, r2, #8
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	f843 2c74 	str.w	r2, [r3, #-116]
					  k++;
 8001794:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001798:	f103 030f 	add.w	r3, r3, #15
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017a4:	f102 020f 	add.w	r2, r2, #15
 80017a8:	7013      	strb	r3, [r2, #0]
				  }
			  }
			  if(k == 6) break;
 80017aa:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017ae:	f103 030f 	add.w	r3, r3, #15
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d014      	beq.n	80017e2 <main+0x452>
		  for(int i = 2; i < 512; ++i)
 80017b8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017bc:	f103 0308 	add.w	r3, r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017c8:	f102 0208 	add.w	r2, r2, #8
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017d2:	f103 0308 	add.w	r3, r3, #8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017dc:	f6ff af5c 	blt.w	8001698 <main+0x308>
 80017e0:	e000      	b.n	80017e4 <main+0x454>
			  if(k == 6) break;
 80017e2:	bf00      	nop
		  }
		  for(int i = 0;i < 6; ++i)
 80017e4:	2300      	movs	r3, #0
 80017e6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017ea:	f102 0204 	add.w	r2, r2, #4
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e078      	b.n	80018e4 <main+0x554>
		  {
			  index[i] = ((index[i] * 0.97656) / 5) * 5;
 80017f2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80017f6:	461a      	mov	r2, r3
 80017f8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017fc:	f103 0304 	add.w	r3, r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe56 	bl	80004bc <__aeabi_i2d>
 8001810:	a3be      	add	r3, pc, #760	@ (adr r3, 8001b0c <main+0x77c>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe febb 	bl	8000590 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4bb8      	ldr	r3, [pc, #736]	@ (8001b08 <main+0x778>)
 8001828:	f7fe ffdc 	bl	80007e4 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4bb3      	ldr	r3, [pc, #716]	@ (8001b08 <main+0x778>)
 800183a:	f7fe fea9 	bl	8000590 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f8b5 	bl	80009b4 <__aeabi_d2iz>
 800184a:	4602      	mov	r2, r0
 800184c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001850:	4619      	mov	r1, r3
 8001852:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001856:	f103 0304 	add.w	r3, r3, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	f843 2c74 	str.w	r2, [r3, #-116]
			  index[i] = roundToNearest5(index[i]);
 8001864:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001868:	461a      	mov	r2, r3
 800186a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800186e:	f103 0304 	add.w	r3, r3, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd61 	bl	8001344 <roundToNearest5>
 8001882:	4602      	mov	r2, r0
 8001884:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001888:	4619      	mov	r1, r3
 800188a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800188e:	f103 0304 	add.w	r3, r3, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	f843 2c74 	str.w	r2, [r3, #-116]
			  if(index[i] > 0) freq_counter ++;
 800189c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80018a0:	461a      	mov	r2, r3
 80018a2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018a6:	f103 0304 	add.w	r3, r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd0a      	ble.n	80018ce <main+0x53e>
 80018b8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018bc:	f103 0310 	add.w	r3, r3, #16
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018c8:	f102 0210 	add.w	r2, r2, #16
 80018cc:	6013      	str	r3, [r2, #0]
		  for(int i = 0;i < 6; ++i)
 80018ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018d2:	f103 0304 	add.w	r3, r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018de:	f102 0204 	add.w	r2, r2, #4
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018e8:	f103 0304 	add.w	r3, r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	f77f af7f 	ble.w	80017f2 <main+0x462>
		  }

		  switch(freq_counter)
 80018f4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018f8:	f103 0310 	add.w	r3, r3, #16
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	2b05      	cmp	r3, #5
 8001902:	f200 82b3 	bhi.w	8001e6c <main+0xadc>
 8001906:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <main+0x57c>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001925 	.word	0x08001925
 8001910:	08001963 	.word	0x08001963
 8001914:	080019c5 	.word	0x080019c5
 8001918:	08001add 	.word	0x08001add
 800191c:	08001c6f 	.word	0x08001c6f
 8001920:	08001c6f 	.word	0x08001c6f
		  {
			  case 1:
			  {
				  waveform_1 = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800192a:	f102 0220 	add.w	r2, r2, #32
 800192e:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001936:	f102 021c 	add.w	r2, r2, #28
 800193a:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 800193c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001940:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001944:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001948:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800194c:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 800194e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001952:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001956:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800195a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800195e:	6013      	str	r3, [r2, #0]
				  break;
 8001960:	e284      	b.n	8001e6c <main+0xadc>
			  }
			  case 2 :
			  {
				  waveform_1 = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001968:	f102 0220 	add.w	r2, r2, #32
 800196c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001974:	f102 021c 	add.w	r2, r2, #28
 8001978:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 800197a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800197e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001982:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001986:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800198a:	6013      	str	r3, [r2, #0]
				  if(big_mag[1] < 10000)
 800198c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001990:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001994:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001998:	4293      	cmp	r3, r2
 800199a:	d809      	bhi.n	80019b0 <main+0x620>
				  {
					  freq_2 = index[0];
 800199c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019a0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80019a4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019a8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80019ac:	6013      	str	r3, [r2, #0]
				  }
				  else
				  {
					  freq_2 = index[1];
				  }
				  break;
 80019ae:	e25d      	b.n	8001e6c <main+0xadc>
					  freq_2 = index[1];
 80019b0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019b4:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80019b8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019bc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80019c0:	6013      	str	r3, [r2, #0]
				  break;
 80019c2:	e253      	b.n	8001e6c <main+0xadc>
			  }
			  case 3:
			  {
				  waveform_1 = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019ca:	f102 0220 	add.w	r2, r2, #32
 80019ce:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019d6:	f102 021c 	add.w	r2, r2, #28
 80019da:	6013      	str	r3, [r2, #0]
				  freq_2 = 100;
 80019dc:	2364      	movs	r3, #100	@ 0x64
 80019de:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019e2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80019e6:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 80019e8:	2300      	movs	r3, #0
 80019ea:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e06e      	b.n	8001ad0 <main+0x740>
				  {
					  if(big_mag[i] > max)
 80019f2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019f6:	461a      	mov	r2, r3
 80019f8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a12:	f103 0318 	add.w	r3, r3, #24
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d522      	bpl.n	8001a6a <main+0x6da>
					  {
						  max = big_mag[i];
 8001a24:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a40:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a44:	f103 0318 	add.w	r3, r3, #24
 8001a48:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 8001a4c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a50:	461a      	mov	r2, r3
 8001a52:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001a60:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a64:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001a68:	6013      	str	r3, [r2, #0]
					  }
					  if(freq_2 > index[i] && index[i] > 0)
 8001a6a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001a7e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a82:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dd1a      	ble.n	8001ac2 <main+0x732>
 8001a8c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a90:	461a      	mov	r2, r3
 8001a92:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd0e      	ble.n	8001ac2 <main+0x732>
					  {
						  freq_2 = index[i];
 8001aa4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001ab8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001abc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001ac0:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001ac2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	dd8b      	ble.n	80019f2 <main+0x662>
					  }
				  }
				  break;
 8001ada:	e1c7      	b.n	8001e6c <main+0xadc>
			  }
			  case 4 :
			  {
				  waveform_1 = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001ae2:	f102 0220 	add.w	r2, r2, #32
 8001ae6:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001aee:	f102 021c 	add.w	r2, r2, #28
 8001af2:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001af4:	2300      	movs	r3, #0
 8001af6:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001afa:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e0ac      	b.n	8001c5c <main+0x8cc>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	40140000 	.word	0x40140000
 8001b0c:	c1d29dc7 	.word	0xc1d29dc7
 8001b10:	3fef3ffa 	.word	0x3fef3ffa
				  {
					  if(big_mag[i] > sec)
 8001b14:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001b1e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b38:	f103 0314 	add.w	r3, r3, #20
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d57d      	bpl.n	8001c46 <main+0x8b6>
					  {
						  if(big_mag[i] > max)
 8001b4a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001b54:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b6e:	f103 0318 	add.w	r3, r3, #24
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d53b      	bpl.n	8001bf8 <main+0x868>
						  {
							  sec = max;
 8001b80:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b84:	f103 0318 	add.w	r3, r3, #24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001b8e:	f102 0214 	add.w	r2, r2, #20
 8001b92:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 8001b94:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b98:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001ba2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001ba6:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8001ba8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001bac:	461a      	mov	r2, r3
 8001bae:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001bb2:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001bcc:	f103 0318 	add.w	r3, r3, #24
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8001bd4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001bde:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001bec:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001bf0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e026      	b.n	8001c46 <main+0x8b6>
						  }
						  else
						  {
							  sec = big_mag[i];
 8001bf8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001c02:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c18:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001c1c:	f103 0314 	add.w	r3, r3, #20
 8001c20:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8001c24:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001c2e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c3c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001c40:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001c44:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001c46:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001c4a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001c56:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001c60:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	f77f af54 	ble.w	8001b14 <main+0x784>
						  }
					  }
				  }
				  break;
 8001c6c:	e0fe      	b.n	8001e6c <main+0xadc>
			  }
			  case 5 : case 6:
			  {
				  waveform_1 = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001c74:	f102 0220 	add.w	r2, r2, #32
 8001c78:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001c80:	f102 021c 	add.w	r2, r2, #28
 8001c84:	6013      	str	r3, [r2, #0]
				  if(index[0] == index[1] / 2 && index[0] == index[2] / 3 &&index[0] == index[3] / 5)
 8001c86:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001c8a:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8001c8e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001c92:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001c96:	0fd9      	lsrs	r1, r3, #31
 8001c98:	440b      	add	r3, r1
 8001c9a:	105b      	asrs	r3, r3, #1
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d131      	bne.n	8001d04 <main+0x974>
 8001ca0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001ca4:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8001ca8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001cac:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001cb0:	4991      	ldr	r1, [pc, #580]	@ (8001ef8 <main+0xb68>)
 8001cb2:	fb81 0103 	smull	r0, r1, r1, r3
 8001cb6:	17db      	asrs	r3, r3, #31
 8001cb8:	1acb      	subs	r3, r1, r3
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d122      	bne.n	8001d04 <main+0x974>
 8001cbe:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001cc2:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8001cc6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001cca:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001cce:	498b      	ldr	r1, [pc, #556]	@ (8001efc <main+0xb6c>)
 8001cd0:	fb81 0103 	smull	r0, r1, r1, r3
 8001cd4:	1049      	asrs	r1, r1, #1
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1acb      	subs	r3, r1, r3
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d112      	bne.n	8001d04 <main+0x974>
				  {
					  freq_1 = index[0];
 8001cde:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001ce2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001ce6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001cea:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001cee:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 8001cf0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001cf4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001cf8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001cfc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001d00:	6013      	str	r3, [r2, #0]
					  break;
 8001d02:	e0b3      	b.n	8001e6c <main+0xadc>
				  }
				  for(int i = 0;i < 6; ++i)
 8001d04:	2300      	movs	r3, #0
 8001d06:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001d0a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e0a3      	b.n	8001e5a <main+0xaca>
				  {
					  if(big_mag[i] > sec)
 8001d12:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001d16:	461a      	mov	r2, r3
 8001d18:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001d1c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d32:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001d36:	f103 0314 	add.w	r3, r3, #20
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d57d      	bpl.n	8001e44 <main+0xab4>
					  {
						  if(big_mag[i] > max)
 8001d48:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001d52:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d68:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001d6c:	f103 0318 	add.w	r3, r3, #24
 8001d70:	ed93 7a00 	vldr	s14, [r3]
 8001d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d53b      	bpl.n	8001df6 <main+0xa66>
						  {
							  sec = max;
 8001d7e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001d82:	f103 0318 	add.w	r3, r3, #24
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001d8c:	f102 0214 	add.w	r2, r2, #20
 8001d90:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 8001d92:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001d96:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001da0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001da4:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8001da6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001daa:	461a      	mov	r2, r3
 8001dac:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001db0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001dca:	f103 0318 	add.w	r3, r3, #24
 8001dce:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8001dd2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001ddc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001dea:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001dee:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e026      	b.n	8001e44 <main+0xab4>
						  }
						  else
						  {
							  sec = big_mag[i];
 8001df6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001e00:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e16:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001e1a:	f103 0314 	add.w	r3, r3, #20
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8001e22:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001e26:	461a      	mov	r2, r3
 8001e28:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001e2c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001e3a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001e3e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001e42:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001e44:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001e48:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001e54:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001e5e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	f77f af54 	ble.w	8001d12 <main+0x982>
						  }
					  }
				  }
				  break;
 8001e6a:	bf00      	nop
			  }
		  }
		  set_freq(send_ad9833, freq_1 * 1e3, waveform_1);
 8001e6c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001e70:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f7fe fb21 	bl	80004bc <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <main+0xb70>)
 8001e80:	f7fe fb86 	bl	8000590 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fe92 	bl	8000bb4 <__aeabi_d2lz>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	f507 5161 	add.w	r1, r7, #14400	@ 0x3840
 8001e98:	f101 0120 	add.w	r1, r1, #32
 8001e9c:	6809      	ldr	r1, [r1, #0]
 8001e9e:	9100      	str	r1, [sp, #0]
 8001ea0:	4818      	ldr	r0, [pc, #96]	@ (8001f04 <main+0xb74>)
 8001ea2:	f7ff f8a5 	bl	8000ff0 <set_freq>

		  set_freq(send_ad9834, freq_2 * 1e3, waveform_2);
 8001ea6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001eaa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f7fe fb04 	bl	80004bc <__aeabi_i2d>
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <main+0xb70>)
 8001eba:	f7fe fb69 	bl	8000590 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fe75 	bl	8000bb4 <__aeabi_d2lz>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	f507 5161 	add.w	r1, r7, #14400	@ 0x3840
 8001ed2:	f101 011c 	add.w	r1, r1, #28
 8001ed6:	6809      	ldr	r1, [r1, #0]
 8001ed8:	9100      	str	r1, [sp, #0]
 8001eda:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <main+0xb78>)
 8001edc:	f7ff f888 	bl	8000ff0 <set_freq>

	  }
      prev = curr;
 8001ee0:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001ee4:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001eee:	f102 0233 	add.w	r2, r2, #51	@ 0x33
 8001ef2:	7013      	strb	r3, [r2, #0]
  {
 8001ef4:	f7ff bae1 	b.w	80014ba <main+0x12a>
 8001ef8:	55555556 	.word	0x55555556
 8001efc:	66666667 	.word	0x66666667
 8001f00:	408f4000 	.word	0x408f4000
 8001f04:	08001305 	.word	0x08001305
 8001f08:	080012c5 	.word	0x080012c5

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b094      	sub	sp, #80	@ 0x50
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	2238      	movs	r2, #56	@ 0x38
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00a fb62 	bl	800c5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f32:	f005 fa03 	bl	800733c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f44:	2303      	movs	r3, #3
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8001f48:	2305      	movs	r3, #5
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001f4c:	233c      	movs	r3, #60	@ 0x3c
 8001f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001f50:	2305      	movs	r3, #5
 8001f52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fa9f 	bl	80074a4 <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001f6c:	f000 fc64 	bl	8002838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f70:	230f      	movs	r3, #15
 8001f72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	2303      	movs	r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2104      	movs	r1, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fd9d 	bl	8007ac8 <HAL_RCC_ClockConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001f94:	f000 fc50 	bl	8002838 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001f9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fa2:	f005 fecd 	bl	8007d40 <HAL_RCC_MCOConfig>
}
 8001fa6:	bf00      	nop
 8001fa8:	3750      	adds	r7, #80	@ 0x50
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	@ 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00a fb0b 	bl	800c5e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fce:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001fd0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fd6:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ffa:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002002:	2200      	movs	r2, #0
 8002004:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002008:	2201      	movs	r2, #1
 800200a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_ADC1_Init+0xe8>)
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002014:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002016:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_ADC1_Init+0xe8>)
 800201e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_ADC1_Init+0xe8>)
 800202e:	2200      	movs	r2, #0
 8002030:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800203a:	4817      	ldr	r0, [pc, #92]	@ (8002098 <MX_ADC1_Init+0xe8>)
 800203c:	f002 f8d4 	bl	80041e8 <HAL_ADC_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8002046:	f000 fbf7 	bl	8002838 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800204e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	4810      	ldr	r0, [pc, #64]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002056:	f003 fa79 	bl	800554c <HAL_ADCEx_MultiModeConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002060:	f000 fbea 	bl	8002838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <MX_ADC1_Init+0xec>)
 8002066:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002068:	2306      	movs	r3, #6
 800206a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002070:	237f      	movs	r3, #127	@ 0x7f
 8002072:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002074:	2304      	movs	r3, #4
 8002076:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_ADC1_Init+0xe8>)
 8002082:	f002 fbb7 	bl	80047f4 <HAL_ADC_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800208c:	f000 fbd4 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	@ 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000009c 	.word	0x2000009c
 800209c:	04300002 	.word	0x04300002

080020a0 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020a6:	4a10      	ldr	r2, [pc, #64]	@ (80020e8 <MX_COMP3_Init+0x48>)
 80020a8:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020b2:	2250      	movs	r2, #80	@ 0x50
 80020b4:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020be:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80020c2:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MX_COMP3_Init+0x44>)
 80020d2:	f003 fc93 	bl	80059fc <HAL_COMP_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 80020dc:	f000 fbac 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000168 	.word	0x20000168
 80020e8:	40010208 	.word	0x40010208

080020ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <MX_CRC_Init+0x50>)
 80020f2:	4a13      	ldr	r2, [pc, #76]	@ (8002140 <MX_CRC_Init+0x54>)
 80020f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <MX_CRC_Init+0x50>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <MX_CRC_Init+0x50>)
 80020fe:	2201      	movs	r2, #1
 8002100:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <MX_CRC_Init+0x50>)
 8002104:	f241 0221 	movw	r2, #4129	@ 0x1021
 8002108:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <MX_CRC_Init+0x50>)
 800210c:	2208      	movs	r2, #8
 800210e:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002110:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <MX_CRC_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <MX_CRC_Init+0x50>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800211c:	4b07      	ldr	r3, [pc, #28]	@ (800213c <MX_CRC_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <MX_CRC_Init+0x50>)
 8002124:	2201      	movs	r2, #1
 8002126:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002128:	4804      	ldr	r0, [pc, #16]	@ (800213c <MX_CRC_Init+0x50>)
 800212a:	f003 ff11 	bl	8005f50 <HAL_CRC_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002134:	f000 fb80 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000018c 	.word	0x2000018c
 8002140:	40023000 	.word	0x40023000

08002144 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	@ 0x30
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2230      	movs	r2, #48	@ 0x30
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f00a fa47 	bl	800c5e4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002156:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_DAC1_Init+0x6c>)
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <MX_DAC1_Init+0x70>)
 800215a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800215c:	4814      	ldr	r0, [pc, #80]	@ (80021b0 <MX_DAC1_Init+0x6c>)
 800215e:	f004 f8fd 	bl	800635c <HAL_DAC_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002168:	f000 fb66 	bl	8002838 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800216c:	2302      	movs	r3, #2
 800216e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002184:	2302      	movs	r3, #2
 8002186:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <MX_DAC1_Init+0x6c>)
 8002198:	f004 f902 	bl	80063a0 <HAL_DAC_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80021a2:	f000 fb49 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	@ 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001b0 	.word	0x200001b0
 80021b4:	50000800 	.word	0x50000800

080021b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <MX_I2C1_Init+0x74>)
 80021be:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <MX_I2C1_Init+0x78>)
 80021c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <MX_I2C1_Init+0x74>)
 80021c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002234 <MX_I2C1_Init+0x7c>)
 80021c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <MX_I2C1_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <MX_I2C1_Init+0x74>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <MX_I2C1_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <MX_I2C1_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <MX_I2C1_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <MX_I2C1_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <MX_I2C1_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f2:	480e      	ldr	r0, [pc, #56]	@ (800222c <MX_I2C1_Init+0x74>)
 80021f4:	f004 ff70 	bl	80070d8 <HAL_I2C_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021fe:	f000 fb1b 	bl	8002838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002202:	2100      	movs	r1, #0
 8002204:	4809      	ldr	r0, [pc, #36]	@ (800222c <MX_I2C1_Init+0x74>)
 8002206:	f005 f802 	bl	800720e <HAL_I2CEx_ConfigAnalogFilter>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002210:	f000 fb12 	bl	8002838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_I2C1_Init+0x74>)
 8002218:	f005 f844 	bl	80072a4 <HAL_I2CEx_ConfigDigitalFilter>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002222:	f000 fb09 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001c4 	.word	0x200001c4
 8002230:	40005400 	.word	0x40005400
 8002234:	10e32879 	.word	0x10e32879

08002238 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <MX_SPI3_Init+0x74>)
 800223e:	4a1c      	ldr	r2, [pc, #112]	@ (80022b0 <MX_SPI3_Init+0x78>)
 8002240:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002248:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <MX_SPI3_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002252:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002256:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_SPI3_Init+0x74>)
 800225a:	2202      	movs	r2, #2
 800225c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <MX_SPI3_Init+0x74>)
 800226e:	2218      	movs	r2, #24
 8002270:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <MX_SPI3_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002286:	2207      	movs	r2, #7
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <MX_SPI3_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002292:	2208      	movs	r2, #8
 8002294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <MX_SPI3_Init+0x74>)
 8002298:	f006 f8c6 	bl	8008428 <HAL_SPI_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f000 fac9 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000218 	.word	0x20000218
 80022b0:	40003c00 	.word	0x40003c00

080022b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 80022e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e8:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022f4:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b28      	ldr	r3, [pc, #160]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002308:	4826      	ldr	r0, [pc, #152]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 800230a:	f006 fc11 	bl	8008b30 <HAL_TIM_Base_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002314:	f000 fa90 	bl	8002838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800231e:	f107 0320 	add.w	r3, r7, #32
 8002322:	4619      	mov	r1, r3
 8002324:	481f      	ldr	r0, [pc, #124]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 8002326:	f006 fdef 	bl	8008f08 <HAL_TIM_ConfigClockSource>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002330:	f000 fa82 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002334:	481b      	ldr	r0, [pc, #108]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 8002336:	f006 fcea 	bl	8008d0e <HAL_TIM_IC_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002340:	f000 fa7a 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	4814      	ldr	r0, [pc, #80]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 8002354:	f007 f968 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800235e:	f000 fa6b 	bl	8002838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002366:	2301      	movs	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 800237a:	f006 fd29 	bl	8008dd0 <HAL_TIM_IC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002384:	f000 fa58 	bl	8002838 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8002388:	2200      	movs	r2, #0
 800238a:	2103      	movs	r1, #3
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <MX_TIM2_Init+0xf0>)
 800238e:	f007 f9e1 	bl	8009754 <HAL_TIMEx_TISelection>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002398:	f000 fa4e 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	@ 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000027c 	.word	0x2000027c

080023a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <MX_TIM3_Init+0x94>)
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <MX_TIM3_Init+0x98>)
 80023ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <MX_TIM3_Init+0x94>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <MX_TIM3_Init+0x94>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023d8:	4b18      	ldr	r3, [pc, #96]	@ (800243c <MX_TIM3_Init+0x94>)
 80023da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_TIM3_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <MX_TIM3_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ec:	4813      	ldr	r0, [pc, #76]	@ (800243c <MX_TIM3_Init+0x94>)
 80023ee:	f006 fb9f 	bl	8008b30 <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023f8:	f000 fa1e 	bl	8002838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4619      	mov	r1, r3
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <MX_TIM3_Init+0x94>)
 800240a:	f006 fd7d 	bl	8008f08 <HAL_TIM_ConfigClockSource>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002414:	f000 fa10 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_TIM3_Init+0x94>)
 8002426:	f007 f8ff 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002430:	f000 fa02 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002c8 	.word	0x200002c8
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_TIM6_Init+0x64>)
 8002456:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <MX_TIM6_Init+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <MX_TIM6_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <MX_TIM6_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <MX_TIM6_Init+0x64>)
 8002468:	2295      	movs	r2, #149	@ 0x95
 800246a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_TIM6_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002472:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <MX_TIM6_Init+0x64>)
 8002474:	f006 fb5c 	bl	8008b30 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800247e:	f000 f9db 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002482:	2320      	movs	r3, #32
 8002484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <MX_TIM6_Init+0x64>)
 8002490:	f007 f8ca 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800249a:	f000 f9cd 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000314 	.word	0x20000314
 80024ac:	40001000 	.word	0x40001000

080024b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024c0:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <MX_TIM7_Init+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024e0:	480c      	ldr	r0, [pc, #48]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024e2:	f006 fb25 	bl	8008b30 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80024ec:	f000 f9a4 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	@ (8002514 <MX_TIM7_Init+0x64>)
 80024fe:	f007 f893 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002508:	f000 f996 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000360 	.word	0x20000360
 8002518:	40001400 	.word	0x40001400

0800251c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800253a:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <MX_TIM15_Init+0xa0>)
 800253e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 800254e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002552:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800255a:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002560:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002566:	4814      	ldr	r0, [pc, #80]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002568:	f006 fae2 	bl	8008b30 <HAL_TIM_Base_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002572:	f000 f961 	bl	8002838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4619      	mov	r1, r3
 8002582:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 8002584:	f006 fcc0 	bl	8008f08 <HAL_TIM_ConfigClockSource>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800258e:	f000 f953 	bl	8002838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002592:	2320      	movs	r3, #32
 8002594:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4806      	ldr	r0, [pc, #24]	@ (80025b8 <MX_TIM15_Init+0x9c>)
 80025a0:	f007 f842 	bl	8009628 <HAL_TIMEx_MasterConfigSynchronization>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80025aa:	f000 f945 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200003ac 	.word	0x200003ac
 80025bc:	40014000 	.word	0x40014000

080025c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025c4:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025c6:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <MX_USART2_UART_Init+0x94>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ca:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002602:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002608:	4811      	ldr	r0, [pc, #68]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 800260a:	f007 f931 	bl	8009870 <HAL_UART_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002614:	f000 f910 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002618:	2100      	movs	r1, #0
 800261a:	480d      	ldr	r0, [pc, #52]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 800261c:	f008 fc72 	bl	800af04 <HAL_UARTEx_SetTxFifoThreshold>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002626:	f000 f907 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800262a:	2100      	movs	r1, #0
 800262c:	4808      	ldr	r0, [pc, #32]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 800262e:	f008 fca7 	bl	800af80 <HAL_UARTEx_SetRxFifoThreshold>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002638:	f000 f8fe 	bl	8002838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <MX_USART2_UART_Init+0x90>)
 800263e:	f008 fc28 	bl	800ae92 <HAL_UARTEx_DisableFifoMode>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002648:	f000 f8f6 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000458 	.word	0x20000458
 8002654:	40004400 	.word	0x40004400

08002658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002662:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6493      	str	r3, [r2, #72]	@ 0x48
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <MX_DMA_Init+0x88>)
 800266c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267a:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <MX_DMA_Init+0x88>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6493      	str	r3, [r2, #72]	@ 0x48
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268e:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002692:	4a13      	ldr	r2, [pc, #76]	@ (80026e0 <MX_DMA_Init+0x88>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6493      	str	r3, [r2, #72]	@ 0x48
 800269a:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <MX_DMA_Init+0x88>)
 800269c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	200b      	movs	r0, #11
 80026ac:	f003 fc1b 	bl	8005ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026b0:	200b      	movs	r0, #11
 80026b2:	f003 fc32 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	200c      	movs	r0, #12
 80026bc:	f003 fc13 	bl	8005ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026c0:	200c      	movs	r0, #12
 80026c2:	f003 fc2a 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2063      	movs	r0, #99	@ 0x63
 80026cc:	f003 fc0b 	bl	8005ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 80026d0:	2063      	movs	r0, #99	@ 0x63
 80026d2:	f003 fc22 	bl	8005f1a <HAL_NVIC_EnableIRQ>

}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <MX_GPIO_Init+0x148>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	4a4b      	ldr	r2, [pc, #300]	@ (800282c <MX_GPIO_Init+0x148>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002706:	4b49      	ldr	r3, [pc, #292]	@ (800282c <MX_GPIO_Init+0x148>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002712:	4b46      	ldr	r3, [pc, #280]	@ (800282c <MX_GPIO_Init+0x148>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	4a45      	ldr	r2, [pc, #276]	@ (800282c <MX_GPIO_Init+0x148>)
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271e:	4b43      	ldr	r3, [pc, #268]	@ (800282c <MX_GPIO_Init+0x148>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b40      	ldr	r3, [pc, #256]	@ (800282c <MX_GPIO_Init+0x148>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	4a3f      	ldr	r2, [pc, #252]	@ (800282c <MX_GPIO_Init+0x148>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <MX_GPIO_Init+0x148>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <MX_GPIO_Init+0x148>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002746:	4a39      	ldr	r2, [pc, #228]	@ (800282c <MX_GPIO_Init+0x148>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <MX_GPIO_Init+0x148>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	2101      	movs	r1, #1
 800275e:	4834      	ldr	r0, [pc, #208]	@ (8002830 <MX_GPIO_Init+0x14c>)
 8002760:	f004 fca2 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_EN_Pin|AD9834_EN_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800276a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276e:	f004 fc9b 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002778:	482e      	ldr	r0, [pc, #184]	@ (8002834 <MX_GPIO_Init+0x150>)
 800277a:	f004 fc95 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002784:	482b      	ldr	r0, [pc, #172]	@ (8002834 <MX_GPIO_Init+0x150>)
 8002786:	f004 fc8f 	bl	80070a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UI_SW3_Pin */
  GPIO_InitStruct.Pin = UI_SW3_Pin;
 800278a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002794:	2301      	movs	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW3_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	4824      	ldr	r0, [pc, #144]	@ (8002830 <MX_GPIO_Init+0x14c>)
 80027a0:	f004 fae8 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : con_Pin */
  GPIO_InitStruct.Pin = con_Pin;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	481d      	ldr	r0, [pc, #116]	@ (8002830 <MX_GPIO_Init+0x14c>)
 80027bc:	f004 fada 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e0:	f004 fac8 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_EN_Pin AD9834_EN_Pin */
  GPIO_InitStruct.Pin = AD9833_EN_Pin|AD9834_EN_Pin;
 80027e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002800:	f004 fab8 	bl	8006d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8002804:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_GPIO_Init+0x150>)
 800281e:	f004 faa9 	bl	8006d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	@ 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800
 8002834:	48000400 	.word	0x48000400

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <Error_Handler+0x8>

08002844 <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01b      	beq.n	8002896 <make_8to16+0x52>
		return 0;
 800285e:	2300      	movs	r3, #0
 8002860:	e01f      	b.n	80028a2 <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b21a      	sxth	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	3301      	adds	r3, #1
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	440b      	add	r3, r1
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b21b      	sxth	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	b219      	sxth	r1, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	b28a      	uxth	r2, r1
 800288e:	801a      	strh	r2, [r3, #0]
		++i;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	085a      	lsrs	r2, r3, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8e0      	bhi.n	8002862 <make_8to16+0x1e>
	}
	return new_buffer;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f006 f98e 	bl	8008be0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f001 fe49 	bl	8004560 <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <samp+0x38>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 80028d4:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <samp+0x38>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d000      	beq.n	80028de <samp+0x2e>
 80028dc:	e7fa      	b.n	80028d4 <samp+0x24>
    		break;
 80028de:	bf00      	nop
    }
    return;
 80028e0:	bf00      	nop
}
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20001d50 	.word	0x20001d50

080028ec <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <set_sm_freq+0x38>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
	if (set <38)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b25      	cmp	r3, #37	@ 0x25
 8002908:	d801      	bhi.n	800290e <set_sm_freq+0x22>
		set = 38;
 800290a:	2326      	movs	r3, #38	@ 0x26
 800290c:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e011      	b.n	800295c <int_to_float+0x34>
		fft_in[i] = buffer[i];
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	8819      	ldrh	r1, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	ee07 1a90 	vmov	s15, r1
 800294e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002952:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002962:	d1e9      	bne.n	8002938 <int_to_float+0x10>
	}
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b08a      	sub	sp, #40	@ 0x28
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f008 fbdc 	bl	800b140 <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 8002988:	f107 0010 	add.w	r0, r7, #16
 800298c:	2300      	movs	r3, #0
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	f008 fca3 	bl	800b2dc <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 8002996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	f009 f87b 	bl	800ba98 <arm_cmplx_mag_f32>
}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_MspInit+0x44>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	4a0e      	ldr	r2, [pc, #56]	@ (80029f0 <HAL_MspInit+0x44>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <HAL_MspInit+0x44>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_MspInit+0x44>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <HAL_MspInit+0x44>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_MspInit+0x44>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029e2:	f004 fd4f 	bl	8007484 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b09e      	sub	sp, #120	@ 0x78
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	2254      	movs	r2, #84	@ 0x54
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f009 fde5 	bl	800c5e4 <memset>
  if(hadc->Instance==ADC1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a22:	d15f      	bne.n	8002ae4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002a2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 faa9 	bl	8007f8c <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002a40:	f7ff fefa 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a44:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a50:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a68:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_ADC_MspInit+0xf8>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a74:	2301      	movs	r3, #1
 8002a76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a84:	4619      	mov	r1, r3
 8002a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a8a:	f004 f973 	bl	8006d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002a90:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <HAL_ADC_MspInit+0x100>)
 8002a92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002a96:	2205      	movs	r2, #5
 8002a98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002aa8:	2280      	movs	r2, #128	@ 0x80
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac8:	4809      	ldr	r0, [pc, #36]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002aca:	f003 fe21 	bl	8006710 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002ad4:	f7ff feb0 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <HAL_ADC_MspInit+0xfc>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3778      	adds	r7, #120	@ 0x78
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	20000108 	.word	0x20000108
 8002af4:	40020008 	.word	0x40020008

08002af8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	@ (8002b8c <HAL_COMP_MspInit+0x94>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d134      	bne.n	8002b84 <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	4a16      	ldr	r2, [pc, #88]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_COMP_MspInit+0x98>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	480b      	ldr	r0, [pc, #44]	@ (8002b94 <HAL_COMP_MspInit+0x9c>)
 8002b66:	f004 f905 	bl	8006d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b80:	f004 f8f8 	bl	8006d74 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	@ 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40010208 	.word	0x40010208
 8002b90:	40021000 	.word	0x40021000
 8002b94:	48000800 	.word	0x48000800

08002b98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_CRC_MspInit+0x38>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_CRC_MspInit+0x3c>)
 8002bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bae:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <HAL_CRC_MspInit+0x3c>)
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_CRC_MspInit+0x3c>)
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023000 	.word	0x40023000
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <HAL_DAC_MspInit+0x38>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10b      	bne.n	8002c02 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_DAC_MspInit+0x3c>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <HAL_DAC_MspInit+0x3c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <HAL_DAC_MspInit+0x3c>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	50000800 	.word	0x50000800
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0a0      	sub	sp, #128	@ 0x80
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	2254      	movs	r2, #84	@ 0x54
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f009 fcd3 	bl	800c5e4 <memset>
  if(hi2c->Instance==I2C1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf8 <HAL_I2C_MspInit+0xe0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d153      	bne.n	8002cf0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c48:	2340      	movs	r3, #64	@ 0x40
 8002c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 f999 	bl	8007f8c <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c60:	f7ff fdea 	bl	8002838 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c70:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c80:	4a1e      	ldr	r2, [pc, #120]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c88:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9a:	2312      	movs	r3, #18
 8002c9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb4:	f004 f85e 	bl	8006d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480b      	ldr	r0, [pc, #44]	@ (8002d00 <HAL_I2C_MspInit+0xe8>)
 8002cd4:	f004 f84e 	bl	8006d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002cde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3780      	adds	r7, #128	@ 0x80
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	48000400 	.word	0x48000400

08002d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_SPI_MspInit+0x7c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d128      	bne.n	8002d78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d26:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d32:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	4a10      	ldr	r2, [pc, #64]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002d56:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d68:	2306      	movs	r3, #6
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <HAL_SPI_MspInit+0x84>)
 8002d74:	f003 fffe 	bl	8006d74 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002d78:	bf00      	nop
 8002d7a:	3728      	adds	r7, #40	@ 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40003c00 	.word	0x40003c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	48000800 	.word	0x48000800

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9c:	d138      	bne.n	8002e10 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9e:	4b42      	ldr	r3, [pc, #264]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	4a41      	ldr	r2, [pc, #260]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002daa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8002db6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002db8:	4a3d      	ldr	r2, [pc, #244]	@ (8002eb0 <HAL_TIM_Base_MspInit+0x124>)
 8002dba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dbe:	2238      	movs	r2, #56	@ 0x38
 8002dc0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc8:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dd4:	4b35      	ldr	r3, [pc, #212]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dda:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ddc:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002de2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002dea:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002df2:	482e      	ldr	r0, [pc, #184]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002df4:	f003 fc8c 	bl	8006710 <HAL_DMA_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002dfe:	f7ff fd1b 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a29      	ldr	r2, [pc, #164]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002e0e:	e046      	b.n	8002e9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x128>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
}
 8002e32:	e034      	b.n	8002e9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM6)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x12c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10c      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e44:	f043 0310 	orr.w	r3, r3, #16
 8002e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
}
 8002e56:	e022      	b.n	8002e9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM7)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <HAL_TIM_Base_MspInit+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10c      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
}
 8002e7a:	e010      	b.n	8002e9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x134>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10b      	bne.n	8002e9e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	200003f8 	.word	0x200003f8
 8002eb0:	4002001c 	.word	0x4002001c
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40001000 	.word	0x40001000
 8002ebc:	40001400 	.word	0x40001400
 8002ec0:	40014000 	.word	0x40014000

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b09e      	sub	sp, #120	@ 0x78
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	2254      	movs	r2, #84	@ 0x54
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f009 fb7d 	bl	800c5e4 <memset>
  if(huart->Instance==USART2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_UART_MspInit+0x108>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d167      	bne.n	8002fc4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 f843 	bl	8007f8c <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f0c:	f7ff fc94 	bl	8002838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f10:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f40:	2318      	movs	r3, #24
 8002f42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f50:	2307      	movs	r3, #7
 8002f52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f58:	4619      	mov	r1, r3
 8002f5a:	481e      	ldr	r0, [pc, #120]	@ (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f5c:	f003 ff0a 	bl	8006d74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_UART_MspInit+0x118>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f68:	221a      	movs	r2, #26
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f7e:	4b16      	ldr	r3, [pc, #88]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f96:	4810      	ldr	r0, [pc, #64]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f98:	f003 fbba 	bl	8006710 <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002fa2:	f7ff fc49 	bl	8002838 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fae:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <HAL_UART_MspInit+0x114>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	210e      	movs	r1, #14
 8002fb8:	2026      	movs	r0, #38	@ 0x26
 8002fba:	f002 ff94 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fbe:	2026      	movs	r0, #38	@ 0x26
 8002fc0:	f002 ffab 	bl	8005f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fc4:	bf00      	nop
 8002fc6:	3778      	adds	r7, #120	@ 0x78
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	48000400 	.word	0x48000400
 8002fd8:	200004ec 	.word	0x200004ec
 8002fdc:	40020494 	.word	0x40020494

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <NMI_Handler+0x4>

08002fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <UsageFault_Handler+0x4>

08003008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003036:	f000 fe4d 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003044:	4802      	ldr	r0, [pc, #8]	@ (8003050 <DMA1_Channel1_IRQHandler+0x10>)
 8003046:	f003 fd46 	bl	8006ad6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000108 	.word	0x20000108

08003054 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003058:	4802      	ldr	r0, [pc, #8]	@ (8003064 <DMA1_Channel2_IRQHandler+0x10>)
 800305a:	f003 fd3c 	bl	8006ad6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200003f8 	.word	0x200003f8

08003068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <USART2_IRQHandler+0x10>)
 800306e:	f006 fc4f 	bl	8009910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000458 	.word	0x20000458

0800307c <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <DMA2_Channel8_IRQHandler+0x10>)
 8003082:	f003 fd28 	bl	8006ad6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200004ec 	.word	0x200004ec

08003090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_kill>:

int _kill(int pid, int sig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030aa:	f009 faf7 	bl	800c69c <__errno>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2216      	movs	r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
  return -1;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_exit>:

void _exit (int status)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffe7 	bl	80030a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <_exit+0x12>
	...

080030d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <_sbrk+0x5c>)
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <_sbrk+0x60>)
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030ec:	4b13      	ldr	r3, [pc, #76]	@ (800313c <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <_sbrk+0x64>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <_sbrk+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d207      	bcs.n	8003118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003108:	f009 fac8 	bl	800c69c <__errno>
 800310c:	4603      	mov	r3, r0
 800310e:	220c      	movs	r2, #12
 8003110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e009      	b.n	800312c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003118:	4b08      	ldr	r3, [pc, #32]	@ (800313c <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	4a05      	ldr	r2, [pc, #20]	@ (800313c <_sbrk+0x64>)
 8003128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20020000 	.word	0x20020000
 8003138:	00000400 	.word	0x00000400
 800313c:	20001d54 	.word	0x20001d54
 8003140:	200020c8 	.word	0x200020c8

08003144 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <SystemInit+0x20>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	4a05      	ldr	r2, [pc, #20]	@ (8003164 <SystemInit+0x20>)
 8003150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	701a      	strb	r2, [r3, #0]
      }
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f805 	bl	80031a4 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
    }
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f940 	bl	800345e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f91e 	bl	8003434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ffeb 	bl	80031e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b090      	sub	sp, #64	@ 0x40
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b07      	cmp	r3, #7
 800322e:	dc02      	bgt.n	8003236 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295
 8003234:	e0aa      	b.n	800338c <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b55      	cmp	r3, #85	@ 0x55
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <_ZL12uart_managerPhS_+0x36>
    return -1;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	e09c      	b.n	800338c <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2ba5      	cmp	r3, #165	@ 0xa5
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <_ZL12uart_managerPhS_+0x52>
    return -1;
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	e08e      	b.n	800338c <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003284:	4413      	add	r3, r2
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	3302      	adds	r3, #2
 8003290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003292:	429a      	cmp	r2, r3
 8003294:	dc02      	bgt.n	800329c <_ZL12uart_managerPhS_+0x80>
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	2b01      	cmp	r3, #1
 800329a:	dc02      	bgt.n	80032a2 <_ZL12uart_managerPhS_+0x86>
    return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	e074      	b.n	800338c <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ae:	3301      	adds	r3, #1
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	440b      	add	r3, r1
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 80032bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032be:	461a      	mov	r2, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4834      	ldr	r0, [pc, #208]	@ (8003394 <_ZL12uart_managerPhS_+0x178>)
 80032c4:	f002 fea8 	bl	8006018 <HAL_CRC_Calculate>
 80032c8:	4603      	mov	r3, r0
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 80032cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d002      	beq.n	80032da <_ZL12uart_managerPhS_+0xbe>
    return -1;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	e058      	b.n	800338c <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	603b      	str	r3, [r7, #0]
  auto p = begin;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 80032e6:	e006      	b.n	80032f6 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 80032e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80032ee:	d007      	beq.n	8003300 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 80032f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f2:	3301      	adds	r3, #1
 80032f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d1f4      	bne.n	80032e8 <_ZL12uart_managerPhS_+0xcc>
 80032fe:	e000      	b.n	8003302 <_ZL12uart_managerPhS_+0xe6>
      break;
 8003300:	bf00      	nop
  }

  if (p != end)
 8003302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d03e      	beq.n	8003388 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 800330a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800330e:	4618      	mov	r0, r3
 8003310:	f009 f803 	bl	800c31a <_ZNSaIcEC1Ev>
 8003314:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003318:	f107 0010 	add.w	r0, r7, #16
 800331c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	f000 f8be 	bl	80034a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8003324:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003328:	4618      	mov	r0, r3
 800332a:	f008 fff7 	bl	800c31c <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	4619      	mov	r1, r3
 8003334:	4818      	ldr	r0, [pc, #96]	@ (8003398 <_ZL12uart_managerPhS_+0x17c>)
 8003336:	f000 f8d8 	bl	80034ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 800333a:	4603      	mov	r3, r0
 800333c:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 800333e:	4816      	ldr	r0, [pc, #88]	@ (8003398 <_ZL12uart_managerPhS_+0x17c>)
 8003340:	f000 f8e2 	bl	8003508 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8003344:	4603      	mov	r3, r0
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003348:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f8e5 	bl	8003522 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003360:	3301      	adds	r3, #1
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f8ee 	bl	800354a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 800336e:	4603      	mov	r3, r0
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	6839      	ldr	r1, [r7, #0]
 8003374:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003376:	1a8a      	subs	r2, r1, r2
 8003378:	4611      	mov	r1, r2
 800337a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800337c:	4798      	blx	r3
    }
  }
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f009 f817 	bl	800c3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8003388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338a:	3306      	adds	r3, #6
}
 800338c:	4618      	mov	r0, r3
 800338e:	3740      	adds	r7, #64	@ 0x40
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	2000018c 	.word	0x2000018c
 8003398:	20001f60 	.word	0x20001f60

0800339c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_UARTEx_RxEventCallback+0x58>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11b      	bne.n	80033ea <HAL_UARTEx_RxEventCallback+0x4e>
    return;
  auto end = rx_buf + Size;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80033b6:	4413      	add	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e00b      	b.n	80033d8 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff2a 	bl	800321c <_ZL12uart_managerPhS_>
 80033c8:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	db08      	blt.n	80033e2 <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4413      	add	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3ef      	bcc.n	80033c0 <HAL_UARTEx_RxEventCallback+0x24>
 80033e0:	e000      	b.n	80033e4 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 80033e2:	bf00      	nop
  }

  uart_receive_start();
 80033e4:	f000 f80a 	bl	80033fc <_ZL18uart_receive_startv>
 80033e8:	e000      	b.n	80033ec <HAL_UARTEx_RxEventCallback+0x50>
    return;
 80033ea:	bf00      	nop
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000008 	.word	0x20000008
 80033f8:	20001d58 	.word	0x20001d58

080033fc <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <_ZL18uart_receive_startv+0x2c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8003408:	4908      	ldr	r1, [pc, #32]	@ (800342c <_ZL18uart_receive_startv+0x30>)
 800340a:	4618      	mov	r0, r3
 800340c:	f007 fdf6 	bl	800affc <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8003410:	4b07      	ldr	r3, [pc, #28]	@ (8003430 <_ZL18uart_receive_startv+0x34>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <_ZL18uart_receive_startv+0x34>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0204 	bic.w	r2, r2, #4
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000008 	.word	0x20000008
 800342c:	20001d58 	.word	0x20001d58
 8003430:	2000000c 	.word	0x2000000c

08003434 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f892 	bl	8003566 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f89a 	bl	800357e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fe99 	bl	8003186 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f894 	bl	8003594 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8b3 	bl	80035ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8003484:	4603      	mov	r3, r0
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f88e 	bl	80035aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe9d 	bl	80031d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 80034ae:	68fc      	ldr	r4, [r7, #12]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f008 ff43 	bl	800c33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	4620      	mov	r0, r4
 80034be:	f008 ff8e 	bl	800c3de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 80034c8:	68bc      	ldr	r4, [r7, #8]
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f8ba 	bl	8003648 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80034d4:	462b      	mov	r3, r5
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4621      	mov	r1, r4
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8e0 	bl	80036a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bdb0      	pop	{r4, r5, r7, pc}

080034ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6839      	ldr	r1, [r7, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f917 	bl	800372c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f946 	bl	80037a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8003518:	4603      	mov	r3, r0
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f935 	bl	80037c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800355c:	4603      	mov	r3, r0
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f937 	bl	80037e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
      { }
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80035b4:	e011      	b.n	80035da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f000 f91e 	bl	80037f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80035bc:	4603      	mov	r3, r0
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fff2 	bl	80035aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f000 f922 	bl	8003810 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80035cc:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f929 	bl	8003828 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ea      	bne.n	80035b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f929 	bl	800384a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	68b8      	ldr	r0, [r7, #8]
 800363a:	f000 f912 	bl	8003862 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800363e:	4603      	mov	r3, r0
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003650:	bf00      	nop
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f008 fe85 	bl	800c3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68b8      	ldr	r0, [r7, #8]
 80036b2:	f000 f8f5 	bl	80038a0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80036b6:	4603      	mov	r3, r0
 80036b8:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	d911      	bls.n	80036e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	2200      	movs	r2, #0
 80036c6:	4619      	mov	r1, r3
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f008 fe47 	bl	800c35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4619      	mov	r1, r3
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f008 fe2e 	bl	800c334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4619      	mov	r1, r3
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f008 fe2f 	bl	800c340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80036e2:	e005      	b.n	80036f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80036e8:	69f8      	ldr	r0, [r7, #28]
 80036ea:	f008 fe27 	bl	800c33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80036ee:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ffb1 	bl	800365e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f008 fe1b 	bl	800c338 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003702:	4603      	mov	r3, r0
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8dd 	bl	80038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4619      	mov	r1, r3
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f008 fe14 	bl	800c344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ffab 	bl	800367c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ff57 	bl	80035ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800373c:	4604      	mov	r4, r0
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8e1 	bl	8003906 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8003744:	4602      	mov	r2, r0
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	4621      	mov	r1, r4
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8e7 	bl	800391e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8003750:	4603      	mov	r3, r0
 8003752:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f825 	bl	80037a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800375a:	4603      	mov	r3, r0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	f107 020c 	add.w	r2, r7, #12
 8003762:	f107 0308 	add.w	r3, r7, #8
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff4a 	bl	8003602 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 800376e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10d      	bne.n	8003790 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8003774:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8003776:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f901 	bl	8003980 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff ff50 	bl	800362a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f807 	bl	80037a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8003796:	4603      	mov	r3, r0
 8003798:	e000      	b.n	800379c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 800379a:	68bb      	ldr	r3, [r7, #8]
    }
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}

080037a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f863 	bl	8003882 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3310      	adds	r3, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f8e0 	bl	8003998 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80037d8:	4603      	mov	r3, r0
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8bb 	bl	80039b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8cc 	bl	80039da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f008 fda7 	bl	800c3c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8003874:	4603      	mov	r3, r0
 8003876:	0fdb      	lsrs	r3, r3, #31
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80038aa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff feca 	bl	8003648 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80038b4:	462a      	mov	r2, r5
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 f8b3 	bl	8003a24 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80038be:	4603      	mov	r3, r0
    }
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bdb0      	pop	{r4, r5, r7, pc}

080038c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80038d4:	e00e      	b.n	80038f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	75fb      	strb	r3, [r7, #23]
 80038dc:	f107 0317 	add.w	r3, r7, #23
 80038e0:	4619      	mov	r1, r3
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fc40 	bl	8003168 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1ec      	bne.n	80038d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800391e:	b590      	push	{r4, r7, lr}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800392c:	e01a      	b.n	8003964 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800392e:	68fc      	ldr	r4, [r7, #12]
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f000 f864 	bl	80039fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8003936:	4603      	mov	r3, r0
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4620      	mov	r0, r4
 800393e:	f7ff fe74 	bl	800362a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003942:	4603      	mov	r3, r0
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f7ff ff5c 	bl	8003810 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003958:	60b8      	str	r0, [r7, #8]
 800395a:	e003      	b.n	8003964 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 800395c:	68b8      	ldr	r0, [r7, #8]
 800395e:	f7ff ff4b 	bl	80037f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003962:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e1      	bne.n	800392e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff86 	bl	8003882 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8003976:	697b      	ldr	r3, [r7, #20]
    }
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f838 	bl	80039fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800398e:	4603      	mov	r3, r0
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f84e 	bl	8003a42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f84c 	bl	8003a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80039c0:	4604      	mov	r4, r0
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	f7ff feff 	bl	80037c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4619      	mov	r1, r3
 80039cc:	4620      	mov	r0, r4
 80039ce:	f000 f84e 	bl	8003a6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd90      	pop	{r4, r7, pc}

080039da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f837 	bl	8003a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2201      	movs	r2, #1
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f849 	bl	8003a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f84d 	bl	8003aa6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f854 	bl	8003ac2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 8003a1a:	4603      	mov	r3, r0
      }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
    }
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f83a 	bl	8003af4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f837 	bl	8003b0c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f83c 	bl	8003b30 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f008 fc66 	bl	800c3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003afe:	6838      	ldr	r0, [r7, #0]
 8003b00:	f7ff ffeb 	bl	8003ada <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	222c      	movs	r2, #44	@ 0x2c
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f008 fbe6 	bl	800c2f4 <_ZdlPvj>
      }
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f805 	bl	8003b48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fc84 	bl	8003476 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d102      	bne.n	8003b98 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 8003b92:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003b94:	f7ff fb35 	bl	8003202 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d102      	bne.n	8003bae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003ba8:	4803      	ldr	r0, [pc, #12]	@ (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003baa:	f7ff ffd8 	bl	8003b5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001f60 	.word	0x20001f60

08003bbc <_GLOBAL__sub_I_huart_reg>:
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7ff ffd7 	bl	8003b78 <_Z41__static_initialization_and_destruction_0ii>
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_GLOBAL__sub_D_huart_reg>:
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f7ff ffcf 	bl	8003b78 <_Z41__static_initialization_and_destruction_0ii>
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <Reset_Handler>:
 8003bdc:	480d      	ldr	r0, [pc, #52]	@ (8003c14 <LoopForever+0x2>)
 8003bde:	4685      	mov	sp, r0
 8003be0:	f7ff fab0 	bl	8003144 <SystemInit>
 8003be4:	480c      	ldr	r0, [pc, #48]	@ (8003c18 <LoopForever+0x6>)
 8003be6:	490d      	ldr	r1, [pc, #52]	@ (8003c1c <LoopForever+0xa>)
 8003be8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <LoopForever+0xe>)
 8003bea:	2300      	movs	r3, #0
 8003bec:	e002      	b.n	8003bf4 <LoopCopyDataInit>

08003bee <CopyDataInit>:
 8003bee:	58d4      	ldr	r4, [r2, r3]
 8003bf0:	50c4      	str	r4, [r0, r3]
 8003bf2:	3304      	adds	r3, #4

08003bf4 <LoopCopyDataInit>:
 8003bf4:	18c4      	adds	r4, r0, r3
 8003bf6:	428c      	cmp	r4, r1
 8003bf8:	d3f9      	bcc.n	8003bee <CopyDataInit>
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <LoopForever+0x12>)
 8003bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8003c28 <LoopForever+0x16>)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e001      	b.n	8003c06 <LoopFillZerobss>

08003c02 <FillZerobss>:
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	3204      	adds	r2, #4

08003c06 <LoopFillZerobss>:
 8003c06:	42a2      	cmp	r2, r4
 8003c08:	d3fb      	bcc.n	8003c02 <FillZerobss>
 8003c0a:	f008 fd4d 	bl	800c6a8 <__libc_init_array>
 8003c0e:	f7fd fbbf 	bl	8001390 <main>

08003c12 <LoopForever>:
 8003c12:	e7fe      	b.n	8003c12 <LoopForever>
 8003c14:	20020000 	.word	0x20020000
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	20000068 	.word	0x20000068
 8003c20:	0800f398 	.word	0x0800f398
 8003c24:	20000068 	.word	0x20000068
 8003c28:	200020c8 	.word	0x200020c8

08003c2c <ADC1_2_IRQHandler>:
 8003c2c:	e7fe      	b.n	8003c2c <ADC1_2_IRQHandler>

08003c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f002 f949 	bl	8005ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c3e:	200f      	movs	r0, #15
 8003c40:	f000 f80e 	bl	8003c60 <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	71fb      	strb	r3, [r7, #7]
 8003c4e:	e001      	b.n	8003c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c50:	f7fe feac 	bl	80029ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c54:	79fb      	ldrb	r3, [r7, #7]

}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c6c:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <HAL_InitTick+0x68>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_InitTick+0x6c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <HAL_InitTick+0x68>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 f954 	bl	8005f36 <HAL_SYSTICK_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	d809      	bhi.n	8003cae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	f002 f920 	bl	8005ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_InitTick+0x70>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e007      	b.n	8003cbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e004      	b.n	8003cbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e001      	b.n	8003cbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000014 	.word	0x20000014
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	20000010 	.word	0x20000010

08003cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_IncTick+0x1c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_IncTick+0x20>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a03      	ldr	r2, [pc, #12]	@ (8003cf0 <HAL_IncTick+0x1c>)
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20001f78 	.word	0x20001f78
 8003cf4:	20000014 	.word	0x20000014

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20001f78 	.word	0x20001f78

08003d10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3360      	adds	r3, #96	@ 0x60
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <LL_ADC_SetOffset+0x44>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	03fff000 	.word	0x03fff000

08003dc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3360      	adds	r3, #96	@ 0x60
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3360      	adds	r3, #96	@ 0x60
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3360      	adds	r3, #96	@ 0x60
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3360      	adds	r3, #96	@ 0x60
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	615a      	str	r2, [r3, #20]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3330      	adds	r3, #48	@ 0x30
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	4413      	add	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	211f      	movs	r1, #31
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	0e9b      	lsrs	r3, r3, #26
 8003f12:	f003 011f 	and.w	r1, r3, #31
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3314      	adds	r3, #20
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	0e5b      	lsrs	r3, r3, #25
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	0d1b      	lsrs	r3, r3, #20
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2107      	movs	r1, #7
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0d1b      	lsrs	r3, r3, #20
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	431a      	orrs	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0318 	and.w	r3, r3, #24
 8003faa:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fac:	40d9      	lsrs	r1, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	0007ffff 	.word	0x0007ffff

08003fd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6093      	str	r3, [r2, #8]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004024:	d101      	bne.n	800402a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800404c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004074:	d101      	bne.n	800407a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040c4:	f043 0202 	orr.w	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <LL_ADC_IsEnabled+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_ADC_IsEnabled+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d101      	bne.n	8004116 <LL_ADC_IsDisableOngoing+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_ADC_IsDisableOngoing+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004138:	f043 0204 	orr.w	r2, r3, #4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800415c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004160:	f043 0210 	orr.w	r2, r3, #16
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d101      	bne.n	800418c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d101      	bne.n	80041da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1a9      	b.n	8004556 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fe fbef 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fef1 	bl	8004010 <LL_ADC_IsDeepPowerDownEnabled>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fed7 	bl	8003fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff0c 	bl	8004060 <LL_ADC_IsInternalRegulatorEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fef0 	bl	8004038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004258:	4b9c      	ldr	r3, [pc, #624]	@ (80044cc <HAL_ADC_Init+0x2e4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	4a9c      	ldr	r2, [pc, #624]	@ (80044d0 <HAL_ADC_Init+0x2e8>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800426c:	e002      	b.n	8004274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b01      	subs	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff feee 	bl	8004060 <LL_ADC_IsInternalRegulatorEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff62 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 80042b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 8142 	bne.w	8004544 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 813e 	bne.w	8004544 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fefb 	bl	80040d8 <LL_ADC_IsEnabled>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d141      	bne.n	800436c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f0:	d004      	beq.n	80042fc <HAL_ADC_Init+0x114>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10f      	bne.n	800431c <HAL_ADC_Init+0x134>
 80042fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004300:	f7ff feea 	bl	80040d8 <LL_ADC_IsEnabled>
 8004304:	4604      	mov	r4, r0
 8004306:	4873      	ldr	r0, [pc, #460]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 8004308:	f7ff fee6 	bl	80040d8 <LL_ADC_IsEnabled>
 800430c:	4603      	mov	r3, r0
 800430e:	4323      	orrs	r3, r4
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e012      	b.n	8004342 <HAL_ADC_Init+0x15a>
 800431c:	486e      	ldr	r0, [pc, #440]	@ (80044d8 <HAL_ADC_Init+0x2f0>)
 800431e:	f7ff fedb 	bl	80040d8 <LL_ADC_IsEnabled>
 8004322:	4604      	mov	r4, r0
 8004324:	486d      	ldr	r0, [pc, #436]	@ (80044dc <HAL_ADC_Init+0x2f4>)
 8004326:	f7ff fed7 	bl	80040d8 <LL_ADC_IsEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	431c      	orrs	r4, r3
 800432e:	486c      	ldr	r0, [pc, #432]	@ (80044e0 <HAL_ADC_Init+0x2f8>)
 8004330:	f7ff fed2 	bl	80040d8 <LL_ADC_IsEnabled>
 8004334:	4603      	mov	r3, r0
 8004336:	4323      	orrs	r3, r4
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d012      	beq.n	800436c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434e:	d004      	beq.n	800435a <HAL_ADC_Init+0x172>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5f      	ldr	r2, [pc, #380]	@ (80044d4 <HAL_ADC_Init+0x2ec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_ADC_Init+0x176>
 800435a:	4a62      	ldr	r2, [pc, #392]	@ (80044e4 <HAL_ADC_Init+0x2fc>)
 800435c:	e000      	b.n	8004360 <HAL_ADC_Init+0x178>
 800435e:	4a62      	ldr	r2, [pc, #392]	@ (80044e8 <HAL_ADC_Init+0x300>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f7ff fcd2 	bl	8003d10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7f5b      	ldrb	r3, [r3, #29]
 8004370:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004376:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800437c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004382:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800438a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	045b      	lsls	r3, r3, #17
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	4b48      	ldr	r3, [pc, #288]	@ (80044ec <HAL_ADC_Init+0x304>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fee5 	bl	80041c2 <LL_ADC_INJ_IsConversionOngoing>
 80043f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d17f      	bne.n	8004500 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d17c      	bne.n	8004500 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800440a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004412:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004422:	f023 0302 	bic.w	r3, r3, #2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	430b      	orrs	r3, r1
 800442e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d017      	beq.n	8004468 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004446:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004450:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6911      	ldr	r1, [r2, #16]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	430b      	orrs	r3, r1
 8004462:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004466:	e013      	b.n	8004490 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004476:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800448c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12a      	bne.n	80044f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044bc:	430a      	orrs	r2, r1
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e019      	b.n	8004500 <HAL_ADC_Init+0x318>
 80044cc:	20000004 	.word	0x20000004
 80044d0:	053e2d63 	.word	0x053e2d63
 80044d4:	50000100 	.word	0x50000100
 80044d8:	50000400 	.word	0x50000400
 80044dc:	50000500 	.word	0x50000500
 80044e0:	50000600 	.word	0x50000600
 80044e4:	50000300 	.word	0x50000300
 80044e8:	50000700 	.word	0x50000700
 80044ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f023 010f 	bic.w	r1, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004520:	e007      	b.n	8004532 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020f 	bic.w	r2, r2, #15
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004542:	e007      	b.n	8004554 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004554:	7ffb      	ldrb	r3, [r7, #31]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	@ 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Start_DMA+0x20>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_ADC_Start_DMA+0x184>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_ADC_Start_DMA+0x24>
 8004580:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_ADC_Start_DMA+0x188>)
 8004582:	e000      	b.n	8004586 <HAL_ADC_Start_DMA+0x26>
 8004584:	4b59      	ldr	r3, [pc, #356]	@ (80046ec <HAL_ADC_Start_DMA+0x18c>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fd22 	bl	8003fd0 <LL_ADC_GetMultimode>
 800458c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fdee 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 809b 	bne.w	80046d6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_Start_DMA+0x4e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e096      	b.n	80046dc <HAL_ADC_Start_DMA+0x17c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4d      	ldr	r2, [pc, #308]	@ (80046f0 <HAL_ADC_Start_DMA+0x190>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d008      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d002      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d17a      	bne.n	80046c8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fe0a 	bl	80051ec <ADC_Enable>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d16d      	bne.n	80046be <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	@ (80046e4 <HAL_ADC_Start_DMA+0x184>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_ADC_Start_DMA+0xb4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3b      	ldr	r2, [pc, #236]	@ (80046f4 <HAL_ADC_Start_DMA+0x194>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d002      	beq.n	8004610 <HAL_ADC_Start_DMA+0xb0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	e003      	b.n	8004618 <HAL_ADC_Start_DMA+0xb8>
 8004610:	4b39      	ldr	r3, [pc, #228]	@ (80046f8 <HAL_ADC_Start_DMA+0x198>)
 8004612:	e001      	b.n	8004618 <HAL_ADC_Start_DMA+0xb8>
 8004614:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	4293      	cmp	r3, r2
 800461e:	d002      	beq.n	8004626 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	f023 0206 	bic.w	r2, r3, #6
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	661a      	str	r2, [r3, #96]	@ 0x60
 800464a:	e002      	b.n	8004652 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <HAL_ADC_Start_DMA+0x19c>)
 8004658:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <HAL_ADC_Start_DMA+0x1a0>)
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	4a27      	ldr	r2, [pc, #156]	@ (8004704 <HAL_ADC_Start_DMA+0x1a4>)
 8004668:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	221c      	movs	r2, #28
 8004670:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0210 	orr.w	r2, r2, #16
 8004688:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3340      	adds	r3, #64	@ 0x40
 80046a4:	4619      	mov	r1, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f002 f8d9 	bl	8006860 <HAL_DMA_Start_IT>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fd34 	bl	8004124 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80046bc:	e00d      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80046c6:	e008      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80046d4:	e001      	b.n	80046da <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	50000100 	.word	0x50000100
 80046e8:	50000300 	.word	0x50000300
 80046ec:	50000700 	.word	0x50000700
 80046f0:	50000600 	.word	0x50000600
 80046f4:	50000500 	.word	0x50000500
 80046f8:	50000400 	.word	0x50000400
 80046fc:	080053d7 	.word	0x080053d7
 8004700:	080054af 	.word	0x080054af
 8004704:	080054cb 	.word	0x080054cb

08004708 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_ADC_Stop_DMA+0x16>
 800471a:	2302      	movs	r3, #2
 800471c:	e051      	b.n	80047c2 <HAL_ADC_Stop_DMA+0xba>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004726:	2103      	movs	r1, #3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fca3 	bl	8005074 <ADC_ConversionStop>
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d13f      	bne.n	80047b8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d10f      	bne.n	8004776 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475a:	4618      	mov	r0, r3
 800475c:	f002 f8fb 	bl	8006956 <HAL_DMA_Abort>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0210 	bic.w	r2, r2, #16
 8004784:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fdc3 	bl	8005318 <ADC_Disable>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e002      	b.n	800479e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fdbd 	bl	8005318 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f043 0201 	orr.w	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0b6      	sub	sp, #216	@ 0xd8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x24>
 8004812:	2302      	movs	r3, #2
 8004814:	f000 bc13 	b.w	800503e <HAL_ADC_ConfigChannel+0x84a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fca5 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 83f3 	bne.w	8005018 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff fb4b 	bl	8003eda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc93 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 800484e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fcb3 	bl	80041c2 <LL_ADC_INJ_IsConversionOngoing>
 800485c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 81d9 	bne.w	8004c1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800486a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 81d4 	bne.w	8004c1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800487c:	d10f      	bne.n	800489e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	4619      	mov	r1, r3
 800488a:	f7ff fb52 	bl	8003f32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff faf9 	bl	8003e8e <LL_ADC_SetSamplingTimeCommonConfig>
 800489c:	e00e      	b.n	80048bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7ff fb41 	bl	8003f32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fae9 	bl	8003e8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d022      	beq.n	8004924 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048ee:	f7ff fa43 	bl	8003d78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6919      	ldr	r1, [r3, #16]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7ff fa8f 	bl	8003e22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HAL_ADC_ConfigChannel+0x126>
 8004914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004918:	e000      	b.n	800491c <HAL_ADC_ConfigChannel+0x128>
 800491a:	2300      	movs	r3, #0
 800491c:	461a      	mov	r2, r3
 800491e:	f7ff fa9b 	bl	8003e58 <LL_ADC_SetOffsetSaturation>
 8004922:	e17b      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fa48 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004930:	4603      	mov	r3, r0
 8004932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x15c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fa3d 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	0e9b      	lsrs	r3, r3, #26
 800494a:	f003 021f 	and.w	r2, r3, #31
 800494e:	e01e      	b.n	800498e <HAL_ADC_ConfigChannel+0x19a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fa32 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800496e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800497e:	2320      	movs	r3, #32
 8004980:	e004      	b.n	800498c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1b2>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0e9b      	lsrs	r3, r3, #26
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	e018      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x1e4>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e004      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d8:	429a      	cmp	r2, r3
 80049da:	d106      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fa01 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff f9e5 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x222>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f9da 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	e01e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x260>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f9cf 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e004      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x278>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	e018      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x2aa>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e004      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d106      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f99e 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff f982 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x2e8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff f977 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	f003 021f 	and.w	r2, r3, #31
 8004ada:	e01e      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x326>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff f96c 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e004      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x33e>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0e9b      	lsrs	r3, r3, #26
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	e016      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x36c>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e004      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d106      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff f93d 	bl	8003dec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2103      	movs	r1, #3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff f921 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x3aa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2103      	movs	r1, #3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff f916 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004b94:	4603      	mov	r3, r0
 8004b96:	0e9b      	lsrs	r3, r3, #26
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	e017      	b.n	8004bce <HAL_ADC_ConfigChannel+0x3da>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff f90b 	bl	8003dc0 <LL_ADC_GetOffsetChannel>
 8004baa:	4603      	mov	r3, r0
 8004bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e003      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x3f2>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	e011      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x416>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d106      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2103      	movs	r1, #3
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f8e8 	bl	8003dec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fa59 	bl	80040d8 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 813d 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f7ff f9a4 	bl	8003f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4aa2      	ldr	r2, [pc, #648]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f040 812e 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x480>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	3301      	adds	r3, #1
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	bf94      	ite	ls
 8004c6c:	2301      	movls	r3, #1
 8004c6e:	2300      	movhi	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e019      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x4b4>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	e003      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	bf94      	ite	ls
 8004ca2:	2301      	movls	r3, #1
 8004ca4:	2300      	movhi	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d079      	beq.n	8004da0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x4d4>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	069b      	lsls	r3, r3, #26
 8004cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc6:	e015      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x500>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	e003      	b.n	8004cec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	069b      	lsls	r3, r3, #26
 8004cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x520>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	0e9b      	lsrs	r3, r3, #26
 8004d06:	3301      	adds	r3, #1
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	e017      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x550>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e003      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x576>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	0e9b      	lsrs	r3, r3, #26
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	051b      	lsls	r3, r3, #20
 8004d68:	e018      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x5a8>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e003      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	e07e      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x5c8>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	3301      	adds	r3, #1
 8004db4:	069b      	lsls	r3, r3, #26
 8004db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dba:	e015      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x5f4>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	e003      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	069b      	lsls	r3, r3, #26
 8004de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x614>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	e017      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x644>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	61fb      	str	r3, [r7, #28]
  return result;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e20:	2320      	movs	r3, #32
 8004e22:	e003      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2101      	movs	r1, #1
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	ea42 0103 	orr.w	r1, r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10d      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x670>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	3301      	adds	r3, #1
 8004e50:	f003 021f 	and.w	r2, r3, #31
 8004e54:	4613      	mov	r3, r2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4413      	add	r3, r2
 8004e5a:	3b1e      	subs	r3, #30
 8004e5c:	051b      	lsls	r3, r3, #20
 8004e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	e01b      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x6a8>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	613b      	str	r3, [r7, #16]
  return result;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 021f 	and.w	r2, r3, #31
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	3b1e      	subs	r3, #30
 8004e96:	051b      	lsls	r3, r3, #20
 8004e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7ff f845 	bl	8003f32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80be 	beq.w	8005032 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebe:	d004      	beq.n	8004eca <HAL_ADC_ConfigChannel+0x6d6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x6ec>
 8004eca:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <HAL_ADC_ConfigChannel+0x6e8>)
 8004ecc:	e009      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x6ee>
 8004ece:	bf00      	nop
 8004ed0:	407f0000 	.word	0x407f0000
 8004ed4:	80080000 	.word	0x80080000
 8004ed8:	50000100 	.word	0x50000100
 8004edc:	50000300 	.word	0x50000300
 8004ee0:	4b59      	ldr	r3, [pc, #356]	@ (8005048 <HAL_ADC_ConfigChannel+0x854>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe ff3a 	bl	8003d5c <LL_ADC_GetCommonPathInternalCh>
 8004ee8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a56      	ldr	r2, [pc, #344]	@ (800504c <HAL_ADC_ConfigChannel+0x858>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x70c>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a55      	ldr	r2, [pc, #340]	@ (8005050 <HAL_ADC_ConfigChannel+0x85c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d13a      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d134      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f14:	d005      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x72e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8005054 <HAL_ADC_ConfigChannel+0x860>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	f040 8085 	bne.w	800502c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f2a:	d004      	beq.n	8004f36 <HAL_ADC_ConfigChannel+0x742>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a49      	ldr	r2, [pc, #292]	@ (8005058 <HAL_ADC_ConfigChannel+0x864>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x746>
 8004f36:	4a49      	ldr	r2, [pc, #292]	@ (800505c <HAL_ADC_ConfigChannel+0x868>)
 8004f38:	e000      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x748>
 8004f3a:	4a43      	ldr	r2, [pc, #268]	@ (8005048 <HAL_ADC_ConfigChannel+0x854>)
 8004f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fe fef5 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f4c:	4b44      	ldr	r3, [pc, #272]	@ (8005060 <HAL_ADC_ConfigChannel+0x86c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	4a44      	ldr	r2, [pc, #272]	@ (8005064 <HAL_ADC_ConfigChannel+0x870>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f66:	e002      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f9      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f74:	e05a      	b.n	800502c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005068 <HAL_ADC_ConfigChannel+0x874>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d125      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11f      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a31      	ldr	r2, [pc, #196]	@ (8005058 <HAL_ADC_ConfigChannel+0x864>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d104      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7ac>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a34      	ldr	r2, [pc, #208]	@ (800506c <HAL_ADC_ConfigChannel+0x878>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d047      	beq.n	8005030 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa8:	d004      	beq.n	8004fb4 <HAL_ADC_ConfigChannel+0x7c0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2a      	ldr	r2, [pc, #168]	@ (8005058 <HAL_ADC_ConfigChannel+0x864>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x7c4>
 8004fb4:	4a29      	ldr	r2, [pc, #164]	@ (800505c <HAL_ADC_ConfigChannel+0x868>)
 8004fb6:	e000      	b.n	8004fba <HAL_ADC_ConfigChannel+0x7c6>
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <HAL_ADC_ConfigChannel+0x854>)
 8004fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f7fe feb6 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fca:	e031      	b.n	8005030 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	@ (8005070 <HAL_ADC_ConfigChannel+0x87c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d12d      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d127      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <HAL_ADC_ConfigChannel+0x864>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff4:	d004      	beq.n	8005000 <HAL_ADC_ConfigChannel+0x80c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <HAL_ADC_ConfigChannel+0x864>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x810>
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <HAL_ADC_ConfigChannel+0x868>)
 8005002:	e000      	b.n	8005006 <HAL_ADC_ConfigChannel+0x812>
 8005004:	4a10      	ldr	r2, [pc, #64]	@ (8005048 <HAL_ADC_ConfigChannel+0x854>)
 8005006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800500a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7fe fe90 	bl	8003d36 <LL_ADC_SetCommonPathInternalCh>
 8005016:	e00c      	b.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f043 0220 	orr.w	r2, r3, #32
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800502a:	e002      	b.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800503a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800503e:	4618      	mov	r0, r3
 8005040:	37d8      	adds	r7, #216	@ 0xd8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	50000700 	.word	0x50000700
 800504c:	c3210000 	.word	0xc3210000
 8005050:	90c00010 	.word	0x90c00010
 8005054:	50000600 	.word	0x50000600
 8005058:	50000100 	.word	0x50000100
 800505c:	50000300 	.word	0x50000300
 8005060:	20000004 	.word	0x20000004
 8005064:	053e2d63 	.word	0x053e2d63
 8005068:	c7520000 	.word	0xc7520000
 800506c:	50000500 	.word	0x50000500
 8005070:	cb840000 	.word	0xcb840000

08005074 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f872 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 8005090:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f893 	bl	80041c2 <LL_ADC_INJ_IsConversionOngoing>
 800509c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8098 	beq.w	80051dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7f5b      	ldrb	r3, [r3, #29]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d126      	bne.n	8005110 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7f1b      	ldrb	r3, [r3, #28]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d122      	bne.n	8005110 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80050ce:	e014      	b.n	80050fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4a45      	ldr	r2, [pc, #276]	@ (80051e8 <ADC_ConversionStop+0x174>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d90d      	bls.n	80050f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050dc:	f043 0210 	orr.w	r2, r3, #16
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e074      	b.n	80051de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	d1e3      	bne.n	80050d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d014      	beq.n	8005140 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f82a 	bl	8004174 <LL_ADC_REG_IsConversionOngoing>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe ffe7 	bl	80040fe <LL_ADC_IsDisableOngoing>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff f806 	bl	800414c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d014      	beq.n	8005170 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff f839 	bl	80041c2 <LL_ADC_INJ_IsConversionOngoing>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe ffcf 	bl	80040fe <LL_ADC_IsDisableOngoing>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff f815 	bl	800419a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d005      	beq.n	8005182 <ADC_ConversionStop+0x10e>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d105      	bne.n	8005188 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800517c:	230c      	movs	r3, #12
 800517e:	617b      	str	r3, [r7, #20]
        break;
 8005180:	e005      	b.n	800518e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005182:	2308      	movs	r3, #8
 8005184:	617b      	str	r3, [r7, #20]
        break;
 8005186:	e002      	b.n	800518e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005188:	2304      	movs	r3, #4
 800518a:	617b      	str	r3, [r7, #20]
        break;
 800518c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800518e:	f7fe fdb3 	bl	8003cf8 <HAL_GetTick>
 8005192:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005194:	e01b      	b.n	80051ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005196:	f7fe fdaf 	bl	8003cf8 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d914      	bls.n	80051ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b6:	f043 0210 	orr.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e007      	b.n	80051de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1dc      	bne.n	8005196 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	a33fffff 	.word	0xa33fffff

080051ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe ff6b 	bl	80040d8 <LL_ADC_IsEnabled>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d176      	bne.n	80052f6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	4b3c      	ldr	r3, [pc, #240]	@ (8005300 <ADC_Enable+0x114>)
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521a:	f043 0210 	orr.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e062      	b.n	80052f8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe ff26 	bl	8004088 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005244:	d004      	beq.n	8005250 <ADC_Enable+0x64>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2e      	ldr	r2, [pc, #184]	@ (8005304 <ADC_Enable+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <ADC_Enable+0x68>
 8005250:	4b2d      	ldr	r3, [pc, #180]	@ (8005308 <ADC_Enable+0x11c>)
 8005252:	e000      	b.n	8005256 <ADC_Enable+0x6a>
 8005254:	4b2d      	ldr	r3, [pc, #180]	@ (800530c <ADC_Enable+0x120>)
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fd80 	bl	8003d5c <LL_ADC_GetCommonPathInternalCh>
 800525c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800525e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005262:	2b00      	cmp	r3, #0
 8005264:	d013      	beq.n	800528e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005266:	4b2a      	ldr	r3, [pc, #168]	@ (8005310 <ADC_Enable+0x124>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	4a29      	ldr	r2, [pc, #164]	@ (8005314 <ADC_Enable+0x128>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005280:	e002      	b.n	8005288 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f9      	bne.n	8005282 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800528e:	f7fe fd33 	bl	8003cf8 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005294:	e028      	b.n	80052e8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe ff1c 	bl	80040d8 <LL_ADC_IsEnabled>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe feec 	bl	8004088 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052b0:	f7fe fd22 	bl	8003cf8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d914      	bls.n	80052e8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d00d      	beq.n	80052e8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d0:	f043 0210 	orr.w	r2, r3, #16
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e007      	b.n	80052f8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d1cf      	bne.n	8005296 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	8000003f 	.word	0x8000003f
 8005304:	50000100 	.word	0x50000100
 8005308:	50000300 	.word	0x50000300
 800530c:	50000700 	.word	0x50000700
 8005310:	20000004 	.word	0x20000004
 8005314:	053e2d63 	.word	0x053e2d63

08005318 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe feea 	bl	80040fe <LL_ADC_IsDisableOngoing>
 800532a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fed1 	bl	80040d8 <LL_ADC_IsEnabled>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d047      	beq.n	80053cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d144      	bne.n	80053cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 030d 	and.w	r3, r3, #13
 800534c:	2b01      	cmp	r3, #1
 800534e:	d10c      	bne.n	800536a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe feab 	bl	80040b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2203      	movs	r2, #3
 8005360:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005362:	f7fe fcc9 	bl	8003cf8 <HAL_GetTick>
 8005366:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005368:	e029      	b.n	80053be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536e:	f043 0210 	orr.w	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537a:	f043 0201 	orr.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e023      	b.n	80053ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005386:	f7fe fcb7 	bl	8003cf8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d914      	bls.n	80053be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	f043 0210 	orr.w	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e007      	b.n	80053ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1dc      	bne.n	8005386 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d14b      	bne.n	8005488 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fd50 	bl	8003eb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d032      	beq.n	8005480 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d12b      	bne.n	8005480 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11f      	bne.n	8005480 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800544c:	e018      	b.n	8005480 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d111      	bne.n	8005480 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7fb ff03 	bl	800128c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005486:	e00e      	b.n	80054a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff f9a2 	bl	80047de <HAL_ADC_ErrorCallback>
}
 800549a:	e004      	b.n	80054a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff f984 	bl	80047ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e8:	f043 0204 	orr.w	r2, r3, #4
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff f974 	bl	80047de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <LL_ADC_IsEnabled>:
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <LL_ADC_IsEnabled+0x18>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <LL_ADC_IsEnabled+0x1a>
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_ADC_REG_IsConversionOngoing>:
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d101      	bne.n	800553c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b0a1      	sub	sp, #132	@ 0x84
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005566:	2302      	movs	r3, #2
 8005568:	e0e7      	b.n	800573a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005572:	2300      	movs	r3, #0
 8005574:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005576:	2300      	movs	r3, #0
 8005578:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005582:	d102      	bne.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005584:	4b6f      	ldr	r3, [pc, #444]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	e009      	b.n	800559e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6e      	ldr	r2, [pc, #440]	@ (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d102      	bne.n	800559a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005594:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	e001      	b.n	800559e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0be      	b.n	800573a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ffb0 	bl	8005524 <LL_ADC_REG_IsConversionOngoing>
 80055c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ffaa 	bl	8005524 <LL_ADC_REG_IsConversionOngoing>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 80a0 	bne.w	8005718 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80055d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 809c 	bne.w	8005718 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055e8:	d004      	beq.n	80055f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a55      	ldr	r2, [pc, #340]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d101      	bne.n	80055f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80055f4:	4b56      	ldr	r3, [pc, #344]	@ (8005750 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80055f6:	e000      	b.n	80055fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80055f8:	4b56      	ldr	r3, [pc, #344]	@ (8005754 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80055fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d04b      	beq.n	800569c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005616:	035b      	lsls	r3, r3, #13
 8005618:	430b      	orrs	r3, r1
 800561a:	431a      	orrs	r2, r3
 800561c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800561e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005628:	d004      	beq.n	8005634 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a45      	ldr	r2, [pc, #276]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10f      	bne.n	8005654 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005634:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005638:	f7ff ff61 	bl	80054fe <LL_ADC_IsEnabled>
 800563c:	4604      	mov	r4, r0
 800563e:	4841      	ldr	r0, [pc, #260]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005640:	f7ff ff5d 	bl	80054fe <LL_ADC_IsEnabled>
 8005644:	4603      	mov	r3, r0
 8005646:	4323      	orrs	r3, r4
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e012      	b.n	800567a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005654:	483c      	ldr	r0, [pc, #240]	@ (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005656:	f7ff ff52 	bl	80054fe <LL_ADC_IsEnabled>
 800565a:	4604      	mov	r4, r0
 800565c:	483b      	ldr	r0, [pc, #236]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800565e:	f7ff ff4e 	bl	80054fe <LL_ADC_IsEnabled>
 8005662:	4603      	mov	r3, r0
 8005664:	431c      	orrs	r4, r3
 8005666:	483c      	ldr	r0, [pc, #240]	@ (8005758 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005668:	f7ff ff49 	bl	80054fe <LL_ADC_IsEnabled>
 800566c:	4603      	mov	r3, r0
 800566e:	4323      	orrs	r3, r4
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d056      	beq.n	800572c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800567e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005686:	f023 030f 	bic.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	6811      	ldr	r1, [r2, #0]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	6892      	ldr	r2, [r2, #8]
 8005692:	430a      	orrs	r2, r1
 8005694:	431a      	orrs	r2, r3
 8005696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005698:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800569a:	e047      	b.n	800572c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800569c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056b0:	d004      	beq.n	80056bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a23      	ldr	r2, [pc, #140]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10f      	bne.n	80056dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80056bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056c0:	f7ff ff1d 	bl	80054fe <LL_ADC_IsEnabled>
 80056c4:	4604      	mov	r4, r0
 80056c6:	481f      	ldr	r0, [pc, #124]	@ (8005744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056c8:	f7ff ff19 	bl	80054fe <LL_ADC_IsEnabled>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4323      	orrs	r3, r4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e012      	b.n	8005702 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80056dc:	481a      	ldr	r0, [pc, #104]	@ (8005748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80056de:	f7ff ff0e 	bl	80054fe <LL_ADC_IsEnabled>
 80056e2:	4604      	mov	r4, r0
 80056e4:	4819      	ldr	r0, [pc, #100]	@ (800574c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80056e6:	f7ff ff0a 	bl	80054fe <LL_ADC_IsEnabled>
 80056ea:	4603      	mov	r3, r0
 80056ec:	431c      	orrs	r4, r3
 80056ee:	481a      	ldr	r0, [pc, #104]	@ (8005758 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80056f0:	f7ff ff05 	bl	80054fe <LL_ADC_IsEnabled>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4323      	orrs	r3, r4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d012      	beq.n	800572c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800570e:	f023 030f 	bic.w	r3, r3, #15
 8005712:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005714:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005716:	e009      	b.n	800572c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800572a:	e000      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800572c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005736:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800573a:	4618      	mov	r0, r3
 800573c:	3784      	adds	r7, #132	@ 0x84
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	bf00      	nop
 8005744:	50000100 	.word	0x50000100
 8005748:	50000400 	.word	0x50000400
 800574c:	50000500 	.word	0x50000500
 8005750:	50000300 	.word	0x50000300
 8005754:	50000700 	.word	0x50000700
 8005758:	50000600 	.word	0x50000600

0800575c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005764:	4b05      	ldr	r3, [pc, #20]	@ (800577c <LL_EXTI_EnableIT_0_31+0x20>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4904      	ldr	r1, [pc, #16]	@ (800577c <LL_EXTI_EnableIT_0_31+0x20>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40010400 	.word	0x40010400

08005780 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	4904      	ldr	r1, [pc, #16]	@ (80057a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4313      	orrs	r3, r2
 8005792:	620b      	str	r3, [r1, #32]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40010400 	.word	0x40010400

080057a4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	4904      	ldr	r1, [pc, #16]	@ (80057c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010400 	.word	0x40010400

080057cc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80057d4:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	43db      	mvns	r3, r3
 80057dc:	4904      	ldr	r1, [pc, #16]	@ (80057f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80057de:	4013      	ands	r3, r2
 80057e0:	620b      	str	r3, [r1, #32]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010400 	.word	0x40010400

080057f4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <LL_EXTI_EnableEvent_0_31+0x20>)
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	4904      	ldr	r1, [pc, #16]	@ (8005814 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]

}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40010400 	.word	0x40010400

08005818 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005820:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005824:	4904      	ldr	r1, [pc, #16]	@ (8005838 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4313      	orrs	r3, r2
 800582a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40010400 	.word	0x40010400

0800583c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	43db      	mvns	r3, r3
 800584c:	4904      	ldr	r1, [pc, #16]	@ (8005860 <LL_EXTI_DisableEvent_0_31+0x24>)
 800584e:	4013      	ands	r3, r2
 8005850:	604b      	str	r3, [r1, #4]
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010400 	.word	0x40010400

08005864 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <LL_EXTI_DisableEvent_32_63+0x24>)
 800586e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	43db      	mvns	r3, r3
 8005874:	4904      	ldr	r1, [pc, #16]	@ (8005888 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005876:	4013      	ands	r3, r2
 8005878:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40010400 	.word	0x40010400

0800588c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	4904      	ldr	r1, [pc, #16]	@ (80058ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]

}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	40010400 	.word	0x40010400

080058b0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80058ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058bc:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40010400 	.word	0x40010400

080058d4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	43db      	mvns	r3, r3
 80058e4:	4904      	ldr	r1, [pc, #16]	@ (80058f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]

}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010400 	.word	0x40010400

080058fc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005904:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005906:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	43db      	mvns	r3, r3
 800590c:	4904      	ldr	r1, [pc, #16]	@ (8005920 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800590e:	4013      	ands	r3, r2
 8005910:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010400 	.word	0x40010400

08005924 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	4904      	ldr	r1, [pc, #16]	@ (8005944 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	60cb      	str	r3, [r1, #12]
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40010400 	.word	0x40010400

08005948 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005950:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	4904      	ldr	r1, [pc, #16]	@ (8005968 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4313      	orrs	r3, r2
 800595a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40010400 	.word	0x40010400

0800596c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005974:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	43db      	mvns	r3, r3
 800597c:	4904      	ldr	r1, [pc, #16]	@ (8005990 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800597e:	4013      	ands	r3, r2
 8005980:	60cb      	str	r3, [r1, #12]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010400 	.word	0x40010400

08005994 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800599e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	4904      	ldr	r1, [pc, #16]	@ (80059b8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010400 	.word	0x40010400

080059bc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80059c4:	4a04      	ldr	r2, [pc, #16]	@ (80059d8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6153      	str	r3, [r2, #20]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010400 	.word	0x40010400

080059dc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010400 	.word	0x40010400

080059fc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e181      	b.n	8005d1c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a26:	d102      	bne.n	8005a2e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e176      	b.n	8005d1c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7f5b      	ldrb	r3, [r3, #29]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d108      	bne.n	8005a4a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd f857 	bl	8002af8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a54:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b90      	ldr	r3, [pc, #576]	@ (8005cbc <HAL_COMP_Init+0x2c0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	6979      	ldr	r1, [r7, #20]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <HAL_COMP_Init+0xc8>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a9c:	4b88      	ldr	r3, [pc, #544]	@ (8005cc0 <HAL_COMP_Init+0x2c4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	4a88      	ldr	r2, [pc, #544]	@ (8005cc4 <HAL_COMP_Init+0x2c8>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005ab6:	e002      	b.n	8005abe <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f9      	bne.n	8005ab8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7f      	ldr	r2, [pc, #508]	@ (8005cc8 <HAL_COMP_Init+0x2cc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d028      	beq.n	8005b20 <HAL_COMP_Init+0x124>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8005ccc <HAL_COMP_Init+0x2d0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d020      	beq.n	8005b1a <HAL_COMP_Init+0x11e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a7c      	ldr	r2, [pc, #496]	@ (8005cd0 <HAL_COMP_Init+0x2d4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d018      	beq.n	8005b14 <HAL_COMP_Init+0x118>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a7b      	ldr	r2, [pc, #492]	@ (8005cd4 <HAL_COMP_Init+0x2d8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d010      	beq.n	8005b0e <HAL_COMP_Init+0x112>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a79      	ldr	r2, [pc, #484]	@ (8005cd8 <HAL_COMP_Init+0x2dc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d008      	beq.n	8005b08 <HAL_COMP_Init+0x10c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a78      	ldr	r2, [pc, #480]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_COMP_Init+0x108>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e00f      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e00d      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b0c:	e00a      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005b12:	e007      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005b18:	e004      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b1e:	e001      	b.n	8005b24 <HAL_COMP_Init+0x128>
 8005b20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b24:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80b6 	beq.w	8005ca0 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a65      	ldr	r2, [pc, #404]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_COMP_Init+0x158>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a64      	ldr	r2, [pc, #400]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005b54:	6938      	ldr	r0, [r7, #16]
 8005b56:	f7ff feab 	bl	80058b0 <LL_EXTI_EnableRisingTrig_32_63>
 8005b5a:	e014      	b.n	8005b86 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005b5c:	6938      	ldr	r0, [r7, #16]
 8005b5e:	f7ff fe95 	bl	800588c <LL_EXTI_EnableRisingTrig_0_31>
 8005b62:	e010      	b.n	8005b86 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5c      	ldr	r2, [pc, #368]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_COMP_Init+0x17c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d103      	bne.n	8005b80 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005b78:	6938      	ldr	r0, [r7, #16]
 8005b7a:	f7ff febf 	bl	80058fc <LL_EXTI_DisableRisingTrig_32_63>
 8005b7e:	e002      	b.n	8005b86 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005b80:	6938      	ldr	r0, [r7, #16]
 8005b82:	f7ff fea7 	bl	80058d4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d011      	beq.n	8005bb6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a51      	ldr	r2, [pc, #324]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_COMP_Init+0x1aa>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d103      	bne.n	8005bae <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005ba6:	6938      	ldr	r0, [r7, #16]
 8005ba8:	f7ff fece 	bl	8005948 <LL_EXTI_EnableFallingTrig_32_63>
 8005bac:	e014      	b.n	8005bd8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005bae:	6938      	ldr	r0, [r7, #16]
 8005bb0:	f7ff feb8 	bl	8005924 <LL_EXTI_EnableFallingTrig_0_31>
 8005bb4:	e010      	b.n	8005bd8 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a48      	ldr	r2, [pc, #288]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_COMP_Init+0x1ce>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a46      	ldr	r2, [pc, #280]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d103      	bne.n	8005bd2 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005bca:	6938      	ldr	r0, [r7, #16]
 8005bcc:	f7ff fee2 	bl	8005994 <LL_EXTI_DisableFallingTrig_32_63>
 8005bd0:	e002      	b.n	8005bd8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005bd2:	6938      	ldr	r0, [r7, #16]
 8005bd4:	f7ff feca 	bl	800596c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_COMP_Init+0x1f0>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005bec:	6938      	ldr	r0, [r7, #16]
 8005bee:	f7ff fef5 	bl	80059dc <LL_EXTI_ClearFlag_32_63>
 8005bf2:	e002      	b.n	8005bfa <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f7ff fee1 	bl	80059bc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a34      	ldr	r2, [pc, #208]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_COMP_Init+0x21e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a32      	ldr	r2, [pc, #200]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d103      	bne.n	8005c22 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005c1a:	6938      	ldr	r0, [r7, #16]
 8005c1c:	f7ff fdfc 	bl	8005818 <LL_EXTI_EnableEvent_32_63>
 8005c20:	e014      	b.n	8005c4c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005c22:	6938      	ldr	r0, [r7, #16]
 8005c24:	f7ff fde6 	bl	80057f4 <LL_EXTI_EnableEvent_0_31>
 8005c28:	e010      	b.n	8005c4c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_COMP_Init+0x242>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a29      	ldr	r2, [pc, #164]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d103      	bne.n	8005c46 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8005c3e:	6938      	ldr	r0, [r7, #16]
 8005c40:	f7ff fe10 	bl	8005864 <LL_EXTI_DisableEvent_32_63>
 8005c44:	e002      	b.n	8005c4c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f7ff fdf8 	bl	800583c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d011      	beq.n	8005c7c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_COMP_Init+0x270>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8005c6c:	6938      	ldr	r0, [r7, #16]
 8005c6e:	f7ff fd87 	bl	8005780 <LL_EXTI_EnableIT_32_63>
 8005c72:	e04b      	b.n	8005d0c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005c74:	6938      	ldr	r0, [r7, #16]
 8005c76:	f7ff fd71 	bl	800575c <LL_EXTI_EnableIT_0_31>
 8005c7a:	e047      	b.n	8005d0c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_COMP_Init+0x294>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005c90:	6938      	ldr	r0, [r7, #16]
 8005c92:	f7ff fd9b 	bl	80057cc <LL_EXTI_DisableIT_32_63>
 8005c96:	e039      	b.n	8005d0c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005c98:	6938      	ldr	r0, [r7, #16]
 8005c9a:	f7ff fd83 	bl	80057a4 <LL_EXTI_DisableIT_0_31>
 8005c9e:	e035      	b.n	8005d0c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cdc <HAL_COMP_Init+0x2e0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_COMP_Init+0x2b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce0 <HAL_COMP_Init+0x2e4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d117      	bne.n	8005ce4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8005cb4:	6938      	ldr	r0, [r7, #16]
 8005cb6:	f7ff fdd5 	bl	8005864 <LL_EXTI_DisableEvent_32_63>
 8005cba:	e016      	b.n	8005cea <HAL_COMP_Init+0x2ee>
 8005cbc:	ff007e0f 	.word	0xff007e0f
 8005cc0:	20000004 	.word	0x20000004
 8005cc4:	053e2d63 	.word	0x053e2d63
 8005cc8:	40010200 	.word	0x40010200
 8005ccc:	40010204 	.word	0x40010204
 8005cd0:	40010208 	.word	0x40010208
 8005cd4:	4001020c 	.word	0x4001020c
 8005cd8:	40010210 	.word	0x40010210
 8005cdc:	40010214 	.word	0x40010214
 8005ce0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005ce4:	6938      	ldr	r0, [r7, #16]
 8005ce6:	f7ff fda9 	bl	800583c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a0e      	ldr	r2, [pc, #56]	@ (8005d28 <HAL_COMP_Init+0x32c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_COMP_Init+0x302>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8005d2c <HAL_COMP_Init+0x330>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d103      	bne.n	8005d06 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005cfe:	6938      	ldr	r0, [r7, #16]
 8005d00:	f7ff fd64 	bl	80057cc <LL_EXTI_DisableIT_32_63>
 8005d04:	e002      	b.n	8005d0c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005d06:	6938      	ldr	r0, [r7, #16]
 8005d08:	f7ff fd4c 	bl	80057a4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7f5b      	ldrb	r3, [r3, #29]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40010214 	.word	0x40010214
 8005d2c:	40010218 	.word	0x40010218

08005d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d62:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	60d3      	str	r3, [r2, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d7c:	4b04      	ldr	r3, [pc, #16]	@ (8005d90 <__NVIC_GetPriorityGrouping+0x18>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 0307 	and.w	r3, r3, #7
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db0b      	blt.n	8005dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f003 021f 	and.w	r2, r3, #31
 8005dac:	4907      	ldr	r1, [pc, #28]	@ (8005dcc <__NVIC_EnableIRQ+0x38>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2001      	movs	r0, #1
 8005db6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000e100 	.word	0xe000e100

08005dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db0a      	blt.n	8005dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	490c      	ldr	r1, [pc, #48]	@ (8005e1c <__NVIC_SetPriority+0x4c>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df8:	e00a      	b.n	8005e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4908      	ldr	r1, [pc, #32]	@ (8005e20 <__NVIC_SetPriority+0x50>)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3b04      	subs	r3, #4
 8005e08:	0112      	lsls	r2, r2, #4
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	761a      	strb	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e100 	.word	0xe000e100
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	@ 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf28      	it	cs
 8005e42:	2304      	movcs	r3, #4
 8005e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d902      	bls.n	8005e54 <NVIC_EncodePriority+0x30>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3b03      	subs	r3, #3
 8005e52:	e000      	b.n	8005e56 <NVIC_EncodePriority+0x32>
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	4313      	orrs	r3, r2
         );
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	@ 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e9c:	d301      	bcc.n	8005ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e00f      	b.n	8005ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8005ecc <SysTick_Config+0x40>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eaa:	210f      	movs	r1, #15
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	f7ff ff8e 	bl	8005dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <SysTick_Config+0x40>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eba:	4b04      	ldr	r3, [pc, #16]	@ (8005ecc <SysTick_Config+0x40>)
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	e000e010 	.word	0xe000e010

08005ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff29 	bl	8005d30 <__NVIC_SetPriorityGrouping>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ef4:	f7ff ff40 	bl	8005d78 <__NVIC_GetPriorityGrouping>
 8005ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	6978      	ldr	r0, [r7, #20]
 8005f00:	f7ff ff90 	bl	8005e24 <NVIC_EncodePriority>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff5f 	bl	8005dd0 <__NVIC_SetPriority>
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	4603      	mov	r3, r0
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ff33 	bl	8005d94 <__NVIC_EnableIRQ>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffa4 	bl	8005e8c <SysTick_Config>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e054      	b.n	800600c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7f5b      	ldrb	r3, [r3, #29]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fc fe10 	bl	8002b98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	791b      	ldrb	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10c      	bne.n	8005fa0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a22      	ldr	r2, [pc, #136]	@ (8006014 <HAL_CRC_Init+0xc4>)
 8005f8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0218 	bic.w	r2, r2, #24
 8005f9c:	609a      	str	r2, [r3, #8]
 8005f9e:	e00c      	b.n	8005fba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6899      	ldr	r1, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f948 	bl	8006240 <HAL_CRCEx_Polynomial_Set>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e028      	b.n	800600c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	795b      	ldrb	r3, [r3, #5]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fca:	611a      	str	r2, [r3, #16]
 8005fcc:	e004      	b.n	8005fd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6912      	ldr	r2, [r2, #16]
 8005fd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699a      	ldr	r2, [r3, #24]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	04c11db7 	.word	0x04c11db7

08006018 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2202      	movs	r2, #2
 800602c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d006      	beq.n	8006054 <HAL_CRC_Calculate+0x3c>
 8006046:	2b03      	cmp	r3, #3
 8006048:	d829      	bhi.n	800609e <HAL_CRC_Calculate+0x86>
 800604a:	2b01      	cmp	r3, #1
 800604c:	d019      	beq.n	8006082 <HAL_CRC_Calculate+0x6a>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d01e      	beq.n	8006090 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006052:	e024      	b.n	800609e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e00a      	b.n	8006070 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	3301      	adds	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d3f0      	bcc.n	800605a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	613b      	str	r3, [r7, #16]
      break;
 8006080:	e00e      	b.n	80060a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f812 	bl	80060b0 <CRC_Handle_8>
 800608c:	6138      	str	r0, [r7, #16]
      break;
 800608e:	e007      	b.n	80060a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f899 	bl	80061cc <CRC_Handle_16>
 800609a:	6138      	str	r0, [r7, #16]
      break;
 800609c:	e000      	b.n	80060a0 <HAL_CRC_Calculate+0x88>
      break;
 800609e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80060a6:	693b      	ldr	r3, [r7, #16]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	@ 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e023      	b.n	800610a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4413      	add	r3, r2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	3301      	adds	r3, #1
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	440b      	add	r3, r1
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80060dc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	3302      	adds	r3, #2
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	440b      	add	r3, r1
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80060ec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	3303      	adds	r3, #3
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	440b      	add	r3, r1
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006100:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	089b      	lsrs	r3, r3, #2
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	429a      	cmp	r2, r3
 8006112:	d3d6      	bcc.n	80060c2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d04d      	beq.n	80061ba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	4413      	add	r3, r2
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d116      	bne.n	8006170 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4413      	add	r3, r2
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	b21a      	sxth	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	3301      	adds	r3, #1
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	440b      	add	r3, r1
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b21b      	sxth	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b21b      	sxth	r3, r3
 8006162:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	8b7a      	ldrh	r2, [r7, #26]
 800616e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d11f      	bne.n	80061ba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4413      	add	r3, r2
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	b21a      	sxth	r2, r3
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	3301      	adds	r3, #1
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	440b      	add	r3, r1
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b21b      	sxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b21b      	sxth	r3, r3
 800619a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	8b7a      	ldrh	r2, [r7, #26]
 80061a6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	3302      	adds	r3, #2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3724      	adds	r7, #36	@ 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e013      	b.n	8006206 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	041a      	lsls	r2, r3, #16
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3302      	adds	r3, #2
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	440b      	add	r3, r1
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3301      	adds	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3e6      	bcc.n	80061de <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4413      	add	r3, r2
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006250:	231f      	movs	r3, #31
 8006252:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
 8006262:	e063      	b.n	800632c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006264:	bf00      	nop
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1e5a      	subs	r2, r3, #1
 800626a:	613a      	str	r2, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <HAL_CRCEx_Polynomial_Set+0x44>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b18      	cmp	r3, #24
 8006288:	d846      	bhi.n	8006318 <HAL_CRCEx_Polynomial_Set+0xd8>
 800628a:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <HAL_CRCEx_Polynomial_Set+0x50>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	0800631f 	.word	0x0800631f
 8006294:	08006319 	.word	0x08006319
 8006298:	08006319 	.word	0x08006319
 800629c:	08006319 	.word	0x08006319
 80062a0:	08006319 	.word	0x08006319
 80062a4:	08006319 	.word	0x08006319
 80062a8:	08006319 	.word	0x08006319
 80062ac:	08006319 	.word	0x08006319
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	08006319 	.word	0x08006319
 80062b8:	08006319 	.word	0x08006319
 80062bc:	08006319 	.word	0x08006319
 80062c0:	08006319 	.word	0x08006319
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006319 	.word	0x08006319
 80062cc:	08006319 	.word	0x08006319
 80062d0:	08006301 	.word	0x08006301
 80062d4:	08006319 	.word	0x08006319
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
 80062e0:	08006319 	.word	0x08006319
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006319 	.word	0x08006319
 80062ec:	08006319 	.word	0x08006319
 80062f0:	080062f5 	.word	0x080062f5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d913      	bls.n	8006322 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80062fe:	e010      	b.n	8006322 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b07      	cmp	r3, #7
 8006304:	d90f      	bls.n	8006326 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800630a:	e00c      	b.n	8006326 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b0f      	cmp	r3, #15
 8006310:	d90b      	bls.n	800632a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006316:	e008      	b.n	800632a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
        break;
 800631c:	e006      	b.n	800632c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800631e:	bf00      	nop
 8006320:	e004      	b.n	800632c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006322:	bf00      	nop
 8006324:	e002      	b.n	800632c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800632a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 0118 	bic.w	r1, r3, #24
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	430a      	orrs	r2, r1
 800634c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e014      	b.n	8006398 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	791b      	ldrb	r3, [r3, #4]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fc2a 	bl	8002bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	@ 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_DAC_ConfigChannel+0x1c>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e19e      	b.n	80066fe <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	795b      	ldrb	r3, [r3, #5]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_DAC_ConfigChannel+0x2c>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e198      	b.n	80066fe <HAL_DAC_ConfigChannel+0x35e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2202      	movs	r2, #2
 80063d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d17a      	bne.n	80064d6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80063e0:	f7fd fc8a 	bl	8003cf8 <HAL_GetTick>
 80063e4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d13d      	bne.n	8006468 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063ec:	e018      	b.n	8006420 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80063ee:	f7fd fc83 	bl	8003cf8 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d911      	bls.n	8006420 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f043 0208 	orr.w	r2, r3, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2203      	movs	r2, #3
 800641a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e16e      	b.n	80066fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1df      	bne.n	80063ee <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006436:	641a      	str	r2, [r3, #64]	@ 0x40
 8006438:	e020      	b.n	800647c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800643a:	f7fd fc5d 	bl	8003cf8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	d90f      	bls.n	8006468 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	da0a      	bge.n	8006468 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f043 0208 	orr.w	r2, r3, #8
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2203      	movs	r2, #3
 8006462:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e14a      	b.n	80066fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646e:	2b00      	cmp	r3, #0
 8006470:	dbe3      	blt.n	800643a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800647a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	ea02 0103 	and.w	r1, r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	409a      	lsls	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	21ff      	movs	r1, #255	@ 0xff
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	ea02 0103 	and.w	r1, r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	409a      	lsls	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d11d      	bne.n	800651a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	221f      	movs	r2, #31
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f6:	4013      	ands	r3, r2
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800650e:	4313      	orrs	r3, r2
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2207      	movs	r2, #7
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006532:	4013      	ands	r3, r2
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d102      	bne.n	8006544 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	e00f      	b.n	8006564 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d102      	bne.n	8006552 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800654c:	2301      	movs	r3, #1
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	e008      	b.n	8006564 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800655a:	2301      	movs	r3, #1
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	e001      	b.n	8006564 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006560:	2300      	movs	r3, #0
 8006562:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006586:	4013      	ands	r3, r2
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	791b      	ldrb	r3, [r3, #4]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <HAL_DAC_ConfigChannel+0x1f8>
 8006592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006596:	e000      	b.n	800659a <HAL_DAC_ConfigChannel+0x1fa>
 8006598:	2300      	movs	r3, #0
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b2:	4013      	ands	r3, r2
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	795b      	ldrb	r3, [r3, #5]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d102      	bne.n	80065c4 <HAL_DAC_ConfigChannel+0x224>
 80065be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065c2:	e000      	b.n	80065c6 <HAL_DAC_ConfigChannel+0x226>
 80065c4:	2300      	movs	r3, #0
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d114      	bne.n	8006606 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80065dc:	f001 fc58 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 80065e0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4a48      	ldr	r2, [pc, #288]	@ (8006708 <HAL_DAC_ConfigChannel+0x368>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d904      	bls.n	80065f4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f2:	e00f      	b.n	8006614 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4a45      	ldr	r2, [pc, #276]	@ (800670c <HAL_DAC_ConfigChannel+0x36c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d90a      	bls.n	8006612 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
 8006604:	e006      	b.n	8006614 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660c:	4313      	orrs	r3, r2
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006610:	e000      	b.n	8006614 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006612:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006622:	4313      	orrs	r3, r2
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43da      	mvns	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	400a      	ands	r2, r1
 800664a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006666:	4013      	ands	r3, r2
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800667e:	4313      	orrs	r3, r2
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006688:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	22c0      	movs	r2, #192	@ 0xc0
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43da      	mvns	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	400a      	ands	r2, r1
 80066a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	089b      	lsrs	r3, r3, #2
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80066d4:	fa01 f303 	lsl.w	r3, r1, r3
 80066d8:	43db      	mvns	r3, r3
 80066da:	ea02 0103 	and.w	r1, r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	409a      	lsls	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80066fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3728      	adds	r7, #40	@ 0x28
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	09896800 	.word	0x09896800
 800670c:	04c4b400 	.word	0x04c4b400

08006710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e08d      	b.n	800683e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	4b47      	ldr	r3, [pc, #284]	@ (8006848 <HAL_DMA_Init+0x138>)
 800672a:	429a      	cmp	r2, r3
 800672c:	d80f      	bhi.n	800674e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	4b45      	ldr	r3, [pc, #276]	@ (800684c <HAL_DMA_Init+0x13c>)
 8006736:	4413      	add	r3, r2
 8006738:	4a45      	ldr	r2, [pc, #276]	@ (8006850 <HAL_DMA_Init+0x140>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	009a      	lsls	r2, r3, #2
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a42      	ldr	r2, [pc, #264]	@ (8006854 <HAL_DMA_Init+0x144>)
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40
 800674c:	e00e      	b.n	800676c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	4b40      	ldr	r3, [pc, #256]	@ (8006858 <HAL_DMA_Init+0x148>)
 8006756:	4413      	add	r3, r2
 8006758:	4a3d      	ldr	r2, [pc, #244]	@ (8006850 <HAL_DMA_Init+0x140>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	009a      	lsls	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a3c      	ldr	r2, [pc, #240]	@ (800685c <HAL_DMA_Init+0x14c>)
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800679c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa76 	bl	8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067cc:	d102      	bne.n	80067d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <HAL_DMA_Init+0x104>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d80c      	bhi.n	8006814 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa96 	bl	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	e008      	b.n	8006826 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40020407 	.word	0x40020407
 800684c:	bffdfff8 	.word	0xbffdfff8
 8006850:	cccccccd 	.word	0xcccccccd
 8006854:	40020000 	.word	0x40020000
 8006858:	bffdfbf8 	.word	0xbffdfbf8
 800685c:	40020400 	.word	0x40020400

08006860 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_DMA_Start_IT+0x20>
 800687c:	2302      	movs	r3, #2
 800687e:	e066      	b.n	800694e <HAL_DMA_Start_IT+0xee>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d155      	bne.n	8006940 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f9bb 	bl	8006c34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 020e 	orr.w	r2, r2, #14
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e00f      	b.n	80068f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0204 	bic.w	r2, r2, #4
 80068e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 020a 	orr.w	r2, r2, #10
 80068f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006914:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800692c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e005      	b.n	800694c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006948:	2302      	movs	r3, #2
 800694a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d005      	beq.n	800697a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2204      	movs	r2, #4
 8006972:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e037      	b.n	80069ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 020e 	bic.w	r2, r2, #14
 8006988:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006998:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	f003 021f 	and.w	r2, r3, #31
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	2101      	movs	r1, #1
 80069b8:	fa01 f202 	lsl.w	r2, r1, r2
 80069bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80069e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d00d      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2204      	movs	r2, #4
 8006a24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
 8006a3a:	e047      	b.n	8006acc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 020e 	bic.w	r2, r2, #14
 8006a4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a70:	f003 021f 	and.w	r2, r3, #31
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	2101      	movs	r1, #1
 8006a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006aa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006aaa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
    }
  }
  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2204      	movs	r2, #4
 8006af8:	409a      	lsls	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d026      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x7a>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d021      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0204 	bic.w	r2, r2, #4
 8006b28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2e:	f003 021f 	and.w	r2, r3, #31
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	2104      	movs	r1, #4
 8006b38:	fa01 f202 	lsl.w	r2, r1, r2
 8006b3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d071      	beq.n	8006c2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b4e:	e06c      	b.n	8006c2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2202      	movs	r2, #2
 8006b5a:	409a      	lsls	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02e      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d029      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 020a 	bic.w	r2, r2, #10
 8006b8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b98:	f003 021f 	and.w	r2, r3, #31
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ba6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d038      	beq.n	8006c2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006bc0:	e033      	b.n	8006c2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	2208      	movs	r2, #8
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d025      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 020e 	bic.w	r2, r2, #14
 8006bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8006c02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
}
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c62:	f003 021f 	and.w	r2, r3, #31
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d108      	bne.n	8006c94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c92:	e007      	b.n	8006ca4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b16      	ldr	r3, [pc, #88]	@ (8006d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d802      	bhi.n	8006cca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006cc4:	4b15      	ldr	r3, [pc, #84]	@ (8006d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e001      	b.n	8006cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006cca:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ccc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	3b08      	subs	r3, #8
 8006cda:	4a12      	ldr	r2, [pc, #72]	@ (8006d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	009a      	lsls	r2, r3, #2
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4413      	add	r3, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2201      	movs	r2, #1
 8006d04:	409a      	lsls	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40020407 	.word	0x40020407
 8006d1c:	40020800 	.word	0x40020800
 8006d20:	40020820 	.word	0x40020820
 8006d24:	cccccccd 	.word	0xcccccccd
 8006d28:	40020880 	.word	0x40020880

08006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d4e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2201      	movs	r2, #1
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006d60:	bf00      	nop
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	1000823f 	.word	0x1000823f
 8006d70:	40020940 	.word	0x40020940

08006d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d82:	e15a      	b.n	800703a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	2101      	movs	r1, #1
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d90:	4013      	ands	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 814c 	beq.w	8007034 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d005      	beq.n	8006db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d130      	bne.n	8006e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dea:	2201      	movs	r2, #1
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43db      	mvns	r3, r3
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4013      	ands	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	f003 0201 	and.w	r2, r3, #1
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d017      	beq.n	8006e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4013      	ands	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d123      	bne.n	8006ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	08da      	lsrs	r2, r3, #3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3208      	adds	r2, #8
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	220f      	movs	r2, #15
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	08da      	lsrs	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3208      	adds	r2, #8
 8006ea0:	6939      	ldr	r1, [r7, #16]
 8006ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f003 0203 	and.w	r2, r3, #3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 80a6 	beq.w	8007034 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8007058 <HAL_GPIO_Init+0x2e4>)
 8006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eec:	4a5a      	ldr	r2, [pc, #360]	@ (8007058 <HAL_GPIO_Init+0x2e4>)
 8006eee:	f043 0301 	orr.w	r3, r3, #1
 8006ef2:	6613      	str	r3, [r2, #96]	@ 0x60
 8006ef4:	4b58      	ldr	r3, [pc, #352]	@ (8007058 <HAL_GPIO_Init+0x2e4>)
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f00:	4a56      	ldr	r2, [pc, #344]	@ (800705c <HAL_GPIO_Init+0x2e8>)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	089b      	lsrs	r3, r3, #2
 8006f06:	3302      	adds	r3, #2
 8006f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	220f      	movs	r2, #15
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006f2a:	d01f      	beq.n	8006f6c <HAL_GPIO_Init+0x1f8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8007060 <HAL_GPIO_Init+0x2ec>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d019      	beq.n	8006f68 <HAL_GPIO_Init+0x1f4>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a4b      	ldr	r2, [pc, #300]	@ (8007064 <HAL_GPIO_Init+0x2f0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <HAL_GPIO_Init+0x1f0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007068 <HAL_GPIO_Init+0x2f4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00d      	beq.n	8006f60 <HAL_GPIO_Init+0x1ec>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a49      	ldr	r2, [pc, #292]	@ (800706c <HAL_GPIO_Init+0x2f8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d007      	beq.n	8006f5c <HAL_GPIO_Init+0x1e8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a48      	ldr	r2, [pc, #288]	@ (8007070 <HAL_GPIO_Init+0x2fc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d101      	bne.n	8006f58 <HAL_GPIO_Init+0x1e4>
 8006f54:	2305      	movs	r3, #5
 8006f56:	e00a      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f58:	2306      	movs	r3, #6
 8006f5a:	e008      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	e006      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f60:	2303      	movs	r3, #3
 8006f62:	e004      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e002      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <HAL_GPIO_Init+0x1fa>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	f002 0203 	and.w	r2, r2, #3
 8006f74:	0092      	lsls	r2, r2, #2
 8006f76:	4093      	lsls	r3, r2
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f7e:	4937      	ldr	r1, [pc, #220]	@ (800705c <HAL_GPIO_Init+0x2e8>)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	3302      	adds	r3, #2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f8c:	4b39      	ldr	r3, [pc, #228]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	43db      	mvns	r3, r3
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006fb0:	4a30      	ldr	r2, [pc, #192]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fda:	4a26      	ldr	r2, [pc, #152]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006fe0:	4b24      	ldr	r3, [pc, #144]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4013      	ands	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007004:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800700a:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_GPIO_Init+0x300>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	43db      	mvns	r3, r3
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800702e:	4a11      	ldr	r2, [pc, #68]	@ (8007074 <HAL_GPIO_Init+0x300>)
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	3301      	adds	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	f47f ae9d 	bne.w	8006d84 <HAL_GPIO_Init+0x10>
  }
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40021000 	.word	0x40021000
 800705c:	40010000 	.word	0x40010000
 8007060:	48000400 	.word	0x48000400
 8007064:	48000800 	.word	0x48000800
 8007068:	48000c00 	.word	0x48000c00
 800706c:	48001000 	.word	0x48001000
 8007070:	48001400 	.word	0x48001400
 8007074:	40010400 	.word	0x40010400

08007078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	887b      	ldrh	r3, [r7, #2]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	e001      	b.n	800709a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	807b      	strh	r3, [r7, #2]
 80070b4:	4613      	mov	r3, r2
 80070b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070b8:	787b      	ldrb	r3, [r7, #1]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070c4:	e002      	b.n	80070cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070c6:	887a      	ldrh	r2, [r7, #2]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e08d      	b.n	8007206 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fb fd8a 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2224      	movs	r2, #36	@ 0x24
 8007108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0201 	bic.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007128:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007138:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	e006      	b.n	8007160 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800715e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d108      	bne.n	800717a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007176:	605a      	str	r2, [r3, #4]
 8007178:	e007      	b.n	800718a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007188:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800719c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1a      	ldr	r2, [r3, #32]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b20      	cmp	r3, #32
 8007222:	d138      	bne.n	8007296 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800722e:	2302      	movs	r3, #2
 8007230:	e032      	b.n	8007298 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	@ 0x24
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007260:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6819      	ldr	r1, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d139      	bne.n	800732e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e033      	b.n	8007330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2224      	movs	r2, #36	@ 0x24
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0201 	orr.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e000      	b.n	8007330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800732e:	2302      	movs	r3, #2
  }
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d141      	bne.n	80073ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800734a:	4b4b      	ldr	r3, [pc, #300]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007356:	d131      	bne.n	80073bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007358:	4b47      	ldr	r3, [pc, #284]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800735e:	4a46      	ldr	r2, [pc, #280]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007368:	4b43      	ldr	r3, [pc, #268]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007370:	4a41      	ldr	r2, [pc, #260]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007378:	4b40      	ldr	r3, [pc, #256]	@ (800747c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2232      	movs	r2, #50	@ 0x32
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	4a3f      	ldr	r2, [pc, #252]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	0c9b      	lsrs	r3, r3, #18
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800738e:	e002      	b.n	8007396 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3b01      	subs	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007396:	4b38      	ldr	r3, [pc, #224]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800739e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a2:	d102      	bne.n	80073aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f2      	bne.n	8007390 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073aa:	4b33      	ldr	r3, [pc, #204]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b6:	d158      	bne.n	800746a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e057      	b.n	800746c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80073cc:	e04d      	b.n	800746a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073d4:	d141      	bne.n	800745a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073d6:	4b28      	ldr	r3, [pc, #160]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e2:	d131      	bne.n	8007448 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073e4:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ea:	4a23      	ldr	r2, [pc, #140]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073f4:	4b20      	ldr	r3, [pc, #128]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80073fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007404:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2232      	movs	r2, #50	@ 0x32
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	4a1c      	ldr	r2, [pc, #112]	@ (8007480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	0c9b      	lsrs	r3, r3, #18
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800741a:	e002      	b.n	8007422 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3b01      	subs	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007422:	4b15      	ldr	r3, [pc, #84]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800742e:	d102      	bne.n	8007436 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f2      	bne.n	800741c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800743e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007442:	d112      	bne.n	800746a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e011      	b.n	800746c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744e:	4a0a      	ldr	r2, [pc, #40]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007458:	e007      	b.n	800746a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800745a:	4b07      	ldr	r3, [pc, #28]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007462:	4a05      	ldr	r2, [pc, #20]	@ (8007478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007464:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007468:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40007000 	.word	0x40007000
 800747c:	20000004 	.word	0x20000004
 8007480:	431bde83 	.word	0x431bde83

08007484 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800748e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007492:	6093      	str	r3, [r2, #8]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40007000 	.word	0x40007000

080074a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e2fe      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d075      	beq.n	80075ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074c2:	4b97      	ldr	r3, [pc, #604]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 030c 	and.w	r3, r3, #12
 80074ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074cc:	4b94      	ldr	r3, [pc, #592]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b0c      	cmp	r3, #12
 80074da:	d102      	bne.n	80074e2 <HAL_RCC_OscConfig+0x3e>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d002      	beq.n	80074e8 <HAL_RCC_OscConfig+0x44>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e8:	4b8d      	ldr	r3, [pc, #564]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05b      	beq.n	80075ac <HAL_RCC_OscConfig+0x108>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d157      	bne.n	80075ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e2d9      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007508:	d106      	bne.n	8007518 <HAL_RCC_OscConfig+0x74>
 800750a:	4b85      	ldr	r3, [pc, #532]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a84      	ldr	r2, [pc, #528]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e01d      	b.n	8007554 <HAL_RCC_OscConfig+0xb0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007520:	d10c      	bne.n	800753c <HAL_RCC_OscConfig+0x98>
 8007522:	4b7f      	ldr	r3, [pc, #508]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a7e      	ldr	r2, [pc, #504]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	4b7c      	ldr	r3, [pc, #496]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7b      	ldr	r2, [pc, #492]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e00b      	b.n	8007554 <HAL_RCC_OscConfig+0xb0>
 800753c:	4b78      	ldr	r3, [pc, #480]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a77      	ldr	r2, [pc, #476]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	4b75      	ldr	r3, [pc, #468]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a74      	ldr	r2, [pc, #464]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800754e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d013      	beq.n	8007584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fc fbcc 	bl	8003cf8 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007564:	f7fc fbc8 	bl	8003cf8 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	@ 0x64
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e29e      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007576:	4b6a      	ldr	r3, [pc, #424]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCC_OscConfig+0xc0>
 8007582:	e014      	b.n	80075ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007584:	f7fc fbb8 	bl	8003cf8 <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800758c:	f7fc fbb4 	bl	8003cf8 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b64      	cmp	r3, #100	@ 0x64
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e28a      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800759e:	4b60      	ldr	r3, [pc, #384]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f0      	bne.n	800758c <HAL_RCC_OscConfig+0xe8>
 80075aa:	e000      	b.n	80075ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d075      	beq.n	80076a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ba:	4b59      	ldr	r3, [pc, #356]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 030c 	and.w	r3, r3, #12
 80075c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075c4:	4b56      	ldr	r3, [pc, #344]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d102      	bne.n	80075da <HAL_RCC_OscConfig+0x136>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d002      	beq.n	80075e0 <HAL_RCC_OscConfig+0x13c>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d11f      	bne.n	8007620 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e0:	4b4f      	ldr	r3, [pc, #316]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_OscConfig+0x154>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e25d      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	4b49      	ldr	r3, [pc, #292]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	4946      	ldr	r1, [pc, #280]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800760c:	4b45      	ldr	r3, [pc, #276]	@ (8007724 <HAL_RCC_OscConfig+0x280>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fc fb25 	bl	8003c60 <HAL_InitTick>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d043      	beq.n	80076a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e249      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d023      	beq.n	8007670 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007628:	4b3d      	ldr	r3, [pc, #244]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3c      	ldr	r2, [pc, #240]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800762e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fc fb60 	bl	8003cf8 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800763c:	f7fc fb5c 	bl	8003cf8 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e232      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800764e:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800765a:	4b31      	ldr	r3, [pc, #196]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	061b      	lsls	r3, r3, #24
 8007668:	492d      	ldr	r1, [pc, #180]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 800766a:	4313      	orrs	r3, r2
 800766c:	604b      	str	r3, [r1, #4]
 800766e:	e01a      	b.n	80076a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007670:	4b2b      	ldr	r3, [pc, #172]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2a      	ldr	r2, [pc, #168]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007676:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800767a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fc fb3c 	bl	8003cf8 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007684:	f7fc fb38 	bl	8003cf8 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e20e      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007696:	4b22      	ldr	r3, [pc, #136]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x1e0>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d041      	beq.n	8007736 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01c      	beq.n	80076f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ba:	4b19      	ldr	r3, [pc, #100]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80076bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076c0:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ca:	f7fc fb15 	bl	8003cf8 <HAL_GetTick>
 80076ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d2:	f7fc fb11 	bl	8003cf8 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e1e7      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80076e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0ef      	beq.n	80076d2 <HAL_RCC_OscConfig+0x22e>
 80076f2:	e020      	b.n	8007736 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80076f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076fa:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <HAL_RCC_OscConfig+0x27c>)
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fc faf8 	bl	8003cf8 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800770a:	e00d      	b.n	8007728 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770c:	f7fc faf4 	bl	8003cf8 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d906      	bls.n	8007728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e1ca      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000
 8007724:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007728:	4b8c      	ldr	r3, [pc, #560]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800772a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ea      	bne.n	800770c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80a6 	beq.w	8007890 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007748:	4b84      	ldr	r3, [pc, #528]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_RCC_OscConfig+0x2b4>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <HAL_RCC_OscConfig+0x2b6>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800775e:	4b7f      	ldr	r3, [pc, #508]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007762:	4a7e      	ldr	r2, [pc, #504]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007768:	6593      	str	r3, [r2, #88]	@ 0x58
 800776a:	4b7c      	ldr	r3, [pc, #496]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007776:	2301      	movs	r3, #1
 8007778:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800777a:	4b79      	ldr	r3, [pc, #484]	@ (8007960 <HAL_RCC_OscConfig+0x4bc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d118      	bne.n	80077b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007786:	4b76      	ldr	r3, [pc, #472]	@ (8007960 <HAL_RCC_OscConfig+0x4bc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a75      	ldr	r2, [pc, #468]	@ (8007960 <HAL_RCC_OscConfig+0x4bc>)
 800778c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007792:	f7fc fab1 	bl	8003cf8 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779a:	f7fc faad 	bl	8003cf8 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e183      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ac:	4b6c      	ldr	r3, [pc, #432]	@ (8007960 <HAL_RCC_OscConfig+0x4bc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d108      	bne.n	80077d2 <HAL_RCC_OscConfig+0x32e>
 80077c0:	4b66      	ldr	r3, [pc, #408]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c6:	4a65      	ldr	r2, [pc, #404]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077d0:	e024      	b.n	800781c <HAL_RCC_OscConfig+0x378>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d110      	bne.n	80077fc <HAL_RCC_OscConfig+0x358>
 80077da:	4b60      	ldr	r3, [pc, #384]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e0:	4a5e      	ldr	r2, [pc, #376]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077e2:	f043 0304 	orr.w	r3, r3, #4
 80077e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077ea:	4b5c      	ldr	r3, [pc, #368]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f0:	4a5a      	ldr	r2, [pc, #360]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077fa:	e00f      	b.n	800781c <HAL_RCC_OscConfig+0x378>
 80077fc:	4b57      	ldr	r3, [pc, #348]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	4a56      	ldr	r2, [pc, #344]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800780c:	4b53      	ldr	r3, [pc, #332]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007812:	4a52      	ldr	r2, [pc, #328]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007814:	f023 0304 	bic.w	r3, r3, #4
 8007818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d016      	beq.n	8007852 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007824:	f7fc fa68 	bl	8003cf8 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800782a:	e00a      	b.n	8007842 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782c:	f7fc fa64 	bl	8003cf8 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800783a:	4293      	cmp	r3, r2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e138      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007842:	4b46      	ldr	r3, [pc, #280]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0ed      	beq.n	800782c <HAL_RCC_OscConfig+0x388>
 8007850:	e015      	b.n	800787e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007852:	f7fc fa51 	bl	8003cf8 <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007858:	e00a      	b.n	8007870 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fc fa4d 	bl	8003cf8 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e121      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007870:	4b3a      	ldr	r3, [pc, #232]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1ed      	bne.n	800785a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800787e:	7ffb      	ldrb	r3, [r7, #31]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007884:	4b35      	ldr	r3, [pc, #212]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007888:	4a34      	ldr	r2, [pc, #208]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800788a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800788e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01c      	beq.n	80078de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078a4:	4b2d      	ldr	r3, [pc, #180]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80078a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078aa:	4a2c      	ldr	r2, [pc, #176]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fc fa20 	bl	8003cf8 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078bc:	f7fc fa1c 	bl	8003cf8 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e0f2      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ce:	4b23      	ldr	r3, [pc, #140]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80078d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ef      	beq.n	80078bc <HAL_RCC_OscConfig+0x418>
 80078dc:	e01b      	b.n	8007916 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078de:	4b1f      	ldr	r3, [pc, #124]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80078e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078e4:	4a1d      	ldr	r2, [pc, #116]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fc fa03 	bl	8003cf8 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f6:	f7fc f9ff 	bl	8003cf8 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e0d5      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007908:	4b14      	ldr	r3, [pc, #80]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800790a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ef      	bne.n	80078f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80c9 	beq.w	8007ab2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007920:	4b0e      	ldr	r3, [pc, #56]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 030c 	and.w	r3, r3, #12
 8007928:	2b0c      	cmp	r3, #12
 800792a:	f000 8083 	beq.w	8007a34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d15e      	bne.n	80079f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007936:	4b09      	ldr	r3, [pc, #36]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a08      	ldr	r2, [pc, #32]	@ (800795c <HAL_RCC_OscConfig+0x4b8>)
 800793c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007942:	f7fc f9d9 	bl	8003cf8 <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007948:	e00c      	b.n	8007964 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794a:	f7fc f9d5 	bl	8003cf8 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d905      	bls.n	8007964 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e0ab      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
 800795c:	40021000 	.word	0x40021000
 8007960:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007964:	4b55      	ldr	r3, [pc, #340]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ec      	bne.n	800794a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007970:	4b52      	ldr	r3, [pc, #328]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	4b52      	ldr	r3, [pc, #328]	@ (8007ac0 <HAL_RCC_OscConfig+0x61c>)
 8007976:	4013      	ands	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6a11      	ldr	r1, [r2, #32]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007980:	3a01      	subs	r2, #1
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	4311      	orrs	r1, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800798a:	0212      	lsls	r2, r2, #8
 800798c:	4311      	orrs	r1, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007992:	0852      	lsrs	r2, r2, #1
 8007994:	3a01      	subs	r2, #1
 8007996:	0552      	lsls	r2, r2, #21
 8007998:	4311      	orrs	r1, r2
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800799e:	0852      	lsrs	r2, r2, #1
 80079a0:	3a01      	subs	r2, #1
 80079a2:	0652      	lsls	r2, r2, #25
 80079a4:	4311      	orrs	r1, r2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80079aa:	06d2      	lsls	r2, r2, #27
 80079ac:	430a      	orrs	r2, r1
 80079ae:	4943      	ldr	r1, [pc, #268]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079b4:	4b41      	ldr	r3, [pc, #260]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a40      	ldr	r2, [pc, #256]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079c0:	4b3e      	ldr	r3, [pc, #248]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4a3d      	ldr	r2, [pc, #244]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fc f994 	bl	8003cf8 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d4:	f7fc f990 	bl	8003cf8 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e066      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079e6:	4b35      	ldr	r3, [pc, #212]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x530>
 80079f2:	e05e      	b.n	8007ab2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f4:	4b31      	ldr	r3, [pc, #196]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a30      	ldr	r2, [pc, #192]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 80079fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a00:	f7fc f97a 	bl	8003cf8 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a08:	f7fc f976 	bl	8003cf8 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e04c      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a1a:	4b28      	ldr	r3, [pc, #160]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a26:	4b25      	ldr	r3, [pc, #148]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	4924      	ldr	r1, [pc, #144]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007a2c:	4b25      	ldr	r3, [pc, #148]	@ (8007ac4 <HAL_RCC_OscConfig+0x620>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	60cb      	str	r3, [r1, #12]
 8007a32:	e03e      	b.n	8007ab2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e039      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007a40:	4b1e      	ldr	r3, [pc, #120]	@ (8007abc <HAL_RCC_OscConfig+0x618>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f003 0203 	and.w	r2, r3, #3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d12c      	bne.n	8007aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d123      	bne.n	8007aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d11b      	bne.n	8007aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d113      	bne.n	8007aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	3b01      	subs	r3, #1
 8007a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d109      	bne.n	8007aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d001      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	019f800c 	.word	0x019f800c
 8007ac4:	feeefffc 	.word	0xfeeefffc

08007ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e11e      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae0:	4b91      	ldr	r3, [pc, #580]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d910      	bls.n	8007b10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aee:	4b8e      	ldr	r3, [pc, #568]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f023 020f 	bic.w	r2, r3, #15
 8007af6:	498c      	ldr	r1, [pc, #560]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b8a      	ldr	r3, [pc, #552]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e106      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d073      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d129      	bne.n	8007b78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b24:	4b81      	ldr	r3, [pc, #516]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e0f4      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007b34:	f000 f9e4 	bl	8007f00 <RCC_GetSysClockFreqFromPLLSource>
 8007b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4a7c      	ldr	r2, [pc, #496]	@ (8007d30 <HAL_RCC_ClockConfig+0x268>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d93f      	bls.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b42:	4b7a      	ldr	r3, [pc, #488]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d033      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d12f      	bne.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b62:	4b72      	ldr	r3, [pc, #456]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b6a:	4a70      	ldr	r2, [pc, #448]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b72:	2380      	movs	r3, #128	@ 0x80
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	e024      	b.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d107      	bne.n	8007b90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b80:	4b6a      	ldr	r3, [pc, #424]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0c6      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b90:	4b66      	ldr	r3, [pc, #408]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e0be      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ba0:	f000 f914 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 8007ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4a61      	ldr	r2, [pc, #388]	@ (8007d30 <HAL_RCC_ClockConfig+0x268>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d909      	bls.n	8007bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bae:	4b5f      	ldr	r3, [pc, #380]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007bbe:	2380      	movs	r3, #128	@ 0x80
 8007bc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f023 0203 	bic.w	r2, r3, #3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	4957      	ldr	r1, [pc, #348]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd4:	f7fc f890 	bl	8003cf8 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bda:	e00a      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bdc:	f7fc f88c 	bl	8003cf8 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e095      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 020c 	and.w	r2, r3, #12
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d1eb      	bne.n	8007bdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d023      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c1c:	4b43      	ldr	r3, [pc, #268]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4a42      	ldr	r2, [pc, #264]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c34:	4b3d      	ldr	r3, [pc, #244]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c44:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4936      	ldr	r1, [pc, #216]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	608b      	str	r3, [r1, #8]
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b80      	cmp	r3, #128	@ 0x80
 8007c5c:	d105      	bne.n	8007c6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c5e:	4b33      	ldr	r3, [pc, #204]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	4a32      	ldr	r2, [pc, #200]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007c64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d21d      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c78:	4b2b      	ldr	r3, [pc, #172]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f023 020f 	bic.w	r2, r3, #15
 8007c80:	4929      	ldr	r1, [pc, #164]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c88:	f7fc f836 	bl	8003cf8 <HAL_GetTick>
 8007c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c90:	f7fc f832 	bl	8003cf8 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e03b      	b.n	8007d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca6:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <HAL_RCC_ClockConfig+0x260>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d1ed      	bne.n	8007c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4917      	ldr	r1, [pc, #92]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cde:	4b13      	ldr	r3, [pc, #76]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	490f      	ldr	r1, [pc, #60]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cf2:	f000 f86b 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d2c <HAL_RCC_ClockConfig+0x264>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	490c      	ldr	r1, [pc, #48]	@ (8007d34 <HAL_RCC_ClockConfig+0x26c>)
 8007d04:	5ccb      	ldrb	r3, [r1, r3]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d38 <HAL_RCC_ClockConfig+0x270>)
 8007d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d12:	4b0a      	ldr	r3, [pc, #40]	@ (8007d3c <HAL_RCC_ClockConfig+0x274>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fb ffa2 	bl	8003c60 <HAL_InitTick>
 8007d1c:	4603      	mov	r3, r0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40022000 	.word	0x40022000
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	04c4b400 	.word	0x04c4b400
 8007d34:	0800c7a0 	.word	0x0800c7a0
 8007d38:	20000004 	.word	0x20000004
 8007d3c:	20000010 	.word	0x20000010

08007d40 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	@ 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d50:	2303      	movs	r3, #3
 8007d52:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8007d6c:	029b      	lsls	r3, r3, #10
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <HAL_RCC_MCOConfig+0x88>)
 8007d7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	4910      	ldr	r1, [pc, #64]	@ (8007dc8 <HAL_RCC_MCOConfig+0x88>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007d9a:	f107 0310 	add.w	r3, r7, #16
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da2:	f7fe ffe7 	bl	8006d74 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <HAL_RCC_MCOConfig+0x88>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	430b      	orrs	r3, r1
 8007dba:	4903      	ldr	r1, [pc, #12]	@ (8007dc8 <HAL_RCC_MCOConfig+0x88>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	608b      	str	r3, [r1, #8]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3730      	adds	r7, #48	@ 0x30
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40021000 	.word	0x40021000

08007dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 030c 	and.w	r3, r3, #12
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d102      	bne.n	8007de4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dde:	4b2a      	ldr	r3, [pc, #168]	@ (8007e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e047      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007de4:	4b27      	ldr	r3, [pc, #156]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 030c 	and.w	r3, r3, #12
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d102      	bne.n	8007df6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007df0:	4b26      	ldr	r3, [pc, #152]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	e03e      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007df6:	4b23      	ldr	r3, [pc, #140]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b0c      	cmp	r3, #12
 8007e00:	d136      	bne.n	8007e70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e02:	4b20      	ldr	r3, [pc, #128]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	091b      	lsrs	r3, r3, #4
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	3301      	adds	r3, #1
 8007e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d10c      	bne.n	8007e3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e20:	4a1a      	ldr	r2, [pc, #104]	@ (8007e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e28:	4a16      	ldr	r2, [pc, #88]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e2a:	68d2      	ldr	r2, [r2, #12]
 8007e2c:	0a12      	lsrs	r2, r2, #8
 8007e2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
 8007e36:	617b      	str	r3, [r7, #20]
      break;
 8007e38:	e00c      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e3a:	4a13      	ldr	r2, [pc, #76]	@ (8007e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	4a10      	ldr	r2, [pc, #64]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e44:	68d2      	ldr	r2, [r2, #12]
 8007e46:	0a12      	lsrs	r2, r2, #8
 8007e48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]
      break;
 8007e52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e54:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	0e5b      	lsrs	r3, r3, #25
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	3301      	adds	r3, #1
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	e001      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e74:	693b      	ldr	r3, [r7, #16]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40021000 	.word	0x40021000
 8007e88:	00f42400 	.word	0x00f42400
 8007e8c:	017d7840 	.word	0x017d7840

08007e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e94:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e96:	681b      	ldr	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000004 	.word	0x20000004

08007ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007eac:	f7ff fff0 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	4904      	ldr	r1, [pc, #16]	@ (8007ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ebe:	5ccb      	ldrb	r3, [r1, r3]
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40021000 	.word	0x40021000
 8007ed0:	0800c7b0 	.word	0x0800c7b0

08007ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ed8:	f7ff ffda 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	0adb      	lsrs	r3, r3, #11
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4904      	ldr	r1, [pc, #16]	@ (8007efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	0800c7b0 	.word	0x0800c7b0

08007f00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f06:	4b1e      	ldr	r3, [pc, #120]	@ (8007f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f10:	4b1b      	ldr	r3, [pc, #108]	@ (8007f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d10c      	bne.n	8007f3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f24:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	4a14      	ldr	r2, [pc, #80]	@ (8007f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f2e:	68d2      	ldr	r2, [r2, #12]
 8007f30:	0a12      	lsrs	r2, r2, #8
 8007f32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	617b      	str	r3, [r7, #20]
    break;
 8007f3c:	e00c      	b.n	8007f58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f3e:	4a12      	ldr	r2, [pc, #72]	@ (8007f88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	4a0e      	ldr	r2, [pc, #56]	@ (8007f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f48:	68d2      	ldr	r2, [r2, #12]
 8007f4a:	0a12      	lsrs	r2, r2, #8
 8007f4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f50:	fb02 f303 	mul.w	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
    break;
 8007f56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f58:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	0e5b      	lsrs	r3, r3, #25
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	3301      	adds	r3, #1
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f72:	687b      	ldr	r3, [r7, #4]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	40021000 	.word	0x40021000
 8007f84:	017d7840 	.word	0x017d7840
 8007f88:	00f42400 	.word	0x00f42400

08007f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f94:	2300      	movs	r3, #0
 8007f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f98:	2300      	movs	r3, #0
 8007f9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8098 	beq.w	80080da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007faa:	2300      	movs	r3, #0
 8007fac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fae:	4b43      	ldr	r3, [pc, #268]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10d      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fba:	4b40      	ldr	r3, [pc, #256]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a39      	ldr	r2, [pc, #228]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe2:	f7fb fe89 	bl	8003cf8 <HAL_GetTick>
 8007fe6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fe8:	e009      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fea:	f7fb fe85 	bl	8003cf8 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d902      	bls.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	74fb      	strb	r3, [r7, #19]
        break;
 8007ffc:	e005      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ffe:	4b30      	ldr	r3, [pc, #192]	@ (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0ef      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800800a:	7cfb      	ldrb	r3, [r7, #19]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d159      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008010:	4b2a      	ldr	r3, [pc, #168]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800801a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01e      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	429a      	cmp	r2, r3
 800802a:	d019      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800802c:	4b23      	ldr	r3, [pc, #140]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008038:	4b20      	ldr	r3, [pc, #128]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803e:	4a1f      	ldr	r2, [pc, #124]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008048:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804e:	4a1b      	ldr	r2, [pc, #108]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008058:	4a18      	ldr	r2, [pc, #96]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806a:	f7fb fe45 	bl	8003cf8 <HAL_GetTick>
 800806e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008070:	e00b      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008072:	f7fb fe41 	bl	8003cf8 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008080:	4293      	cmp	r3, r2
 8008082:	d902      	bls.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	74fb      	strb	r3, [r7, #19]
            break;
 8008088:	e006      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800808a:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0ec      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008098:	7cfb      	ldrb	r3, [r7, #19]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800809e:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ac:	4903      	ldr	r1, [pc, #12]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80080b4:	e008      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	74bb      	strb	r3, [r7, #18]
 80080ba:	e005      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80080bc:	40021000 	.word	0x40021000
 80080c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	7cfb      	ldrb	r3, [r7, #19]
 80080c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080c8:	7c7b      	ldrb	r3, [r7, #17]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d105      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ce:	4ba7      	ldr	r3, [pc, #668]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d2:	4aa6      	ldr	r2, [pc, #664]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080e6:	4ba1      	ldr	r3, [pc, #644]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ec:	f023 0203 	bic.w	r2, r3, #3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	499d      	ldr	r1, [pc, #628]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008108:	4b98      	ldr	r3, [pc, #608]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810e:	f023 020c 	bic.w	r2, r3, #12
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4995      	ldr	r1, [pc, #596]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008118:	4313      	orrs	r3, r2
 800811a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800812a:	4b90      	ldr	r3, [pc, #576]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800812c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008130:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	498c      	ldr	r1, [pc, #560]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800814c:	4b87      	ldr	r3, [pc, #540]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008152:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	4984      	ldr	r1, [pc, #528]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800816e:	4b7f      	ldr	r3, [pc, #508]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	497b      	ldr	r1, [pc, #492]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008190:	4b76      	ldr	r3, [pc, #472]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008196:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	4973      	ldr	r1, [pc, #460]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081b2:	4b6e      	ldr	r3, [pc, #440]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	496a      	ldr	r1, [pc, #424]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081d4:	4b65      	ldr	r3, [pc, #404]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	4962      	ldr	r1, [pc, #392]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081f6:	4b5d      	ldr	r3, [pc, #372]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	4959      	ldr	r1, [pc, #356]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008218:	4b54      	ldr	r3, [pc, #336]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800821a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800821e:	f023 0203 	bic.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	4951      	ldr	r1, [pc, #324]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800823a:	4b4c      	ldr	r3, [pc, #304]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800823c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008240:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	4948      	ldr	r1, [pc, #288]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008258:	2b00      	cmp	r3, #0
 800825a:	d015      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800825c:	4b43      	ldr	r3, [pc, #268]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826a:	4940      	ldr	r1, [pc, #256]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800827a:	d105      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800827c:	4b3b      	ldr	r3, [pc, #236]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a3a      	ldr	r2, [pc, #232]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008286:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008290:	2b00      	cmp	r3, #0
 8008292:	d015      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008294:	4b35      	ldr	r3, [pc, #212]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a2:	4932      	ldr	r1, [pc, #200]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082b2:	d105      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082b4:	4b2d      	ldr	r3, [pc, #180]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	4a2c      	ldr	r2, [pc, #176]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082be:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d015      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082cc:	4b27      	ldr	r3, [pc, #156]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	4924      	ldr	r1, [pc, #144]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ea:	d105      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ec:	4b1f      	ldr	r3, [pc, #124]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	4a1e      	ldr	r2, [pc, #120]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d015      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008304:	4b19      	ldr	r3, [pc, #100]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008312:	4916      	ldr	r1, [pc, #88]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008322:	d105      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008324:	4b11      	ldr	r3, [pc, #68]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	4a10      	ldr	r2, [pc, #64]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800832a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800832e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d019      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800833c:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008342:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	4908      	ldr	r1, [pc, #32]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800835a:	d109      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800835c:	4b03      	ldr	r3, [pc, #12]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	4a02      	ldr	r2, [pc, #8]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008366:	60d3      	str	r3, [r2, #12]
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800836a:	bf00      	nop
 800836c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d015      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800837c:	4b29      	ldr	r3, [pc, #164]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008382:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838a:	4926      	ldr	r1, [pc, #152]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800839a:	d105      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800839c:	4b21      	ldr	r3, [pc, #132]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4a20      	ldr	r2, [pc, #128]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d015      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80083b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083c2:	4918      	ldr	r1, [pc, #96]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083d2:	d105      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083d4:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a12      	ldr	r2, [pc, #72]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083fa:	490a      	ldr	r1, [pc, #40]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800840a:	d105      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	4a04      	ldr	r2, [pc, #16]	@ (8008424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008418:	7cbb      	ldrb	r3, [r7, #18]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40021000 	.word	0x40021000

08008428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e09d      	b.n	8008576 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d108      	bne.n	8008454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844a:	d009      	beq.n	8008460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	61da      	str	r2, [r3, #28]
 8008452:	e005      	b.n	8008460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fa fc42 	bl	8002d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008496:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084a0:	d902      	bls.n	80084a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	e002      	b.n	80084ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80084b6:	d007      	beq.n	80084c8 <HAL_SPI_Init+0xa0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084c0:	d002      	beq.n	80084c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800850a:	ea42 0103 	orr.w	r1, r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	f003 0204 	and.w	r2, r3, #4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008544:	ea42 0103 	orr.w	r1, r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69da      	ldr	r2, [r3, #28]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008564:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b088      	sub	sp, #32
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_SPI_Transmit+0x22>
 800859c:	2302      	movs	r3, #2
 800859e:	e15f      	b.n	8008860 <HAL_SPI_Transmit+0x2e2>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085a8:	f7fb fba6 	bl	8003cf8 <HAL_GetTick>
 80085ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d002      	beq.n	80085c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085be:	2302      	movs	r3, #2
 80085c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085c2:	e148      	b.n	8008856 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <HAL_SPI_Transmit+0x52>
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085d4:	e13f      	b.n	8008856 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2203      	movs	r2, #3
 80085da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	88fa      	ldrh	r2, [r7, #6]
 80085f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008620:	d10f      	bne.n	8008642 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b40      	cmp	r3, #64	@ 0x40
 800864e:	d007      	beq.n	8008660 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800865e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008668:	d94f      	bls.n	800870a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_SPI_Transmit+0xfa>
 8008672:	8afb      	ldrh	r3, [r7, #22]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d142      	bne.n	80086fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	1c9a      	adds	r2, r3, #2
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800869c:	e02f      	b.n	80086fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d112      	bne.n	80086d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	881a      	ldrh	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086bc:	1c9a      	adds	r2, r3, #2
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086d0:	e015      	b.n	80086fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086d2:	f7fb fb11 	bl	8003cf8 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d803      	bhi.n	80086ea <HAL_SPI_Transmit+0x16c>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e8:	d102      	bne.n	80086f0 <HAL_SPI_Transmit+0x172>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80086fc:	e0ab      	b.n	8008856 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1ca      	bne.n	800869e <HAL_SPI_Transmit+0x120>
 8008708:	e080      	b.n	800880c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <HAL_SPI_Transmit+0x19a>
 8008712:	8afb      	ldrh	r3, [r7, #22]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d174      	bne.n	8008802 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d912      	bls.n	8008748 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008726:	881a      	ldrh	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008732:	1c9a      	adds	r2, r3, #2
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b02      	subs	r3, #2
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008746:	e05c      	b.n	8008802 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	7812      	ldrb	r2, [r2, #0]
 8008754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800876e:	e048      	b.n	8008802 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b02      	cmp	r3, #2
 800877c:	d12b      	bne.n	80087d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	d912      	bls.n	80087ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878c:	881a      	ldrh	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b02      	subs	r3, #2
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087ac:	e029      	b.n	8008802 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087d4:	e015      	b.n	8008802 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087d6:	f7fb fa8f 	bl	8003cf8 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d803      	bhi.n	80087ee <HAL_SPI_Transmit+0x270>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d102      	bne.n	80087f4 <HAL_SPI_Transmit+0x276>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008800:	e029      	b.n	8008856 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1b1      	bne.n	8008770 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f947 	bl	8008aa4 <SPI_EndRxTxTransaction>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e003      	b.n	8008856 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800885e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008878:	f7fb fa3e 	bl	8003cf8 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4413      	add	r3, r2
 8008886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008888:	f7fb fa36 	bl	8003cf8 <HAL_GetTick>
 800888c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800888e:	4b39      	ldr	r3, [pc, #228]	@ (8008974 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	015b      	lsls	r3, r3, #5
 8008894:	0d1b      	lsrs	r3, r3, #20
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800889e:	e054      	b.n	800894a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d050      	beq.n	800894a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088a8:	f7fb fa26 	bl	8003cf8 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d902      	bls.n	80088be <SPI_WaitFlagStateUntilTimeout+0x56>
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d13d      	bne.n	800893a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088d6:	d111      	bne.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e0:	d004      	beq.n	80088ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ea:	d107      	bne.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008904:	d10f      	bne.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e017      	b.n	800896a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	3b01      	subs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	429a      	cmp	r2, r3
 8008966:	d19b      	bne.n	80088a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000004 	.word	0x20000004

08008978 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	@ 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800898a:	f7fb f9b5 	bl	8003cf8 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	4413      	add	r3, r2
 8008998:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800899a:	f7fb f9ad 	bl	8003cf8 <HAL_GetTick>
 800899e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80089a8:	4b3d      	ldr	r3, [pc, #244]	@ (8008aa0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	00da      	lsls	r2, r3, #3
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	0d1b      	lsrs	r3, r3, #20
 80089b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
 80089be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80089c0:	e060      	b.n	8008a84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80089c8:	d107      	bne.n	80089da <SPI_WaitFifoStateUntilTimeout+0x62>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d050      	beq.n	8008a84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089e2:	f7fb f989 	bl	8003cf8 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d902      	bls.n	80089f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d13d      	bne.n	8008a74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a10:	d111      	bne.n	8008a36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a1a:	d004      	beq.n	8008a26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a24:	d107      	bne.n	8008a36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a3e:	d10f      	bne.n	8008a60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e010      	b.n	8008a96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d196      	bne.n	80089c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3728      	adds	r7, #40	@ 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000004 	.word	0x20000004

08008aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff ff5b 	bl	8008978 <SPI_WaitFifoStateUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008acc:	f043 0220 	orr.w	r2, r3, #32
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e027      	b.n	8008b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2180      	movs	r1, #128	@ 0x80
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7ff fec0 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008af2:	f043 0220 	orr.w	r2, r3, #32
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e014      	b.n	8008b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff ff34 	bl	8008978 <SPI_WaitFifoStateUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b1a:	f043 0220 	orr.w	r2, r3, #32
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e000      	b.n	8008b28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e049      	b.n	8008bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7fa f918 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f000 fae0 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d001      	beq.n	8008bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e04c      	b.n	8008c92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a26      	ldr	r2, [pc, #152]	@ (8008ca0 <HAL_TIM_Base_Start+0xc0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d022      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c12:	d01d      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <HAL_TIM_Base_Start+0xc4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d018      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <HAL_TIM_Base_Start+0xc8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <HAL_TIM_Base_Start+0xcc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00e      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb0 <HAL_TIM_Base_Start+0xd0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb4 <HAL_TIM_Base_Start+0xd4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_TIM_Base_Start+0x70>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb8 <HAL_TIM_Base_Start+0xd8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d115      	bne.n	8008c7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	4b19      	ldr	r3, [pc, #100]	@ (8008cbc <HAL_TIM_Base_Start+0xdc>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d015      	beq.n	8008c8e <HAL_TIM_Base_Start+0xae>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c68:	d011      	beq.n	8008c8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c7a:	e008      	b.n	8008c8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e000      	b.n	8008c90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40012c00 	.word	0x40012c00
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	40014000 	.word	0x40014000
 8008cb8:	40015000 	.word	0x40015000
 8008cbc:	00010007 	.word	0x00010007

08008cc0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6a1a      	ldr	r2, [r3, #32]
 8008cce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10f      	bne.n	8008cf8 <HAL_TIM_Base_Stop+0x38>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d107      	bne.n	8008cf8 <HAL_TIM_Base_Stop+0x38>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e049      	b.n	8008db4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f841 	bl	8008dbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f000 f9f1 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_TIM_IC_ConfigChannel+0x1e>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e088      	b.n	8008f00 <HAL_TIM_IC_ConfigChannel+0x130>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008e0c:	f000 fa46 	bl	800929c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 020c 	bic.w	r2, r2, #12
 8008e1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6999      	ldr	r1, [r3, #24]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	619a      	str	r2, [r3, #24]
 8008e32:	e060      	b.n	8008ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d11c      	bne.n	8008e74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008e4a:	f000 faca 	bl	80093e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008e5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6999      	ldr	r1, [r3, #24]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	021a      	lsls	r2, r3, #8
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	619a      	str	r2, [r3, #24]
 8008e72:	e040      	b.n	8008ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d11b      	bne.n	8008eb2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008e8a:	f000 fb17 	bl	80094bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69da      	ldr	r2, [r3, #28]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 020c 	bic.w	r2, r2, #12
 8008e9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69d9      	ldr	r1, [r3, #28]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	61da      	str	r2, [r3, #28]
 8008eb0:	e021      	b.n	8008ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b0c      	cmp	r3, #12
 8008eb6:	d11c      	bne.n	8008ef2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008ec8:	f000 fb34 	bl	8009534 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008eda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69d9      	ldr	r1, [r3, #28]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	61da      	str	r2, [r3, #28]
 8008ef0:	e001      	b.n	8008ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_TIM_ConfigClockSource+0x1c>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e0f6      	b.n	8009112 <HAL_TIM_ConfigClockSource+0x20a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a6f      	ldr	r2, [pc, #444]	@ (800911c <HAL_TIM_ConfigClockSource+0x214>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f000 80c1 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f64:	4a6d      	ldr	r2, [pc, #436]	@ (800911c <HAL_TIM_ConfigClockSource+0x214>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	f200 80c6 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8009120 <HAL_TIM_ConfigClockSource+0x218>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	f000 80b9 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f74:	4a6a      	ldr	r2, [pc, #424]	@ (8009120 <HAL_TIM_ConfigClockSource+0x218>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	f200 80be 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f7c:	4a69      	ldr	r2, [pc, #420]	@ (8009124 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	f000 80b1 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f84:	4a67      	ldr	r2, [pc, #412]	@ (8009124 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f200 80b6 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f8c:	4a66      	ldr	r2, [pc, #408]	@ (8009128 <HAL_TIM_ConfigClockSource+0x220>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f000 80a9 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008f94:	4a64      	ldr	r2, [pc, #400]	@ (8009128 <HAL_TIM_ConfigClockSource+0x220>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	f200 80ae 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f9c:	4a63      	ldr	r2, [pc, #396]	@ (800912c <HAL_TIM_ConfigClockSource+0x224>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f000 80a1 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fa4:	4a61      	ldr	r2, [pc, #388]	@ (800912c <HAL_TIM_ConfigClockSource+0x224>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	f200 80a6 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fac:	4a60      	ldr	r2, [pc, #384]	@ (8009130 <HAL_TIM_ConfigClockSource+0x228>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	f000 8099 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8009130 <HAL_TIM_ConfigClockSource+0x228>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	f200 809e 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fc0:	f000 8091 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fc8:	f200 8096 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd0:	f000 8089 	beq.w	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8008fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd8:	f200 808e 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe0:	d03e      	beq.n	8009060 <HAL_TIM_ConfigClockSource+0x158>
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe6:	f200 8087 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	f000 8086 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x1f6>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	d87f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff8:	2b70      	cmp	r3, #112	@ 0x70
 8008ffa:	d01a      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0x12a>
 8008ffc:	2b70      	cmp	r3, #112	@ 0x70
 8008ffe:	d87b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009000:	2b60      	cmp	r3, #96	@ 0x60
 8009002:	d050      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x19e>
 8009004:	2b60      	cmp	r3, #96	@ 0x60
 8009006:	d877      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009008:	2b50      	cmp	r3, #80	@ 0x50
 800900a:	d03c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0x17e>
 800900c:	2b50      	cmp	r3, #80	@ 0x50
 800900e:	d873      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009010:	2b40      	cmp	r3, #64	@ 0x40
 8009012:	d058      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x1be>
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	d86f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009018:	2b30      	cmp	r3, #48	@ 0x30
 800901a:	d064      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 800901c:	2b30      	cmp	r3, #48	@ 0x30
 800901e:	d86b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009020:	2b20      	cmp	r3, #32
 8009022:	d060      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d867      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05c      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d05a      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x1de>
 8009030:	e062      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009042:	f000 fad1 	bl	80095e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	609a      	str	r2, [r3, #8]
      break;
 800905e:	e04f      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009070:	f000 faba 	bl	80095e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009082:	609a      	str	r2, [r3, #8]
      break;
 8009084:	e03c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009092:	461a      	mov	r2, r3
 8009094:	f000 f976 	bl	8009384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2150      	movs	r1, #80	@ 0x50
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fa85 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 80090a4:	e02c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090b2:	461a      	mov	r2, r3
 80090b4:	f000 f9d2 	bl	800945c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2160      	movs	r1, #96	@ 0x60
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fa75 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 80090c4:	e01c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d2:	461a      	mov	r2, r3
 80090d4:	f000 f956 	bl	8009384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2140      	movs	r1, #64	@ 0x40
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fa65 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 80090e4:	e00c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 fa5c 	bl	80095ae <TIM_ITRx_SetConfig>
      break;
 80090f6:	e003      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
      break;
 80090fc:	e000      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80090fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	00100070 	.word	0x00100070
 8009120:	00100060 	.word	0x00100060
 8009124:	00100050 	.word	0x00100050
 8009128:	00100040 	.word	0x00100040
 800912c:	00100030 	.word	0x00100030
 8009130:	00100020 	.word	0x00100020

08009134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a4c      	ldr	r2, [pc, #304]	@ (8009278 <TIM_Base_SetConfig+0x144>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d017      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009152:	d013      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a49      	ldr	r2, [pc, #292]	@ (800927c <TIM_Base_SetConfig+0x148>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00f      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a48      	ldr	r2, [pc, #288]	@ (8009280 <TIM_Base_SetConfig+0x14c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00b      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a47      	ldr	r2, [pc, #284]	@ (8009284 <TIM_Base_SetConfig+0x150>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d007      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a46      	ldr	r2, [pc, #280]	@ (8009288 <TIM_Base_SetConfig+0x154>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d003      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a45      	ldr	r2, [pc, #276]	@ (800928c <TIM_Base_SetConfig+0x158>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d108      	bne.n	800918e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a39      	ldr	r2, [pc, #228]	@ (8009278 <TIM_Base_SetConfig+0x144>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d023      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800919c:	d01f      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a36      	ldr	r2, [pc, #216]	@ (800927c <TIM_Base_SetConfig+0x148>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01b      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a35      	ldr	r2, [pc, #212]	@ (8009280 <TIM_Base_SetConfig+0x14c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d017      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a34      	ldr	r2, [pc, #208]	@ (8009284 <TIM_Base_SetConfig+0x150>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a33      	ldr	r2, [pc, #204]	@ (8009288 <TIM_Base_SetConfig+0x154>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00f      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a33      	ldr	r2, [pc, #204]	@ (8009290 <TIM_Base_SetConfig+0x15c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00b      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a32      	ldr	r2, [pc, #200]	@ (8009294 <TIM_Base_SetConfig+0x160>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d007      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a31      	ldr	r2, [pc, #196]	@ (8009298 <TIM_Base_SetConfig+0x164>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d003      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2c      	ldr	r2, [pc, #176]	@ (800928c <TIM_Base_SetConfig+0x158>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d108      	bne.n	80091f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a18      	ldr	r2, [pc, #96]	@ (8009278 <TIM_Base_SetConfig+0x144>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a1a      	ldr	r2, [pc, #104]	@ (8009288 <TIM_Base_SetConfig+0x154>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00f      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <TIM_Base_SetConfig+0x15c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00b      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a19      	ldr	r2, [pc, #100]	@ (8009294 <TIM_Base_SetConfig+0x160>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d007      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a18      	ldr	r2, [pc, #96]	@ (8009298 <TIM_Base_SetConfig+0x164>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d003      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a13      	ldr	r2, [pc, #76]	@ (800928c <TIM_Base_SetConfig+0x158>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d103      	bne.n	800924c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b01      	cmp	r3, #1
 800925c:	d105      	bne.n	800926a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f023 0201 	bic.w	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	611a      	str	r2, [r3, #16]
  }
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40000400 	.word	0x40000400
 8009280:	40000800 	.word	0x40000800
 8009284:	40000c00 	.word	0x40000c00
 8009288:	40013400 	.word	0x40013400
 800928c:	40015000 	.word	0x40015000
 8009290:	40014000 	.word	0x40014000
 8009294:	40014400 	.word	0x40014400
 8009298:	40014800 	.word	0x40014800

0800929c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	f023 0201 	bic.w	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4a28      	ldr	r2, [pc, #160]	@ (8009368 <TIM_TI1_SetConfig+0xcc>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d01b      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092d0:	d017      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4a25      	ldr	r2, [pc, #148]	@ (800936c <TIM_TI1_SetConfig+0xd0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a24      	ldr	r2, [pc, #144]	@ (8009370 <TIM_TI1_SetConfig+0xd4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00f      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4a23      	ldr	r2, [pc, #140]	@ (8009374 <TIM_TI1_SetConfig+0xd8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00b      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4a22      	ldr	r2, [pc, #136]	@ (8009378 <TIM_TI1_SetConfig+0xdc>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d007      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4a21      	ldr	r2, [pc, #132]	@ (800937c <TIM_TI1_SetConfig+0xe0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_TI1_SetConfig+0x66>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4a20      	ldr	r2, [pc, #128]	@ (8009380 <TIM_TI1_SetConfig+0xe4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d101      	bne.n	8009306 <TIM_TI1_SetConfig+0x6a>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <TIM_TI1_SetConfig+0x6c>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	e003      	b.n	8009326 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800932c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	b2db      	uxtb	r3, r3
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	4313      	orrs	r3, r2
 8009338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f023 030a 	bic.w	r3, r3, #10
 8009340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f003 030a 	and.w	r3, r3, #10
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40012c00 	.word	0x40012c00
 800936c:	40000400 	.word	0x40000400
 8009370:	40000800 	.word	0x40000800
 8009374:	40000c00 	.word	0x40000c00
 8009378:	40013400 	.word	0x40013400
 800937c:	40014000 	.word	0x40014000
 8009380:	40015000 	.word	0x40015000

08009384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f023 0201 	bic.w	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f023 030a 	bic.w	r3, r3, #10
 80093c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	621a      	str	r2, [r3, #32]
}
 80093d6:	bf00      	nop
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b087      	sub	sp, #28
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f023 0210 	bic.w	r2, r3, #16
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800940e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	031b      	lsls	r3, r3, #12
 8009426:	b29b      	uxth	r3, r3
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009434:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4313      	orrs	r3, r2
 8009442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	621a      	str	r2, [r3, #32]
}
 8009450:	bf00      	nop
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	f023 0210 	bic.w	r2, r3, #16
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	031b      	lsls	r3, r3, #12
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4313      	orrs	r3, r2
 8009490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009498:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	621a      	str	r2, [r3, #32]
}
 80094b0:	bf00      	nop
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f023 0303 	bic.w	r3, r3, #3
 80094e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800950c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	621a      	str	r2, [r3, #32]
}
 8009528:	bf00      	nop
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009560:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009572:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	031b      	lsls	r3, r3, #12
 8009578:	b29b      	uxth	r3, r3
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009586:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	031b      	lsls	r3, r3, #12
 800958c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	4313      	orrs	r3, r2
 8009594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	621a      	str	r2, [r3, #32]
}
 80095a2:	bf00      	nop
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f043 0307 	orr.w	r3, r3, #7
 80095d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	609a      	str	r2, [r3, #8]
}
 80095dc:	bf00      	nop
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	021a      	lsls	r2, r3, #8
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	431a      	orrs	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4313      	orrs	r3, r2
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	609a      	str	r2, [r3, #8]
}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800963c:	2302      	movs	r3, #2
 800963e:	e074      	b.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a34      	ldr	r2, [pc, #208]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d009      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a33      	ldr	r2, [pc, #204]	@ (800973c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a31      	ldr	r2, [pc, #196]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d108      	bne.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009684:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a21      	ldr	r2, [pc, #132]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d022      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c0:	d01d      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d018      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009748 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1c      	ldr	r2, [pc, #112]	@ (800974c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d00e      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a15      	ldr	r2, [pc, #84]	@ (800973c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d009      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a18      	ldr	r2, [pc, #96]	@ (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d004      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a11      	ldr	r2, [pc, #68]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d10c      	bne.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4313      	orrs	r3, r2
 800970e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40012c00 	.word	0x40012c00
 800973c:	40013400 	.word	0x40013400
 8009740:	40015000 	.word	0x40015000
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40000c00 	.word	0x40000c00
 8009750:	40014000 	.word	0x40014000

08009754 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_TIMEx_TISelection+0x1e>
 800976e:	2302      	movs	r3, #2
 8009770:	e073      	b.n	800985a <HAL_TIMEx_TISelection+0x106>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b0c      	cmp	r3, #12
 800977e:	d864      	bhi.n	800984a <HAL_TIMEx_TISelection+0xf6>
 8009780:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <HAL_TIMEx_TISelection+0x34>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097bd 	.word	0x080097bd
 800978c:	0800984b 	.word	0x0800984b
 8009790:	0800984b 	.word	0x0800984b
 8009794:	0800984b 	.word	0x0800984b
 8009798:	08009809 	.word	0x08009809
 800979c:	0800984b 	.word	0x0800984b
 80097a0:	0800984b 	.word	0x0800984b
 80097a4:	0800984b 	.word	0x0800984b
 80097a8:	0800981f 	.word	0x0800981f
 80097ac:	0800984b 	.word	0x0800984b
 80097b0:	0800984b 	.word	0x0800984b
 80097b4:	0800984b 	.word	0x0800984b
 80097b8:	08009835 	.word	0x08009835
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097c2:	f023 010f 	bic.w	r1, r3, #15
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a24      	ldr	r2, [pc, #144]	@ (8009868 <HAL_TIMEx_TISelection+0x114>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d004      	beq.n	80097e4 <HAL_TIMEx_TISelection+0x90>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a23      	ldr	r2, [pc, #140]	@ (800986c <HAL_TIMEx_TISelection+0x118>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d108      	bne.n	80097f6 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 80097f4:	e02c      	b.n	8009850 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f022 0201 	bic.w	r2, r2, #1
 8009804:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8009806:	e023      	b.n	8009850 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	430a      	orrs	r2, r1
 800981a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800981c:	e018      	b.n	8009850 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009824:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	430a      	orrs	r2, r1
 8009830:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009832:	e00d      	b.n	8009850 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800983a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	430a      	orrs	r2, r1
 8009846:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009848:	e002      	b.n	8009850 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      break;
 800984e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40014400 	.word	0x40014400
 800986c:	40014800 	.word	0x40014800

08009870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e042      	b.n	8009908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009888:	2b00      	cmp	r3, #0
 800988a:	d106      	bne.n	800989a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7f9 fb15 	bl	8002ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2224      	movs	r2, #36	@ 0x24
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0201 	bic.w	r2, r2, #1
 80098b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fe8e 	bl	800a5dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fb8f 	bl	8009fe4 <UART_SetConfig>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e01b      	b.n	8009908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff0d 	bl	800a720 <UART_CheckIdleState>
 8009906:	4603      	mov	r3, r0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b0ba      	sub	sp, #232	@ 0xe8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800993a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800993e:	4013      	ands	r3, r2
 8009940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11b      	bne.n	8009984 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009950:	f003 0320 	and.w	r3, r3, #32
 8009954:	2b00      	cmp	r3, #0
 8009956:	d015      	beq.n	8009984 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b00      	cmp	r3, #0
 8009962:	d105      	bne.n	8009970 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8300 	beq.w	8009f7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
      }
      return;
 8009982:	e2fa      	b.n	8009f7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 8123 	beq.w	8009bd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800998e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009992:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc8 <HAL_UART_IRQHandler+0x2b8>)
 8009994:	4013      	ands	r3, r2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800999a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800999e:	4b8b      	ldr	r3, [pc, #556]	@ (8009bcc <HAL_UART_IRQHandler+0x2bc>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8116 	beq.w	8009bd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d011      	beq.n	80099d8 <HAL_UART_IRQHandler+0xc8>
 80099b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2201      	movs	r2, #1
 80099c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ce:	f043 0201 	orr.w	r2, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d011      	beq.n	8009a08 <HAL_UART_IRQHandler+0xf8>
 80099e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2202      	movs	r2, #2
 80099f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fe:	f043 0204 	orr.w	r2, r3, #4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d011      	beq.n	8009a38 <HAL_UART_IRQHandler+0x128>
 8009a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2204      	movs	r2, #4
 8009a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a2e:	f043 0202 	orr.w	r2, r3, #2
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3c:	f003 0308 	and.w	r3, r3, #8
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d017      	beq.n	8009a74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d105      	bne.n	8009a5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a54:	4b5c      	ldr	r3, [pc, #368]	@ (8009bc8 <HAL_UART_IRQHandler+0x2b8>)
 8009a56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2208      	movs	r2, #8
 8009a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6a:	f043 0208 	orr.w	r2, r3, #8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d012      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x196>
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00c      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a9c:	f043 0220 	orr.w	r2, r3, #32
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8266 	beq.w	8009f7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d013      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afa:	2b40      	cmp	r3, #64	@ 0x40
 8009afc:	d005      	beq.n	8009b0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d054      	beq.n	8009bb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 f807 	bl	800ab1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b1a:	2b40      	cmp	r3, #64	@ 0x40
 8009b1c:	d146      	bne.n	8009bac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3308      	adds	r3, #8
 8009b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1d9      	bne.n	8009b1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d017      	beq.n	8009ba4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7a:	4a15      	ldr	r2, [pc, #84]	@ (8009bd0 <HAL_UART_IRQHandler+0x2c0>)
 8009b7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fc ff3f 	bl	8006a08 <HAL_DMA_Abort_IT>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d019      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba2:	e00f      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fa13 	bl	8009fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009baa:	e00b      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa0f 	bl	8009fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb2:	e007      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa0b 	bl	8009fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009bc2:	e1dc      	b.n	8009f7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc4:	bf00      	nop
    return;
 8009bc6:	e1da      	b.n	8009f7e <HAL_UART_IRQHandler+0x66e>
 8009bc8:	10000001 	.word	0x10000001
 8009bcc:	04000120 	.word	0x04000120
 8009bd0:	0800add5 	.word	0x0800add5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	f040 8170 	bne.w	8009ebe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be2:	f003 0310 	and.w	r3, r3, #16
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 8169 	beq.w	8009ebe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8162 	beq.w	8009ebe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2210      	movs	r2, #16
 8009c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c0c:	2b40      	cmp	r3, #64	@ 0x40
 8009c0e:	f040 80d8 	bne.w	8009dc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80af 	beq.w	8009d88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c34:	429a      	cmp	r2, r3
 8009c36:	f080 80a7 	bcs.w	8009d88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 8087 	bne.w	8009d66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c92:	e841 2300 	strex	r3, r2, [r1]
 8009c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1da      	bne.n	8009c58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3308      	adds	r3, #8
 8009cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009cc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e1      	bne.n	8009ca2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e3      	bne.n	8009cde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d34:	f023 0310 	bic.w	r3, r3, #16
 8009d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	461a      	mov	r2, r3
 8009d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e4      	bne.n	8009d24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fc fdf8 	bl	8006956 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7f9 fb0b 	bl	800339c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009d86:	e0fc      	b.n	8009f82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d92:	429a      	cmp	r2, r3
 8009d94:	f040 80f5 	bne.w	8009f82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	f040 80eb 	bne.w	8009f82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f9 faee 	bl	800339c <HAL_UARTEx_RxEventCallback>
      return;
 8009dc0:	e0df      	b.n	8009f82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 80d1 	beq.w	8009f86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80cc 	beq.w	8009f86 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e4      	bne.n	8009dee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3308      	adds	r3, #8
 8009e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	623b      	str	r3, [r7, #32]
   return(result);
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e1      	bne.n	8009e24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f023 0310 	bic.w	r3, r3, #16
 8009e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e96:	61fb      	str	r3, [r7, #28]
 8009e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	69b9      	ldr	r1, [r7, #24]
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e4      	bne.n	8009e74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7f9 fa70 	bl	800339c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ebc:	e063      	b.n	8009f86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00e      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x5d8>
 8009eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 ffb8 	bl	800ae56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ee6:	e051      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d014      	beq.n	8009f1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d105      	bne.n	8009f0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d03a      	beq.n	8009f8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
    }
    return;
 8009f1c:	e035      	b.n	8009f8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <HAL_UART_IRQHandler+0x62e>
 8009f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 ff62 	bl	800ae00 <UART_EndTransmit_IT>
    return;
 8009f3c:	e026      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <HAL_UART_IRQHandler+0x64e>
 8009f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 ff91 	bl	800ae7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f5c:	e016      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d010      	beq.n	8009f8c <HAL_UART_IRQHandler+0x67c>
 8009f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	da0c      	bge.n	8009f8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 ff79 	bl	800ae6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f78:	e008      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8009f7a:	bf00      	nop
 8009f7c:	e006      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
    return;
 8009f7e:	bf00      	nop
 8009f80:	e004      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8009f82:	bf00      	nop
 8009f84:	e002      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8009f86:	bf00      	nop
 8009f88:	e000      	b.n	8009f8c <HAL_UART_IRQHandler+0x67c>
    return;
 8009f8a:	bf00      	nop
  }
}
 8009f8c:	37e8      	adds	r7, #232	@ 0xe8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fe8:	b08c      	sub	sp, #48	@ 0x30
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	431a      	orrs	r2, r3
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	4313      	orrs	r3, r2
 800a00a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4baa      	ldr	r3, [pc, #680]	@ (800a2bc <UART_SetConfig+0x2d8>)
 800a014:	4013      	ands	r3, r2
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	6812      	ldr	r2, [r2, #0]
 800a01a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a9f      	ldr	r2, [pc, #636]	@ (800a2c0 <UART_SetConfig+0x2dc>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a04c:	4313      	orrs	r3, r2
 800a04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a05a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a064:	430b      	orrs	r3, r1
 800a066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	f023 010f 	bic.w	r1, r3, #15
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a90      	ldr	r2, [pc, #576]	@ (800a2c4 <UART_SetConfig+0x2e0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d125      	bne.n	800a0d4 <UART_SetConfig+0xf0>
 800a088:	4b8f      	ldr	r3, [pc, #572]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	2b03      	cmp	r3, #3
 800a094:	d81a      	bhi.n	800a0cc <UART_SetConfig+0xe8>
 800a096:	a201      	add	r2, pc, #4	@ (adr r2, 800a09c <UART_SetConfig+0xb8>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a0ad 	.word	0x0800a0ad
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	0800a0b5 	.word	0x0800a0b5
 800a0a8:	0800a0c5 	.word	0x0800a0c5
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b2:	e116      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ba:	e112      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c2:	e10e      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ca:	e10a      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d2:	e106      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a7c      	ldr	r2, [pc, #496]	@ (800a2cc <UART_SetConfig+0x2e8>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d138      	bne.n	800a150 <UART_SetConfig+0x16c>
 800a0de:	4b7a      	ldr	r3, [pc, #488]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0e4:	f003 030c 	and.w	r3, r3, #12
 800a0e8:	2b0c      	cmp	r3, #12
 800a0ea:	d82d      	bhi.n	800a148 <UART_SetConfig+0x164>
 800a0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f4 <UART_SetConfig+0x110>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a129 	.word	0x0800a129
 800a0f8:	0800a149 	.word	0x0800a149
 800a0fc:	0800a149 	.word	0x0800a149
 800a100:	0800a149 	.word	0x0800a149
 800a104:	0800a139 	.word	0x0800a139
 800a108:	0800a149 	.word	0x0800a149
 800a10c:	0800a149 	.word	0x0800a149
 800a110:	0800a149 	.word	0x0800a149
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a149 	.word	0x0800a149
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a141 	.word	0x0800a141
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a12e:	e0d8      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a130:	2302      	movs	r3, #2
 800a132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a136:	e0d4      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a138:	2304      	movs	r3, #4
 800a13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a13e:	e0d0      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a140:	2308      	movs	r3, #8
 800a142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a146:	e0cc      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a148:	2310      	movs	r3, #16
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14e:	e0c8      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a5e      	ldr	r2, [pc, #376]	@ (800a2d0 <UART_SetConfig+0x2ec>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d125      	bne.n	800a1a6 <UART_SetConfig+0x1c2>
 800a15a:	4b5b      	ldr	r3, [pc, #364]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a160:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a164:	2b30      	cmp	r3, #48	@ 0x30
 800a166:	d016      	beq.n	800a196 <UART_SetConfig+0x1b2>
 800a168:	2b30      	cmp	r3, #48	@ 0x30
 800a16a:	d818      	bhi.n	800a19e <UART_SetConfig+0x1ba>
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	d00a      	beq.n	800a186 <UART_SetConfig+0x1a2>
 800a170:	2b20      	cmp	r3, #32
 800a172:	d814      	bhi.n	800a19e <UART_SetConfig+0x1ba>
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <UART_SetConfig+0x19a>
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d008      	beq.n	800a18e <UART_SetConfig+0x1aa>
 800a17c:	e00f      	b.n	800a19e <UART_SetConfig+0x1ba>
 800a17e:	2300      	movs	r3, #0
 800a180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a184:	e0ad      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a186:	2302      	movs	r3, #2
 800a188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18c:	e0a9      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a18e:	2304      	movs	r3, #4
 800a190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a194:	e0a5      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a196:	2308      	movs	r3, #8
 800a198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a19c:	e0a1      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a19e:	2310      	movs	r3, #16
 800a1a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1a4:	e09d      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a4a      	ldr	r2, [pc, #296]	@ (800a2d4 <UART_SetConfig+0x2f0>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d125      	bne.n	800a1fc <UART_SetConfig+0x218>
 800a1b0:	4b45      	ldr	r3, [pc, #276]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a1ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1bc:	d016      	beq.n	800a1ec <UART_SetConfig+0x208>
 800a1be:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1c0:	d818      	bhi.n	800a1f4 <UART_SetConfig+0x210>
 800a1c2:	2b80      	cmp	r3, #128	@ 0x80
 800a1c4:	d00a      	beq.n	800a1dc <UART_SetConfig+0x1f8>
 800a1c6:	2b80      	cmp	r3, #128	@ 0x80
 800a1c8:	d814      	bhi.n	800a1f4 <UART_SetConfig+0x210>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <UART_SetConfig+0x1f0>
 800a1ce:	2b40      	cmp	r3, #64	@ 0x40
 800a1d0:	d008      	beq.n	800a1e4 <UART_SetConfig+0x200>
 800a1d2:	e00f      	b.n	800a1f4 <UART_SetConfig+0x210>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1da:	e082      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e2:	e07e      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ea:	e07a      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f2:	e076      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fa:	e072      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a35      	ldr	r2, [pc, #212]	@ (800a2d8 <UART_SetConfig+0x2f4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d12a      	bne.n	800a25c <UART_SetConfig+0x278>
 800a206:	4b30      	ldr	r3, [pc, #192]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a214:	d01a      	beq.n	800a24c <UART_SetConfig+0x268>
 800a216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a21a:	d81b      	bhi.n	800a254 <UART_SetConfig+0x270>
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a220:	d00c      	beq.n	800a23c <UART_SetConfig+0x258>
 800a222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a226:	d815      	bhi.n	800a254 <UART_SetConfig+0x270>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <UART_SetConfig+0x250>
 800a22c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a230:	d008      	beq.n	800a244 <UART_SetConfig+0x260>
 800a232:	e00f      	b.n	800a254 <UART_SetConfig+0x270>
 800a234:	2300      	movs	r3, #0
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23a:	e052      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a23c:	2302      	movs	r3, #2
 800a23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a242:	e04e      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a244:	2304      	movs	r3, #4
 800a246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24a:	e04a      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a24c:	2308      	movs	r3, #8
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a252:	e046      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a254:	2310      	movs	r3, #16
 800a256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25a:	e042      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a17      	ldr	r2, [pc, #92]	@ (800a2c0 <UART_SetConfig+0x2dc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d13a      	bne.n	800a2dc <UART_SetConfig+0x2f8>
 800a266:	4b18      	ldr	r3, [pc, #96]	@ (800a2c8 <UART_SetConfig+0x2e4>)
 800a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a26c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a274:	d01a      	beq.n	800a2ac <UART_SetConfig+0x2c8>
 800a276:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a27a:	d81b      	bhi.n	800a2b4 <UART_SetConfig+0x2d0>
 800a27c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a280:	d00c      	beq.n	800a29c <UART_SetConfig+0x2b8>
 800a282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a286:	d815      	bhi.n	800a2b4 <UART_SetConfig+0x2d0>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <UART_SetConfig+0x2b0>
 800a28c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a290:	d008      	beq.n	800a2a4 <UART_SetConfig+0x2c0>
 800a292:	e00f      	b.n	800a2b4 <UART_SetConfig+0x2d0>
 800a294:	2300      	movs	r3, #0
 800a296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29a:	e022      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a29c:	2302      	movs	r3, #2
 800a29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a2:	e01e      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2aa:	e01a      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b2:	e016      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ba:	e012      	b.n	800a2e2 <UART_SetConfig+0x2fe>
 800a2bc:	cfff69f3 	.word	0xcfff69f3
 800a2c0:	40008000 	.word	0x40008000
 800a2c4:	40013800 	.word	0x40013800
 800a2c8:	40021000 	.word	0x40021000
 800a2cc:	40004400 	.word	0x40004400
 800a2d0:	40004800 	.word	0x40004800
 800a2d4:	40004c00 	.word	0x40004c00
 800a2d8:	40005000 	.word	0x40005000
 800a2dc:	2310      	movs	r3, #16
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4aae      	ldr	r2, [pc, #696]	@ (800a5a0 <UART_SetConfig+0x5bc>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	f040 8097 	bne.w	800a41c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2f2:	2b08      	cmp	r3, #8
 800a2f4:	d823      	bhi.n	800a33e <UART_SetConfig+0x35a>
 800a2f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <UART_SetConfig+0x318>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a33f 	.word	0x0800a33f
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a33f 	.word	0x0800a33f
 800a30c:	0800a32f 	.word	0x0800a32f
 800a310:	0800a33f 	.word	0x0800a33f
 800a314:	0800a33f 	.word	0x0800a33f
 800a318:	0800a33f 	.word	0x0800a33f
 800a31c:	0800a337 	.word	0x0800a337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a320:	f7fd fdc2 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800a324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a326:	e010      	b.n	800a34a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a328:	4b9e      	ldr	r3, [pc, #632]	@ (800a5a4 <UART_SetConfig+0x5c0>)
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a32c:	e00d      	b.n	800a34a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a32e:	f7fd fd4d 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 800a332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a334:	e009      	b.n	800a34a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a33a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a33c:	e005      	b.n	800a34a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a348:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8130 	beq.w	800a5b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a356:	4a94      	ldr	r2, [pc, #592]	@ (800a5a8 <UART_SetConfig+0x5c4>)
 800a358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	fbb3 f3f2 	udiv	r3, r3, r2
 800a364:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	4613      	mov	r3, r2
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	4413      	add	r3, r2
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	429a      	cmp	r2, r3
 800a374:	d305      	bcc.n	800a382 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d903      	bls.n	800a38a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a388:	e113      	b.n	800a5b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	2200      	movs	r2, #0
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	60fa      	str	r2, [r7, #12]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a396:	4a84      	ldr	r2, [pc, #528]	@ (800a5a8 <UART_SetConfig+0x5c4>)
 800a398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	2200      	movs	r2, #0
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3ac:	f7f6 fbea 	bl	8000b84 <__aeabi_uldivmod>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	020b      	lsls	r3, r1, #8
 800a3c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3c6:	0202      	lsls	r2, r0, #8
 800a3c8:	6979      	ldr	r1, [r7, #20]
 800a3ca:	6849      	ldr	r1, [r1, #4]
 800a3cc:	0849      	lsrs	r1, r1, #1
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	eb12 0804 	adds.w	r8, r2, r4
 800a3d8:	eb43 0905 	adc.w	r9, r3, r5
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	469a      	mov	sl, r3
 800a3e4:	4693      	mov	fp, r2
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f6 fbc9 	bl	8000b84 <__aeabi_uldivmod>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a400:	d308      	bcc.n	800a414 <UART_SetConfig+0x430>
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a408:	d204      	bcs.n	800a414 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6a3a      	ldr	r2, [r7, #32]
 800a410:	60da      	str	r2, [r3, #12]
 800a412:	e0ce      	b.n	800a5b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a41a:	e0ca      	b.n	800a5b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a424:	d166      	bne.n	800a4f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d827      	bhi.n	800a47e <UART_SetConfig+0x49a>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <UART_SetConfig+0x450>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	0800a47f 	.word	0x0800a47f
 800a444:	0800a46f 	.word	0x0800a46f
 800a448:	0800a47f 	.word	0x0800a47f
 800a44c:	0800a47f 	.word	0x0800a47f
 800a450:	0800a47f 	.word	0x0800a47f
 800a454:	0800a477 	.word	0x0800a477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a458:	f7fd fd26 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800a45c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a45e:	e014      	b.n	800a48a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a460:	f7fd fd38 	bl	8007ed4 <HAL_RCC_GetPCLK2Freq>
 800a464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a466:	e010      	b.n	800a48a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a468:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a4 <UART_SetConfig+0x5c0>)
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a46c:	e00d      	b.n	800a48a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a46e:	f7fd fcad 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 800a472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a474:	e009      	b.n	800a48a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a47a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a47c:	e005      	b.n	800a48a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 8090 	beq.w	800a5b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a496:	4a44      	ldr	r2, [pc, #272]	@ (800a5a8 <UART_SetConfig+0x5c4>)
 800a498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a49c:	461a      	mov	r2, r3
 800a49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a4:	005a      	lsls	r2, r3, #1
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	085b      	lsrs	r3, r3, #1
 800a4ac:	441a      	add	r2, r3
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b0f      	cmp	r3, #15
 800a4bc:	d916      	bls.n	800a4ec <UART_SetConfig+0x508>
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4c4:	d212      	bcs.n	800a4ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f023 030f 	bic.w	r3, r3, #15
 800a4ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	8bfb      	ldrh	r3, [r7, #30]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	8bfa      	ldrh	r2, [r7, #30]
 800a4e8:	60da      	str	r2, [r3, #12]
 800a4ea:	e062      	b.n	800a5b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4f2:	e05e      	b.n	800a5b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d828      	bhi.n	800a54e <UART_SetConfig+0x56a>
 800a4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <UART_SetConfig+0x520>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a529 	.word	0x0800a529
 800a508:	0800a531 	.word	0x0800a531
 800a50c:	0800a539 	.word	0x0800a539
 800a510:	0800a54f 	.word	0x0800a54f
 800a514:	0800a53f 	.word	0x0800a53f
 800a518:	0800a54f 	.word	0x0800a54f
 800a51c:	0800a54f 	.word	0x0800a54f
 800a520:	0800a54f 	.word	0x0800a54f
 800a524:	0800a547 	.word	0x0800a547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a528:	f7fd fcbe 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 800a52c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a52e:	e014      	b.n	800a55a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a530:	f7fd fcd0 	bl	8007ed4 <HAL_RCC_GetPCLK2Freq>
 800a534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a536:	e010      	b.n	800a55a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a538:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a4 <UART_SetConfig+0x5c0>)
 800a53a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a53c:	e00d      	b.n	800a55a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a53e:	f7fd fc45 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 800a542:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a544:	e009      	b.n	800a55a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a54c:	e005      	b.n	800a55a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a558:	bf00      	nop
    }

    if (pclk != 0U)
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d028      	beq.n	800a5b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a564:	4a10      	ldr	r2, [pc, #64]	@ (800a5a8 <UART_SetConfig+0x5c4>)
 800a566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a56a:	461a      	mov	r2, r3
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	085b      	lsrs	r3, r3, #1
 800a578:	441a      	add	r2, r3
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d910      	bls.n	800a5ac <UART_SetConfig+0x5c8>
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a590:	d20c      	bcs.n	800a5ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	b29a      	uxth	r2, r3
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60da      	str	r2, [r3, #12]
 800a59c:	e009      	b.n	800a5b2 <UART_SetConfig+0x5ce>
 800a59e:	bf00      	nop
 800a5a0:	40008000 	.word	0x40008000
 800a5a4:	00f42400 	.word	0x00f42400
 800a5a8:	0800c7b8 	.word	0x0800c7b8
      }
      else
      {
        ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3730      	adds	r7, #48	@ 0x30
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a670:	f003 0310 	and.w	r3, r3, #16
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	f003 0320 	and.w	r3, r3, #32
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01a      	beq.n	800a6f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6da:	d10a      	bne.n	800a6f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	605a      	str	r2, [r3, #4]
  }
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b098      	sub	sp, #96	@ 0x60
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a730:	f7f9 fae2 	bl	8003cf8 <HAL_GetTick>
 800a734:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b08      	cmp	r3, #8
 800a742:	d12f      	bne.n	800a7a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a74c:	2200      	movs	r2, #0
 800a74e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f88e 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d022      	beq.n	800a7a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a772:	653b      	str	r3, [r7, #80]	@ 0x50
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a77e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e063      	b.n	800a86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0304 	and.w	r3, r3, #4
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d149      	bne.n	800a846 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f857 	bl	800a874 <UART_WaitOnFlagUntilTimeout>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d03c      	beq.n	800a846 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3308      	adds	r3, #8
 800a804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f023 0301 	bic.w	r3, r3, #1
 800a814:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a81e:	61fa      	str	r2, [r7, #28]
 800a820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	69b9      	ldr	r1, [r7, #24]
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	617b      	str	r3, [r7, #20]
   return(result);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e5      	bne.n	800a7fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e012      	b.n	800a86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3758      	adds	r7, #88	@ 0x58
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	4613      	mov	r3, r2
 800a882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a884:	e04f      	b.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d04b      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a88e:	f7f9 fa33 	bl	8003cf8 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d302      	bcc.n	800a8a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e04e      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0304 	and.w	r3, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d037      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b80      	cmp	r3, #128	@ 0x80
 800a8ba:	d034      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	2b40      	cmp	r3, #64	@ 0x40
 800a8c0:	d031      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	f003 0308 	and.w	r3, r3, #8
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d110      	bne.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f920 	bl	800ab1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e029      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a900:	d111      	bne.n	800a926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a90a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f906 	bl	800ab1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e00f      	b.n	800a946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4013      	ands	r3, r2
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	429a      	cmp	r2, r3
 800a934:	bf0c      	ite	eq
 800a936:	2301      	moveq	r3, #1
 800a938:	2300      	movne	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	429a      	cmp	r2, r3
 800a942:	d0a0      	beq.n	800a886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b096      	sub	sp, #88	@ 0x58
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2222      	movs	r2, #34	@ 0x22
 800a978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a982:	2b00      	cmp	r3, #0
 800a984:	d02d      	beq.n	800a9e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98c:	4a40      	ldr	r2, [pc, #256]	@ (800aa90 <UART_Start_Receive_DMA+0x140>)
 800a98e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	4a3f      	ldr	r2, [pc, #252]	@ (800aa94 <UART_Start_Receive_DMA+0x144>)
 800a998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a0:	4a3d      	ldr	r2, [pc, #244]	@ (800aa98 <UART_Start_Receive_DMA+0x148>)
 800a9a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3324      	adds	r3, #36	@ 0x24
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	f7fb ff4c 	bl	8006860 <HAL_DMA_Start_IT>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e051      	b.n	800aa86 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d018      	beq.n	800aa1c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa0a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e6      	bne.n	800a9ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa26:	e853 3f00 	ldrex	r3, [r3]
 800aa2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa3c:	637a      	str	r2, [r7, #52]	@ 0x34
 800aa3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa44:	e841 2300 	strex	r3, r2, [r1]
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e5      	bne.n	800aa1c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3308      	adds	r3, #8
 800aa56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa70:	623a      	str	r2, [r7, #32]
 800aa72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	69f9      	ldr	r1, [r7, #28]
 800aa76:	6a3a      	ldr	r2, [r7, #32]
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e5      	bne.n	800aa50 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3758      	adds	r7, #88	@ 0x58
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	0800abeb 	.word	0x0800abeb
 800aa94:	0800ad17 	.word	0x0800ad17
 800aa98:	0800ad55 	.word	0x0800ad55

0800aa9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b08f      	sub	sp, #60	@ 0x3c
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aab8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aac4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e6      	bne.n	800aaa4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3308      	adds	r3, #8
 800aadc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aaec:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf6:	61ba      	str	r2, [r7, #24]
 800aaf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafa:	6979      	ldr	r1, [r7, #20]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	e841 2300 	strex	r3, r2, [r1]
 800ab02:	613b      	str	r3, [r7, #16]
   return(result);
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1e5      	bne.n	800aad6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ab12:	bf00      	nop
 800ab14:	373c      	adds	r7, #60	@ 0x3c
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b095      	sub	sp, #84	@ 0x54
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e6      	bne.n	800ab26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3308      	adds	r3, #8
 800ab5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3308      	adds	r3, #8
 800ab7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e3      	bne.n	800ab58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d118      	bne.n	800abca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f023 0310 	bic.w	r3, r3, #16
 800abac:	647b      	str	r3, [r7, #68]	@ 0x44
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	6979      	ldr	r1, [r7, #20]
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	613b      	str	r3, [r7, #16]
   return(result);
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e6      	bne.n	800ab98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800abde:	bf00      	nop
 800abe0:	3754      	adds	r7, #84	@ 0x54
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b09c      	sub	sp, #112	@ 0x70
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d171      	bne.n	800acea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ac06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e6      	bne.n	800ac0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ac60:	647a      	str	r2, [r7, #68]	@ 0x44
 800ac62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e5      	bne.n	800ac40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3308      	adds	r3, #8
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	623b      	str	r3, [r7, #32]
   return(result);
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3308      	adds	r3, #8
 800ac92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac94:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e5      	bne.n	800ac74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acaa:	2220      	movs	r2, #32
 800acac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d118      	bne.n	800acea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f023 0310 	bic.w	r3, r3, #16
 800accc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acd6:	61fb      	str	r3, [r7, #28]
 800acd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	69b9      	ldr	r1, [r7, #24]
 800acdc:	69fa      	ldr	r2, [r7, #28]
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	617b      	str	r3, [r7, #20]
   return(result);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e6      	bne.n	800acb8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acec:	2200      	movs	r2, #0
 800acee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d107      	bne.n	800ad08 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acfe:	4619      	mov	r1, r3
 800ad00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad02:	f7f8 fb4b 	bl	800339c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad06:	e002      	b.n	800ad0e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ad08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad0a:	f7ff f94d 	bl	8009fa8 <HAL_UART_RxCpltCallback>
}
 800ad0e:	bf00      	nop
 800ad10:	3770      	adds	r7, #112	@ 0x70
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2201      	movs	r2, #1
 800ad28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d109      	bne.n	800ad46 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad38:	085b      	lsrs	r3, r3, #1
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7f8 fb2c 	bl	800339c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad44:	e002      	b.n	800ad4c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff f938 	bl	8009fbc <HAL_UART_RxHalfCpltCallback>
}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad7c:	2b80      	cmp	r3, #128	@ 0x80
 800ad7e:	d109      	bne.n	800ad94 <UART_DMAError+0x40>
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b21      	cmp	r3, #33	@ 0x21
 800ad84:	d106      	bne.n	800ad94 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	f7ff fe84 	bl	800aa9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9e:	2b40      	cmp	r3, #64	@ 0x40
 800ada0:	d109      	bne.n	800adb6 <UART_DMAError+0x62>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b22      	cmp	r3, #34	@ 0x22
 800ada6:	d106      	bne.n	800adb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800adb0:	6978      	ldr	r0, [r7, #20]
 800adb2:	f7ff feb4 	bl	800ab1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adbc:	f043 0210 	orr.w	r2, r3, #16
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adc6:	6978      	ldr	r0, [r7, #20]
 800adc8:	f7ff f902 	bl	8009fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adcc:	bf00      	nop
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff f8ec 	bl	8009fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	61bb      	str	r3, [r7, #24]
 800ae28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6979      	ldr	r1, [r7, #20]
 800ae2c:	69ba      	ldr	r2, [r7, #24]
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	613b      	str	r3, [r7, #16]
   return(result);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e6      	bne.n	800ae08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff f8a3 	bl	8009f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae4e:	bf00      	nop
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae5e:	bf00      	nop
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b083      	sub	sp, #12
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d101      	bne.n	800aea8 <HAL_UARTEx_DisableFifoMode+0x16>
 800aea4:	2302      	movs	r3, #2
 800aea6:	e027      	b.n	800aef8 <HAL_UARTEx_DisableFifoMode+0x66>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2224      	movs	r2, #36	@ 0x24
 800aeb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0201 	bic.w	r2, r2, #1
 800aece:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aed6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af18:	2302      	movs	r3, #2
 800af1a:	e02d      	b.n	800af78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2224      	movs	r2, #36	@ 0x24
 800af28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 0201 	bic.w	r2, r2, #1
 800af42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f8a3 	bl	800b0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2220      	movs	r2, #32
 800af6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e02d      	b.n	800aff4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2224      	movs	r2, #36	@ 0x24
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0201 	bic.w	r2, r2, #1
 800afbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f865 	bl	800b0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2220      	movs	r2, #32
 800afe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08c      	sub	sp, #48	@ 0x30
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	4613      	mov	r3, r2
 800b008:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b010:	2b20      	cmp	r3, #32
 800b012:	d142      	bne.n	800b09a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e03b      	b.n	800b09c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	461a      	mov	r2, r3
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff fc8a 	bl	800a950 <UART_Start_Receive_DMA>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b046:	2b00      	cmp	r3, #0
 800b048:	d124      	bne.n	800b094 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d11d      	bne.n	800b08e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2210      	movs	r2, #16
 800b058:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	617b      	str	r3, [r7, #20]
   return(result);
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f043 0310 	orr.w	r3, r3, #16
 800b06e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	461a      	mov	r2, r3
 800b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
 800b07a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6a39      	ldr	r1, [r7, #32]
 800b07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	61fb      	str	r3, [r7, #28]
   return(result);
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e6      	bne.n	800b05a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b08c:	e002      	b.n	800b094 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b098:	e000      	b.n	800b09c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b09a:	2302      	movs	r3, #2
  }
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3730      	adds	r7, #48	@ 0x30
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d108      	bne.n	800b0c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0c4:	e031      	b.n	800b12a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0c6:	2308      	movs	r3, #8
 800b0c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0ca:	2308      	movs	r3, #8
 800b0cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	0e5b      	lsrs	r3, r3, #25
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 0307 	and.w	r3, r3, #7
 800b0dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	0f5b      	lsrs	r3, r3, #29
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	7b3a      	ldrb	r2, [r7, #12]
 800b0f2:	4911      	ldr	r1, [pc, #68]	@ (800b138 <UARTEx_SetNbDataToProcess+0x94>)
 800b0f4:	5c8a      	ldrb	r2, [r1, r2]
 800b0f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0fa:	7b3a      	ldrb	r2, [r7, #12]
 800b0fc:	490f      	ldr	r1, [pc, #60]	@ (800b13c <UARTEx_SetNbDataToProcess+0x98>)
 800b0fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b100:	fb93 f3f2 	sdiv	r3, r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	7b7a      	ldrb	r2, [r7, #13]
 800b110:	4909      	ldr	r1, [pc, #36]	@ (800b138 <UARTEx_SetNbDataToProcess+0x94>)
 800b112:	5c8a      	ldrb	r2, [r1, r2]
 800b114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b118:	7b7a      	ldrb	r2, [r7, #13]
 800b11a:	4908      	ldr	r1, [pc, #32]	@ (800b13c <UARTEx_SetNbDataToProcess+0x98>)
 800b11c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b11e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	0800c7d0 	.word	0x0800c7d0
 800b13c:	0800c7d8 	.word	0x0800c7d8

0800b140 <arm_rfft_1024_fast_init_f32>:
 800b140:	b190      	cbz	r0, 800b168 <arm_rfft_1024_fast_init_f32+0x28>
 800b142:	b430      	push	{r4, r5}
 800b144:	490a      	ldr	r1, [pc, #40]	@ (800b170 <arm_rfft_1024_fast_init_f32+0x30>)
 800b146:	4a0b      	ldr	r2, [pc, #44]	@ (800b174 <arm_rfft_1024_fast_init_f32+0x34>)
 800b148:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b14c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b150:	8003      	strh	r3, [r0, #0]
 800b152:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800b156:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800b15a:	4b07      	ldr	r3, [pc, #28]	@ (800b178 <arm_rfft_1024_fast_init_f32+0x38>)
 800b15c:	8205      	strh	r5, [r0, #16]
 800b15e:	8184      	strh	r4, [r0, #12]
 800b160:	6143      	str	r3, [r0, #20]
 800b162:	bc30      	pop	{r4, r5}
 800b164:	2000      	movs	r0, #0
 800b166:	4770      	bx	lr
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	0800c7e0 	.word	0x0800c7e0
 800b174:	0800d364 	.word	0x0800d364
 800b178:	0800e364 	.word	0x0800e364

0800b17c <stage_rfft_f32>:
 800b17c:	b410      	push	{r4}
 800b17e:	edd1 7a00 	vldr	s15, [r1]
 800b182:	ed91 7a01 	vldr	s14, [r1, #4]
 800b186:	8804      	ldrh	r4, [r0, #0]
 800b188:	6940      	ldr	r0, [r0, #20]
 800b18a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b18e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b192:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b196:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b19a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b19e:	3c01      	subs	r4, #1
 800b1a0:	ee26 7a84 	vmul.f32	s14, s13, s8
 800b1a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b1a8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b1ac:	ed82 7a00 	vstr	s14, [r2]
 800b1b0:	edc2 7a01 	vstr	s15, [r2, #4]
 800b1b4:	3010      	adds	r0, #16
 800b1b6:	3210      	adds	r2, #16
 800b1b8:	3b08      	subs	r3, #8
 800b1ba:	3110      	adds	r1, #16
 800b1bc:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b1c0:	ed93 7a02 	vldr	s14, [r3, #8]
 800b1c4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b1c8:	edd3 4a03 	vldr	s9, [r3, #12]
 800b1cc:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b1d0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b1d4:	ee77 5a45 	vsub.f32	s11, s14, s10
 800b1d8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b1dc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b1e0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b1e4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b1e8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b1ec:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b1f0:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b1f4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b1f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b1fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b204:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b208:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b20c:	3c01      	subs	r4, #1
 800b20e:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b212:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b216:	f1a3 0308 	sub.w	r3, r3, #8
 800b21a:	f101 0108 	add.w	r1, r1, #8
 800b21e:	f100 0008 	add.w	r0, r0, #8
 800b222:	f102 0208 	add.w	r2, r2, #8
 800b226:	d1c9      	bne.n	800b1bc <stage_rfft_f32+0x40>
 800b228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop

0800b230 <merge_rfft_f32>:
 800b230:	b410      	push	{r4}
 800b232:	edd1 7a00 	vldr	s15, [r1]
 800b236:	edd1 6a01 	vldr	s13, [r1, #4]
 800b23a:	8804      	ldrh	r4, [r0, #0]
 800b23c:	6940      	ldr	r0, [r0, #20]
 800b23e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b246:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b24a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b24e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b252:	3c01      	subs	r4, #1
 800b254:	ed82 7a00 	vstr	s14, [r2]
 800b258:	edc2 7a01 	vstr	s15, [r2, #4]
 800b25c:	b3dc      	cbz	r4, 800b2d6 <merge_rfft_f32+0xa6>
 800b25e:	00e3      	lsls	r3, r4, #3
 800b260:	3b08      	subs	r3, #8
 800b262:	440b      	add	r3, r1
 800b264:	3010      	adds	r0, #16
 800b266:	3210      	adds	r2, #16
 800b268:	3110      	adds	r1, #16
 800b26a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b26e:	ed93 7a02 	vldr	s14, [r3, #8]
 800b272:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b276:	edd3 4a03 	vldr	s9, [r3, #12]
 800b27a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b27e:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b282:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b286:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b28a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b28e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b292:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b296:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b29a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b29e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b2a2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b2a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b2aa:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b2ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b2b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b2b6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b2ba:	3c01      	subs	r4, #1
 800b2bc:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b2c0:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b2c4:	f1a3 0308 	sub.w	r3, r3, #8
 800b2c8:	f101 0108 	add.w	r1, r1, #8
 800b2cc:	f100 0008 	add.w	r0, r0, #8
 800b2d0:	f102 0208 	add.w	r2, r2, #8
 800b2d4:	d1c9      	bne.n	800b26a <merge_rfft_f32+0x3a>
 800b2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <arm_rfft_fast_f32>:
 800b2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e0:	8a05      	ldrh	r5, [r0, #16]
 800b2e2:	086d      	lsrs	r5, r5, #1
 800b2e4:	8005      	strh	r5, [r0, #0]
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4616      	mov	r6, r2
 800b2ea:	461d      	mov	r5, r3
 800b2ec:	b14b      	cbz	r3, 800b302 <arm_rfft_fast_f32+0x26>
 800b2ee:	f7ff ff9f 	bl	800b230 <merge_rfft_f32>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	f000 bb33 	b.w	800b968 <arm_cfft_f32>
 800b302:	460f      	mov	r7, r1
 800b304:	461a      	mov	r2, r3
 800b306:	2301      	movs	r3, #1
 800b308:	f000 fb2e 	bl	800b968 <arm_cfft_f32>
 800b30c:	4632      	mov	r2, r6
 800b30e:	4639      	mov	r1, r7
 800b310:	4620      	mov	r0, r4
 800b312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	f7ff bf31 	b.w	800b17c <stage_rfft_f32>
 800b31a:	bf00      	nop

0800b31c <arm_cfft_radix8by2_f32>:
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	ed2d 8b08 	vpush	{d8-d11}
 800b324:	4607      	mov	r7, r0
 800b326:	4608      	mov	r0, r1
 800b328:	f8b7 c000 	ldrh.w	ip, [r7]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b332:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b336:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b33a:	f000 80b0 	beq.w	800b49e <arm_cfft_radix8by2_f32+0x182>
 800b33e:	008c      	lsls	r4, r1, #2
 800b340:	3410      	adds	r4, #16
 800b342:	f100 0310 	add.w	r3, r0, #16
 800b346:	1906      	adds	r6, r0, r4
 800b348:	3210      	adds	r2, #16
 800b34a:	4444      	add	r4, r8
 800b34c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b350:	f108 0510 	add.w	r5, r8, #16
 800b354:	ed15 2a04 	vldr	s4, [r5, #-16]
 800b358:	ed55 2a03 	vldr	s5, [r5, #-12]
 800b35c:	ed54 4a04 	vldr	s9, [r4, #-16]
 800b360:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b364:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b368:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b36c:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b370:	ed15 0a02 	vldr	s0, [r5, #-8]
 800b374:	ed55 0a01 	vldr	s1, [r5, #-4]
 800b378:	ed56 6a04 	vldr	s13, [r6, #-16]
 800b37c:	ed16 3a03 	vldr	s6, [r6, #-12]
 800b380:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b384:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b388:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b38c:	ed16 1a02 	vldr	s2, [r6, #-8]
 800b390:	ed56 1a01 	vldr	s3, [r6, #-4]
 800b394:	ee73 ba82 	vadd.f32	s23, s7, s4
 800b398:	ee37 ba22 	vadd.f32	s22, s14, s5
 800b39c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800b3a0:	ee33 9a04 	vadd.f32	s18, s6, s8
 800b3a4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800b3a8:	ee75 aa00 	vadd.f32	s21, s10, s0
 800b3ac:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800b3b0:	ee71 8a06 	vadd.f32	s17, s2, s12
 800b3b4:	ed43 ba04 	vstr	s23, [r3, #-16]
 800b3b8:	ed03 ba03 	vstr	s22, [r3, #-12]
 800b3bc:	ed43 aa02 	vstr	s21, [r3, #-8]
 800b3c0:	ed03 aa01 	vstr	s20, [r3, #-4]
 800b3c4:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b3c8:	ed46 9a04 	vstr	s19, [r6, #-16]
 800b3cc:	ed06 9a03 	vstr	s18, [r6, #-12]
 800b3d0:	ed46 8a02 	vstr	s17, [r6, #-8]
 800b3d4:	ee37 7a62 	vsub.f32	s14, s14, s5
 800b3d8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b3dc:	ee34 4a43 	vsub.f32	s8, s8, s6
 800b3e0:	ed52 6a03 	vldr	s13, [r2, #-12]
 800b3e4:	ed12 3a04 	vldr	s6, [r2, #-16]
 800b3e8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b3ec:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b3f0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800b3f4:	ee23 2a83 	vmul.f32	s4, s7, s6
 800b3f8:	ee64 4a83 	vmul.f32	s9, s9, s6
 800b3fc:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800b400:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b404:	ee64 6a26 	vmul.f32	s13, s8, s13
 800b408:	ee24 4a03 	vmul.f32	s8, s8, s6
 800b40c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b410:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b414:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800b418:	ee32 3a08 	vadd.f32	s6, s4, s16
 800b41c:	ed05 7a03 	vstr	s14, [r5, #-12]
 800b420:	ed05 3a04 	vstr	s6, [r5, #-16]
 800b424:	ed04 4a04 	vstr	s8, [r4, #-16]
 800b428:	ed44 6a03 	vstr	s13, [r4, #-12]
 800b42c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b430:	ee76 6a41 	vsub.f32	s13, s12, s2
 800b434:	ee35 5a40 	vsub.f32	s10, s10, s0
 800b438:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800b43c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b440:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b444:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b448:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b44c:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b450:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b454:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b458:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b45c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b460:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b464:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b468:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b46c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b470:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b474:	3310      	adds	r3, #16
 800b476:	4563      	cmp	r3, ip
 800b478:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b47c:	f106 0610 	add.w	r6, r6, #16
 800b480:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b484:	f102 0210 	add.w	r2, r2, #16
 800b488:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b48c:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b490:	f105 0510 	add.w	r5, r5, #16
 800b494:	f104 0410 	add.w	r4, r4, #16
 800b498:	f47f af5c 	bne.w	800b354 <arm_cfft_radix8by2_f32+0x38>
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	b28c      	uxth	r4, r1
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	f000 fc66 	bl	800bd74 <arm_radix8_butterfly_f32>
 800b4a8:	ecbd 8b08 	vpop	{d8-d11}
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	f000 bc5c 	b.w	800bd74 <arm_radix8_butterfly_f32>

0800b4bc <arm_cfft_radix8by4_f32>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	ed2d 8b0a 	vpush	{d8-d12}
 800b4c4:	b08d      	sub	sp, #52	@ 0x34
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4ca:	8801      	ldrh	r1, [r0, #0]
 800b4cc:	6842      	ldr	r2, [r0, #4]
 800b4ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4d0:	0849      	lsrs	r1, r1, #1
 800b4d2:	008b      	lsls	r3, r1, #2
 800b4d4:	18ee      	adds	r6, r5, r3
 800b4d6:	18f0      	adds	r0, r6, r3
 800b4d8:	edd0 5a00 	vldr	s11, [r0]
 800b4dc:	edd5 7a00 	vldr	s15, [r5]
 800b4e0:	ed96 7a00 	vldr	s14, [r6]
 800b4e4:	edd0 3a01 	vldr	s7, [r0, #4]
 800b4e8:	ed96 4a01 	vldr	s8, [r6, #4]
 800b4ec:	ed95 5a01 	vldr	s10, [r5, #4]
 800b4f0:	9008      	str	r0, [sp, #32]
 800b4f2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b4f6:	18c7      	adds	r7, r0, r3
 800b4f8:	edd7 4a00 	vldr	s9, [r7]
 800b4fc:	ed97 3a01 	vldr	s6, [r7, #4]
 800b500:	9701      	str	r7, [sp, #4]
 800b502:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b506:	462c      	mov	r4, r5
 800b508:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b50c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b510:	ee16 ca90 	vmov	ip, s13
 800b514:	f844 cb08 	str.w	ip, [r4], #8
 800b518:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b51c:	edd6 5a01 	vldr	s11, [r6, #4]
 800b520:	edd7 2a01 	vldr	s5, [r7, #4]
 800b524:	9404      	str	r4, [sp, #16]
 800b526:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b52a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b52e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b532:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b536:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b53a:	0849      	lsrs	r1, r1, #1
 800b53c:	f102 0e08 	add.w	lr, r2, #8
 800b540:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b544:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b548:	9109      	str	r1, [sp, #36]	@ 0x24
 800b54a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b54e:	f1a1 0902 	sub.w	r9, r1, #2
 800b552:	f8cd e00c 	str.w	lr, [sp, #12]
 800b556:	4631      	mov	r1, r6
 800b558:	ee13 ea90 	vmov	lr, s7
 800b55c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b560:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b564:	4604      	mov	r4, r0
 800b566:	edc5 5a01 	vstr	s11, [r5, #4]
 800b56a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b56e:	f841 eb08 	str.w	lr, [r1], #8
 800b572:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b576:	ee16 ea10 	vmov	lr, s12
 800b57a:	ed86 5a01 	vstr	s10, [r6, #4]
 800b57e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b582:	f844 eb08 	str.w	lr, [r4], #8
 800b586:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b58a:	edc0 6a01 	vstr	s13, [r0, #4]
 800b58e:	9405      	str	r4, [sp, #20]
 800b590:	4604      	mov	r4, r0
 800b592:	ee17 0a90 	vmov	r0, s15
 800b596:	9106      	str	r1, [sp, #24]
 800b598:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b59c:	f102 0110 	add.w	r1, r2, #16
 800b5a0:	46bc      	mov	ip, r7
 800b5a2:	9100      	str	r1, [sp, #0]
 800b5a4:	f847 0b08 	str.w	r0, [r7], #8
 800b5a8:	f102 0118 	add.w	r1, r2, #24
 800b5ac:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b5b0:	9102      	str	r1, [sp, #8]
 800b5b2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b5b6:	9007      	str	r0, [sp, #28]
 800b5b8:	f000 8134 	beq.w	800b824 <arm_cfft_radix8by4_f32+0x368>
 800b5bc:	f102 0920 	add.w	r9, r2, #32
 800b5c0:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800b5c4:	9a01      	ldr	r2, [sp, #4]
 800b5c6:	f8dd a000 	ldr.w	sl, [sp]
 800b5ca:	3b0c      	subs	r3, #12
 800b5cc:	4683      	mov	fp, r0
 800b5ce:	4463      	add	r3, ip
 800b5d0:	f105 0e10 	add.w	lr, r5, #16
 800b5d4:	f1a4 010c 	sub.w	r1, r4, #12
 800b5d8:	f104 0510 	add.w	r5, r4, #16
 800b5dc:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b5e0:	f1a2 040c 	sub.w	r4, r2, #12
 800b5e4:	f106 0010 	add.w	r0, r6, #16
 800b5e8:	3210      	adds	r2, #16
 800b5ea:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b5ee:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b5f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b5f6:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b5fa:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b5fe:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b602:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b606:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b60a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b60e:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b612:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b616:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b61a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b61e:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b622:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b626:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b62a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b62e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b632:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b636:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b63a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b63e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b642:	ed94 7a02 	vldr	s14, [r4, #8]
 800b646:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b64a:	ed91 ba02 	vldr	s22, [r1, #8]
 800b64e:	edd3 9a02 	vldr	s19, [r3, #8]
 800b652:	edd4 2a01 	vldr	s5, [r4, #4]
 800b656:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b65a:	ed93 5a01 	vldr	s10, [r3, #4]
 800b65e:	edd1 0a01 	vldr	s1, [r1, #4]
 800b662:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b666:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b66a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b66e:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b672:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b676:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b67a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b67e:	ed91 7a01 	vldr	s14, [r1, #4]
 800b682:	edd3 8a01 	vldr	s17, [r3, #4]
 800b686:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b68a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b68e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b692:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b696:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b69a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b69e:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b6a2:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b6a6:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b6aa:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b6ae:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b6b2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b6b6:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b6ba:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b6be:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b6c2:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b6c6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b6ca:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b6ce:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b6d2:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b6d6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b6da:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b6de:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b6e2:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b6e6:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b6ea:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b6ee:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b6f2:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b6f6:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b6fa:	edc1 8a01 	vstr	s17, [r1, #4]
 800b6fe:	ed81 aa02 	vstr	s20, [r1, #8]
 800b702:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b706:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b70a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b70e:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b712:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b716:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b71a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b71e:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b722:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b726:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b72a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b72e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b732:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b736:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b73a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b73e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b742:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b746:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b74a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b74e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b752:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b756:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b75a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b75e:	ed84 7a01 	vstr	s14, [r4, #4]
 800b762:	ed84 4a02 	vstr	s8, [r4, #8]
 800b766:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b76a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b76e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b772:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b776:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b77a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b77e:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b782:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b786:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b78a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b78e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b792:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b796:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b79a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b79e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b7a2:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b7a6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b7aa:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b7ae:	f1bb 0b01 	subs.w	fp, fp, #1
 800b7b2:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b7b6:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b7ba:	f10e 0e08 	add.w	lr, lr, #8
 800b7be:	ed83 3a02 	vstr	s6, [r3, #8]
 800b7c2:	ed83 7a01 	vstr	s14, [r3, #4]
 800b7c6:	f1ac 0c08 	sub.w	ip, ip, #8
 800b7ca:	f10a 0a08 	add.w	sl, sl, #8
 800b7ce:	f100 0008 	add.w	r0, r0, #8
 800b7d2:	f1a1 0108 	sub.w	r1, r1, #8
 800b7d6:	f109 0910 	add.w	r9, r9, #16
 800b7da:	f105 0508 	add.w	r5, r5, #8
 800b7de:	f1a4 0408 	sub.w	r4, r4, #8
 800b7e2:	f108 0818 	add.w	r8, r8, #24
 800b7e6:	f102 0208 	add.w	r2, r2, #8
 800b7ea:	f1a3 0308 	sub.w	r3, r3, #8
 800b7ee:	f47f aefc 	bne.w	800b5ea <arm_cfft_radix8by4_f32+0x12e>
 800b7f2:	9907      	ldr	r1, [sp, #28]
 800b7f4:	9800      	ldr	r0, [sp, #0]
 800b7f6:	00cb      	lsls	r3, r1, #3
 800b7f8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b7fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b800:	9100      	str	r1, [sp, #0]
 800b802:	9904      	ldr	r1, [sp, #16]
 800b804:	4419      	add	r1, r3
 800b806:	9104      	str	r1, [sp, #16]
 800b808:	9903      	ldr	r1, [sp, #12]
 800b80a:	4419      	add	r1, r3
 800b80c:	9103      	str	r1, [sp, #12]
 800b80e:	9906      	ldr	r1, [sp, #24]
 800b810:	4419      	add	r1, r3
 800b812:	9106      	str	r1, [sp, #24]
 800b814:	9905      	ldr	r1, [sp, #20]
 800b816:	441f      	add	r7, r3
 800b818:	4419      	add	r1, r3
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	9105      	str	r1, [sp, #20]
 800b81e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b822:	9302      	str	r3, [sp, #8]
 800b824:	9904      	ldr	r1, [sp, #16]
 800b826:	9805      	ldr	r0, [sp, #20]
 800b828:	ed91 4a00 	vldr	s8, [r1]
 800b82c:	edd0 6a00 	vldr	s13, [r0]
 800b830:	9b06      	ldr	r3, [sp, #24]
 800b832:	ed97 3a00 	vldr	s6, [r7]
 800b836:	edd3 7a00 	vldr	s15, [r3]
 800b83a:	edd0 4a01 	vldr	s9, [r0, #4]
 800b83e:	edd1 3a01 	vldr	s7, [r1, #4]
 800b842:	ed97 2a01 	vldr	s4, [r7, #4]
 800b846:	ed93 7a01 	vldr	s14, [r3, #4]
 800b84a:	9a03      	ldr	r2, [sp, #12]
 800b84c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b850:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b854:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b858:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b85c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b860:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b864:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b868:	ed81 5a00 	vstr	s10, [r1]
 800b86c:	ed93 5a01 	vldr	s10, [r3, #4]
 800b870:	edd7 4a01 	vldr	s9, [r7, #4]
 800b874:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b878:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b87c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b880:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b884:	ed81 5a01 	vstr	s10, [r1, #4]
 800b888:	edd2 1a00 	vldr	s3, [r2]
 800b88c:	edd2 2a01 	vldr	s5, [r2, #4]
 800b890:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b894:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b898:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b89c:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b8a0:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b8a4:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b8a8:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b8ac:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b8b0:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b8b4:	edc3 2a00 	vstr	s5, [r3]
 800b8b8:	ed83 5a01 	vstr	s10, [r3, #4]
 800b8bc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b8c0:	9b00      	ldr	r3, [sp, #0]
 800b8c2:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b8c6:	ed93 4a01 	vldr	s8, [r3, #4]
 800b8ca:	ed93 5a00 	vldr	s10, [r3]
 800b8ce:	9b02      	ldr	r3, [sp, #8]
 800b8d0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b8d4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b8d8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b8dc:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b8e0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b8e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b8e8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b8ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b8f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b8f4:	ed80 6a01 	vstr	s12, [r0, #4]
 800b8f8:	edc0 5a00 	vstr	s11, [r0]
 800b8fc:	edd3 5a01 	vldr	s11, [r3, #4]
 800b900:	edd3 6a00 	vldr	s13, [r3]
 800b904:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b908:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b90c:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b910:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b914:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b918:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b91c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b920:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b924:	ed87 7a01 	vstr	s14, [r7, #4]
 800b928:	edc7 7a00 	vstr	s15, [r7]
 800b92c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b930:	4621      	mov	r1, r4
 800b932:	686a      	ldr	r2, [r5, #4]
 800b934:	2304      	movs	r3, #4
 800b936:	f000 fa1d 	bl	800bd74 <arm_radix8_butterfly_f32>
 800b93a:	4630      	mov	r0, r6
 800b93c:	4621      	mov	r1, r4
 800b93e:	686a      	ldr	r2, [r5, #4]
 800b940:	2304      	movs	r3, #4
 800b942:	f000 fa17 	bl	800bd74 <arm_radix8_butterfly_f32>
 800b946:	9808      	ldr	r0, [sp, #32]
 800b948:	686a      	ldr	r2, [r5, #4]
 800b94a:	4621      	mov	r1, r4
 800b94c:	2304      	movs	r3, #4
 800b94e:	f000 fa11 	bl	800bd74 <arm_radix8_butterfly_f32>
 800b952:	686a      	ldr	r2, [r5, #4]
 800b954:	9801      	ldr	r0, [sp, #4]
 800b956:	4621      	mov	r1, r4
 800b958:	2304      	movs	r3, #4
 800b95a:	b00d      	add	sp, #52	@ 0x34
 800b95c:	ecbd 8b0a 	vpop	{d8-d12}
 800b960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	f000 ba06 	b.w	800bd74 <arm_radix8_butterfly_f32>

0800b968 <arm_cfft_f32>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	2a01      	cmp	r2, #1
 800b96e:	4606      	mov	r6, r0
 800b970:	4617      	mov	r7, r2
 800b972:	460c      	mov	r4, r1
 800b974:	4698      	mov	r8, r3
 800b976:	8805      	ldrh	r5, [r0, #0]
 800b978:	d056      	beq.n	800ba28 <arm_cfft_f32+0xc0>
 800b97a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b97e:	d063      	beq.n	800ba48 <arm_cfft_f32+0xe0>
 800b980:	d916      	bls.n	800b9b0 <arm_cfft_f32+0x48>
 800b982:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b986:	d01a      	beq.n	800b9be <arm_cfft_f32+0x56>
 800b988:	d947      	bls.n	800ba1a <arm_cfft_f32+0xb2>
 800b98a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b98e:	d05b      	beq.n	800ba48 <arm_cfft_f32+0xe0>
 800b990:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b994:	d105      	bne.n	800b9a2 <arm_cfft_f32+0x3a>
 800b996:	2301      	movs	r3, #1
 800b998:	6872      	ldr	r2, [r6, #4]
 800b99a:	4629      	mov	r1, r5
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 f9e9 	bl	800bd74 <arm_radix8_butterfly_f32>
 800b9a2:	f1b8 0f00 	cmp.w	r8, #0
 800b9a6:	d111      	bne.n	800b9cc <arm_cfft_f32+0x64>
 800b9a8:	2f01      	cmp	r7, #1
 800b9aa:	d016      	beq.n	800b9da <arm_cfft_f32+0x72>
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	2d20      	cmp	r5, #32
 800b9b2:	d049      	beq.n	800ba48 <arm_cfft_f32+0xe0>
 800b9b4:	d935      	bls.n	800ba22 <arm_cfft_f32+0xba>
 800b9b6:	2d40      	cmp	r5, #64	@ 0x40
 800b9b8:	d0ed      	beq.n	800b996 <arm_cfft_f32+0x2e>
 800b9ba:	2d80      	cmp	r5, #128	@ 0x80
 800b9bc:	d1f1      	bne.n	800b9a2 <arm_cfft_f32+0x3a>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7ff fcab 	bl	800b31c <arm_cfft_radix8by2_f32>
 800b9c6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ca:	d0ed      	beq.n	800b9a8 <arm_cfft_f32+0x40>
 800b9cc:	68b2      	ldr	r2, [r6, #8]
 800b9ce:	89b1      	ldrh	r1, [r6, #12]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 f841 	bl	800ba58 <arm_bitreversal_32>
 800b9d6:	2f01      	cmp	r7, #1
 800b9d8:	d1e8      	bne.n	800b9ac <arm_cfft_f32+0x44>
 800b9da:	ee07 5a90 	vmov	s15, r5
 800b9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b9ea:	2d00      	cmp	r5, #0
 800b9ec:	d0de      	beq.n	800b9ac <arm_cfft_f32+0x44>
 800b9ee:	f104 0108 	add.w	r1, r4, #8
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	429d      	cmp	r5, r3
 800b9f8:	f101 0108 	add.w	r1, r1, #8
 800b9fc:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ba00:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ba04:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ba08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ba0c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ba10:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ba14:	d1ee      	bne.n	800b9f4 <arm_cfft_f32+0x8c>
 800ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800ba1e:	d0ba      	beq.n	800b996 <arm_cfft_f32+0x2e>
 800ba20:	e7bf      	b.n	800b9a2 <arm_cfft_f32+0x3a>
 800ba22:	2d10      	cmp	r5, #16
 800ba24:	d0cb      	beq.n	800b9be <arm_cfft_f32+0x56>
 800ba26:	e7bc      	b.n	800b9a2 <arm_cfft_f32+0x3a>
 800ba28:	b19d      	cbz	r5, 800ba52 <arm_cfft_f32+0xea>
 800ba2a:	f101 030c 	add.w	r3, r1, #12
 800ba2e:	2200      	movs	r2, #0
 800ba30:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ba34:	3201      	adds	r2, #1
 800ba36:	eef1 7a67 	vneg.f32	s15, s15
 800ba3a:	4295      	cmp	r5, r2
 800ba3c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ba40:	f103 0308 	add.w	r3, r3, #8
 800ba44:	d1f4      	bne.n	800ba30 <arm_cfft_f32+0xc8>
 800ba46:	e798      	b.n	800b97a <arm_cfft_f32+0x12>
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff fd36 	bl	800b4bc <arm_cfft_radix8by4_f32>
 800ba50:	e7a7      	b.n	800b9a2 <arm_cfft_f32+0x3a>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0aa      	beq.n	800b9ac <arm_cfft_f32+0x44>
 800ba56:	e7b9      	b.n	800b9cc <arm_cfft_f32+0x64>

0800ba58 <arm_bitreversal_32>:
 800ba58:	b1e9      	cbz	r1, 800ba96 <arm_bitreversal_32+0x3e>
 800ba5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	f102 0e02 	add.w	lr, r2, #2
 800ba62:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800ba66:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800ba6a:	08a4      	lsrs	r4, r4, #2
 800ba6c:	089b      	lsrs	r3, r3, #2
 800ba6e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ba72:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800ba76:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800ba7a:	00a6      	lsls	r6, r4, #2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800ba82:	3304      	adds	r3, #4
 800ba84:	1d34      	adds	r4, r6, #4
 800ba86:	3502      	adds	r5, #2
 800ba88:	58c6      	ldr	r6, [r0, r3]
 800ba8a:	5907      	ldr	r7, [r0, r4]
 800ba8c:	50c7      	str	r7, [r0, r3]
 800ba8e:	428d      	cmp	r5, r1
 800ba90:	5106      	str	r6, [r0, r4]
 800ba92:	d3e6      	bcc.n	800ba62 <arm_bitreversal_32+0xa>
 800ba94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba96:	4770      	bx	lr

0800ba98 <arm_cmplx_mag_f32>:
 800ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9c:	ed2d 8b02 	vpush	{d8}
 800baa0:	0897      	lsrs	r7, r2, #2
 800baa2:	b084      	sub	sp, #16
 800baa4:	d077      	beq.n	800bb96 <arm_cmplx_mag_f32+0xfe>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	f100 0420 	add.w	r4, r0, #32
 800baae:	f101 0510 	add.w	r5, r1, #16
 800bab2:	463e      	mov	r6, r7
 800bab4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800bab8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800babc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bac4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bac8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad0:	f2c0 80c5 	blt.w	800bc5e <arm_cmplx_mag_f32+0x1c6>
 800bad4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800badc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bae0:	f100 80cb 	bmi.w	800bc7a <arm_cmplx_mag_f32+0x1e2>
 800bae4:	ed05 8a04 	vstr	s16, [r5, #-16]
 800bae8:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800baec:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800baf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800baf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800baf8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bafc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb04:	f2c0 80a8 	blt.w	800bc58 <arm_cmplx_mag_f32+0x1c0>
 800bb08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bb14:	f100 80a8 	bmi.w	800bc68 <arm_cmplx_mag_f32+0x1d0>
 800bb18:	ed05 8a03 	vstr	s16, [r5, #-12]
 800bb1c:	ed14 0a04 	vldr	s0, [r4, #-16]
 800bb20:	ed54 7a03 	vldr	s15, [r4, #-12]
 800bb24:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bb28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb38:	f2c0 808b 	blt.w	800bc52 <arm_cmplx_mag_f32+0x1ba>
 800bb3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb44:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bb48:	f100 80a9 	bmi.w	800bc9e <arm_cmplx_mag_f32+0x206>
 800bb4c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800bb50:	ed14 0a02 	vldr	s0, [r4, #-8]
 800bb54:	ed54 7a01 	vldr	s15, [r4, #-4]
 800bb58:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bb5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bb60:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	db6e      	blt.n	800bc4c <arm_cmplx_mag_f32+0x1b4>
 800bb6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bb7a:	f100 8087 	bmi.w	800bc8c <arm_cmplx_mag_f32+0x1f4>
 800bb7e:	ed05 8a01 	vstr	s16, [r5, #-4]
 800bb82:	3e01      	subs	r6, #1
 800bb84:	f104 0420 	add.w	r4, r4, #32
 800bb88:	f105 0510 	add.w	r5, r5, #16
 800bb8c:	d192      	bne.n	800bab4 <arm_cmplx_mag_f32+0x1c>
 800bb8e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800bb92:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800bb96:	f012 0203 	ands.w	r2, r2, #3
 800bb9a:	d052      	beq.n	800bc42 <arm_cmplx_mag_f32+0x1aa>
 800bb9c:	ed90 0a00 	vldr	s0, [r0]
 800bba0:	edd0 7a01 	vldr	s15, [r0, #4]
 800bba4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bba8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbac:	2300      	movs	r3, #0
 800bbae:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bbb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	bfb8      	it	lt
 800bbbc:	600b      	strlt	r3, [r1, #0]
 800bbbe:	db08      	blt.n	800bbd2 <arm_cmplx_mag_f32+0x13a>
 800bbc0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bbcc:	d479      	bmi.n	800bcc2 <arm_cmplx_mag_f32+0x22a>
 800bbce:	ed81 8a00 	vstr	s16, [r1]
 800bbd2:	3a01      	subs	r2, #1
 800bbd4:	d035      	beq.n	800bc42 <arm_cmplx_mag_f32+0x1aa>
 800bbd6:	ed90 0a02 	vldr	s0, [r0, #8]
 800bbda:	edd0 7a03 	vldr	s15, [r0, #12]
 800bbde:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bbe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bbec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf4:	bfb8      	it	lt
 800bbf6:	604b      	strlt	r3, [r1, #4]
 800bbf8:	db08      	blt.n	800bc0c <arm_cmplx_mag_f32+0x174>
 800bbfa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc02:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bc06:	d453      	bmi.n	800bcb0 <arm_cmplx_mag_f32+0x218>
 800bc08:	ed81 8a01 	vstr	s16, [r1, #4]
 800bc0c:	2a01      	cmp	r2, #1
 800bc0e:	d018      	beq.n	800bc42 <arm_cmplx_mag_f32+0x1aa>
 800bc10:	ed90 0a04 	vldr	s0, [r0, #16]
 800bc14:	edd0 7a05 	vldr	s15, [r0, #20]
 800bc18:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bc1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bc20:	2300      	movs	r3, #0
 800bc22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2e:	db19      	blt.n	800bc64 <arm_cmplx_mag_f32+0x1cc>
 800bc30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800bc3c:	d44a      	bmi.n	800bcd4 <arm_cmplx_mag_f32+0x23c>
 800bc3e:	ed81 8a02 	vstr	s16, [r1, #8]
 800bc42:	b004      	add	sp, #16
 800bc44:	ecbd 8b02 	vpop	{d8}
 800bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc4c:	f845 8c04 	str.w	r8, [r5, #-4]
 800bc50:	e797      	b.n	800bb82 <arm_cmplx_mag_f32+0xea>
 800bc52:	f845 8c08 	str.w	r8, [r5, #-8]
 800bc56:	e77b      	b.n	800bb50 <arm_cmplx_mag_f32+0xb8>
 800bc58:	f845 8c0c 	str.w	r8, [r5, #-12]
 800bc5c:	e75e      	b.n	800bb1c <arm_cmplx_mag_f32+0x84>
 800bc5e:	f845 8c10 	str.w	r8, [r5, #-16]
 800bc62:	e741      	b.n	800bae8 <arm_cmplx_mag_f32+0x50>
 800bc64:	608b      	str	r3, [r1, #8]
 800bc66:	e7ec      	b.n	800bc42 <arm_cmplx_mag_f32+0x1aa>
 800bc68:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bc6c:	9001      	str	r0, [sp, #4]
 800bc6e:	f000 fbc3 	bl	800c3f8 <sqrtf>
 800bc72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bc76:	9801      	ldr	r0, [sp, #4]
 800bc78:	e74e      	b.n	800bb18 <arm_cmplx_mag_f32+0x80>
 800bc7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bc7e:	9001      	str	r0, [sp, #4]
 800bc80:	f000 fbba 	bl	800c3f8 <sqrtf>
 800bc84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bc88:	9801      	ldr	r0, [sp, #4]
 800bc8a:	e72b      	b.n	800bae4 <arm_cmplx_mag_f32+0x4c>
 800bc8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bc90:	9001      	str	r0, [sp, #4]
 800bc92:	f000 fbb1 	bl	800c3f8 <sqrtf>
 800bc96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bc9a:	9801      	ldr	r0, [sp, #4]
 800bc9c:	e76f      	b.n	800bb7e <arm_cmplx_mag_f32+0xe6>
 800bc9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bca2:	9001      	str	r0, [sp, #4]
 800bca4:	f000 fba8 	bl	800c3f8 <sqrtf>
 800bca8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bcac:	9801      	ldr	r0, [sp, #4]
 800bcae:	e74d      	b.n	800bb4c <arm_cmplx_mag_f32+0xb4>
 800bcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb4:	9201      	str	r2, [sp, #4]
 800bcb6:	f000 fb9f 	bl	800c3f8 <sqrtf>
 800bcba:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800bcbe:	9903      	ldr	r1, [sp, #12]
 800bcc0:	e7a2      	b.n	800bc08 <arm_cmplx_mag_f32+0x170>
 800bcc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc6:	9201      	str	r2, [sp, #4]
 800bcc8:	f000 fb96 	bl	800c3f8 <sqrtf>
 800bccc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800bcd0:	9903      	ldr	r1, [sp, #12]
 800bcd2:	e77c      	b.n	800bbce <arm_cmplx_mag_f32+0x136>
 800bcd4:	9101      	str	r1, [sp, #4]
 800bcd6:	f000 fb8f 	bl	800c3f8 <sqrtf>
 800bcda:	9901      	ldr	r1, [sp, #4]
 800bcdc:	e7af      	b.n	800bc3e <arm_cmplx_mag_f32+0x1a6>
 800bcde:	bf00      	nop

0800bce0 <arm_cos_f32>:
 800bce0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800bd68 <arm_cos_f32+0x88>
 800bce4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bce8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bcec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bcfc:	d504      	bpl.n	800bd08 <arm_cos_f32+0x28>
 800bcfe:	ee17 3a90 	vmov	r3, s15
 800bd02:	3b01      	subs	r3, #1
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd0c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800bd6c <arm_cos_f32+0x8c>
 800bd10:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd14:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bd18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bd1c:	ee17 3a90 	vmov	r3, s15
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd26:	d21a      	bcs.n	800bd5e <arm_cos_f32+0x7e>
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd30:	1c59      	adds	r1, r3, #1
 800bd32:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd36:	4a0e      	ldr	r2, [pc, #56]	@ (800bd70 <arm_cos_f32+0x90>)
 800bd38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bd3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bd44:	ed93 7a00 	vldr	s14, [r3]
 800bd48:	edd2 6a00 	vldr	s13, [r2]
 800bd4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd50:	ee20 0a26 	vmul.f32	s0, s0, s13
 800bd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd58:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bd5c:	4770      	bx	lr
 800bd5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd62:	2101      	movs	r1, #1
 800bd64:	2300      	movs	r3, #0
 800bd66:	e7e6      	b.n	800bd36 <arm_cos_f32+0x56>
 800bd68:	3e22f983 	.word	0x3e22f983
 800bd6c:	44000000 	.word	0x44000000
 800bd70:	0800cb60 	.word	0x0800cb60

0800bd74 <arm_radix8_butterfly_f32>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	ed2d 8b10 	vpush	{d8-d15}
 800bd7c:	b095      	sub	sp, #84	@ 0x54
 800bd7e:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800bd82:	4603      	mov	r3, r0
 800bd84:	3304      	adds	r3, #4
 800bd86:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800c06c <arm_radix8_butterfly_f32+0x2f8>
 800bd8a:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd8c:	468b      	mov	fp, r1
 800bd8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd90:	4689      	mov	r9, r1
 800bd92:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800bd96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd98:	960f      	str	r6, [sp, #60]	@ 0x3c
 800bd9a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800bd9e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800bda2:	eb03 0508 	add.w	r5, r3, r8
 800bda6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800bdaa:	eb05 040e 	add.w	r4, r5, lr
 800bdae:	0137      	lsls	r7, r6, #4
 800bdb0:	eba6 030a 	sub.w	r3, r6, sl
 800bdb4:	eb04 000e 	add.w	r0, r4, lr
 800bdb8:	44b2      	add	sl, r6
 800bdba:	1d3a      	adds	r2, r7, #4
 800bdbc:	9702      	str	r7, [sp, #8]
 800bdbe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bdc2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800bdc6:	ebae 0c06 	sub.w	ip, lr, r6
 800bdca:	9703      	str	r7, [sp, #12]
 800bdcc:	eb03 0708 	add.w	r7, r3, r8
 800bdd0:	9701      	str	r7, [sp, #4]
 800bdd2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800bdd6:	9706      	str	r7, [sp, #24]
 800bdd8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800bdda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800bdde:	f10e 0104 	add.w	r1, lr, #4
 800bde2:	4439      	add	r1, r7
 800bde4:	443a      	add	r2, r7
 800bde6:	0137      	lsls	r7, r6, #4
 800bde8:	00f6      	lsls	r6, r6, #3
 800bdea:	9704      	str	r7, [sp, #16]
 800bdec:	9605      	str	r6, [sp, #20]
 800bdee:	9f01      	ldr	r7, [sp, #4]
 800bdf0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bdf2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800bdf6:	f04f 0c00 	mov.w	ip, #0
 800bdfa:	edd4 6a00 	vldr	s13, [r4]
 800bdfe:	edd7 1a00 	vldr	s3, [r7]
 800be02:	ed16 aa01 	vldr	s20, [r6, #-4]
 800be06:	edd5 5a00 	vldr	s11, [r5]
 800be0a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800be0e:	ed90 6a00 	vldr	s12, [r0]
 800be12:	ed51 7a01 	vldr	s15, [r1, #-4]
 800be16:	ed93 3a00 	vldr	s6, [r3]
 800be1a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800be1e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800be22:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800be26:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800be2a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800be2e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800be32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be36:	ee74 6a07 	vadd.f32	s13, s8, s14
 800be3a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800be3e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800be42:	ed85 4a00 	vstr	s8, [r5]
 800be46:	edd1 6a00 	vldr	s13, [r1]
 800be4a:	ed94 9a01 	vldr	s18, [r4, #4]
 800be4e:	edd3 2a01 	vldr	s5, [r3, #4]
 800be52:	edd7 8a01 	vldr	s17, [r7, #4]
 800be56:	edd6 0a00 	vldr	s1, [r6]
 800be5a:	edd5 3a01 	vldr	s7, [r5, #4]
 800be5e:	ed90 8a01 	vldr	s16, [r0, #4]
 800be62:	ed92 7a00 	vldr	s14, [r2]
 800be66:	ee33 3a61 	vsub.f32	s6, s6, s3
 800be6a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800be6e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800be72:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800be76:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800be7a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800be7e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800be82:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800be86:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800be8a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800be8e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800be92:	ee77 0a08 	vadd.f32	s1, s14, s16
 800be96:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800be9a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800be9e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800bea2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800bea6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800beaa:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800beae:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800beb2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800beb6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800beba:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800bebe:	ee33 2a20 	vadd.f32	s4, s6, s1
 800bec2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bec6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800beca:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800bece:	ee77 0a01 	vadd.f32	s1, s14, s2
 800bed2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800bed6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800beda:	ee73 1a84 	vadd.f32	s3, s7, s8
 800bede:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800bee2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800bee6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800beea:	ee32 8a00 	vadd.f32	s16, s4, s0
 800beee:	ee33 1a45 	vsub.f32	s2, s6, s10
 800bef2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800bef6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800befa:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800befe:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800bf02:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800bf06:	ee34 6a67 	vsub.f32	s12, s8, s15
 800bf0a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800bf0e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800bf12:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800bf16:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bf1a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800bf1e:	44dc      	add	ip, fp
 800bf20:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bf24:	45e1      	cmp	r9, ip
 800bf26:	ed86 8a00 	vstr	s16, [r6]
 800bf2a:	ed85 2a01 	vstr	s4, [r5, #4]
 800bf2e:	4456      	add	r6, sl
 800bf30:	ed02 0a01 	vstr	s0, [r2, #-4]
 800bf34:	4455      	add	r5, sl
 800bf36:	edc0 6a00 	vstr	s13, [r0]
 800bf3a:	ed82 1a00 	vstr	s2, [r2]
 800bf3e:	ed80 5a01 	vstr	s10, [r0, #4]
 800bf42:	4452      	add	r2, sl
 800bf44:	ed01 3a01 	vstr	s6, [r1, #-4]
 800bf48:	4450      	add	r0, sl
 800bf4a:	edc7 2a00 	vstr	s5, [r7]
 800bf4e:	edc4 4a00 	vstr	s9, [r4]
 800bf52:	ed83 7a00 	vstr	s14, [r3]
 800bf56:	edc1 5a00 	vstr	s11, [r1]
 800bf5a:	edc7 3a01 	vstr	s7, [r7, #4]
 800bf5e:	4451      	add	r1, sl
 800bf60:	ed84 6a01 	vstr	s12, [r4, #4]
 800bf64:	4457      	add	r7, sl
 800bf66:	edc3 7a01 	vstr	s15, [r3, #4]
 800bf6a:	4454      	add	r4, sl
 800bf6c:	4453      	add	r3, sl
 800bf6e:	f63f af44 	bhi.w	800bdfa <arm_radix8_butterfly_f32+0x86>
 800bf72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf74:	2b07      	cmp	r3, #7
 800bf76:	f240 81b7 	bls.w	800c2e8 <arm_radix8_butterfly_f32+0x574>
 800bf7a:	9b06      	ldr	r3, [sp, #24]
 800bf7c:	9903      	ldr	r1, [sp, #12]
 800bf7e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bf80:	9e05      	ldr	r6, [sp, #20]
 800bf82:	9a04      	ldr	r2, [sp, #16]
 800bf84:	f103 0c08 	add.w	ip, r3, #8
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	3108      	adds	r1, #8
 800bf8c:	f108 0808 	add.w	r8, r8, #8
 800bf90:	1841      	adds	r1, r0, r1
 800bf92:	3608      	adds	r6, #8
 800bf94:	330c      	adds	r3, #12
 800bf96:	4604      	mov	r4, r0
 800bf98:	4444      	add	r4, r8
 800bf9a:	18c3      	adds	r3, r0, r3
 800bf9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf9e:	1981      	adds	r1, r0, r6
 800bfa0:	f10e 0e08 	add.w	lr, lr, #8
 800bfa4:	3208      	adds	r2, #8
 800bfa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfa8:	9107      	str	r1, [sp, #28]
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4601      	mov	r1, r0
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	f100 030c 	add.w	r3, r0, #12
 800bfb4:	4474      	add	r4, lr
 800bfb6:	f04f 0801 	mov.w	r8, #1
 800bfba:	1882      	adds	r2, r0, r2
 800bfbc:	4461      	add	r1, ip
 800bfbe:	9305      	str	r3, [sp, #20]
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bfc4:	46c1      	mov	r9, r8
 800bfc6:	9208      	str	r2, [sp, #32]
 800bfc8:	46d8      	mov	r8, fp
 800bfca:	9106      	str	r1, [sp, #24]
 800bfcc:	f04f 0e00 	mov.w	lr, #0
 800bfd0:	469b      	mov	fp, r3
 800bfd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bfd6:	449e      	add	lr, r3
 800bfd8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800bfdc:	441a      	add	r2, r3
 800bfde:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfe0:	441a      	add	r2, r3
 800bfe2:	18d4      	adds	r4, r2, r3
 800bfe4:	18e5      	adds	r5, r4, r3
 800bfe6:	18ee      	adds	r6, r5, r3
 800bfe8:	18f7      	adds	r7, r6, r3
 800bfea:	eb07 0c03 	add.w	ip, r7, r3
 800bfee:	920d      	str	r2, [sp, #52]	@ 0x34
 800bff0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800bff4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800bff8:	910c      	str	r1, [sp, #48]	@ 0x30
 800bffa:	4419      	add	r1, r3
 800bffc:	9103      	str	r1, [sp, #12]
 800bffe:	4419      	add	r1, r3
 800c000:	18ca      	adds	r2, r1, r3
 800c002:	9202      	str	r2, [sp, #8]
 800c004:	441a      	add	r2, r3
 800c006:	18d0      	adds	r0, r2, r3
 800c008:	ed92 ea01 	vldr	s28, [r2, #4]
 800c00c:	9a02      	ldr	r2, [sp, #8]
 800c00e:	edd4 7a00 	vldr	s15, [r4]
 800c012:	edd2 da01 	vldr	s27, [r2, #4]
 800c016:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c018:	ed91 da01 	vldr	s26, [r1, #4]
 800c01c:	ed92 ca01 	vldr	s24, [r2, #4]
 800c020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c022:	9903      	ldr	r1, [sp, #12]
 800c024:	edcd 7a03 	vstr	s15, [sp, #12]
 800c028:	edd2 7a00 	vldr	s15, [r2]
 800c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c02e:	edcd 7a02 	vstr	s15, [sp, #8]
 800c032:	edd2 7a00 	vldr	s15, [r2]
 800c036:	edd0 ea01 	vldr	s29, [r0, #4]
 800c03a:	edd1 ca01 	vldr	s25, [r1, #4]
 800c03e:	eddc ba00 	vldr	s23, [ip]
 800c042:	edd7 aa00 	vldr	s21, [r7]
 800c046:	ed96 aa00 	vldr	s20, [r6]
 800c04a:	edd5 9a00 	vldr	s19, [r5]
 800c04e:	edcd 7a01 	vstr	s15, [sp, #4]
 800c052:	4403      	add	r3, r0
 800c054:	ed93 fa01 	vldr	s30, [r3, #4]
 800c058:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800c05c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c060:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800c068:	46cc      	mov	ip, r9
 800c06a:	e001      	b.n	800c070 <arm_radix8_butterfly_f32+0x2fc>
 800c06c:	3f3504f3 	.word	0x3f3504f3
 800c070:	ed91 6a00 	vldr	s12, [r1]
 800c074:	ed93 5a00 	vldr	s10, [r3]
 800c078:	edd0 fa00 	vldr	s31, [r0]
 800c07c:	edd4 7a00 	vldr	s15, [r4]
 800c080:	ed95 7a00 	vldr	s14, [r5]
 800c084:	ed56 3a01 	vldr	s7, [r6, #-4]
 800c088:	ed17 3a01 	vldr	s6, [r7, #-4]
 800c08c:	ed92 2a00 	vldr	s4, [r2]
 800c090:	ed96 0a00 	vldr	s0, [r6]
 800c094:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c098:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c09c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800c0a0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c0a4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c0a8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c0ac:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c0b0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c0b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0b8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800c0bc:	edd4 8a01 	vldr	s17, [r4, #4]
 800c0c0:	ed92 9a01 	vldr	s18, [r2, #4]
 800c0c4:	edd7 0a00 	vldr	s1, [r7]
 800c0c8:	edd1 2a01 	vldr	s5, [r1, #4]
 800c0cc:	ed95 7a01 	vldr	s14, [r5, #4]
 800c0d0:	ed93 6a01 	vldr	s12, [r3, #4]
 800c0d4:	edd0 5a01 	vldr	s11, [r0, #4]
 800c0d8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c0dc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800c0e0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c0e4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800c0e8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c0ec:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c0f0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c0f4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c0f8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c0fc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c100:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c104:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800c108:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c10c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800c110:	ee32 1a08 	vadd.f32	s2, s4, s16
 800c114:	ee72 fa87 	vadd.f32	s31, s5, s14
 800c118:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c11c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c120:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c124:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c128:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c12c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c130:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800c134:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800c138:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c13c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c140:	ee74 0a22 	vadd.f32	s1, s8, s5
 800c144:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c148:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c14c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c150:	ee32 4a64 	vsub.f32	s8, s4, s9
 800c154:	ee73 8a09 	vadd.f32	s17, s6, s18
 800c158:	ee74 4a82 	vadd.f32	s9, s9, s4
 800c15c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800c160:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800c164:	ee35 3a85 	vadd.f32	s6, s11, s10
 800c168:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c16c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800c170:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c174:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800c178:	ee30 7a68 	vsub.f32	s14, s0, s17
 800c17c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800c180:	ee38 0a80 	vadd.f32	s0, s17, s0
 800c184:	ee73 3a82 	vadd.f32	s7, s7, s4
 800c188:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800c18c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800c190:	eddd 1a02 	vldr	s3, [sp, #8]
 800c194:	ee35 5a43 	vsub.f32	s10, s10, s6
 800c198:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800c19c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800c1a0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800c1a4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c1a8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800c1ac:	ee76 5a49 	vsub.f32	s11, s12, s18
 800c1b0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c1b4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c1b8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c1bc:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c1c0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c1c4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c1c8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c1cc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c1d0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c1d4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c1d8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c1dc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c1e0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c1e4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c1e8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c1ec:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c1f0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c1f4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c1f8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c1fc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c200:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c204:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c208:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c20c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c210:	eddd 5a03 	vldr	s11, [sp, #12]
 800c214:	edc6 fa00 	vstr	s31, [r6]
 800c218:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c21c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c220:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c224:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c228:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c22c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c230:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c234:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c238:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c23c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c240:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c244:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c248:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c24c:	44c4      	add	ip, r8
 800c24e:	45e3      	cmp	fp, ip
 800c250:	edc3 3a00 	vstr	s7, [r3]
 800c254:	edc3 6a01 	vstr	s13, [r3, #4]
 800c258:	4456      	add	r6, sl
 800c25a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c25e:	edc7 0a00 	vstr	s1, [r7]
 800c262:	4453      	add	r3, sl
 800c264:	ed80 2a00 	vstr	s4, [r0]
 800c268:	edc0 2a01 	vstr	s5, [r0, #4]
 800c26c:	4457      	add	r7, sl
 800c26e:	edc2 1a00 	vstr	s3, [r2]
 800c272:	ed82 7a01 	vstr	s14, [r2, #4]
 800c276:	4450      	add	r0, sl
 800c278:	ed85 8a00 	vstr	s16, [r5]
 800c27c:	ed85 0a01 	vstr	s0, [r5, #4]
 800c280:	4452      	add	r2, sl
 800c282:	edc1 4a00 	vstr	s9, [r1]
 800c286:	4455      	add	r5, sl
 800c288:	ed81 3a01 	vstr	s6, [r1, #4]
 800c28c:	edc4 8a00 	vstr	s17, [r4]
 800c290:	ed84 6a01 	vstr	s12, [r4, #4]
 800c294:	4451      	add	r1, sl
 800c296:	4454      	add	r4, sl
 800c298:	f63f aeea 	bhi.w	800c070 <arm_radix8_butterfly_f32+0x2fc>
 800c29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c29e:	3308      	adds	r3, #8
 800c2a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ae:	9b08      	ldr	r3, [sp, #32]
 800c2b0:	3308      	adds	r3, #8
 800c2b2:	9308      	str	r3, [sp, #32]
 800c2b4:	9b07      	ldr	r3, [sp, #28]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	9307      	str	r3, [sp, #28]
 800c2ba:	9b06      	ldr	r3, [sp, #24]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	9306      	str	r3, [sp, #24]
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	3308      	adds	r3, #8
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ce:	f109 0901 	add.w	r9, r9, #1
 800c2d2:	454b      	cmp	r3, r9
 800c2d4:	f47f ae7d 	bne.w	800bfd2 <arm_radix8_butterfly_f32+0x25e>
 800c2d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	46d9      	mov	r9, fp
 800c2e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2e2:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800c2e6:	e554      	b.n	800bd92 <arm_radix8_butterfly_f32+0x1e>
 800c2e8:	b015      	add	sp, #84	@ 0x54
 800c2ea:	ecbd 8b10 	vpop	{d8-d15}
 800c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f2:	bf00      	nop

0800c2f4 <_ZdlPvj>:
 800c2f4:	f000 b875 	b.w	800c3e2 <_ZdlPv>

0800c2f8 <_Znwj>:
 800c2f8:	2801      	cmp	r0, #1
 800c2fa:	bf38      	it	cc
 800c2fc:	2001      	movcc	r0, #1
 800c2fe:	b510      	push	{r4, lr}
 800c300:	4604      	mov	r4, r0
 800c302:	4620      	mov	r0, r4
 800c304:	f000 f8a0 	bl	800c448 <malloc>
 800c308:	b100      	cbz	r0, 800c30c <_Znwj+0x14>
 800c30a:	bd10      	pop	{r4, pc}
 800c30c:	f000 f86c 	bl	800c3e8 <_ZSt15get_new_handlerv>
 800c310:	b908      	cbnz	r0, 800c316 <_Znwj+0x1e>
 800c312:	f000 f892 	bl	800c43a <abort>
 800c316:	4780      	blx	r0
 800c318:	e7f3      	b.n	800c302 <_Znwj+0xa>

0800c31a <_ZNSaIcEC1Ev>:
 800c31a:	4770      	bx	lr

0800c31c <_ZNSaIcED1Ev>:
 800c31c:	4770      	bx	lr

0800c31e <_ZSt17__throw_bad_allocv>:
 800c31e:	b508      	push	{r3, lr}
 800c320:	f000 f88b 	bl	800c43a <abort>

0800c324 <_ZSt20__throw_length_errorPKc>:
 800c324:	b508      	push	{r3, lr}
 800c326:	f000 f888 	bl	800c43a <abort>

0800c32a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800c32a:	b10a      	cbz	r2, 800c330 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800c32c:	f000 b94a 	b.w	800c5c4 <memcmp>
 800c330:	4610      	mov	r0, r2
 800c332:	4770      	bx	lr

0800c334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800c334:	6001      	str	r1, [r0, #0]
 800c336:	4770      	bx	lr

0800c338 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800c338:	6800      	ldr	r0, [r0, #0]
 800c33a:	4770      	bx	lr

0800c33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800c33c:	3008      	adds	r0, #8
 800c33e:	4770      	bx	lr

0800c340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800c340:	6081      	str	r1, [r0, #8]
 800c342:	4770      	bx	lr

0800c344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800c344:	6803      	ldr	r3, [r0, #0]
 800c346:	6041      	str	r1, [r0, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	545a      	strb	r2, [r3, r1]
 800c34c:	4770      	bx	lr

0800c34e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800c34e:	f850 3b08 	ldr.w	r3, [r0], #8
 800c352:	1a1b      	subs	r3, r3, r0
 800c354:	4258      	negs	r0, r3
 800c356:	4158      	adcs	r0, r3
 800c358:	4770      	bx	lr
	...

0800c35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800c35c:	b508      	push	{r3, lr}
 800c35e:	680b      	ldr	r3, [r1, #0]
 800c360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c364:	d302      	bcc.n	800c36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800c366:	480d      	ldr	r0, [pc, #52]	@ (800c39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800c368:	f7ff ffdc 	bl	800c324 <_ZSt20__throw_length_errorPKc>
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d90b      	bls.n	800c388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800c370:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800c374:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800c378:	d206      	bcs.n	800c388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800c37a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c37e:	bf2a      	itet	cs
 800c380:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800c384:	6008      	strcc	r0, [r1, #0]
 800c386:	600b      	strcs	r3, [r1, #0]
 800c388:	6808      	ldr	r0, [r1, #0]
 800c38a:	3001      	adds	r0, #1
 800c38c:	d501      	bpl.n	800c392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800c38e:	f7ff ffc6 	bl	800c31e <_ZSt17__throw_bad_allocv>
 800c392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c396:	f7ff bfaf 	b.w	800c2f8 <_Znwj>
 800c39a:	bf00      	nop
 800c39c:	0800f364 	.word	0x0800f364

0800c3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	f7ff ffd3 	bl	800c34e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800c3a8:	b920      	cbnz	r0, 800c3b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800c3aa:	6820      	ldr	r0, [r4, #0]
 800c3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b0:	f000 b817 	b.w	800c3e2 <_ZdlPv>
 800c3b4:	bd10      	pop	{r4, pc}

0800c3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800c3b6:	b510      	push	{r4, lr}
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	f7ff fff1 	bl	800c3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800c3be:	4620      	mov	r0, r4
 800c3c0:	bd10      	pop	{r4, pc}

0800c3c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800c3c2:	b538      	push	{r3, r4, r5, lr}
 800c3c4:	6845      	ldr	r5, [r0, #4]
 800c3c6:	684c      	ldr	r4, [r1, #4]
 800c3c8:	6800      	ldr	r0, [r0, #0]
 800c3ca:	6809      	ldr	r1, [r1, #0]
 800c3cc:	42a5      	cmp	r5, r4
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	bf28      	it	cs
 800c3d2:	4622      	movcs	r2, r4
 800c3d4:	f7ff ffa9 	bl	800c32a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800c3d8:	b900      	cbnz	r0, 800c3dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800c3da:	1b28      	subs	r0, r5, r4
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}

0800c3de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800c3de:	6001      	str	r1, [r0, #0]
 800c3e0:	4770      	bx	lr

0800c3e2 <_ZdlPv>:
 800c3e2:	f000 b839 	b.w	800c458 <free>
	...

0800c3e8 <_ZSt15get_new_handlerv>:
 800c3e8:	4b02      	ldr	r3, [pc, #8]	@ (800c3f4 <_ZSt15get_new_handlerv+0xc>)
 800c3ea:	6818      	ldr	r0, [r3, #0]
 800c3ec:	f3bf 8f5b 	dmb	ish
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20001f7c 	.word	0x20001f7c

0800c3f8 <sqrtf>:
 800c3f8:	b508      	push	{r3, lr}
 800c3fa:	ed2d 8b02 	vpush	{d8}
 800c3fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c402:	f000 f817 	bl	800c434 <__ieee754_sqrtf>
 800c406:	eeb4 8a48 	vcmp.f32	s16, s16
 800c40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40e:	d60c      	bvs.n	800c42a <sqrtf+0x32>
 800c410:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c430 <sqrtf+0x38>
 800c414:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41c:	d505      	bpl.n	800c42a <sqrtf+0x32>
 800c41e:	f000 f93d 	bl	800c69c <__errno>
 800c422:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c426:	2321      	movs	r3, #33	@ 0x21
 800c428:	6003      	str	r3, [r0, #0]
 800c42a:	ecbd 8b02 	vpop	{d8}
 800c42e:	bd08      	pop	{r3, pc}
 800c430:	00000000 	.word	0x00000000

0800c434 <__ieee754_sqrtf>:
 800c434:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c438:	4770      	bx	lr

0800c43a <abort>:
 800c43a:	b508      	push	{r3, lr}
 800c43c:	2006      	movs	r0, #6
 800c43e:	f000 f901 	bl	800c644 <raise>
 800c442:	2001      	movs	r0, #1
 800c444:	f7f6 fe3c 	bl	80030c0 <_exit>

0800c448 <malloc>:
 800c448:	4b02      	ldr	r3, [pc, #8]	@ (800c454 <malloc+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f000 b82d 	b.w	800c4ac <_malloc_r>
 800c452:	bf00      	nop
 800c454:	20000018 	.word	0x20000018

0800c458 <free>:
 800c458:	4b02      	ldr	r3, [pc, #8]	@ (800c464 <free+0xc>)
 800c45a:	4601      	mov	r1, r0
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	f000 b949 	b.w	800c6f4 <_free_r>
 800c462:	bf00      	nop
 800c464:	20000018 	.word	0x20000018

0800c468 <sbrk_aligned>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	4e0f      	ldr	r6, [pc, #60]	@ (800c4a8 <sbrk_aligned+0x40>)
 800c46c:	460c      	mov	r4, r1
 800c46e:	6831      	ldr	r1, [r6, #0]
 800c470:	4605      	mov	r5, r0
 800c472:	b911      	cbnz	r1, 800c47a <sbrk_aligned+0x12>
 800c474:	f000 f902 	bl	800c67c <_sbrk_r>
 800c478:	6030      	str	r0, [r6, #0]
 800c47a:	4621      	mov	r1, r4
 800c47c:	4628      	mov	r0, r5
 800c47e:	f000 f8fd 	bl	800c67c <_sbrk_r>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	d103      	bne.n	800c48e <sbrk_aligned+0x26>
 800c486:	f04f 34ff 	mov.w	r4, #4294967295
 800c48a:	4620      	mov	r0, r4
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	1cc4      	adds	r4, r0, #3
 800c490:	f024 0403 	bic.w	r4, r4, #3
 800c494:	42a0      	cmp	r0, r4
 800c496:	d0f8      	beq.n	800c48a <sbrk_aligned+0x22>
 800c498:	1a21      	subs	r1, r4, r0
 800c49a:	4628      	mov	r0, r5
 800c49c:	f000 f8ee 	bl	800c67c <_sbrk_r>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d1f2      	bne.n	800c48a <sbrk_aligned+0x22>
 800c4a4:	e7ef      	b.n	800c486 <sbrk_aligned+0x1e>
 800c4a6:	bf00      	nop
 800c4a8:	20001f80 	.word	0x20001f80

0800c4ac <_malloc_r>:
 800c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b0:	1ccd      	adds	r5, r1, #3
 800c4b2:	f025 0503 	bic.w	r5, r5, #3
 800c4b6:	3508      	adds	r5, #8
 800c4b8:	2d0c      	cmp	r5, #12
 800c4ba:	bf38      	it	cc
 800c4bc:	250c      	movcc	r5, #12
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	db01      	blt.n	800c4c8 <_malloc_r+0x1c>
 800c4c4:	42a9      	cmp	r1, r5
 800c4c6:	d904      	bls.n	800c4d2 <_malloc_r+0x26>
 800c4c8:	230c      	movs	r3, #12
 800c4ca:	6033      	str	r3, [r6, #0]
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5a8 <_malloc_r+0xfc>
 800c4d6:	f000 f869 	bl	800c5ac <__malloc_lock>
 800c4da:	f8d8 3000 	ldr.w	r3, [r8]
 800c4de:	461c      	mov	r4, r3
 800c4e0:	bb44      	cbnz	r4, 800c534 <_malloc_r+0x88>
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	f7ff ffbf 	bl	800c468 <sbrk_aligned>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	d158      	bne.n	800c5a2 <_malloc_r+0xf6>
 800c4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c4f4:	4627      	mov	r7, r4
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	d143      	bne.n	800c582 <_malloc_r+0xd6>
 800c4fa:	2c00      	cmp	r4, #0
 800c4fc:	d04b      	beq.n	800c596 <_malloc_r+0xea>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	4639      	mov	r1, r7
 800c502:	4630      	mov	r0, r6
 800c504:	eb04 0903 	add.w	r9, r4, r3
 800c508:	f000 f8b8 	bl	800c67c <_sbrk_r>
 800c50c:	4581      	cmp	r9, r0
 800c50e:	d142      	bne.n	800c596 <_malloc_r+0xea>
 800c510:	6821      	ldr	r1, [r4, #0]
 800c512:	1a6d      	subs	r5, r5, r1
 800c514:	4629      	mov	r1, r5
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff ffa6 	bl	800c468 <sbrk_aligned>
 800c51c:	3001      	adds	r0, #1
 800c51e:	d03a      	beq.n	800c596 <_malloc_r+0xea>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	442b      	add	r3, r5
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	f8d8 3000 	ldr.w	r3, [r8]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	bb62      	cbnz	r2, 800c588 <_malloc_r+0xdc>
 800c52e:	f8c8 7000 	str.w	r7, [r8]
 800c532:	e00f      	b.n	800c554 <_malloc_r+0xa8>
 800c534:	6822      	ldr	r2, [r4, #0]
 800c536:	1b52      	subs	r2, r2, r5
 800c538:	d420      	bmi.n	800c57c <_malloc_r+0xd0>
 800c53a:	2a0b      	cmp	r2, #11
 800c53c:	d917      	bls.n	800c56e <_malloc_r+0xc2>
 800c53e:	1961      	adds	r1, r4, r5
 800c540:	42a3      	cmp	r3, r4
 800c542:	6025      	str	r5, [r4, #0]
 800c544:	bf18      	it	ne
 800c546:	6059      	strne	r1, [r3, #4]
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	bf08      	it	eq
 800c54c:	f8c8 1000 	streq.w	r1, [r8]
 800c550:	5162      	str	r2, [r4, r5]
 800c552:	604b      	str	r3, [r1, #4]
 800c554:	4630      	mov	r0, r6
 800c556:	f000 f82f 	bl	800c5b8 <__malloc_unlock>
 800c55a:	f104 000b 	add.w	r0, r4, #11
 800c55e:	1d23      	adds	r3, r4, #4
 800c560:	f020 0007 	bic.w	r0, r0, #7
 800c564:	1ac2      	subs	r2, r0, r3
 800c566:	bf1c      	itt	ne
 800c568:	1a1b      	subne	r3, r3, r0
 800c56a:	50a3      	strne	r3, [r4, r2]
 800c56c:	e7af      	b.n	800c4ce <_malloc_r+0x22>
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	42a3      	cmp	r3, r4
 800c572:	bf0c      	ite	eq
 800c574:	f8c8 2000 	streq.w	r2, [r8]
 800c578:	605a      	strne	r2, [r3, #4]
 800c57a:	e7eb      	b.n	800c554 <_malloc_r+0xa8>
 800c57c:	4623      	mov	r3, r4
 800c57e:	6864      	ldr	r4, [r4, #4]
 800c580:	e7ae      	b.n	800c4e0 <_malloc_r+0x34>
 800c582:	463c      	mov	r4, r7
 800c584:	687f      	ldr	r7, [r7, #4]
 800c586:	e7b6      	b.n	800c4f6 <_malloc_r+0x4a>
 800c588:	461a      	mov	r2, r3
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	d1fb      	bne.n	800c588 <_malloc_r+0xdc>
 800c590:	2300      	movs	r3, #0
 800c592:	6053      	str	r3, [r2, #4]
 800c594:	e7de      	b.n	800c554 <_malloc_r+0xa8>
 800c596:	230c      	movs	r3, #12
 800c598:	6033      	str	r3, [r6, #0]
 800c59a:	4630      	mov	r0, r6
 800c59c:	f000 f80c 	bl	800c5b8 <__malloc_unlock>
 800c5a0:	e794      	b.n	800c4cc <_malloc_r+0x20>
 800c5a2:	6005      	str	r5, [r0, #0]
 800c5a4:	e7d6      	b.n	800c554 <_malloc_r+0xa8>
 800c5a6:	bf00      	nop
 800c5a8:	20001f84 	.word	0x20001f84

0800c5ac <__malloc_lock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	@ (800c5b4 <__malloc_lock+0x8>)
 800c5ae:	f000 b89f 	b.w	800c6f0 <__retarget_lock_acquire_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	200020c4 	.word	0x200020c4

0800c5b8 <__malloc_unlock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	@ (800c5c0 <__malloc_unlock+0x8>)
 800c5ba:	f000 b89a 	b.w	800c6f2 <__retarget_lock_release_recursive>
 800c5be:	bf00      	nop
 800c5c0:	200020c4 	.word	0x200020c4

0800c5c4 <memcmp>:
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	3901      	subs	r1, #1
 800c5c8:	4402      	add	r2, r0
 800c5ca:	4290      	cmp	r0, r2
 800c5cc:	d101      	bne.n	800c5d2 <memcmp+0xe>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e005      	b.n	800c5de <memcmp+0x1a>
 800c5d2:	7803      	ldrb	r3, [r0, #0]
 800c5d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d001      	beq.n	800c5e0 <memcmp+0x1c>
 800c5dc:	1b18      	subs	r0, r3, r4
 800c5de:	bd10      	pop	{r4, pc}
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	e7f2      	b.n	800c5ca <memcmp+0x6>

0800c5e4 <memset>:
 800c5e4:	4402      	add	r2, r0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d100      	bne.n	800c5ee <memset+0xa>
 800c5ec:	4770      	bx	lr
 800c5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f2:	e7f9      	b.n	800c5e8 <memset+0x4>

0800c5f4 <_raise_r>:
 800c5f4:	291f      	cmp	r1, #31
 800c5f6:	b538      	push	{r3, r4, r5, lr}
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	d904      	bls.n	800c608 <_raise_r+0x14>
 800c5fe:	2316      	movs	r3, #22
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	f04f 30ff 	mov.w	r0, #4294967295
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c60a:	b112      	cbz	r2, 800c612 <_raise_r+0x1e>
 800c60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c610:	b94b      	cbnz	r3, 800c626 <_raise_r+0x32>
 800c612:	4628      	mov	r0, r5
 800c614:	f000 f830 	bl	800c678 <_getpid_r>
 800c618:	4622      	mov	r2, r4
 800c61a:	4601      	mov	r1, r0
 800c61c:	4628      	mov	r0, r5
 800c61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c622:	f000 b817 	b.w	800c654 <_kill_r>
 800c626:	2b01      	cmp	r3, #1
 800c628:	d00a      	beq.n	800c640 <_raise_r+0x4c>
 800c62a:	1c59      	adds	r1, r3, #1
 800c62c:	d103      	bne.n	800c636 <_raise_r+0x42>
 800c62e:	2316      	movs	r3, #22
 800c630:	6003      	str	r3, [r0, #0]
 800c632:	2001      	movs	r0, #1
 800c634:	e7e7      	b.n	800c606 <_raise_r+0x12>
 800c636:	2100      	movs	r1, #0
 800c638:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c63c:	4620      	mov	r0, r4
 800c63e:	4798      	blx	r3
 800c640:	2000      	movs	r0, #0
 800c642:	e7e0      	b.n	800c606 <_raise_r+0x12>

0800c644 <raise>:
 800c644:	4b02      	ldr	r3, [pc, #8]	@ (800c650 <raise+0xc>)
 800c646:	4601      	mov	r1, r0
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	f7ff bfd3 	b.w	800c5f4 <_raise_r>
 800c64e:	bf00      	nop
 800c650:	20000018 	.word	0x20000018

0800c654 <_kill_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d07      	ldr	r5, [pc, #28]	@ (800c674 <_kill_r+0x20>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	4611      	mov	r1, r2
 800c660:	602b      	str	r3, [r5, #0]
 800c662:	f7f6 fd1d 	bl	80030a0 <_kill>
 800c666:	1c43      	adds	r3, r0, #1
 800c668:	d102      	bne.n	800c670 <_kill_r+0x1c>
 800c66a:	682b      	ldr	r3, [r5, #0]
 800c66c:	b103      	cbz	r3, 800c670 <_kill_r+0x1c>
 800c66e:	6023      	str	r3, [r4, #0]
 800c670:	bd38      	pop	{r3, r4, r5, pc}
 800c672:	bf00      	nop
 800c674:	200020c0 	.word	0x200020c0

0800c678 <_getpid_r>:
 800c678:	f7f6 bd0a 	b.w	8003090 <_getpid>

0800c67c <_sbrk_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4d06      	ldr	r5, [pc, #24]	@ (800c698 <_sbrk_r+0x1c>)
 800c680:	2300      	movs	r3, #0
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	602b      	str	r3, [r5, #0]
 800c688:	f7f6 fd26 	bl	80030d8 <_sbrk>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d102      	bne.n	800c696 <_sbrk_r+0x1a>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	b103      	cbz	r3, 800c696 <_sbrk_r+0x1a>
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	200020c0 	.word	0x200020c0

0800c69c <__errno>:
 800c69c:	4b01      	ldr	r3, [pc, #4]	@ (800c6a4 <__errno+0x8>)
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	20000018 	.word	0x20000018

0800c6a8 <__libc_init_array>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	4d0d      	ldr	r5, [pc, #52]	@ (800c6e0 <__libc_init_array+0x38>)
 800c6ac:	4c0d      	ldr	r4, [pc, #52]	@ (800c6e4 <__libc_init_array+0x3c>)
 800c6ae:	1b64      	subs	r4, r4, r5
 800c6b0:	10a4      	asrs	r4, r4, #2
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	42a6      	cmp	r6, r4
 800c6b6:	d109      	bne.n	800c6cc <__libc_init_array+0x24>
 800c6b8:	4d0b      	ldr	r5, [pc, #44]	@ (800c6e8 <__libc_init_array+0x40>)
 800c6ba:	4c0c      	ldr	r4, [pc, #48]	@ (800c6ec <__libc_init_array+0x44>)
 800c6bc:	f000 f864 	bl	800c788 <_init>
 800c6c0:	1b64      	subs	r4, r4, r5
 800c6c2:	10a4      	asrs	r4, r4, #2
 800c6c4:	2600      	movs	r6, #0
 800c6c6:	42a6      	cmp	r6, r4
 800c6c8:	d105      	bne.n	800c6d6 <__libc_init_array+0x2e>
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d0:	4798      	blx	r3
 800c6d2:	3601      	adds	r6, #1
 800c6d4:	e7ee      	b.n	800c6b4 <__libc_init_array+0xc>
 800c6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6da:	4798      	blx	r3
 800c6dc:	3601      	adds	r6, #1
 800c6de:	e7f2      	b.n	800c6c6 <__libc_init_array+0x1e>
 800c6e0:	0800f384 	.word	0x0800f384
 800c6e4:	0800f384 	.word	0x0800f384
 800c6e8:	0800f384 	.word	0x0800f384
 800c6ec:	0800f390 	.word	0x0800f390

0800c6f0 <__retarget_lock_acquire_recursive>:
 800c6f0:	4770      	bx	lr

0800c6f2 <__retarget_lock_release_recursive>:
 800c6f2:	4770      	bx	lr

0800c6f4 <_free_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2900      	cmp	r1, #0
 800c6fa:	d041      	beq.n	800c780 <_free_r+0x8c>
 800c6fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c700:	1f0c      	subs	r4, r1, #4
 800c702:	2b00      	cmp	r3, #0
 800c704:	bfb8      	it	lt
 800c706:	18e4      	addlt	r4, r4, r3
 800c708:	f7ff ff50 	bl	800c5ac <__malloc_lock>
 800c70c:	4a1d      	ldr	r2, [pc, #116]	@ (800c784 <_free_r+0x90>)
 800c70e:	6813      	ldr	r3, [r2, #0]
 800c710:	b933      	cbnz	r3, 800c720 <_free_r+0x2c>
 800c712:	6063      	str	r3, [r4, #4]
 800c714:	6014      	str	r4, [r2, #0]
 800c716:	4628      	mov	r0, r5
 800c718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c71c:	f7ff bf4c 	b.w	800c5b8 <__malloc_unlock>
 800c720:	42a3      	cmp	r3, r4
 800c722:	d908      	bls.n	800c736 <_free_r+0x42>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	1821      	adds	r1, r4, r0
 800c728:	428b      	cmp	r3, r1
 800c72a:	bf01      	itttt	eq
 800c72c:	6819      	ldreq	r1, [r3, #0]
 800c72e:	685b      	ldreq	r3, [r3, #4]
 800c730:	1809      	addeq	r1, r1, r0
 800c732:	6021      	streq	r1, [r4, #0]
 800c734:	e7ed      	b.n	800c712 <_free_r+0x1e>
 800c736:	461a      	mov	r2, r3
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b10b      	cbz	r3, 800c740 <_free_r+0x4c>
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	d9fa      	bls.n	800c736 <_free_r+0x42>
 800c740:	6811      	ldr	r1, [r2, #0]
 800c742:	1850      	adds	r0, r2, r1
 800c744:	42a0      	cmp	r0, r4
 800c746:	d10b      	bne.n	800c760 <_free_r+0x6c>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	4401      	add	r1, r0
 800c74c:	1850      	adds	r0, r2, r1
 800c74e:	4283      	cmp	r3, r0
 800c750:	6011      	str	r1, [r2, #0]
 800c752:	d1e0      	bne.n	800c716 <_free_r+0x22>
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	6053      	str	r3, [r2, #4]
 800c75a:	4408      	add	r0, r1
 800c75c:	6010      	str	r0, [r2, #0]
 800c75e:	e7da      	b.n	800c716 <_free_r+0x22>
 800c760:	d902      	bls.n	800c768 <_free_r+0x74>
 800c762:	230c      	movs	r3, #12
 800c764:	602b      	str	r3, [r5, #0]
 800c766:	e7d6      	b.n	800c716 <_free_r+0x22>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	1821      	adds	r1, r4, r0
 800c76c:	428b      	cmp	r3, r1
 800c76e:	bf04      	itt	eq
 800c770:	6819      	ldreq	r1, [r3, #0]
 800c772:	685b      	ldreq	r3, [r3, #4]
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	bf04      	itt	eq
 800c778:	1809      	addeq	r1, r1, r0
 800c77a:	6021      	streq	r1, [r4, #0]
 800c77c:	6054      	str	r4, [r2, #4]
 800c77e:	e7ca      	b.n	800c716 <_free_r+0x22>
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
 800c784:	20001f84 	.word	0x20001f84

0800c788 <_init>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	bf00      	nop
 800c78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78e:	bc08      	pop	{r3}
 800c790:	469e      	mov	lr, r3
 800c792:	4770      	bx	lr

0800c794 <_fini>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	bf00      	nop
 800c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79a:	bc08      	pop	{r3}
 800c79c:	469e      	mov	lr, r3
 800c79e:	4770      	bx	lr
