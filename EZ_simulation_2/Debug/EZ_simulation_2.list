
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c140  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bdc  0800c318  0800c318  0000d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eef4  0800eef4  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800eef4  0800eef4  0000fef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eefc  0800eefc  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eefc  0800eefc  0000fefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ef04  0800ef04  0000ff04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ef0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  20000068  0800ef74  00010068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002064  0800ef74  00011064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039916  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eae  00000000  00000000  000499ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  0004f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a48  00000000  00000000  00051b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5aa  00000000  00000000  000535b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa6e  00000000  00000000  00082b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147c91  00000000  00000000  000ad5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001f5259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b208  00000000  00000000  001f5314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0020051c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  00200584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00203f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c300 	.word	0x0800c300

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800c300 	.word	0x0800c300

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_ldivmod>:
 8000aa4:	b97b      	cbnz	r3, 8000ac6 <__aeabi_ldivmod+0x22>
 8000aa6:	b972      	cbnz	r2, 8000ac6 <__aeabi_ldivmod+0x22>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bfbe      	ittt	lt
 8000aac:	2000      	movlt	r0, #0
 8000aae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ab2:	e006      	blt.n	8000ac2 <__aeabi_ldivmod+0x1e>
 8000ab4:	bf08      	it	eq
 8000ab6:	2800      	cmpeq	r0, #0
 8000ab8:	bf1c      	itt	ne
 8000aba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000abe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac2:	f000 b9b5 	b.w	8000e30 <__aeabi_idiv0>
 8000ac6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	db09      	blt.n	8000ae6 <__aeabi_ldivmod+0x42>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db1a      	blt.n	8000b0c <__aeabi_ldivmod+0x68>
 8000ad6:	f000 f84d 	bl	8000b74 <__udivmoddi4>
 8000ada:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4770      	bx	lr
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db1b      	blt.n	8000b28 <__aeabi_ldivmod+0x84>
 8000af0:	f000 f840 	bl	8000b74 <__udivmoddi4>
 8000af4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000afc:	b004      	add	sp, #16
 8000afe:	4240      	negs	r0, r0
 8000b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b04:	4252      	negs	r2, r2
 8000b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b0a:	4770      	bx	lr
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	f000 f82f 	bl	8000b74 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4240      	negs	r0, r0
 8000b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b26:	4770      	bx	lr
 8000b28:	4252      	negs	r2, r2
 8000b2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2e:	f000 f821 	bl	8000b74 <__udivmoddi4>
 8000b32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3a:	b004      	add	sp, #16
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96a 	b.w	8000e30 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14e      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b80:	4694      	mov	ip, r2
 8000b82:	458c      	cmp	ip, r1
 8000b84:	4686      	mov	lr, r0
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	d962      	bls.n	8000c52 <__udivmoddi4+0xde>
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	4091      	lsls	r1, r2
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fa1f f68c 	uxth.w	r6, ip
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb04 f106 	mul.w	r1, r4, r6
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bca:	f080 8112 	bcs.w	8000df2 <__udivmoddi4+0x27e>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 810f 	bls.w	8000df2 <__udivmoddi4+0x27e>
 8000bd4:	3c02      	subs	r4, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be2:	fb07 1110 	mls	r1, r7, r0, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb00 f606 	mul.w	r6, r0, r6
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x94>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bfa:	f080 80fc 	bcs.w	8000df6 <__udivmoddi4+0x282>
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f240 80f9 	bls.w	8000df6 <__udivmoddi4+0x282>
 8000c04:	4463      	add	r3, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	1b9b      	subs	r3, r3, r6
 8000c0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11d      	cbz	r5, 8000c1a <__udivmoddi4+0xa6>
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d905      	bls.n	8000c2e <__udivmoddi4+0xba>
 8000c22:	b10d      	cbz	r5, 8000c28 <__udivmoddi4+0xb4>
 8000c24:	e9c5 0100 	strd	r0, r1, [r5]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e7f5      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c2e:	fab3 f183 	clz	r1, r3
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d146      	bne.n	8000cc4 <__udivmoddi4+0x150>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xcc>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f0c0 80f0 	bcc.w	8000e20 <__udivmoddi4+0x2ac>
 8000c40:	1a86      	subs	r6, r0, r2
 8000c42:	eb64 0303 	sbc.w	r3, r4, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d0e6      	beq.n	8000c1a <__udivmoddi4+0xa6>
 8000c4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c50:	e7e3      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	f040 8090 	bne.w	8000d78 <__udivmoddi4+0x204>
 8000c58:	eba1 040c 	sub.w	r4, r1, ip
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb07 f006 	mul.w	r0, r7, r6
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x11c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x11a>
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c8e:	4626      	mov	r6, r4
 8000c90:	1a1c      	subs	r4, r3, r0
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb00 f707 	mul.w	r7, r0, r7
 8000ca6:	429f      	cmp	r7, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x148>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x146>
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	f200 80b0 	bhi.w	8000e1a <__udivmoddi4+0x2a6>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	1bdb      	subs	r3, r3, r7
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0x9c>
 8000cc4:	f1c1 0620 	rsb	r6, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd8:	ea43 030c 	orr.w	r3, r3, ip
 8000cdc:	40f4      	lsrs	r4, r6
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	0c38      	lsrs	r0, r7, #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x1a6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d0a:	f080 8084 	bcs.w	8000e16 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8081 	bls.w	8000e16 <__udivmoddi4+0x2a2>
 8000d14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	eba4 0409 	sub.w	r4, r4, r9
 8000d1e:	fa1f f983 	uxth.w	r9, r3
 8000d22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d26:	fb00 4413 	mls	r4, r0, r3, r4
 8000d2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1d2>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d3c:	d267      	bcs.n	8000e0e <__udivmoddi4+0x29a>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d965      	bls.n	8000e0e <__udivmoddi4+0x29a>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	429c      	cmp	r4, r3
 8000d54:	46ce      	mov	lr, r9
 8000d56:	469c      	mov	ip, r3
 8000d58:	d351      	bcc.n	8000dfe <__udivmoddi4+0x28a>
 8000d5a:	d04e      	beq.n	8000dfa <__udivmoddi4+0x286>
 8000d5c:	b155      	cbz	r5, 8000d74 <__udivmoddi4+0x200>
 8000d5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d62:	eb64 040c 	sbc.w	r4, r4, ip
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	e9c5 6400 	strd	r6, r4, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e750      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000d78:	f1c2 0320 	rsb	r3, r2, #32
 8000d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa24 f303 	lsr.w	r3, r4, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f107 	mul.w	r1, r0, r7
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x24c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db6:	d22c      	bcs.n	8000e12 <__udivmoddi4+0x29e>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d92a      	bls.n	8000e12 <__udivmoddi4+0x29e>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd0:	fb01 f307 	mul.w	r3, r1, r7
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x276>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de0:	d213      	bcs.n	8000e0a <__udivmoddi4+0x296>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d911      	bls.n	8000e0a <__udivmoddi4+0x296>
 8000de6:	3902      	subs	r1, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1ae4      	subs	r4, r4, r3
 8000dec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df0:	e739      	b.n	8000c66 <__udivmoddi4+0xf2>
 8000df2:	4604      	mov	r4, r0
 8000df4:	e6f0      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000df6:	4608      	mov	r0, r1
 8000df8:	e706      	b.n	8000c08 <__udivmoddi4+0x94>
 8000dfa:	45c8      	cmp	r8, r9
 8000dfc:	d2ae      	bcs.n	8000d5c <__udivmoddi4+0x1e8>
 8000dfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7a8      	b.n	8000d5c <__udivmoddi4+0x1e8>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	e7ed      	b.n	8000dea <__udivmoddi4+0x276>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e799      	b.n	8000d46 <__udivmoddi4+0x1d2>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e7d4      	b.n	8000dc0 <__udivmoddi4+0x24c>
 8000e16:	46d6      	mov	lr, sl
 8000e18:	e77f      	b.n	8000d1a <__udivmoddi4+0x1a6>
 8000e1a:	4463      	add	r3, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e74d      	b.n	8000cbc <__udivmoddi4+0x148>
 8000e20:	4606      	mov	r6, r0
 8000e22:	4623      	mov	r3, r4
 8000e24:	4608      	mov	r0, r1
 8000e26:	e70f      	b.n	8000c48 <__udivmoddi4+0xd4>
 8000e28:	3e02      	subs	r6, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	e730      	b.n	8000c90 <__udivmoddi4+0x11c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <set_freq>:
//#include <stm32g4xx_hal_cordic.h>
#include <main.h>
#include "dds.h"
//0: sine    1:triangle    2:square    out:sqr
void set_freq(void (*send_data)(uint16_t), long long int freq, int waveform)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	e9c7 2300 	strd	r2, r3, [r7]

	long long int temp = (freq * 268435456 / 25000);
 8000e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	f04f 0100 	mov.w	r1, #0
 8000e4c:	0719      	lsls	r1, r3, #28
 8000e4e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8000e52:	0710      	lsls	r0, r2, #28
 8000e54:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	f7ff fe22 	bl	8000aa4 <__aeabi_ldivmod>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t fr = temp;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 8000e6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e70:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 8000e72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e76:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	e029      	b.n	8000ed2 <set_freq+0x9e>
	    if (fr & (1 << i)) {
 8000e7e:	2201      	movs	r2, #1
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d009      	beq.n	8000ea4 <set_freq+0x70>
	        lsb |= (1 << i);
 8000e90:	2201      	movs	r2, #1
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	330e      	adds	r3, #14
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d009      	beq.n	8000ecc <set_freq+0x98>
	        msb |= (1 << i);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b0d      	cmp	r3, #13
 8000ed6:	ddd2      	ble.n	8000e7e <set_freq+0x4a>
	    }
	}

	send_data(0x2100);//send_data(0x2300);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8000ede:	4798      	blx	r3
	send_data(lsb);//freq0
 8000ee0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4798      	blx	r3
	send_data(msb);
 8000ee8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4610      	mov	r0, r2
 8000eee:	4798      	blx	r3
	send_data(0xC000);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000ef6:	4798      	blx	r3
//	send_data(0x2100);
//	send_data(0x8000);
//	send_data(0x8432);
	switch(waveform)
 8000ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d011      	beq.n	8000f22 <set_freq+0xee>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	dc12      	bgt.n	8000f2a <set_freq+0xf6>
 8000f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <set_freq+0xde>
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d004      	beq.n	8000f1a <set_freq+0xe6>
		case 0: send_data(0x0000); break;//send_data(0x0200);
		case 1: send_data(0x0002); break;
		case 2: send_data(0x0028); break;
	}
	//send_data(0x2200);
}
 8000f10:	e00b      	b.n	8000f2a <set_freq+0xf6>
		case 0: send_data(0x0000); break;//send_data(0x0200);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2000      	movs	r0, #0
 8000f16:	4798      	blx	r3
 8000f18:	e007      	b.n	8000f2a <set_freq+0xf6>
		case 1: send_data(0x0002); break;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	4798      	blx	r3
 8000f20:	e003      	b.n	8000f2a <set_freq+0xf6>
		case 2: send_data(0x0028); break;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2028      	movs	r0, #40	@ 0x28
 8000f26:	4798      	blx	r3
 8000f28:	bf00      	nop
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	@ 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d109      	bne.n	8000f58 <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x30>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f003 f998 	bl	8004280 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x34>)
 8000f52:	f007 fc71 	bl	8008838 <HAL_TIM_Base_Stop>
 8000f56:	e000      	b.n	8000f5a <HAL_ADC_ConvCpltCallback+0x26>
		return;
 8000f58:	bf00      	nop
}
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000084 	.word	0x20000084
 8000f64:	20001cec 	.word	0x20001cec
 8000f68:	200002fc 	.word	0x200002fc

08000f6c <send_ad9834>:

void send_ad9834(uint16_t cmd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f005 fe4e 	bl	8006c20 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8000f84:	1db9      	adds	r1, r7, #6
 8000f86:	230a      	movs	r3, #10
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <send_ad9834+0x3c>)
 8000f8c:	f007 f8b3 	bl	80080f6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9a:	f005 fe41 	bl	8006c20 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000200 	.word	0x20000200

08000fac <send_ad9833>:
void send_ad9833(uint16_t cmd)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f005 fe2e 	bl	8006c20 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8000fc4:	1db9      	adds	r1, r7, #6
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <send_ad9833+0x3c>)
 8000fcc:	f007 f893 	bl	80080f6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f005 fe21 	bl	8006c20 <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000200 	.word	0x20000200

08000fec <roundToNearest5>:
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
  }
}

int roundToNearest5(int num)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <roundToNearest5+0x44>)
 8000ff8:	fb83 1302 	smull	r1, r3, r3, r2
 8000ffc:	1059      	asrs	r1, r3, #1
 8000ffe:	17d3      	asrs	r3, r2, #31
 8001000:	1ac9      	subs	r1, r1, r3
 8001002:	460b      	mov	r3, r1
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b02      	cmp	r3, #2
 8001010:	dd05      	ble.n	800101e <roundToNearest5+0x32>
        return num + (5 - remainder);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1c3 0205 	rsb	r2, r3, #5
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	e002      	b.n	8001024 <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
    }
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	66666667 	.word	0x66666667
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	f5ad 5d62 	sub.w	sp, sp, #14464	@ 0x3880
 8001040:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f002 fbb0 	bl	80037a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 fd89 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f001 f921 	bl	8002290 <MX_GPIO_Init>
  MX_DMA_Init();
 800104e:	f001 f8d9 	bl	8002204 <MX_DMA_Init>
  MX_CRC_Init();
 8001052:	f000 fe73 	bl	8001d3c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001056:	f001 f889 	bl	800216c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800105a:	f000 fdd1 	bl	8001c00 <MX_ADC1_Init>
  MX_SPI3_Init();
 800105e:	f000 ff13 	bl	8001e88 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001062:	f001 f817 	bl	8002094 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001066:	f000 fecf 	bl	8001e08 <MX_I2C1_Init>
  MX_DAC1_Init();
 800106a:	f000 fe93 	bl	8001d94 <MX_DAC1_Init>
  MX_COMP3_Init();
 800106e:	f000 fe3f 	bl	8001cf0 <MX_COMP3_Init>
  MX_TIM3_Init();
 8001072:	f000 ffc1 	bl	8001ff8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001076:	f000 ff45 	bl	8001f04 <MX_TIM2_Init>
  MX_TIM7_Init();
 800107a:	f001 f841 	bl	8002100 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 800107e:	2300      	movs	r3, #0
 8001080:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001084:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e03c      	b.n	8001106 <main+0xce>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 800108c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001090:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80012f4 <main+0x2bc>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f00a fbd5 	bl	800b858 <arm_cos_f32>
 80010ae:	ee10 3a10 	vmov	r3, s0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa14 	bl	80004e0 <__aeabi_f2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b8e      	ldr	r3, [pc, #568]	@ (80012f8 <main+0x2c0>)
 80010be:	f7ff fa67 	bl	8000590 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	498b      	ldr	r1, [pc, #556]	@ (80012f8 <main+0x2c0>)
 80010cc:	f7ff f8a8 	bl	8000220 <__aeabi_dsub>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fc94 	bl	8000a04 <__aeabi_d2f>
 80010dc:	4602      	mov	r2, r0
 80010de:	4987      	ldr	r1, [pc, #540]	@ (80012fc <main+0x2c4>)
 80010e0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80010e4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; ++i)
 80010f0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80010f4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001100:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800110a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001114:	dbba      	blt.n	800108c <main+0x54>
  }
//AFE_Offset_LDAC_Init();
//AFE_Gain(3);
//AFE_Offset(256);

  float fft_in[N] = {0};
 8001116:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 800111a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800111e:	3b40      	subs	r3, #64	@ 0x40
 8001120:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00b f818 	bl	800c15c <memset>
  float fft_out[N] = {0};
 800112c:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001130:	f103 0318 	add.w	r3, r3, #24
 8001134:	3b40      	subs	r3, #64	@ 0x40
 8001136:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f00b f80d 	bl	800c15c <memset>
  float deal_mag[N] = {0};
 8001142:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001146:	3b40      	subs	r3, #64	@ 0x40
 8001148:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f00b f804 	bl	800c15c <memset>

  GPIO_PinState prev = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800115a:	f102 023b 	add.w	r2, r2, #59	@ 0x3b
 800115e:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPIO_PinState curr = HAL_GPIO_ReadPin(UI_SW3_GPIO_Port, UI_SW3_Pin);
 8001160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001164:	4866      	ldr	r0, [pc, #408]	@ (8001300 <main+0x2c8>)
 8001166:	f005 fd43 	bl	8006bf0 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001170:	f102 023a 	add.w	r2, r2, #58	@ 0x3a
 8001174:	7013      	strb	r3, [r2, #0]
      if(1/*curr && !prev*/)
      {
		  set_sm_freq(1e6 , &htim6);
 8001176:	4963      	ldr	r1, [pc, #396]	@ (8001304 <main+0x2cc>)
 8001178:	4863      	ldr	r0, [pc, #396]	@ (8001308 <main+0x2d0>)
 800117a:	f001 f987 	bl	800248c <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <main+0x2d4>)
 8001180:	4a60      	ldr	r2, [pc, #384]	@ (8001304 <main+0x2cc>)
 8001182:	f240 4101 	movw	r1, #1025	@ 0x401
 8001186:	4862      	ldr	r0, [pc, #392]	@ (8001310 <main+0x2d8>)
 8001188:	f001 f962 	bl	8002450 <samp>
		  uint16_t temp_buffer[1025];
		  make_8to16(adc_buffer, 2050, temp_buffer);
 800118c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001190:	3b34      	subs	r3, #52	@ 0x34
 8001192:	461a      	mov	r2, r3
 8001194:	f640 0102 	movw	r1, #2050	@ 0x802
 8001198:	485d      	ldr	r0, [pc, #372]	@ (8001310 <main+0x2d8>)
 800119a:	f001 f923 	bl	80023e4 <make_8to16>
		  int_to_float(temp_buffer + 1, fft_in);
 800119e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a2:	3b34      	subs	r3, #52	@ 0x34
 80011a4:	3302      	adds	r3, #2
 80011a6:	f507 5220 	add.w	r2, r7, #10240	@ 0x2800
 80011aa:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 f989 	bl	80024c8 <int_to_float>
		  for (int i = 0; i < N; ++i)
 80011b6:	2300      	movs	r3, #0
 80011b8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011bc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e034      	b.n	800122e <main+0x1f6>
		  {
			  fft_in[i] *= window[i];
 80011c4:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 80011c8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80011cc:	461a      	mov	r2, r3
 80011ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80011d2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b40      	subs	r3, #64	@ 0x40
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <main+0x2c4>)
 80011e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80011e8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 80011fe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001202:	461a      	mov	r2, r3
 8001204:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001208:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3b40      	subs	r3, #64	@ 0x40
 8001214:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8001218:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800121c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001228:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001232:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123c:	dbc2      	blt.n	80011c4 <main+0x18c>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 800123e:	f607 0238 	addw	r2, r7, #2104	@ 0x838
 8001242:	f507 51c1 	add.w	r1, r7, #6176	@ 0x1820
 8001246:	f101 0118 	add.w	r1, r1, #24
 800124a:	f507 5320 	add.w	r3, r7, #10240	@ 0x2800
 800124e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f95d 	bl	8002512 <fft_transfer>

		  int freq_1 = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800125e:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001262:	6013      	str	r3, [r2, #0]
		  int freq_2 = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800126a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800126e:	6013      	str	r3, [r2, #0]
		  int waveform_1 = 0;//waveform = 0: sine, waveform = 1: triangle
 8001270:	2300      	movs	r3, #0
 8001272:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001276:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800127a:	6013      	str	r3, [r2, #0]
		  int waveform_2 = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001282:	f102 0220 	add.w	r2, r2, #32
 8001286:	6013      	str	r3, [r2, #0]

		  float max = 0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001290:	f102 021c 	add.w	r2, r2, #28
 8001294:	6013      	str	r3, [r2, #0]
		  float sec = 0;
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800129e:	f102 0218 	add.w	r2, r2, #24
 80012a2:	6013      	str	r3, [r2, #0]
		  /*set_freq_wave(deal_mag);*/
		  uint32_t big_mag[6] = {0};
 80012a4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80012a8:	3b58      	subs	r3, #88	@ 0x58
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
		  int index[6] = {0};
 80012b8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80012bc:	3b70      	subs	r3, #112	@ 0x70
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
		  int freq_counter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012d2:	f102 0214 	add.w	r2, r2, #20
 80012d6:	6013      	str	r3, [r2, #0]
		  uint8_t k = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012de:	f102 0213 	add.w	r2, r2, #19
 80012e2:	7013      	strb	r3, [r2, #0]
		  for(int i = 2; i < 512; ++i)
 80012e4:	2302      	movs	r3, #2
 80012e6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012ea:	f102 020c 	add.w	r2, r2, #12
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e0ad      	b.n	800144e <main+0x416>
 80012f2:	bf00      	nop
 80012f4:	3bc9422c 	.word	0x3bc9422c
 80012f8:	3fe00000 	.word	0x3fe00000
 80012fc:	20000cec 	.word	0x20000cec
 8001300:	48000800 	.word	0x48000800
 8001304:	200002fc 	.word	0x200002fc
 8001308:	000f4240 	.word	0x000f4240
 800130c:	20000084 	.word	0x20000084
 8001310:	200004e8 	.word	0x200004e8
 8001314:	45160000 	.word	0x45160000
		  {
			  if((deal_mag[i]) > 2400)
 8001318:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800131c:	461a      	mov	r2, r3
 800131e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001322:	f103 030c 	add.w	r3, r3, #12
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b40      	subs	r3, #64	@ 0x40
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001314 <main+0x2dc>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	dd74      	ble.n	800142a <main+0x3f2>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 8001340:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001344:	461a      	mov	r2, r3
 8001346:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800134a:	f103 030c 	add.w	r3, r3, #12
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b40      	subs	r3, #64	@ 0x40
 8001356:	ed93 7a00 	vldr	s14, [r3]
 800135a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800135e:	f103 030c 	add.w	r3, r3, #12
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b40      	subs	r3, #64	@ 0x40
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	dd55      	ble.n	800142a <main+0x3f2>
 800137e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001382:	461a      	mov	r2, r3
 8001384:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001388:	f103 030c 	add.w	r3, r3, #12
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3b40      	subs	r3, #64	@ 0x40
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800139c:	f103 030c 	add.w	r3, r3, #12
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b40      	subs	r3, #64	@ 0x40
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	dd36      	ble.n	800142a <main+0x3f2>
				  {
					  big_mag[k] = deal_mag[i];
 80013bc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80013c0:	461a      	mov	r2, r3
 80013c2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013c6:	f103 030c 	add.w	r3, r3, #12
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	3b40      	subs	r3, #64	@ 0x40
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013da:	f103 0313 	add.w	r3, r3, #19
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 1a90 	vmov	r1, s15
 80013e8:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	f843 1c58 	str.w	r1, [r3, #-88]
					  index[k] = i;
 80013f4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013f8:	f103 0313 	add.w	r3, r3, #19
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800140a:	f102 020c 	add.w	r2, r2, #12
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	f843 2c70 	str.w	r2, [r3, #-112]
					  k++;
 8001414:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001418:	f103 0313 	add.w	r3, r3, #19
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001424:	f102 0213 	add.w	r2, r2, #19
 8001428:	7013      	strb	r3, [r2, #0]
				  }
			  }
			  if(k == 6) break;
 800142a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800142e:	f103 0313 	add.w	r3, r3, #19
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d014      	beq.n	8001462 <main+0x42a>
		  for(int i = 2; i < 512; ++i)
 8001438:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800143c:	f103 030c 	add.w	r3, r3, #12
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001448:	f102 020c 	add.w	r2, r2, #12
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001452:	f103 030c 	add.w	r3, r3, #12
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800145c:	f6ff af5c 	blt.w	8001318 <main+0x2e0>
 8001460:	e000      	b.n	8001464 <main+0x42c>
			  if(k == 6) break;
 8001462:	bf00      	nop
		  }
		  for(int i = 0;i < 6; ++i)
 8001464:	2300      	movs	r3, #0
 8001466:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800146a:	f102 0208 	add.w	r2, r2, #8
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e078      	b.n	8001564 <main+0x52c>
		  {
			  index[i] = ((index[i] * 0.97656) / 5) * 5;
 8001472:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001476:	461a      	mov	r2, r3
 8001478:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800147c:	f103 0308 	add.w	r3, r3, #8
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f816 	bl	80004bc <__aeabi_i2d>
 8001490:	a3c6      	add	r3, pc, #792	@ (adr r3, 80017ac <main+0x774>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f87b 	bl	8000590 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4bc0      	ldr	r3, [pc, #768]	@ (80017a8 <main+0x770>)
 80014a8:	f7ff f99c 	bl	80007e4 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4bbb      	ldr	r3, [pc, #748]	@ (80017a8 <main+0x770>)
 80014ba:	f7ff f869 	bl	8000590 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fa75 	bl	80009b4 <__aeabi_d2iz>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014d0:	4619      	mov	r1, r3
 80014d2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014d6:	f103 0308 	add.w	r3, r3, #8
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	f843 2c70 	str.w	r2, [r3, #-112]
			  index[i] = roundToNearest5(index[i]);
 80014e4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014e8:	461a      	mov	r2, r3
 80014ea:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014ee:	f103 0308 	add.w	r3, r3, #8
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd75 	bl	8000fec <roundToNearest5>
 8001502:	4602      	mov	r2, r0
 8001504:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001508:	4619      	mov	r1, r3
 800150a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800150e:	f103 0308 	add.w	r3, r3, #8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f843 2c70 	str.w	r2, [r3, #-112]
			  if(index[i] > 0) freq_counter ++;
 800151c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001520:	461a      	mov	r2, r3
 8001522:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001526:	f103 0308 	add.w	r3, r3, #8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dd0a      	ble.n	800154e <main+0x516>
 8001538:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800153c:	f103 0314 	add.w	r3, r3, #20
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001548:	f102 0214 	add.w	r2, r2, #20
 800154c:	6013      	str	r3, [r2, #0]
		  for(int i = 0;i < 6; ++i)
 800154e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001552:	f103 0308 	add.w	r3, r3, #8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800155e:	f102 0208 	add.w	r2, r2, #8
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001568:	f103 0308 	add.w	r3, r3, #8
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b05      	cmp	r3, #5
 8001570:	f77f af7f 	ble.w	8001472 <main+0x43a>
		  }

		  switch(freq_counter)
 8001574:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001578:	f103 0314 	add.w	r3, r3, #20
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	2b05      	cmp	r3, #5
 8001582:	f200 82b1 	bhi.w	8001ae8 <main+0xab0>
 8001586:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <main+0x554>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080015a5 	.word	0x080015a5
 8001590:	080015e3 	.word	0x080015e3
 8001594:	08001645 	.word	0x08001645
 8001598:	08001787 	.word	0x08001787
 800159c:	080018eb 	.word	0x080018eb
 80015a0:	080018eb 	.word	0x080018eb
		  {
			  case 1:
			  {
				  waveform_1 = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015aa:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80015ae:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015b6:	f102 0220 	add.w	r2, r2, #32
 80015ba:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 80015bc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80015c0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80015c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015c8:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80015cc:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 80015ce:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80015d2:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80015d6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015da:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80015de:	6013      	str	r3, [r2, #0]
				  break;
 80015e0:	e282      	b.n	8001ae8 <main+0xab0>
			  }
			  case 2 :
			  {
				  waveform_1 = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015e8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80015ec:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015f4:	f102 0220 	add.w	r2, r2, #32
 80015f8:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 80015fa:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80015fe:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001602:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001606:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800160a:	6013      	str	r3, [r2, #0]
				  if(big_mag[1] < 10000)
 800160c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001610:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001614:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001618:	4293      	cmp	r3, r2
 800161a:	d809      	bhi.n	8001630 <main+0x5f8>
				  {
					  freq_2 = index[0];
 800161c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001620:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001624:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001628:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800162c:	6013      	str	r3, [r2, #0]
				  }
				  else
				  {
					  freq_2 = index[1];
				  }
				  break;
 800162e:	e25b      	b.n	8001ae8 <main+0xab0>
					  freq_2 = index[1];
 8001630:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001634:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001638:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800163c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001640:	6013      	str	r3, [r2, #0]
				  break;
 8001642:	e251      	b.n	8001ae8 <main+0xab0>
			  }
			  case 3:
			  {
				  waveform_1 = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800164a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800164e:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001656:	f102 0220 	add.w	r2, r2, #32
 800165a:	6013      	str	r3, [r2, #0]
				  freq_2 = 100;
 800165c:	2364      	movs	r3, #100	@ 0x64
 800165e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001662:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001666:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001668:	2300      	movs	r3, #0
 800166a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800166e:	f102 0204 	add.w	r2, r2, #4
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e07e      	b.n	8001774 <main+0x73c>
				  {
					  if(big_mag[i] > max)
 8001676:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800167a:	461a      	mov	r2, r3
 800167c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001680:	f103 0304 	add.w	r3, r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800169a:	f103 031c 	add.w	r3, r3, #28
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d526      	bpl.n	80016fa <main+0x6c2>
					  {
						  max = big_mag[i];
 80016ac:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016b0:	461a      	mov	r2, r3
 80016b2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016b6:	f103 0304 	add.w	r3, r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016cc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016d0:	f103 031c 	add.w	r3, r3, #28
 80016d4:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 80016d8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016dc:	461a      	mov	r2, r3
 80016de:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016e2:	f103 0304 	add.w	r3, r3, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80016f0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80016f4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80016f8:	6013      	str	r3, [r2, #0]
					  }
					  if(freq_2 > index[i] && index[i] > 0)
 80016fa:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016fe:	461a      	mov	r2, r3
 8001700:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001704:	f103 0304 	add.w	r3, r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001712:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001716:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	dd1e      	ble.n	800175e <main+0x726>
 8001720:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001724:	461a      	mov	r2, r3
 8001726:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800172a:	f103 0304 	add.w	r3, r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd10      	ble.n	800175e <main+0x726>
					  {
						  freq_2 = index[i];
 800173c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001740:	461a      	mov	r2, r3
 8001742:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001746:	f103 0304 	add.w	r3, r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001754:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001758:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800175c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800175e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001762:	f103 0304 	add.w	r3, r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800176e:	f102 0204 	add.w	r2, r2, #4
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001778:	f103 0304 	add.w	r3, r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b05      	cmp	r3, #5
 8001780:	f77f af79 	ble.w	8001676 <main+0x63e>
					  }
				  }
				  break;
 8001784:	e1b0      	b.n	8001ae8 <main+0xab0>
			  }
			  case 4 :
			  {
				  waveform_1 = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800178c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001790:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001798:	f102 0220 	add.w	r2, r2, #32
 800179c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800179e:	2300      	movs	r3, #0
 80017a0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e099      	b.n	80018dc <main+0x8a4>
 80017a8:	40140000 	.word	0x40140000
 80017ac:	c1d29dc7 	.word	0xc1d29dc7
 80017b0:	3fef3ffa 	.word	0x3fef3ffa
				  {
					  if(big_mag[i] > sec)
 80017b4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80017b8:	461a      	mov	r2, r3
 80017ba:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017d4:	f103 0318 	add.w	r3, r3, #24
 80017d8:	ed93 7a00 	vldr	s14, [r3]
 80017dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d573      	bpl.n	80018ce <main+0x896>
					  {
						  if(big_mag[i] > max)
 80017e6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80017ea:	461a      	mov	r2, r3
 80017ec:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001802:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001806:	f103 031c 	add.w	r3, r3, #28
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d537      	bpl.n	8001888 <main+0x850>
						  {
							  sec = max;
 8001818:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800181c:	f103 031c 	add.w	r3, r3, #28
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001826:	f102 0218 	add.w	r2, r2, #24
 800182a:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 800182c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001830:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800183a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800183e:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8001840:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001844:	461a      	mov	r2, r3
 8001846:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001860:	f103 031c 	add.w	r3, r3, #28
 8001864:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8001868:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800186c:	461a      	mov	r2, r3
 800186e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800187c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001880:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e022      	b.n	80018ce <main+0x896>
						  }
						  else
						  {
							  sec = big_mag[i];
 8001888:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800188c:	461a      	mov	r2, r3
 800188e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018a8:	f103 0318 	add.w	r3, r3, #24
 80018ac:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 80018b0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80018b4:	461a      	mov	r2, r3
 80018b6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80018c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018c8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80018cc:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 80018ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	f77f af66 	ble.w	80017b4 <main+0x77c>
						  }
					  }
				  }
				  break;
 80018e8:	e0fe      	b.n	8001ae8 <main+0xab0>
			  }
			  case 5 : case 6:
			  {
				  waveform_1 = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018f0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80018f4:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018fc:	f102 0220 	add.w	r2, r2, #32
 8001900:	6013      	str	r3, [r2, #0]
				  if(index[0] == index[1] / 2 && index[0] == index[2] / 3 &&index[0] == index[3] / 5)
 8001902:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001906:	f853 2c70 	ldr.w	r2, [r3, #-112]
 800190a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800190e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001912:	0fd9      	lsrs	r1, r3, #31
 8001914:	440b      	add	r3, r1
 8001916:	105b      	asrs	r3, r3, #1
 8001918:	429a      	cmp	r2, r3
 800191a:	d131      	bne.n	8001980 <main+0x948>
 800191c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001920:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8001924:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001928:	f853 3c68 	ldr.w	r3, [r3, #-104]
 800192c:	4987      	ldr	r1, [pc, #540]	@ (8001b4c <main+0xb14>)
 800192e:	fb81 0103 	smull	r0, r1, r1, r3
 8001932:	17db      	asrs	r3, r3, #31
 8001934:	1acb      	subs	r3, r1, r3
 8001936:	429a      	cmp	r2, r3
 8001938:	d122      	bne.n	8001980 <main+0x948>
 800193a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800193e:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8001942:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001946:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800194a:	4981      	ldr	r1, [pc, #516]	@ (8001b50 <main+0xb18>)
 800194c:	fb81 0103 	smull	r0, r1, r1, r3
 8001950:	1049      	asrs	r1, r1, #1
 8001952:	17db      	asrs	r3, r3, #31
 8001954:	1acb      	subs	r3, r1, r3
 8001956:	429a      	cmp	r2, r3
 8001958:	d112      	bne.n	8001980 <main+0x948>
				  {
					  freq_1 = index[0];
 800195a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800195e:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001962:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001966:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800196a:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 800196c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001970:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001974:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001978:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800197c:	6013      	str	r3, [r2, #0]
					  break;
 800197e:	e0b3      	b.n	8001ae8 <main+0xab0>
				  }
				  for(int i = 0;i < 6; ++i)
 8001980:	2300      	movs	r3, #0
 8001982:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001986:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e0a3      	b.n	8001ad6 <main+0xa9e>
				  {
					  if(big_mag[i] > sec)
 800198e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001992:	461a      	mov	r2, r3
 8001994:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001998:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ae:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019b2:	f103 0318 	add.w	r3, r3, #24
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d57d      	bpl.n	8001ac0 <main+0xa88>
					  {
						  if(big_mag[i] > max)
 80019c4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019c8:	461a      	mov	r2, r3
 80019ca:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 80019ce:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019e8:	f103 031c 	add.w	r3, r3, #28
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d53b      	bpl.n	8001a72 <main+0xa3a>
						  {
							  sec = max;
 80019fa:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019fe:	f103 031c 	add.w	r3, r3, #28
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a08:	f102 0218 	add.w	r2, r2, #24
 8001a0c:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 8001a0e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a12:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a1c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001a20:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8001a22:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a26:	461a      	mov	r2, r3
 8001a28:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001a2c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a42:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a46:	f103 031c 	add.w	r3, r3, #28
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8001a4e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a52:	461a      	mov	r2, r3
 8001a54:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001a58:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001a66:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a6a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e026      	b.n	8001ac0 <main+0xa88>
						  }
						  else
						  {
							  sec = big_mag[i];
 8001a72:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a76:	461a      	mov	r2, r3
 8001a78:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001a7c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a96:	f103 0318 	add.w	r3, r3, #24
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8001a9e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001aa8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001ab6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001aba:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001abe:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001ac0:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001ac4:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001ad0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001ada:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	f77f af54 	ble.w	800198e <main+0x956>
						  }
					  }
				  }
				  break;
 8001ae6:	bf00      	nop
			  }
		  }
		  set_freq(send_ad9833, freq_1, waveform_1);
 8001ae8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001aec:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	17da      	asrs	r2, r3, #31
 8001af4:	4698      	mov	r8, r3
 8001af6:	4691      	mov	r9, r2
 8001af8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001afc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4642      	mov	r2, r8
 8001b06:	464b      	mov	r3, r9
 8001b08:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <main+0xb1c>)
 8001b0a:	f7ff f993 	bl	8000e34 <set_freq>
		  set_freq(send_ad9834, freq_2, waveform_2);
 8001b0e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b12:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	17da      	asrs	r2, r3, #31
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	4615      	mov	r5, r2
 8001b1e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001b22:	f103 0320 	add.w	r3, r3, #32
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	462b      	mov	r3, r5
 8001b2e:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <main+0xb20>)
 8001b30:	f7ff f980 	bl	8000e34 <set_freq>
	  }
      prev = curr;
 8001b34:	f507 5360 	add.w	r3, r7, #14336	@ 0x3800
 8001b38:	f103 033a 	add.w	r3, r3, #58	@ 0x3a
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001b42:	f102 023b 	add.w	r2, r2, #59	@ 0x3b
 8001b46:	7013      	strb	r3, [r2, #0]
  {
 8001b48:	f7ff bb0a 	b.w	8001160 <main+0x128>
 8001b4c:	55555556 	.word	0x55555556
 8001b50:	66666667 	.word	0x66666667
 8001b54:	08000fad 	.word	0x08000fad
 8001b58:	08000f6d 	.word	0x08000f6d

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	2238      	movs	r2, #56	@ 0x38
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00a faf6 	bl	800c15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b82:	f005 f997 	bl	8006eb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b94:	2303      	movs	r3, #3
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8001b98:	2305      	movs	r3, #5
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b9c:	233c      	movs	r3, #60	@ 0x3c
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f005 fa33 	bl	800701c <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001bbc:	f000 fc0c 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 fd31 	bl	8007640 <HAL_RCC_ClockConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001be4:	f000 fbf8 	bl	80023d8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001bee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001bf2:	f005 fe61 	bl	80078b8 <HAL_RCC_MCOConfig>
}
 8001bf6:	bf00      	nop
 8001bf8:	3750      	adds	r7, #80	@ 0x50
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2220      	movs	r2, #32
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00a fa9f 	bl	800c15c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c26:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c46:	2204      	movs	r2, #4
 8001c48:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c66:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c8a:	4817      	ldr	r0, [pc, #92]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001c8c:	f002 f868 	bl	8003d60 <HAL_ADC_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001c96:	f000 fb9f 	bl	80023d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001ca6:	f003 fa0d 	bl	80050c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001cb0:	f000 fb92 	bl	80023d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <MX_ADC1_Init+0xec>)
 8001cb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cc0:	237f      	movs	r3, #127	@ 0x7f
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_ADC1_Init+0xe8>)
 8001cd2:	f002 fb4b 	bl	800436c <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001cdc:	f000 fb7c 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000084 	.word	0x20000084
 8001cec:	04300002 	.word	0x04300002

08001cf0 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <MX_COMP3_Init+0x48>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d02:	2250      	movs	r2, #80	@ 0x50
 8001d04:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d0e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001d12:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <MX_COMP3_Init+0x44>)
 8001d22:	f003 fc27 	bl	8005574 <HAL_COMP_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8001d2c:	f000 fb54 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000150 	.word	0x20000150
 8001d38:	40010208 	.word	0x40010208

08001d3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <MX_CRC_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d54:	f241 0221 	movw	r2, #4129	@ 0x1021
 8001d58:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_CRC_Init+0x50>)
 8001d7a:	f003 fea5 	bl	8005ac8 <HAL_CRC_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001d84:	f000 fb28 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000174 	.word	0x20000174
 8001d90:	40023000 	.word	0x40023000

08001d94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2230      	movs	r2, #48	@ 0x30
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00a f9db 	bl	800c15c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <MX_DAC1_Init+0x6c>)
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <MX_DAC1_Init+0x70>)
 8001daa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001dac:	4814      	ldr	r0, [pc, #80]	@ (8001e00 <MX_DAC1_Init+0x6c>)
 8001dae:	f004 f891 	bl	8005ed4 <HAL_DAC_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001db8:	f000 fb0e 	bl	80023d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_DAC1_Init+0x6c>)
 8001de8:	f004 f896 	bl	8005f18 <HAL_DAC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001df2:	f000 faf1 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	@ 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000198 	.word	0x20000198
 8001e04:	50000800 	.word	0x50000800

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <MX_I2C1_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <MX_I2C1_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e18:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e42:	480e      	ldr	r0, [pc, #56]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e44:	f004 ff04 	bl	8006c50 <HAL_I2C_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e4e:	f000 fac3 	bl	80023d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e56:	f004 ff96 	bl	8006d86 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 faba 	bl	80023d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_I2C1_Init+0x74>)
 8001e68:	f004 ffd8 	bl	8006e1c <HAL_I2CEx_ConfigDigitalFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fab1 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200001ac 	.word	0x200001ac
 8001e80:	40005400 	.word	0x40005400
 8001e84:	10e32879 	.word	0x10e32879

08001e88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <MX_SPI3_Init+0x78>)
 8001e90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001e94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ea2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001ea6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001eaa:	2202      	movs	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ebe:	2218      	movs	r2, #24
 8001ec0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_SPI3_Init+0x74>)
 8001ee8:	f006 f85a 	bl	8007fa0 <HAL_SPI_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001ef2:	f000 fa71 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000200 	.word	0x20000200
 8001f00:	40003c00 	.word	0x40003c00

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f58:	4826      	ldr	r0, [pc, #152]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f5a:	f006 fba5 	bl	80086a8 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001f64:	f000 fa38 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4619      	mov	r1, r3
 8001f74:	481f      	ldr	r0, [pc, #124]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f76:	f006 fd83 	bl	8008a80 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001f80:	f000 fa2a 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f84:	481b      	ldr	r0, [pc, #108]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001f86:	f006 fc7e 	bl	8008886 <HAL_TIM_IC_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f90:	f000 fa22 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4814      	ldr	r0, [pc, #80]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001fa4:	f007 f8fc 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001fae:	f000 fa13 	bl	80023d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001fca:	f006 fcbd 	bl	8008948 <HAL_TIM_IC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001fd4:	f000 fa00 	bl	80023d8 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_TIM2_Init+0xf0>)
 8001fde:	f007 f975 	bl	80092cc <HAL_TIMEx_TISelection>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001fe8:	f000 f9f6 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	3730      	adds	r7, #48	@ 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000264 	.word	0x20000264

08001ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <MX_TIM3_Init+0x94>)
 8002018:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <MX_TIM3_Init+0x98>)
 800201a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <MX_TIM3_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <MX_TIM3_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <MX_TIM3_Init+0x94>)
 800202a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800202e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <MX_TIM3_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <MX_TIM3_Init+0x94>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800203c:	4813      	ldr	r0, [pc, #76]	@ (800208c <MX_TIM3_Init+0x94>)
 800203e:	f006 fb33 	bl	80086a8 <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002048:	f000 f9c6 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002050:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	@ (800208c <MX_TIM3_Init+0x94>)
 800205a:	f006 fd11 	bl	8008a80 <HAL_TIM_ConfigClockSource>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002064:	f000 f9b8 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <MX_TIM3_Init+0x94>)
 8002076:	f007 f893 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002080:	f000 f9aa 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200002b0 	.word	0x200002b0
 8002090:	40000400 	.word	0x40000400

08002094 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020a4:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020a6:	4a15      	ldr	r2, [pc, #84]	@ (80020fc <MX_TIM6_Init+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020b8:	2295      	movs	r2, #149	@ 0x95
 80020ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020c2:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020c4:	f006 faf0 	bl	80086a8 <HAL_TIM_Base_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80020ce:	f000 f983 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020d2:	2320      	movs	r3, #32
 80020d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <MX_TIM6_Init+0x64>)
 80020e0:	f007 f85e 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020ea:	f000 f975 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200002fc 	.word	0x200002fc
 80020fc:	40001000 	.word	0x40001000

08002100 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_TIM7_Init+0x64>)
 8002112:	4a15      	ldr	r2, [pc, #84]	@ (8002168 <MX_TIM7_Init+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <MX_TIM7_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_TIM7_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_TIM7_Init+0x64>)
 8002124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002128:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_TIM7_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_TIM7_Init+0x64>)
 8002132:	f006 fab9 	bl	80086a8 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800213c:	f000 f94c 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM7_Init+0x64>)
 800214e:	f007 f827 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002158:	f000 f93e 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000348 	.word	0x20000348
 8002168:	40001400 	.word	0x40001400

0800216c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <MX_USART2_UART_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021b6:	f007 f917 	bl	80093e8 <HAL_UART_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021c0:	f000 f90a 	bl	80023d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021c8:	f008 fc58 	bl	800aa7c <HAL_UARTEx_SetTxFifoThreshold>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80021d2:	f000 f901 	bl	80023d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4808      	ldr	r0, [pc, #32]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021da:	f008 fc8d 	bl	800aaf8 <HAL_UARTEx_SetRxFifoThreshold>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80021e4:	f000 f8f8 	bl	80023d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_USART2_UART_Init+0x90>)
 80021ea:	f008 fc0e 	bl	800aa0a <HAL_UARTEx_DisableFifoMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80021f4:	f000 f8f0 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003f4 	.word	0x200003f4
 8002200:	40004400 	.word	0x40004400

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <MX_DMA_Init+0x88>)
 800220c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220e:	4a1f      	ldr	r2, [pc, #124]	@ (800228c <MX_DMA_Init+0x88>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6493      	str	r3, [r2, #72]	@ 0x48
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <MX_DMA_Init+0x88>)
 8002218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <MX_DMA_Init+0x88>)
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	4a19      	ldr	r2, [pc, #100]	@ (800228c <MX_DMA_Init+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6493      	str	r3, [r2, #72]	@ 0x48
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <MX_DMA_Init+0x88>)
 8002230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800223a:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_DMA_Init+0x88>)
 800223c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223e:	4a13      	ldr	r2, [pc, #76]	@ (800228c <MX_DMA_Init+0x88>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6493      	str	r3, [r2, #72]	@ 0x48
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_DMA_Init+0x88>)
 8002248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	200b      	movs	r0, #11
 8002258:	f003 fc01 	bl	8005a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800225c:	200b      	movs	r0, #11
 800225e:	f003 fc18 	bl	8005a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	200c      	movs	r0, #12
 8002268:	f003 fbf9 	bl	8005a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800226c:	200c      	movs	r0, #12
 800226e:	f003 fc10 	bl	8005a92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2063      	movs	r0, #99	@ 0x63
 8002278:	f003 fbf1 	bl	8005a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 800227c:	2063      	movs	r0, #99	@ 0x63
 800227e:	f003 fc08 	bl	8005a92 <HAL_NVIC_EnableIRQ>

}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	4a48      	ldr	r2, [pc, #288]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b2:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022be:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e2:	4b3a      	ldr	r3, [pc, #232]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	4a36      	ldr	r2, [pc, #216]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <MX_GPIO_Init+0x13c>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2101      	movs	r1, #1
 800230a:	4831      	ldr	r0, [pc, #196]	@ (80023d0 <MX_GPIO_Init+0x140>)
 800230c:	f004 fc88 	bl	8006c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_EN_Pin|AD9834_EN_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231a:	f004 fc81 	bl	8006c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIPO_CS_Pin|XDAC_CS_Pin, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002324:	482b      	ldr	r0, [pc, #172]	@ (80023d4 <MX_GPIO_Init+0x144>)
 8002326:	f004 fc7b 	bl	8006c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UI_SW3_Pin */
  GPIO_InitStruct.Pin = UI_SW3_Pin;
 800232a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW3_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4824      	ldr	r0, [pc, #144]	@ (80023d0 <MX_GPIO_Init+0x140>)
 8002340:	f004 fad4 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : con_Pin */
  GPIO_InitStruct.Pin = con_Pin;
 8002344:	2301      	movs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	481d      	ldr	r0, [pc, #116]	@ (80023d0 <MX_GPIO_Init+0x140>)
 800235c:	f004 fac6 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002380:	f004 fab4 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_EN_Pin AD9834_EN_Pin */
  GPIO_InitStruct.Pin = AD9833_EN_Pin|AD9834_EN_Pin;
 8002384:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a0:	f004 faa4 	bl	80068ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 80023a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <MX_GPIO_Init+0x144>)
 80023be:	f004 fa95 	bl	80068ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48000800 	.word	0x48000800
 80023d4:	48000400 	.word	0x48000400

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <Error_Handler+0x8>

080023e4 <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
	int i = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01b      	beq.n	8002436 <make_8to16+0x52>
		return 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	e01f      	b.n	8002442 <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b21a      	sxth	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	3301      	adds	r3, #1
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	440b      	add	r3, r1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21b      	sxth	r3, r3
 8002420:	4313      	orrs	r3, r2
 8002422:	b219      	sxth	r1, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	b28a      	uxth	r2, r1
 800242e:	801a      	strh	r2, [r3, #0]
		++i;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	085a      	lsrs	r2, r3, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8e0      	bhi.n	8002402 <make_8to16+0x1e>
	}
	return new_buffer;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f006 f97a 	bl	8008758 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f001 fe35 	bl	80040d8 <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <samp+0x38>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <samp+0x38>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d000      	beq.n	800247e <samp+0x2e>
 800247c:	e7fa      	b.n	8002474 <samp+0x24>
    		break;
 800247e:	bf00      	nop
    }
    return;
 8002480:	bf00      	nop
}
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20001cec 	.word	0x20001cec

0800248c <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <set_sm_freq+0x38>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
	if (set <38)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b25      	cmp	r3, #37	@ 0x25
 80024a8:	d801      	bhi.n	80024ae <set_sm_freq+0x22>
		set = 38;
 80024aa:	2326      	movs	r3, #38	@ 0x26
 80024ac:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000000 	.word	0x20000000

080024c8 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e011      	b.n	80024fc <int_to_float+0x34>
		fft_in[i] = buffer[i];
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	8819      	ldrh	r1, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	ee07 1a90 	vmov	s15, r1
 80024ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002502:	d1e9      	bne.n	80024d8 <int_to_float+0x10>
	}
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	@ 0x28
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f008 fbc8 	bl	800acb8 <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 8002528:	f107 0010 	add.w	r0, r7, #16
 800252c:	2300      	movs	r3, #0
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	f008 fc8f 	bl	800ae54 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 8002536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f009 f867 	bl	800b610 <arm_cmplx_mag_f32>
}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	@ 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_MspInit+0x44>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_MspInit+0x44>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6613      	str	r3, [r2, #96]	@ 0x60
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_MspInit+0x44>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_MspInit+0x44>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	@ 0x58
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002582:	f004 fd3b 	bl	8006ffc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b09e      	sub	sp, #120	@ 0x78
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	2254      	movs	r2, #84	@ 0x54
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f009 fdd1 	bl	800c15c <memset>
  if(hadc->Instance==ADC1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c2:	d15f      	bne.n	8002684 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80025ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80025ce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 fa95 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80025e0:	f7ff fefa 	bl	80023d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	4a28      	ldr	r2, [pc, #160]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 80025ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b23      	ldr	r3, [pc, #140]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	4a22      	ldr	r2, [pc, #136]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_ADC_MspInit+0xf8>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002614:	2301      	movs	r3, #1
 8002616:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002618:	2303      	movs	r3, #3
 800261a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262a:	f004 f95f 	bl	80068ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_ADC_MspInit+0x100>)
 8002632:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002636:	2205      	movs	r2, #5
 8002638:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800264c:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 800264e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002652:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800265a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002668:	4809      	ldr	r0, [pc, #36]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 800266a:	f003 fe0d 	bl	8006288 <HAL_DMA_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002674:	f7ff feb0 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <HAL_ADC_MspInit+0xfc>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002684:	bf00      	nop
 8002686:	3778      	adds	r7, #120	@ 0x78
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	200000f0 	.word	0x200000f0
 8002694:	40020008 	.word	0x40020008

08002698 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	@ 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_COMP_MspInit+0x94>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d134      	bne.n	8002724 <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <HAL_COMP_MspInit+0x98>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ea:	2304      	movs	r3, #4
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 80026fa:	2303      	movs	r3, #3
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	480b      	ldr	r0, [pc, #44]	@ (8002734 <HAL_COMP_MspInit+0x9c>)
 8002706:	f004 f8f1 	bl	80068ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800270a:	2301      	movs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270e:	2303      	movs	r3, #3
 8002710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002720:	f004 f8e4 	bl	80068ec <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	@ 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40010208 	.word	0x40010208
 8002730:	40021000 	.word	0x40021000
 8002734:	48000800 	.word	0x48000800

08002738 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_CRC_MspInit+0x38>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10b      	bne.n	8002762 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800274a:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <HAL_CRC_MspInit+0x3c>)
 800274c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274e:	4a09      	ldr	r2, [pc, #36]	@ (8002774 <HAL_CRC_MspInit+0x3c>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002754:	6493      	str	r3, [r2, #72]	@ 0x48
 8002756:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <HAL_CRC_MspInit+0x3c>)
 8002758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023000 	.word	0x40023000
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <HAL_DAC_MspInit+0x38>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10b      	bne.n	80027a2 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <HAL_DAC_MspInit+0x3c>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_DAC_MspInit+0x3c>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <HAL_DAC_MspInit+0x3c>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	50000800 	.word	0x50000800
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0a0      	sub	sp, #128	@ 0x80
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027d0:	f107 0318 	add.w	r3, r7, #24
 80027d4:	2254      	movs	r2, #84	@ 0x54
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f009 fcbf 	bl	800c15c <memset>
  if(hi2c->Instance==I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <HAL_I2C_MspInit+0xe0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d153      	bne.n	8002890 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027e8:	2340      	movs	r3, #64	@ 0x40
 80027ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	f107 0318 	add.w	r3, r7, #24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 f985 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002800:	f7ff fdea 	bl	80023d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	4b25      	ldr	r3, [pc, #148]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002808:	4a24      	ldr	r2, [pc, #144]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002810:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281c:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002820:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002828:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283a:	2312      	movs	r3, #18
 800283c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002846:	2304      	movs	r3, #4
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002854:	f004 f84a 	bl	80068ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285c:	2312      	movs	r3, #18
 800285e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002868:	2304      	movs	r3, #4
 800286a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002870:	4619      	mov	r1, r3
 8002872:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <HAL_I2C_MspInit+0xe8>)
 8002874:	f004 f83a 	bl	80068ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 800287e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002882:	6593      	str	r3, [r2, #88]	@ 0x58
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_I2C_MspInit+0xe4>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002890:	bf00      	nop
 8002892:	3780      	adds	r7, #128	@ 0x80
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40005400 	.word	0x40005400
 800289c:	40021000 	.word	0x40021000
 80028a0:	48000400 	.word	0x48000400

080028a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	@ 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_SPI_MspInit+0x7c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d128      	bne.n	8002918 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_SPI_MspInit+0x80>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80028f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002908:	2306      	movs	r3, #6
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	4805      	ldr	r0, [pc, #20]	@ (8002928 <HAL_SPI_MspInit+0x84>)
 8002914:	f003 ffea 	bl	80068ec <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40003c00 	.word	0x40003c00
 8002924:	40021000 	.word	0x40021000
 8002928:	48000800 	.word	0x48000800

0800292c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293c:	d138      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	4a38      	ldr	r2, [pc, #224]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6593      	str	r3, [r2, #88]	@ 0x58
 800294a:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8002956:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002958:	4a34      	ldr	r2, [pc, #208]	@ (8002a2c <HAL_TIM_Base_MspInit+0x100>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 800295c:	4b32      	ldr	r3, [pc, #200]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 800295e:	2238      	movs	r2, #56	@ 0x38
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002970:	2280      	movs	r2, #128	@ 0x80
 8002972:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002974:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 800297e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002982:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002984:	4b28      	ldr	r3, [pc, #160]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800298a:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 800298c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002992:	4825      	ldr	r0, [pc, #148]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 8002994:	f003 fc78 	bl	8006288 <HAL_DMA_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800299e:	f7ff fd1b 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a20      	ldr	r2, [pc, #128]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80029a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a28 <HAL_TIM_Base_MspInit+0xfc>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80029ae:	e034      	b.n	8002a1a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <HAL_TIM_Base_MspInit+0x104>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c6:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
}
 80029d2:	e022      	b.n	8002a1a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a16      	ldr	r2, [pc, #88]	@ (8002a34 <HAL_TIM_Base_MspInit+0x108>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10c      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029e4:	f043 0310 	orr.w	r3, r3, #16
 80029e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
}
 80029f6:	e010      	b.n	8002a1a <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <HAL_TIM_Base_MspInit+0x10c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10b      	bne.n	8002a1a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 8002a08:	f043 0320 	orr.w	r3, r3, #32
 8002a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_TIM_Base_MspInit+0xf8>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	20000394 	.word	0x20000394
 8002a2c:	4002001c 	.word	0x4002001c
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40001000 	.word	0x40001000
 8002a38:	40001400 	.word	0x40001400

08002a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b09e      	sub	sp, #120	@ 0x78
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	2254      	movs	r2, #84	@ 0x54
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f009 fb7d 	bl	800c15c <memset>
  if(huart->Instance==USART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a37      	ldr	r2, [pc, #220]	@ (8002b44 <HAL_UART_MspInit+0x108>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d167      	bne.n	8002b3c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002a70:	2304      	movs	r3, #4
 8002a72:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 f843 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a84:	f7ff fca8 	bl	80023d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a88:	4b2f      	ldr	r3, [pc, #188]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a94:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa4:	4a28      	ldr	r2, [pc, #160]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aac:	4b26      	ldr	r3, [pc, #152]	@ (8002b48 <HAL_UART_MspInit+0x10c>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002ab8:	2318      	movs	r3, #24
 8002aba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	481e      	ldr	r0, [pc, #120]	@ (8002b4c <HAL_UART_MspInit+0x110>)
 8002ad4:	f003 ff0a 	bl	80068ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002ada:	4a1e      	ldr	r2, [pc, #120]	@ (8002b54 <HAL_UART_MspInit+0x118>)
 8002adc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ade:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002ae0:	221a      	movs	r2, #26
 8002ae2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b0e:	4810      	ldr	r0, [pc, #64]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002b10:	f003 fbba 	bl	8006288 <HAL_DMA_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002b1a:	f7ff fc5d 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_UART_MspInit+0x114>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	210e      	movs	r1, #14
 8002b30:	2026      	movs	r0, #38	@ 0x26
 8002b32:	f002 ff94 	bl	8005a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b36:	2026      	movs	r0, #38	@ 0x26
 8002b38:	f002 ffab 	bl	8005a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b3c:	bf00      	nop
 8002b3e:	3778      	adds	r7, #120	@ 0x78
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40004400 	.word	0x40004400
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	48000400 	.word	0x48000400
 8002b50:	20000488 	.word	0x20000488
 8002b54:	40020494 	.word	0x40020494

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <NMI_Handler+0x4>

08002b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <MemManage_Handler+0x4>

08002b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bae:	f000 fe4d 	bl	800384c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8002bbe:	f003 fd46 	bl	800664e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200000f0 	.word	0x200000f0

08002bcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA1_Channel2_IRQHandler+0x10>)
 8002bd2:	f003 fd3c 	bl	800664e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000394 	.word	0x20000394

08002be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <USART2_IRQHandler+0x10>)
 8002be6:	f006 fc4f 	bl	8009488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200003f4 	.word	0x200003f4

08002bf4 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <DMA2_Channel8_IRQHandler+0x10>)
 8002bfa:	f003 fd28 	bl	800664e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000488 	.word	0x20000488

08002c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_kill>:

int _kill(int pid, int sig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c22:	f009 faf7 	bl	800c214 <__errno>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2216      	movs	r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_exit>:

void _exit (int status)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ffe7 	bl	8002c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <_exit+0x12>
	...

08002c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <_sbrk+0x5c>)
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <_sbrk+0x60>)
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <_sbrk+0x64>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <_sbrk+0x68>)
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c80:	f009 fac8 	bl	800c214 <__errno>
 8002c84:	4603      	mov	r3, r0
 8002c86:	220c      	movs	r2, #12
 8002c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e009      	b.n	8002ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_sbrk+0x64>)
 8002ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20020000 	.word	0x20020000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	20001cf0 	.word	0x20001cf0
 8002cb8:	20002068 	.word	0x20002068

08002cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <SystemInit+0x20>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <SystemInit+0x20>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	701a      	strb	r2, [r3, #0]
      }
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f805 	bl	8002d1c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
    }
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f940 	bl	8002fd6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f91e 	bl	8002fac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ffeb 	bl	8002d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b090      	sub	sp, #64	@ 0x40
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b07      	cmp	r3, #7
 8002da6:	dc02      	bgt.n	8002dae <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	e0aa      	b.n	8002f04 <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b55      	cmp	r3, #85	@ 0x55
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <_ZL12uart_managerPhS_+0x36>
    return -1;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e09c      	b.n	8002f04 <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2ba5      	cmp	r3, #165	@ 0xa5
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <_ZL12uart_managerPhS_+0x52>
    return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	e08e      	b.n	8002f04 <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dfc:	4413      	add	r3, r2
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	3302      	adds	r3, #2
 8002e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	dc02      	bgt.n	8002e14 <_ZL12uart_managerPhS_+0x80>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	dc02      	bgt.n	8002e1a <_ZL12uart_managerPhS_+0x86>
    return -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	e074      	b.n	8002f04 <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	440b      	add	r3, r1
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8002e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e36:	461a      	mov	r2, r3
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4834      	ldr	r0, [pc, #208]	@ (8002f0c <_ZL12uart_managerPhS_+0x178>)
 8002e3c:	f002 fea8 	bl	8005b90 <HAL_CRC_Calculate>
 8002e40:	4603      	mov	r3, r0
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 8002e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d002      	beq.n	8002e52 <_ZL12uart_managerPhS_+0xbe>
    return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	e058      	b.n	8002f04 <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	603b      	str	r3, [r7, #0]
  auto p = begin;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 8002e5e:	e006      	b.n	8002e6e <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 8002e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b3a      	cmp	r3, #58	@ 0x3a
 8002e66:	d007      	beq.n	8002e78 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 8002e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d1f4      	bne.n	8002e60 <_ZL12uart_managerPhS_+0xcc>
 8002e76:	e000      	b.n	8002e7a <_ZL12uart_managerPhS_+0xe6>
      break;
 8002e78:	bf00      	nop
  }

  if (p != end)
 8002e7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d03e      	beq.n	8002f00 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 8002e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e86:	4618      	mov	r0, r3
 8002e88:	f009 f803 	bl	800be92 <_ZNSaIcEC1Ev>
 8002e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e90:	f107 0010 	add.w	r0, r7, #16
 8002e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f000 f8be 	bl	8003018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8002e9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f008 fff7 	bl	800be94 <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4818      	ldr	r0, [pc, #96]	@ (8002f10 <_ZL12uart_managerPhS_+0x17c>)
 8002eae:	f000 f8d8 	bl	8003062 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 8002eb6:	4816      	ldr	r0, [pc, #88]	@ (8002f10 <_ZL12uart_managerPhS_+0x17c>)
 8002eb8:	f000 f8e2 	bl	8003080 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f8e5 	bl	800309a <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00f      	beq.n	8002ef6 <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed8:	3301      	adds	r3, #1
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f8ee 	bl	80030c2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eee:	1a8a      	subs	r2, r1, r2
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ef4:	4798      	blx	r3
    }
  }
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4618      	mov	r0, r3
 8002efc:	f009 f817 	bl	800bf2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	3306      	adds	r3, #6
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3740      	adds	r7, #64	@ 0x40
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000174 	.word	0x20000174
 8002f10:	20001efc 	.word	0x20001efc

08002f14 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_UARTEx_RxEventCallback+0x58>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11b      	bne.n	8002f62 <HAL_UARTEx_RxEventCallback+0x4e>
    return;

  auto end = rx_buf + Size;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 8002f32:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e00b      	b.n	8002f50 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f7ff ff2a 	bl	8002d94 <_ZL12uart_managerPhS_>
 8002f40:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db08      	blt.n	8002f5a <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3ef      	bcc.n	8002f38 <HAL_UARTEx_RxEventCallback+0x24>
 8002f58:	e000      	b.n	8002f5c <HAL_UARTEx_RxEventCallback+0x48>
      break;
 8002f5a:	bf00      	nop
  }

  uart_receive_start();
 8002f5c:	f000 f80a 	bl	8002f74 <_ZL18uart_receive_startv>
 8002f60:	e000      	b.n	8002f64 <HAL_UARTEx_RxEventCallback+0x50>
    return;
 8002f62:	bf00      	nop
}
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20001cf4 	.word	0x20001cf4

08002f74 <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <_ZL18uart_receive_startv+0x2c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8002f80:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <_ZL18uart_receive_startv+0x30>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f007 fdf6 	bl	800ab74 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8002f88:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <_ZL18uart_receive_startv+0x34>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <_ZL18uart_receive_startv+0x34>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	601a      	str	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20001cf4 	.word	0x20001cf4
 8002fa8:	2000000c 	.word	0x2000000c

08002fac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f892 	bl	80030de <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f89a 	bl	80030f6 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fe99 	bl	8002cfe <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f894 	bl	800310c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8b3 	bl	8003162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f88e 	bl	8003122 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fe9d 	bl	8002d48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8003026:	68fc      	ldr	r4, [r7, #12]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f008 ff43 	bl	800beb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800302e:	4603      	mov	r3, r0
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4620      	mov	r0, r4
 8003036:	f008 ff8e 	bl	800bf56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 8003040:	68bc      	ldr	r4, [r7, #8]
 8003042:	f107 0308 	add.w	r3, r7, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f8ba 	bl	80031c0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800304c:	462b      	mov	r3, r5
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4621      	mov	r1, r4
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8e0 	bl	8003218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bdb0      	pop	{r4, r5, r7, pc}

08003062 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f917 	bl	80032a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 8003076:	4603      	mov	r3, r0
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f946 	bl	800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8003090:	4603      	mov	r3, r0
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f935 	bl	800333e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f937 	bl	800335a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
      { }
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800312c:	e011      	b.n	8003152 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	f000 f91e 	bl	8003370 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003134:	4603      	mov	r3, r0
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fff2 	bl	8003122 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	f000 f922 	bl	8003388 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003144:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f929 	bl	80033a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ea      	bne.n	800312e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f929 	bl	80033c2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 8003170:	4603      	mov	r3, r0
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68b8      	ldr	r0, [r7, #8]
 80031b2:	f000 f912 	bl	80033da <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80031c8:	bf00      	nop
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f008 fe85 	bl	800bf18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68b8      	ldr	r0, [r7, #8]
 800322a:	f000 f8f5 	bl	8003418 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800322e:	4603      	mov	r3, r0
 8003230:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d911      	bls.n	800325c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8003238:	f107 0318 	add.w	r3, r7, #24
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f008 fe47 	bl	800bed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003246:	4603      	mov	r3, r0
 8003248:	4619      	mov	r1, r3
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f008 fe2e 	bl	800beac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4619      	mov	r1, r3
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f008 fe2f 	bl	800beb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 800325a:	e005      	b.n	8003268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8003260:	69f8      	ldr	r0, [r7, #28]
 8003262:	f008 fe27 	bl	800beb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003266:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ffb1 	bl	80031d6 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f008 fe1b 	bl	800beb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800327a:	4603      	mov	r3, r0
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f8dd 	bl	8003440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f008 fe14 	bl	800bebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ffab 	bl	80031f4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff57 	bl	8003162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 80032b4:	4604      	mov	r4, r0
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8e1 	bl	800347e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 80032bc:	4602      	mov	r2, r0
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4621      	mov	r1, r4
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8e7 	bl	8003496 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f825 	bl	800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 80032d2:	4603      	mov	r3, r0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	f107 020c 	add.w	r2, r7, #12
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff4a 	bl	800317a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 80032e6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80032ec:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80032ee:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f901 	bl	80034f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff ff50 	bl	80031a2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f807 	bl	800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800330e:	4603      	mov	r3, r0
 8003310:	e000      	b.n	8003314 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 8003312:	68bb      	ldr	r3, [r7, #8]
    }
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f863 	bl	80033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3310      	adds	r3, #16
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f8e0 	bl	8003510 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8003350:	4603      	mov	r3, r0
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8bb 	bl	8003528 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8cc 	bl	8003552 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f008 fda7 	bl	800bf3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80033ec:	4603      	mov	r3, r0
 80033ee:	0fdb      	lsrs	r3, r3, #31
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003422:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff feca 	bl	80031c0 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800342c:	462a      	mov	r2, r5
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	4620      	mov	r0, r4
 8003432:	f000 f8b3 	bl	800359c <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8003436:	4603      	mov	r3, r0
    }
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bdb0      	pop	{r4, r5, r7, pc}

08003440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 800344c:	e00e      	b.n	800346c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	75fb      	strb	r3, [r7, #23]
 8003454:	f107 0317 	add.w	r3, r7, #23
 8003458:	4619      	mov	r1, r3
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fc40 	bl	8002ce0 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3301      	adds	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d1ec      	bne.n	800344e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003496:	b590      	push	{r4, r7, lr}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80034a4:	e01a      	b.n	80034dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80034a6:	68fc      	ldr	r4, [r7, #12]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f000 f864 	bl	8003576 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 80034ae:	4603      	mov	r3, r0
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7ff fe74 	bl	80031a2 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f7ff ff5c 	bl	8003388 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80034d0:	60b8      	str	r0, [r7, #8]
 80034d2:	e003      	b.n	80034dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f7ff ff4b 	bl	8003370 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80034da:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e1      	bne.n	80034a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff86 	bl	80033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80034ee:	697b      	ldr	r3, [r7, #20]
    }
 80034f0:	4618      	mov	r0, r3
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}

080034f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f838 	bl	8003576 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8003506:	4603      	mov	r3, r0
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f84e 	bl	80035ba <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 800351e:	4603      	mov	r3, r0
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f84c 	bl	80035d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8003538:	4604      	mov	r4, r0
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f7ff feff 	bl	800333e <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8003540:	4603      	mov	r3, r0
 8003542:	4619      	mov	r1, r3
 8003544:	4620      	mov	r0, r4
 8003546:	f000 f84e 	bl	80035e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}

08003552 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f837 	bl	80035d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8003562:	4603      	mov	r3, r0
 8003564:	2201      	movs	r2, #1
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f849 	bl	8003600 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f84d 	bl	800361e <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8003584:	4602      	mov	r2, r0
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f854 	bl	800363a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 8003592:	4603      	mov	r3, r0
      }
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f83a 	bl	800366c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f837 	bl	8003684 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3310      	adds	r3, #16
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f83c 	bl	80036a8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8003630:	4603      	mov	r3, r0
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	f008 fc66 	bl	800bf2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	f7ff ffeb 	bl	8003652 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	222c      	movs	r2, #44	@ 0x2c
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	4619      	mov	r1, r3
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f008 fbe6 	bl	800be6c <_ZdlPvj>
      }
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f805 	bl	80036c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fc84 	bl	8002fee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003706:	4293      	cmp	r3, r2
 8003708:	d102      	bne.n	8003710 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 800370a:	4809      	ldr	r0, [pc, #36]	@ (8003730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800370c:	f7ff fb35 	bl	8002d7a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800371c:	4293      	cmp	r3, r2
 800371e:	d102      	bne.n	8003726 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003720:	4803      	ldr	r0, [pc, #12]	@ (8003730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003722:	f7ff ffd8 	bl	80036d6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20001efc 	.word	0x20001efc

08003734 <_GLOBAL__sub_I_huart_reg>:
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
 8003738:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800373c:	2001      	movs	r0, #1
 800373e:	f7ff ffd7 	bl	80036f0 <_Z41__static_initialization_and_destruction_0ii>
 8003742:	bd80      	pop	{r7, pc}

08003744 <_GLOBAL__sub_D_huart_reg>:
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
 8003748:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800374c:	2000      	movs	r0, #0
 800374e:	f7ff ffcf 	bl	80036f0 <_Z41__static_initialization_and_destruction_0ii>
 8003752:	bd80      	pop	{r7, pc}

08003754 <Reset_Handler>:
 8003754:	480d      	ldr	r0, [pc, #52]	@ (800378c <LoopForever+0x2>)
 8003756:	4685      	mov	sp, r0
 8003758:	f7ff fab0 	bl	8002cbc <SystemInit>
 800375c:	480c      	ldr	r0, [pc, #48]	@ (8003790 <LoopForever+0x6>)
 800375e:	490d      	ldr	r1, [pc, #52]	@ (8003794 <LoopForever+0xa>)
 8003760:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <LoopForever+0xe>)
 8003762:	2300      	movs	r3, #0
 8003764:	e002      	b.n	800376c <LoopCopyDataInit>

08003766 <CopyDataInit>:
 8003766:	58d4      	ldr	r4, [r2, r3]
 8003768:	50c4      	str	r4, [r0, r3]
 800376a:	3304      	adds	r3, #4

0800376c <LoopCopyDataInit>:
 800376c:	18c4      	adds	r4, r0, r3
 800376e:	428c      	cmp	r4, r1
 8003770:	d3f9      	bcc.n	8003766 <CopyDataInit>
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <LoopForever+0x12>)
 8003774:	4c0a      	ldr	r4, [pc, #40]	@ (80037a0 <LoopForever+0x16>)
 8003776:	2300      	movs	r3, #0
 8003778:	e001      	b.n	800377e <LoopFillZerobss>

0800377a <FillZerobss>:
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	3204      	adds	r2, #4

0800377e <LoopFillZerobss>:
 800377e:	42a2      	cmp	r2, r4
 8003780:	d3fb      	bcc.n	800377a <FillZerobss>
 8003782:	f008 fd4d 	bl	800c220 <__libc_init_array>
 8003786:	f7fd fc57 	bl	8001038 <main>

0800378a <LoopForever>:
 800378a:	e7fe      	b.n	800378a <LoopForever>
 800378c:	20020000 	.word	0x20020000
 8003790:	20000000 	.word	0x20000000
 8003794:	20000068 	.word	0x20000068
 8003798:	0800ef0c 	.word	0x0800ef0c
 800379c:	20000068 	.word	0x20000068
 80037a0:	20002064 	.word	0x20002064

080037a4 <ADC1_2_IRQHandler>:
 80037a4:	e7fe      	b.n	80037a4 <ADC1_2_IRQHandler>

080037a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f002 f949 	bl	8005a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b6:	200f      	movs	r0, #15
 80037b8:	f000 f80e 	bl	80037d8 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	71fb      	strb	r3, [r7, #7]
 80037c6:	e001      	b.n	80037cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037c8:	f7fe fec0 	bl	800254c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037cc:	79fb      	ldrb	r3, [r7, #7]

}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80037e4:	4b16      	ldr	r3, [pc, #88]	@ (8003840 <HAL_InitTick+0x68>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d022      	beq.n	8003832 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80037ec:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <HAL_InitTick+0x6c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <HAL_InitTick+0x68>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	4618      	mov	r0, r3
 8003802:	f002 f954 	bl	8005aae <HAL_SYSTICK_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10f      	bne.n	800382c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	d809      	bhi.n	8003826 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003812:	2200      	movs	r2, #0
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	f04f 30ff 	mov.w	r0, #4294967295
 800381a:	f002 f920 	bl	8005a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800381e:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <HAL_InitTick+0x70>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e007      	b.n	8003836 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e004      	b.n	8003836 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000014 	.word	0x20000014
 8003844:	20000004 	.word	0x20000004
 8003848:	20000010 	.word	0x20000010

0800384c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_IncTick+0x1c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <HAL_IncTick+0x20>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4413      	add	r3, r2
 800385a:	4a03      	ldr	r2, [pc, #12]	@ (8003868 <HAL_IncTick+0x1c>)
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20001f14 	.word	0x20001f14
 800386c:	20000014 	.word	0x20000014

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20001f14 	.word	0x20001f14

08003888 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3360      	adds	r3, #96	@ 0x60
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <LL_ADC_SetOffset+0x44>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	03fff000 	.word	0x03fff000

08003938 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3360      	adds	r3, #96	@ 0x60
 8003946:	461a      	mov	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3360      	adds	r3, #96	@ 0x60
 8003974:	461a      	mov	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	431a      	orrs	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800399a:	b480      	push	{r7}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3360      	adds	r3, #96	@ 0x60
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	431a      	orrs	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3360      	adds	r3, #96	@ 0x60
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	615a      	str	r2, [r3, #20]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3330      	adds	r3, #48	@ 0x30
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	4413      	add	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	211f      	movs	r1, #31
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	401a      	ands	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	f003 011f 	and.w	r1, r3, #31
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0e5b      	lsrs	r3, r3, #25
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	0d1b      	lsrs	r3, r3, #20
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2107      	movs	r1, #7
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0d1b      	lsrs	r3, r3, #20
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	431a      	orrs	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0318 	and.w	r3, r3, #24
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b24:	40d9      	lsrs	r1, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	400b      	ands	r3, r1
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	0007ffff 	.word	0x0007ffff

08003b48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 031f 	and.w	r3, r3, #31
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6093      	str	r3, [r2, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bec:	d101      	bne.n	8003bf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <LL_ADC_IsEnabled+0x18>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <LL_ADC_IsEnabled+0x1a>
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d101      	bne.n	8003c8e <LL_ADC_IsDisableOngoing+0x18>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_ADC_IsDisableOngoing+0x1a>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cd8:	f043 0210 	orr.w	r2, r3, #16
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d101      	bne.n	8003d04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d101      	bne.n	8003d52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b089      	sub	sp, #36	@ 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1a9      	b.n	80040ce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fe fc03 	bl	8002594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fef1 	bl	8003b88 <LL_ADC_IsDeepPowerDownEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fed7 	bl	8003b64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff0c 	bl	8003bd8 <LL_ADC_IsInternalRegulatorEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fef0 	bl	8003bb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8004044 <HAL_ADC_Init+0x2e4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	4a9c      	ldr	r2, [pc, #624]	@ (8004048 <HAL_ADC_Init+0x2e8>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003de4:	e002      	b.n	8003dec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff feee 	bl	8003bd8 <LL_ADC_IsInternalRegulatorEnabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	f043 0210 	orr.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff62 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 8003e28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 8142 	bne.w	80040bc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 813e 	bne.w	80040bc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e48:	f043 0202 	orr.w	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fefb 	bl	8003c50 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d141      	bne.n	8003ee4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e68:	d004      	beq.n	8003e74 <HAL_ADC_Init+0x114>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a77      	ldr	r2, [pc, #476]	@ (800404c <HAL_ADC_Init+0x2ec>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10f      	bne.n	8003e94 <HAL_ADC_Init+0x134>
 8003e74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e78:	f7ff feea 	bl	8003c50 <LL_ADC_IsEnabled>
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	4873      	ldr	r0, [pc, #460]	@ (800404c <HAL_ADC_Init+0x2ec>)
 8003e80:	f7ff fee6 	bl	8003c50 <LL_ADC_IsEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	4323      	orrs	r3, r4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e012      	b.n	8003eba <HAL_ADC_Init+0x15a>
 8003e94:	486e      	ldr	r0, [pc, #440]	@ (8004050 <HAL_ADC_Init+0x2f0>)
 8003e96:	f7ff fedb 	bl	8003c50 <LL_ADC_IsEnabled>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	486d      	ldr	r0, [pc, #436]	@ (8004054 <HAL_ADC_Init+0x2f4>)
 8003e9e:	f7ff fed7 	bl	8003c50 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	431c      	orrs	r4, r3
 8003ea6:	486c      	ldr	r0, [pc, #432]	@ (8004058 <HAL_ADC_Init+0x2f8>)
 8003ea8:	f7ff fed2 	bl	8003c50 <LL_ADC_IsEnabled>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4323      	orrs	r3, r4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Init+0x172>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800404c <HAL_ADC_Init+0x2ec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_Init+0x176>
 8003ed2:	4a62      	ldr	r2, [pc, #392]	@ (800405c <HAL_ADC_Init+0x2fc>)
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_Init+0x178>
 8003ed6:	4a62      	ldr	r2, [pc, #392]	@ (8004060 <HAL_ADC_Init+0x300>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f7ff fcd2 	bl	8003888 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7f5b      	ldrb	r3, [r3, #29]
 8003ee8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ef4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003efa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d106      	bne.n	8003f20 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	045b      	lsls	r3, r3, #17
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	4b48      	ldr	r3, [pc, #288]	@ (8004064 <HAL_ADC_Init+0x304>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fee5 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 8003f70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d17f      	bne.n	8004078 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d17c      	bne.n	8004078 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f9a:	f023 0302 	bic.w	r3, r3, #2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d017      	beq.n	8003fe0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fc8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6911      	ldr	r1, [r2, #16]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003fde:	e013      	b.n	8004008 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004004:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	d12a      	bne.n	8004068 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004034:	430a      	orrs	r2, r1
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	e019      	b.n	8004078 <HAL_ADC_Init+0x318>
 8004044:	20000004 	.word	0x20000004
 8004048:	053e2d63 	.word	0x053e2d63
 800404c:	50000100 	.word	0x50000100
 8004050:	50000400 	.word	0x50000400
 8004054:	50000500 	.word	0x50000500
 8004058:	50000600 	.word	0x50000600
 800405c:	50000300 	.word	0x50000300
 8004060:	50000700 	.word	0x50000700
 8004064:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10c      	bne.n	800409a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f023 010f 	bic.w	r1, r3, #15
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
 8004098:	e007      	b.n	80040aa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 020f 	bic.w	r2, r2, #15
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040ba:	e007      	b.n	80040cc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c0:	f043 0210 	orr.w	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	@ 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	bf00      	nop

080040d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ec:	d004      	beq.n	80040f8 <HAL_ADC_Start_DMA+0x20>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5a      	ldr	r2, [pc, #360]	@ (800425c <HAL_ADC_Start_DMA+0x184>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_Start_DMA+0x24>
 80040f8:	4b59      	ldr	r3, [pc, #356]	@ (8004260 <HAL_ADC_Start_DMA+0x188>)
 80040fa:	e000      	b.n	80040fe <HAL_ADC_Start_DMA+0x26>
 80040fc:	4b59      	ldr	r3, [pc, #356]	@ (8004264 <HAL_ADC_Start_DMA+0x18c>)
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fd22 	bl	8003b48 <LL_ADC_GetMultimode>
 8004104:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fdee 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 809b 	bne.w	800424e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_ADC_Start_DMA+0x4e>
 8004122:	2302      	movs	r3, #2
 8004124:	e096      	b.n	8004254 <HAL_ADC_Start_DMA+0x17c>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a4d      	ldr	r2, [pc, #308]	@ (8004268 <HAL_ADC_Start_DMA+0x190>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d008      	beq.n	800414a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d002      	beq.n	800414a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b09      	cmp	r3, #9
 8004148:	d17a      	bne.n	8004240 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fe0a 	bl	8004d64 <ADC_Enable>
 8004150:	4603      	mov	r3, r0
 8004152:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d16d      	bne.n	8004236 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3a      	ldr	r2, [pc, #232]	@ (800425c <HAL_ADC_Start_DMA+0x184>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_ADC_Start_DMA+0xb4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3b      	ldr	r2, [pc, #236]	@ (800426c <HAL_ADC_Start_DMA+0x194>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d002      	beq.n	8004188 <HAL_ADC_Start_DMA+0xb0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	e003      	b.n	8004190 <HAL_ADC_Start_DMA+0xb8>
 8004188:	4b39      	ldr	r3, [pc, #228]	@ (8004270 <HAL_ADC_Start_DMA+0x198>)
 800418a:	e001      	b.n	8004190 <HAL_ADC_Start_DMA+0xb8>
 800418c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	4293      	cmp	r3, r2
 8004196:	d002      	beq.n	800419e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	f023 0206 	bic.w	r2, r3, #6
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80041c2:	e002      	b.n	80041ca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	4a29      	ldr	r2, [pc, #164]	@ (8004274 <HAL_ADC_Start_DMA+0x19c>)
 80041d0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	4a28      	ldr	r2, [pc, #160]	@ (8004278 <HAL_ADC_Start_DMA+0x1a0>)
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	4a27      	ldr	r2, [pc, #156]	@ (800427c <HAL_ADC_Start_DMA+0x1a4>)
 80041e0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	221c      	movs	r2, #28
 80041e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0210 	orr.w	r2, r2, #16
 8004200:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3340      	adds	r3, #64	@ 0x40
 800421c:	4619      	mov	r1, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f002 f8d9 	bl	80063d8 <HAL_DMA_Start_IT>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fd34 	bl	8003c9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004234:	e00d      	b.n	8004252 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800423e:	e008      	b.n	8004252 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800424c:	e001      	b.n	8004252 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800424e:	2302      	movs	r3, #2
 8004250:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	50000100 	.word	0x50000100
 8004260:	50000300 	.word	0x50000300
 8004264:	50000700 	.word	0x50000700
 8004268:	50000600 	.word	0x50000600
 800426c:	50000500 	.word	0x50000500
 8004270:	50000400 	.word	0x50000400
 8004274:	08004f4f 	.word	0x08004f4f
 8004278:	08005027 	.word	0x08005027
 800427c:	08005043 	.word	0x08005043

08004280 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_ADC_Stop_DMA+0x16>
 8004292:	2302      	movs	r3, #2
 8004294:	e051      	b.n	800433a <HAL_ADC_Stop_DMA+0xba>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800429e:	2103      	movs	r1, #3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fca3 	bl	8004bec <ADC_ConversionStop>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13f      	bne.n	8004330 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d10f      	bne.n	80042ee <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 f8fb 	bl	80064ce <HAL_DMA_Abort>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0210 	bic.w	r2, r2, #16
 80042fc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fdc3 	bl	8004e90 <ADC_Disable>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e002      	b.n	8004316 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fdbd 	bl	8004e90 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b0b6      	sub	sp, #216	@ 0xd8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004386:	2b01      	cmp	r3, #1
 8004388:	d102      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x24>
 800438a:	2302      	movs	r3, #2
 800438c:	f000 bc13 	b.w	8004bb6 <HAL_ADC_ConfigChannel+0x84a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fca5 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f040 83f3 	bne.w	8004b90 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7ff fb4b 	bl	8003a52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fc93 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 80043c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fcb3 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 80043d4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 81d9 	bne.w	8004794 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 81d4 	bne.w	8004794 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f4:	d10f      	bne.n	8004416 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	4619      	mov	r1, r3
 8004402:	f7ff fb52 	bl	8003aaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff faf9 	bl	8003a06 <LL_ADC_SetSamplingTimeCommonConfig>
 8004414:	e00e      	b.n	8004434 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	461a      	mov	r2, r3
 8004424:	f7ff fb41 	bl	8003aaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fae9 	bl	8003a06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	08db      	lsrs	r3, r3, #3
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d022      	beq.n	800449c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6919      	ldr	r1, [r3, #16]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004466:	f7ff fa43 	bl	80038f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6919      	ldr	r1, [r3, #16]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	461a      	mov	r2, r3
 8004478:	f7ff fa8f 	bl	800399a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x126>
 800448c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004490:	e000      	b.n	8004494 <HAL_ADC_ConfigChannel+0x128>
 8004492:	2300      	movs	r3, #0
 8004494:	461a      	mov	r2, r3
 8004496:	f7ff fa9b 	bl	80039d0 <LL_ADC_SetOffsetSaturation>
 800449a:	e17b      	b.n	8004794 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fa48 	bl	8003938 <LL_ADC_GetOffsetChannel>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x15c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fa3d 	bl	8003938 <LL_ADC_GetOffsetChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	0e9b      	lsrs	r3, r3, #26
 80044c2:	f003 021f 	and.w	r2, r3, #31
 80044c6:	e01e      	b.n	8004506 <HAL_ADC_ConfigChannel+0x19a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fa32 	bl	8003938 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80044f6:	2320      	movs	r3, #32
 80044f8:	e004      	b.n	8004504 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80044fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_ADC_ConfigChannel+0x1b2>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0e9b      	lsrs	r3, r3, #26
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	e018      	b.n	8004550 <HAL_ADC_ConfigChannel+0x1e4>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800453a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e004      	b.n	8004550 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004550:	429a      	cmp	r2, r3
 8004552:	d106      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fa01 	bl	8003964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff f9e5 	bl	8003938 <LL_ADC_GetOffsetChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_ADC_ConfigChannel+0x222>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff f9da 	bl	8003938 <LL_ADC_GetOffsetChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	e01e      	b.n	80045cc <HAL_ADC_ConfigChannel+0x260>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f9cf 	bl	8003938 <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e004      	b.n	80045ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80045c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x278>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	e018      	b.n	8004616 <HAL_ADC_ConfigChannel+0x2aa>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80045f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	e004      	b.n	8004616 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800460c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004616:	429a      	cmp	r2, r3
 8004618:	d106      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f99e 	bl	8003964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff f982 	bl	8003938 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x2e8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff f977 	bl	8003938 <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	f003 021f 	and.w	r2, r3, #31
 8004652:	e01e      	b.n	8004692 <HAL_ADC_ConfigChannel+0x326>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff f96c 	bl	8003938 <LL_ADC_GetOffsetChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800467a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004682:	2320      	movs	r3, #32
 8004684:	e004      	b.n	8004690 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x33e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	0e9b      	lsrs	r3, r3, #26
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	e016      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x36c>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80046ca:	2320      	movs	r3, #32
 80046cc:	e004      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80046ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046d8:	429a      	cmp	r2, r3
 80046da:	d106      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff f93d 	bl	8003964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2103      	movs	r1, #3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f921 	bl	8003938 <LL_ADC_GetOffsetChannel>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x3aa>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2103      	movs	r1, #3
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff f916 	bl	8003938 <LL_ADC_GetOffsetChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	0e9b      	lsrs	r3, r3, #26
 8004710:	f003 021f 	and.w	r2, r3, #31
 8004714:	e017      	b.n	8004746 <HAL_ADC_ConfigChannel+0x3da>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2103      	movs	r1, #3
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f90b 	bl	8003938 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800472e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004730:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004738:	2320      	movs	r3, #32
 800473a:	e003      	b.n	8004744 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800473c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_ADC_ConfigChannel+0x3f2>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	e011      	b.n	8004782 <HAL_ADC_ConfigChannel+0x416>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800476c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800476e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800477a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004782:	429a      	cmp	r2, r3
 8004784:	d106      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	2103      	movs	r1, #3
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff f8e8 	bl	8003964 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa59 	bl	8003c50 <LL_ADC_IsEnabled>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 813d 	bne.w	8004a20 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7ff f9a4 	bl	8003b00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4aa2      	ldr	r2, [pc, #648]	@ (8004a48 <HAL_ADC_ConfigChannel+0x6dc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f040 812e 	bne.w	8004a20 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x480>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	3301      	adds	r3, #1
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2b09      	cmp	r3, #9
 80047e2:	bf94      	ite	ls
 80047e4:	2301      	movls	r3, #1
 80047e6:	2300      	movhi	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e019      	b.n	8004820 <HAL_ADC_ConfigChannel+0x4b4>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80047fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80047fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004804:	2320      	movs	r3, #32
 8004806:	e003      	b.n	8004810 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2b09      	cmp	r3, #9
 8004818:	bf94      	ite	ls
 800481a:	2301      	movls	r3, #1
 800481c:	2300      	movhi	r3, #0
 800481e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004820:	2b00      	cmp	r3, #0
 8004822:	d079      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x4d4>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	069b      	lsls	r3, r3, #26
 800483a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800483e:	e015      	b.n	800486c <HAL_ADC_ConfigChannel+0x500>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800484e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004850:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e003      	b.n	8004864 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3301      	adds	r3, #1
 8004866:	069b      	lsls	r3, r3, #26
 8004868:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_ADC_ConfigChannel+0x520>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0e9b      	lsrs	r3, r3, #26
 800487e:	3301      	adds	r3, #1
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	e017      	b.n	80048bc <HAL_ADC_ConfigChannel+0x550>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004894:	fa93 f3a3 	rbit	r3, r3
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800489a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800489e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e003      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80048a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x576>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 021f 	and.w	r2, r3, #31
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	051b      	lsls	r3, r3, #20
 80048e0:	e018      	b.n	8004914 <HAL_ADC_ConfigChannel+0x5a8>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80048f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e003      	b.n	8004906 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004914:	430b      	orrs	r3, r1
 8004916:	e07e      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x5c8>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	3301      	adds	r3, #1
 800492c:	069b      	lsls	r3, r3, #26
 800492e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004932:	e015      	b.n	8004960 <HAL_ADC_ConfigChannel+0x5f4>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800494c:	2320      	movs	r3, #32
 800494e:	e003      	b.n	8004958 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	3301      	adds	r3, #1
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x614>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0e9b      	lsrs	r3, r3, #26
 8004972:	3301      	adds	r3, #1
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	e017      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x644>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	fa93 f3a3 	rbit	r3, r3
 800498c:	61fb      	str	r3, [r7, #28]
  return result;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004998:	2320      	movs	r3, #32
 800499a:	e003      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	ea42 0103 	orr.w	r1, r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x670>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0e9b      	lsrs	r3, r3, #26
 80049c6:	3301      	adds	r3, #1
 80049c8:	f003 021f 	and.w	r2, r3, #31
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	3b1e      	subs	r3, #30
 80049d4:	051b      	lsls	r3, r3, #20
 80049d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049da:	e01b      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x6a8>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	613b      	str	r3, [r7, #16]
  return result;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80049f4:	2320      	movs	r3, #32
 80049f6:	e003      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	fab3 f383 	clz	r3, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	3301      	adds	r3, #1
 8004a02:	f003 021f 	and.w	r2, r3, #31
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3b1e      	subs	r3, #30
 8004a0e:	051b      	lsls	r3, r3, #20
 8004a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7ff f845 	bl	8003aaa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_ADC_ConfigChannel+0x6e0>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80be 	beq.w	8004baa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a36:	d004      	beq.n	8004a42 <HAL_ADC_ConfigChannel+0x6d6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <HAL_ADC_ConfigChannel+0x6e4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10a      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x6ec>
 8004a42:	4b04      	ldr	r3, [pc, #16]	@ (8004a54 <HAL_ADC_ConfigChannel+0x6e8>)
 8004a44:	e009      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x6ee>
 8004a46:	bf00      	nop
 8004a48:	407f0000 	.word	0x407f0000
 8004a4c:	80080000 	.word	0x80080000
 8004a50:	50000100 	.word	0x50000100
 8004a54:	50000300 	.word	0x50000300
 8004a58:	4b59      	ldr	r3, [pc, #356]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x854>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe ff3a 	bl	80038d4 <LL_ADC_GetCommonPathInternalCh>
 8004a60:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a56      	ldr	r2, [pc, #344]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x858>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_ADC_ConfigChannel+0x70c>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a55      	ldr	r2, [pc, #340]	@ (8004bc8 <HAL_ADC_ConfigChannel+0x85c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d13a      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d134      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8c:	d005      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x72e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a4e      	ldr	r2, [pc, #312]	@ (8004bcc <HAL_ADC_ConfigChannel+0x860>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 8085 	bne.w	8004ba4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aa2:	d004      	beq.n	8004aae <HAL_ADC_ConfigChannel+0x742>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a49      	ldr	r2, [pc, #292]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x864>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x746>
 8004aae:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x868>)
 8004ab0:	e000      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x748>
 8004ab2:	4a43      	ldr	r2, [pc, #268]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x854>)
 8004ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ab8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fef5 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac4:	4b44      	ldr	r3, [pc, #272]	@ (8004bd8 <HAL_ADC_ConfigChannel+0x86c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	4a44      	ldr	r2, [pc, #272]	@ (8004bdc <HAL_ADC_ConfigChannel+0x870>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ade:	e002      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f9      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aec:	e05a      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3b      	ldr	r2, [pc, #236]	@ (8004be0 <HAL_ADC_ConfigChannel+0x874>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d125      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11f      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x864>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d104      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x7ac>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a34      	ldr	r2, [pc, #208]	@ (8004be4 <HAL_ADC_ConfigChannel+0x878>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d047      	beq.n	8004ba8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0x7c0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x864>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x7c4>
 8004b2c:	4a29      	ldr	r2, [pc, #164]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x868>)
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x7c6>
 8004b30:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x854>)
 8004b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fe feb6 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b42:	e031      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a27      	ldr	r2, [pc, #156]	@ (8004be8 <HAL_ADC_ConfigChannel+0x87c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12d      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d127      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x864>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b6c:	d004      	beq.n	8004b78 <HAL_ADC_ConfigChannel+0x80c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_ADC_ConfigChannel+0x864>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x810>
 8004b78:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <HAL_ADC_ConfigChannel+0x868>)
 8004b7a:	e000      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x812>
 8004b7c:	4a10      	ldr	r2, [pc, #64]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x854>)
 8004b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fe fe90 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
 8004b8e:	e00c      	b.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ba2:	e002      	b.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ba8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	37d8      	adds	r7, #216	@ 0xd8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	50000700 	.word	0x50000700
 8004bc4:	c3210000 	.word	0xc3210000
 8004bc8:	90c00010 	.word	0x90c00010
 8004bcc:	50000600 	.word	0x50000600
 8004bd0:	50000100 	.word	0x50000100
 8004bd4:	50000300 	.word	0x50000300
 8004bd8:	20000004 	.word	0x20000004
 8004bdc:	053e2d63 	.word	0x053e2d63
 8004be0:	c7520000 	.word	0xc7520000
 8004be4:	50000500 	.word	0x50000500
 8004be8:	cb840000 	.word	0xcb840000

08004bec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f872 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 8004c08:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f893 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 8004c14:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8098 	beq.w	8004d54 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02a      	beq.n	8004c88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7f5b      	ldrb	r3, [r3, #29]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d126      	bne.n	8004c88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7f1b      	ldrb	r3, [r3, #28]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d122      	bne.n	8004c88 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c42:	2301      	movs	r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c46:	e014      	b.n	8004c72 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4a45      	ldr	r2, [pc, #276]	@ (8004d60 <ADC_ConversionStop+0x174>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d90d      	bls.n	8004c6c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c60:	f043 0201 	orr.w	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e074      	b.n	8004d56 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d1e3      	bne.n	8004c48 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d014      	beq.n	8004cb8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff f82a 	bl	8003cec <LL_ADC_REG_IsConversionOngoing>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe ffe7 	bl	8003c76 <LL_ADC_IsDisableOngoing>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff f806 	bl	8003cc4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d014      	beq.n	8004ce8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f839 	bl	8003d3a <LL_ADC_INJ_IsConversionOngoing>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe ffcf 	bl	8003c76 <LL_ADC_IsDisableOngoing>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f815 	bl	8003d12 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d005      	beq.n	8004cfa <ADC_ConversionStop+0x10e>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d105      	bne.n	8004d00 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	617b      	str	r3, [r7, #20]
        break;
 8004cf8:	e005      	b.n	8004d06 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	617b      	str	r3, [r7, #20]
        break;
 8004cfe:	e002      	b.n	8004d06 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d00:	2304      	movs	r3, #4
 8004d02:	617b      	str	r3, [r7, #20]
        break;
 8004d04:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004d06:	f7fe fdb3 	bl	8003870 <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d0c:	e01b      	b.n	8004d46 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d0e:	f7fe fdaf 	bl	8003870 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d914      	bls.n	8004d46 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2e:	f043 0210 	orr.w	r2, r3, #16
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e007      	b.n	8004d56 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1dc      	bne.n	8004d0e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	a33fffff 	.word	0xa33fffff

08004d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe ff6b 	bl	8003c50 <LL_ADC_IsEnabled>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d176      	bne.n	8004e6e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <ADC_Enable+0x114>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e062      	b.n	8004e70 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe ff26 	bl	8003c00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dbc:	d004      	beq.n	8004dc8 <ADC_Enable+0x64>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8004e7c <ADC_Enable+0x118>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <ADC_Enable+0x68>
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e80 <ADC_Enable+0x11c>)
 8004dca:	e000      	b.n	8004dce <ADC_Enable+0x6a>
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8004e84 <ADC_Enable+0x120>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fd80 	bl	80038d4 <LL_ADC_GetCommonPathInternalCh>
 8004dd4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d013      	beq.n	8004e06 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dde:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <ADC_Enable+0x124>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	4a29      	ldr	r2, [pc, #164]	@ (8004e8c <ADC_Enable+0x128>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004df8:	e002      	b.n	8004e00 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f9      	bne.n	8004dfa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e06:	f7fe fd33 	bl	8003870 <HAL_GetTick>
 8004e0a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e0c:	e028      	b.n	8004e60 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe ff1c 	bl	8003c50 <LL_ADC_IsEnabled>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe feec 	bl	8003c00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e28:	f7fe fd22 	bl	8003870 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d914      	bls.n	8004e60 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00d      	beq.n	8004e60 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	f043 0210 	orr.w	r2, r3, #16
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e54:	f043 0201 	orr.w	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e007      	b.n	8004e70 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d1cf      	bne.n	8004e0e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	8000003f 	.word	0x8000003f
 8004e7c:	50000100 	.word	0x50000100
 8004e80:	50000300 	.word	0x50000300
 8004e84:	50000700 	.word	0x50000700
 8004e88:	20000004 	.word	0x20000004
 8004e8c:	053e2d63 	.word	0x053e2d63

08004e90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe feea 	bl	8003c76 <LL_ADC_IsDisableOngoing>
 8004ea2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fed1 	bl	8003c50 <LL_ADC_IsEnabled>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d047      	beq.n	8004f44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d144      	bne.n	8004f44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030d 	and.w	r3, r3, #13
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10c      	bne.n	8004ee2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe feab 	bl	8003c28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eda:	f7fe fcc9 	bl	8003870 <HAL_GetTick>
 8004ede:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ee0:	e029      	b.n	8004f36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f043 0210 	orr.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e023      	b.n	8004f46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004efe:	f7fe fcb7 	bl	8003870 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d914      	bls.n	8004f36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1e:	f043 0210 	orr.w	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e007      	b.n	8004f46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1dc      	bne.n	8004efe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d14b      	bne.n	8005000 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d021      	beq.n	8004fc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fd50 	bl	8003a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d032      	beq.n	8004ff8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d12b      	bne.n	8004ff8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11f      	bne.n	8004ff8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbc:	f043 0201 	orr.w	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fc4:	e018      	b.n	8004ff8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d111      	bne.n	8004ff8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7fb ff9b 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ffe:	e00e      	b.n	800501e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff f9a2 	bl	8004356 <HAL_ADC_ErrorCallback>
}
 8005012:	e004      	b.n	800501e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff f984 	bl	8004342 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005060:	f043 0204 	orr.w	r2, r3, #4
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff f974 	bl	8004356 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <LL_ADC_IsEnabled>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <LL_ADC_IsEnabled+0x18>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <LL_ADC_IsEnabled+0x1a>
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_REG_IsConversionOngoing>:
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d101      	bne.n	80050b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b0a1      	sub	sp, #132	@ 0x84
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e0e7      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050ea:	2300      	movs	r3, #0
 80050ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050ee:	2300      	movs	r3, #0
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fa:	d102      	bne.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050fc:	4b6f      	ldr	r3, [pc, #444]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	e009      	b.n	8005116 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6e      	ldr	r2, [pc, #440]	@ (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d102      	bne.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800510c:	4b6d      	ldr	r3, [pc, #436]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	e001      	b.n	8005116 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0be      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ffb0 	bl	800509c <LL_ADC_REG_IsConversionOngoing>
 800513c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ffaa 	bl	800509c <LL_ADC_REG_IsConversionOngoing>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 80a0 	bne.w	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 809c 	bne.w	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005160:	d004      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a55      	ldr	r2, [pc, #340]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800516c:	4b56      	ldr	r3, [pc, #344]	@ (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800516e:	e000      	b.n	8005172 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005170:	4b56      	ldr	r3, [pc, #344]	@ (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005172:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d04b      	beq.n	8005214 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800517c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800518e:	035b      	lsls	r3, r3, #13
 8005190:	430b      	orrs	r3, r1
 8005192:	431a      	orrs	r2, r3
 8005194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005196:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d004      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a45      	ldr	r2, [pc, #276]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d10f      	bne.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80051ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051b0:	f7ff ff61 	bl	8005076 <LL_ADC_IsEnabled>
 80051b4:	4604      	mov	r4, r0
 80051b6:	4841      	ldr	r0, [pc, #260]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051b8:	f7ff ff5d 	bl	8005076 <LL_ADC_IsEnabled>
 80051bc:	4603      	mov	r3, r0
 80051be:	4323      	orrs	r3, r4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e012      	b.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051cc:	483c      	ldr	r0, [pc, #240]	@ (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ce:	f7ff ff52 	bl	8005076 <LL_ADC_IsEnabled>
 80051d2:	4604      	mov	r4, r0
 80051d4:	483b      	ldr	r0, [pc, #236]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051d6:	f7ff ff4e 	bl	8005076 <LL_ADC_IsEnabled>
 80051da:	4603      	mov	r3, r0
 80051dc:	431c      	orrs	r4, r3
 80051de:	483c      	ldr	r0, [pc, #240]	@ (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051e0:	f7ff ff49 	bl	8005076 <LL_ADC_IsEnabled>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4323      	orrs	r3, r4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d056      	beq.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051fe:	f023 030f 	bic.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	430a      	orrs	r2, r1
 800520c:	431a      	orrs	r2, r3
 800520e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005210:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005212:	e047      	b.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800521c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800521e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005228:	d004      	beq.n	8005234 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a23      	ldr	r2, [pc, #140]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10f      	bne.n	8005254 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005234:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005238:	f7ff ff1d 	bl	8005076 <LL_ADC_IsEnabled>
 800523c:	4604      	mov	r4, r0
 800523e:	481f      	ldr	r0, [pc, #124]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005240:	f7ff ff19 	bl	8005076 <LL_ADC_IsEnabled>
 8005244:	4603      	mov	r3, r0
 8005246:	4323      	orrs	r3, r4
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e012      	b.n	800527a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005254:	481a      	ldr	r0, [pc, #104]	@ (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005256:	f7ff ff0e 	bl	8005076 <LL_ADC_IsEnabled>
 800525a:	4604      	mov	r4, r0
 800525c:	4819      	ldr	r0, [pc, #100]	@ (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800525e:	f7ff ff0a 	bl	8005076 <LL_ADC_IsEnabled>
 8005262:	4603      	mov	r3, r0
 8005264:	431c      	orrs	r4, r3
 8005266:	481a      	ldr	r0, [pc, #104]	@ (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005268:	f7ff ff05 	bl	8005076 <LL_ADC_IsEnabled>
 800526c:	4603      	mov	r3, r0
 800526e:	4323      	orrs	r3, r4
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800527e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005286:	f023 030f 	bic.w	r3, r3, #15
 800528a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800528c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800528e:	e009      	b.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80052a2:	e000      	b.n	80052a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80052ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3784      	adds	r7, #132	@ 0x84
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	50000100 	.word	0x50000100
 80052c0:	50000400 	.word	0x50000400
 80052c4:	50000500 	.word	0x50000500
 80052c8:	50000300 	.word	0x50000300
 80052cc:	50000700 	.word	0x50000700
 80052d0:	50000600 	.word	0x50000600

080052d4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80052dc:	4b05      	ldr	r3, [pc, #20]	@ (80052f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4904      	ldr	r1, [pc, #16]	@ (80052f4 <LL_EXTI_EnableIT_0_31+0x20>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40010400 	.word	0x40010400

080052f8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <LL_EXTI_EnableIT_32_63+0x20>)
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	4904      	ldr	r1, [pc, #16]	@ (8005318 <LL_EXTI_EnableIT_32_63+0x20>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4313      	orrs	r3, r2
 800530a:	620b      	str	r3, [r1, #32]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40010400 	.word	0x40010400

0800531c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <LL_EXTI_DisableIT_0_31+0x24>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	43db      	mvns	r3, r3
 800532c:	4904      	ldr	r1, [pc, #16]	@ (8005340 <LL_EXTI_DisableIT_0_31+0x24>)
 800532e:	4013      	ands	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010400 	.word	0x40010400

08005344 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <LL_EXTI_DisableIT_32_63+0x24>)
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	43db      	mvns	r3, r3
 8005354:	4904      	ldr	r1, [pc, #16]	@ (8005368 <LL_EXTI_DisableIT_32_63+0x24>)
 8005356:	4013      	ands	r3, r2
 8005358:	620b      	str	r3, [r1, #32]
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010400 	.word	0x40010400

0800536c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <LL_EXTI_EnableEvent_0_31+0x20>)
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4904      	ldr	r1, [pc, #16]	@ (800538c <LL_EXTI_EnableEvent_0_31+0x20>)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]

}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40010400 	.word	0x40010400

08005390 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005398:	4b05      	ldr	r3, [pc, #20]	@ (80053b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800539a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40010400 	.word	0x40010400

080053b4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	4904      	ldr	r1, [pc, #16]	@ (80053d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010400 	.word	0x40010400

080053dc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <LL_EXTI_DisableEvent_32_63+0x24>)
 80053e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	4904      	ldr	r1, [pc, #16]	@ (8005400 <LL_EXTI_DisableEvent_32_63+0x24>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010400 	.word	0x40010400

08005404 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	4904      	ldr	r1, [pc, #16]	@ (8005424 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]

}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010400 	.word	0x40010400

08005428 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005434:	4904      	ldr	r1, [pc, #16]	@ (8005448 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4313      	orrs	r3, r2
 800543a:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40010400 	.word	0x40010400

0800544c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	43db      	mvns	r3, r3
 800545c:	4904      	ldr	r1, [pc, #16]	@ (8005470 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800545e:	4013      	ands	r3, r2
 8005460:	608b      	str	r3, [r1, #8]

}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010400 	.word	0x40010400

08005474 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800547e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	43db      	mvns	r3, r3
 8005484:	4904      	ldr	r1, [pc, #16]	@ (8005498 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005486:	4013      	ands	r3, r2
 8005488:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010400 	.word	0x40010400

0800549c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80054a4:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	4904      	ldr	r1, [pc, #16]	@ (80054bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60cb      	str	r3, [r1, #12]
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010400 	.word	0x40010400

080054c0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80054ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054cc:	4904      	ldr	r1, [pc, #16]	@ (80054e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010400 	.word	0x40010400

080054e4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	4904      	ldr	r1, [pc, #16]	@ (8005508 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010400 	.word	0x40010400

0800550c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005514:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	43db      	mvns	r3, r3
 800551c:	4904      	ldr	r1, [pc, #16]	@ (8005530 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800551e:	4013      	ands	r3, r2
 8005520:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010400 	.word	0x40010400

08005534 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800553c:	4a04      	ldr	r2, [pc, #16]	@ (8005550 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6153      	str	r3, [r2, #20]
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010400 	.word	0x40010400

08005554 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800555c:	4a04      	ldr	r2, [pc, #16]	@ (8005570 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010400 	.word	0x40010400

08005574 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e181      	b.n	8005894 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800559e:	d102      	bne.n	80055a6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e176      	b.n	8005894 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7f5b      	ldrb	r3, [r3, #29]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fd f86b 	bl	8002698 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055cc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b90      	ldr	r3, [pc, #576]	@ (8005834 <HAL_COMP_Init+0x2c0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	6979      	ldr	r1, [r7, #20]
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_COMP_Init+0xc8>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005614:	4b88      	ldr	r3, [pc, #544]	@ (8005838 <HAL_COMP_Init+0x2c4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	099b      	lsrs	r3, r3, #6
 800561a:	4a88      	ldr	r2, [pc, #544]	@ (800583c <HAL_COMP_Init+0x2c8>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800562e:	e002      	b.n	8005636 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3b01      	subs	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f9      	bne.n	8005630 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7f      	ldr	r2, [pc, #508]	@ (8005840 <HAL_COMP_Init+0x2cc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d028      	beq.n	8005698 <HAL_COMP_Init+0x124>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7e      	ldr	r2, [pc, #504]	@ (8005844 <HAL_COMP_Init+0x2d0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d020      	beq.n	8005692 <HAL_COMP_Init+0x11e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a7c      	ldr	r2, [pc, #496]	@ (8005848 <HAL_COMP_Init+0x2d4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d018      	beq.n	800568c <HAL_COMP_Init+0x118>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a7b      	ldr	r2, [pc, #492]	@ (800584c <HAL_COMP_Init+0x2d8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d010      	beq.n	8005686 <HAL_COMP_Init+0x112>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a79      	ldr	r2, [pc, #484]	@ (8005850 <HAL_COMP_Init+0x2dc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d008      	beq.n	8005680 <HAL_COMP_Init+0x10c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a78      	ldr	r2, [pc, #480]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <HAL_COMP_Init+0x108>
 8005678:	2301      	movs	r3, #1
 800567a:	e00f      	b.n	800569c <HAL_COMP_Init+0x128>
 800567c:	2302      	movs	r3, #2
 800567e:	e00d      	b.n	800569c <HAL_COMP_Init+0x128>
 8005680:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005684:	e00a      	b.n	800569c <HAL_COMP_Init+0x128>
 8005686:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800568a:	e007      	b.n	800569c <HAL_COMP_Init+0x128>
 800568c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005690:	e004      	b.n	800569c <HAL_COMP_Init+0x128>
 8005692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005696:	e001      	b.n	800569c <HAL_COMP_Init+0x128>
 8005698:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800569c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80b6 	beq.w	8005818 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a65      	ldr	r2, [pc, #404]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_COMP_Init+0x158>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a64      	ldr	r2, [pc, #400]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80056cc:	6938      	ldr	r0, [r7, #16]
 80056ce:	f7ff feab 	bl	8005428 <LL_EXTI_EnableRisingTrig_32_63>
 80056d2:	e014      	b.n	80056fe <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80056d4:	6938      	ldr	r0, [r7, #16]
 80056d6:	f7ff fe95 	bl	8005404 <LL_EXTI_EnableRisingTrig_0_31>
 80056da:	e010      	b.n	80056fe <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_COMP_Init+0x17c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d103      	bne.n	80056f8 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80056f0:	6938      	ldr	r0, [r7, #16]
 80056f2:	f7ff febf 	bl	8005474 <LL_EXTI_DisableRisingTrig_32_63>
 80056f6:	e002      	b.n	80056fe <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80056f8:	6938      	ldr	r0, [r7, #16]
 80056fa:	f7ff fea7 	bl	800544c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d011      	beq.n	800572e <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a51      	ldr	r2, [pc, #324]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_COMP_Init+0x1aa>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a4f      	ldr	r2, [pc, #316]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d103      	bne.n	8005726 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800571e:	6938      	ldr	r0, [r7, #16]
 8005720:	f7ff fece 	bl	80054c0 <LL_EXTI_EnableFallingTrig_32_63>
 8005724:	e014      	b.n	8005750 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f7ff feb8 	bl	800549c <LL_EXTI_EnableFallingTrig_0_31>
 800572c:	e010      	b.n	8005750 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a48      	ldr	r2, [pc, #288]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_COMP_Init+0x1ce>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a46      	ldr	r2, [pc, #280]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d103      	bne.n	800574a <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8005742:	6938      	ldr	r0, [r7, #16]
 8005744:	f7ff fee2 	bl	800550c <LL_EXTI_DisableFallingTrig_32_63>
 8005748:	e002      	b.n	8005750 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f7ff feca 	bl	80054e4 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a3f      	ldr	r2, [pc, #252]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_COMP_Init+0x1f0>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a3e      	ldr	r2, [pc, #248]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d103      	bne.n	800576c <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f7ff fef5 	bl	8005554 <LL_EXTI_ClearFlag_32_63>
 800576a:	e002      	b.n	8005772 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800576c:	6938      	ldr	r0, [r7, #16]
 800576e:	f7ff fee1 	bl	8005534 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a34      	ldr	r2, [pc, #208]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_COMP_Init+0x21e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a32      	ldr	r2, [pc, #200]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d103      	bne.n	800579a <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8005792:	6938      	ldr	r0, [r7, #16]
 8005794:	f7ff fdfc 	bl	8005390 <LL_EXTI_EnableEvent_32_63>
 8005798:	e014      	b.n	80057c4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800579a:	6938      	ldr	r0, [r7, #16]
 800579c:	f7ff fde6 	bl	800536c <LL_EXTI_EnableEvent_0_31>
 80057a0:	e010      	b.n	80057c4 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_COMP_Init+0x242>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a29      	ldr	r2, [pc, #164]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d103      	bne.n	80057be <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f7ff fe10 	bl	80053dc <LL_EXTI_DisableEvent_32_63>
 80057bc:	e002      	b.n	80057c4 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f7ff fdf8 	bl	80053b4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_COMP_Init+0x270>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1e      	ldr	r2, [pc, #120]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80057e4:	6938      	ldr	r0, [r7, #16]
 80057e6:	f7ff fd87 	bl	80052f8 <LL_EXTI_EnableIT_32_63>
 80057ea:	e04b      	b.n	8005884 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80057ec:	6938      	ldr	r0, [r7, #16]
 80057ee:	f7ff fd71 	bl	80052d4 <LL_EXTI_EnableIT_0_31>
 80057f2:	e047      	b.n	8005884 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a16      	ldr	r2, [pc, #88]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_COMP_Init+0x294>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005808:	6938      	ldr	r0, [r7, #16]
 800580a:	f7ff fd9b 	bl	8005344 <LL_EXTI_DisableIT_32_63>
 800580e:	e039      	b.n	8005884 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005810:	6938      	ldr	r0, [r7, #16]
 8005812:	f7ff fd83 	bl	800531c <LL_EXTI_DisableIT_0_31>
 8005816:	e035      	b.n	8005884 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <HAL_COMP_Init+0x2e0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <HAL_COMP_Init+0x2b8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <HAL_COMP_Init+0x2e4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d117      	bne.n	800585c <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800582c:	6938      	ldr	r0, [r7, #16]
 800582e:	f7ff fdd5 	bl	80053dc <LL_EXTI_DisableEvent_32_63>
 8005832:	e016      	b.n	8005862 <HAL_COMP_Init+0x2ee>
 8005834:	ff007e0f 	.word	0xff007e0f
 8005838:	20000004 	.word	0x20000004
 800583c:	053e2d63 	.word	0x053e2d63
 8005840:	40010200 	.word	0x40010200
 8005844:	40010204 	.word	0x40010204
 8005848:	40010208 	.word	0x40010208
 800584c:	4001020c 	.word	0x4001020c
 8005850:	40010210 	.word	0x40010210
 8005854:	40010214 	.word	0x40010214
 8005858:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800585c:	6938      	ldr	r0, [r7, #16]
 800585e:	f7ff fda9 	bl	80053b4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a0e      	ldr	r2, [pc, #56]	@ (80058a0 <HAL_COMP_Init+0x32c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_COMP_Init+0x302>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0c      	ldr	r2, [pc, #48]	@ (80058a4 <HAL_COMP_Init+0x330>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d103      	bne.n	800587e <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8005876:	6938      	ldr	r0, [r7, #16]
 8005878:	f7ff fd64 	bl	8005344 <LL_EXTI_DisableIT_32_63>
 800587c:	e002      	b.n	8005884 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800587e:	6938      	ldr	r0, [r7, #16]
 8005880:	f7ff fd4c 	bl	800531c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7f5b      	ldrb	r3, [r3, #29]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8005894:	7ffb      	ldrb	r3, [r7, #31]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40010214 	.word	0x40010214
 80058a4:	40010218 	.word	0x40010218

080058a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058da:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	60d3      	str	r3, [r2, #12]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <__NVIC_GetPriorityGrouping+0x18>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 0307 	and.w	r3, r3, #7
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591a:	2b00      	cmp	r3, #0
 800591c:	db0b      	blt.n	8005936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	f003 021f 	and.w	r2, r3, #31
 8005924:	4907      	ldr	r1, [pc, #28]	@ (8005944 <__NVIC_EnableIRQ+0x38>)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2001      	movs	r0, #1
 800592e:	fa00 f202 	lsl.w	r2, r0, r2
 8005932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	e000e100 	.word	0xe000e100

08005948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005958:	2b00      	cmp	r3, #0
 800595a:	db0a      	blt.n	8005972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	490c      	ldr	r1, [pc, #48]	@ (8005994 <__NVIC_SetPriority+0x4c>)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	0112      	lsls	r2, r2, #4
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	440b      	add	r3, r1
 800596c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005970:	e00a      	b.n	8005988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4908      	ldr	r1, [pc, #32]	@ (8005998 <__NVIC_SetPriority+0x50>)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	3b04      	subs	r3, #4
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	440b      	add	r3, r1
 8005986:	761a      	strb	r2, [r3, #24]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	e000e100 	.word	0xe000e100
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	@ 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f1c3 0307 	rsb	r3, r3, #7
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf28      	it	cs
 80059ba:	2304      	movcs	r3, #4
 80059bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3304      	adds	r3, #4
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d902      	bls.n	80059cc <NVIC_EncodePriority+0x30>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3b03      	subs	r3, #3
 80059ca:	e000      	b.n	80059ce <NVIC_EncodePriority+0x32>
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43da      	mvns	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	401a      	ands	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059e4:	f04f 31ff 	mov.w	r1, #4294967295
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	43d9      	mvns	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f4:	4313      	orrs	r3, r2
         );
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a14:	d301      	bcc.n	8005a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a16:	2301      	movs	r3, #1
 8005a18:	e00f      	b.n	8005a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a44 <SysTick_Config+0x40>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a22:	210f      	movs	r1, #15
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	f7ff ff8e 	bl	8005948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <SysTick_Config+0x40>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a32:	4b04      	ldr	r3, [pc, #16]	@ (8005a44 <SysTick_Config+0x40>)
 8005a34:	2207      	movs	r2, #7
 8005a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	e000e010 	.word	0xe000e010

08005a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ff29 	bl	80058a8 <__NVIC_SetPriorityGrouping>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	4603      	mov	r3, r0
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a6c:	f7ff ff40 	bl	80058f0 <__NVIC_GetPriorityGrouping>
 8005a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff90 	bl	800599c <NVIC_EncodePriority>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff5f 	bl	8005948 <__NVIC_SetPriority>
}
 8005a8a:	bf00      	nop
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	4603      	mov	r3, r0
 8005a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff ff33 	bl	800590c <__NVIC_EnableIRQ>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ffa4 	bl	8005a04 <SysTick_Config>
 8005abc:	4603      	mov	r3, r0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e054      	b.n	8005b84 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7f5b      	ldrb	r3, [r3, #29]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc fe24 	bl	8002738 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	791b      	ldrb	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a22      	ldr	r2, [pc, #136]	@ (8005b8c <HAL_CRC_Init+0xc4>)
 8005b04:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0218 	bic.w	r2, r2, #24
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	e00c      	b.n	8005b32 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6899      	ldr	r1, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f948 	bl	8005db8 <HAL_CRCEx_Polynomial_Set>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e028      	b.n	8005b84 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	795b      	ldrb	r3, [r3, #5]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	611a      	str	r2, [r3, #16]
 8005b44:	e004      	b.n	8005b50 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6912      	ldr	r2, [r2, #16]
 8005b4e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	04c11db7 	.word	0x04c11db7

08005b90 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d006      	beq.n	8005bcc <HAL_CRC_Calculate+0x3c>
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d829      	bhi.n	8005c16 <HAL_CRC_Calculate+0x86>
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d019      	beq.n	8005bfa <HAL_CRC_Calculate+0x6a>
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d01e      	beq.n	8005c08 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005bca:	e024      	b.n	8005c16 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e00a      	b.n	8005be8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	441a      	add	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	3301      	adds	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d3f0      	bcc.n	8005bd2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	613b      	str	r3, [r7, #16]
      break;
 8005bf8:	e00e      	b.n	8005c18 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f812 	bl	8005c28 <CRC_Handle_8>
 8005c04:	6138      	str	r0, [r7, #16]
      break;
 8005c06:	e007      	b.n	8005c18 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f899 	bl	8005d44 <CRC_Handle_16>
 8005c12:	6138      	str	r0, [r7, #16]
      break;
 8005c14:	e000      	b.n	8005c18 <HAL_CRC_Calculate+0x88>
      break;
 8005c16:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005c1e:	693b      	ldr	r3, [r7, #16]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	@ 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e023      	b.n	8005c82 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	440b      	add	r3, r1
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c54:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	440b      	add	r3, r1
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005c64:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	3303      	adds	r3, #3
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	440b      	add	r3, r1
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005c78:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d3d6      	bcc.n	8005c3a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d04d      	beq.n	8005d32 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d116      	bne.n	8005ce8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	b21a      	sxth	r2, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	3301      	adds	r3, #1
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	440b      	add	r3, r1
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	8b7a      	ldrh	r2, [r7, #26]
 8005ce6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d11f      	bne.n	8005d32 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	b21a      	sxth	r2, r3
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	3301      	adds	r3, #1
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	440b      	add	r3, r1
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	8b7a      	ldrh	r2, [r7, #26]
 8005d1e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	3302      	adds	r3, #2
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	4413      	add	r3, r2
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3724      	adds	r7, #36	@ 0x24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e013      	b.n	8005d7e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	041a      	lsls	r2, r3, #16
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3302      	adds	r3, #2
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	440b      	add	r3, r1
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3e6      	bcc.n	8005d56 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4413      	add	r3, r2
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005dc8:	231f      	movs	r3, #31
 8005dca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
 8005dda:	e063      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ddc:	bf00      	nop
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	613a      	str	r2, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <HAL_CRCEx_Polynomial_Set+0x44>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b18      	cmp	r3, #24
 8005e00:	d846      	bhi.n	8005e90 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e97 	.word	0x08005e97
 8005e0c:	08005e91 	.word	0x08005e91
 8005e10:	08005e91 	.word	0x08005e91
 8005e14:	08005e91 	.word	0x08005e91
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005e91 	.word	0x08005e91
 8005e20:	08005e91 	.word	0x08005e91
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	08005e6d 	.word	0x08005e6d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d913      	bls.n	8005e9a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005e76:	e010      	b.n	8005e9a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d90f      	bls.n	8005e9e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005e82:	e00c      	b.n	8005e9e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d90b      	bls.n	8005ea2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005e8e:	e008      	b.n	8005ea2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
        break;
 8005e94:	e006      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ea2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 0118 	bic.w	r1, r3, #24
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e014      	b.n	8005f10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	791b      	ldrb	r3, [r3, #4]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc fc3e 	bl	8002778 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_DAC_ConfigChannel+0x1c>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e19e      	b.n	8006276 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	795b      	ldrb	r3, [r3, #5]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_DAC_ConfigChannel+0x2c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e198      	b.n	8006276 <HAL_DAC_ConfigChannel+0x35e>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d17a      	bne.n	800604e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f58:	f7fd fc8a 	bl	8003870 <HAL_GetTick>
 8005f5c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d13d      	bne.n	8005fe0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f64:	e018      	b.n	8005f98 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f66:	f7fd fc83 	bl	8003870 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d911      	bls.n	8005f98 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0208 	orr.w	r2, r3, #8
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2203      	movs	r2, #3
 8005f92:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e16e      	b.n	8006276 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1df      	bne.n	8005f66 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fb0:	e020      	b.n	8005ff4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fb2:	f7fd fc5d 	bl	8003870 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d90f      	bls.n	8005fe0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da0a      	bge.n	8005fe0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f043 0208 	orr.w	r2, r3, #8
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e14a      	b.n	8006276 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dbe3      	blt.n	8005fb2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ff2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	ea02 0103 	and.w	r1, r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	409a      	lsls	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	21ff      	movs	r1, #255	@ 0xff
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	ea02 0103 	and.w	r1, r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	409a      	lsls	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d11d      	bne.n	8006092 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	221f      	movs	r2, #31
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606e:	4013      	ands	r3, r2
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006086:	4313      	orrs	r3, r2
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2207      	movs	r2, #7
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060aa:	4013      	ands	r3, r2
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d102      	bne.n	80060bc <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	e00f      	b.n	80060dc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d102      	bne.n	80060ca <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80060c4:	2301      	movs	r3, #1
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	e008      	b.n	80060dc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80060d2:	2301      	movs	r3, #1
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	e001      	b.n	80060dc <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fe:	4013      	ands	r3, r2
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d102      	bne.n	8006110 <HAL_DAC_ConfigChannel+0x1f8>
 800610a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800610e:	e000      	b.n	8006112 <HAL_DAC_ConfigChannel+0x1fa>
 8006110:	2300      	movs	r3, #0
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612a:	4013      	ands	r3, r2
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	795b      	ldrb	r3, [r3, #5]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_DAC_ConfigChannel+0x224>
 8006136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800613a:	e000      	b.n	800613e <HAL_DAC_ConfigChannel+0x226>
 800613c:	2300      	movs	r3, #0
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d114      	bne.n	800617e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006154:	f001 fc58 	bl	8007a08 <HAL_RCC_GetHCLKFreq>
 8006158:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4a48      	ldr	r2, [pc, #288]	@ (8006280 <HAL_DAC_ConfigChannel+0x368>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d904      	bls.n	800616c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	e00f      	b.n	800618c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4a45      	ldr	r2, [pc, #276]	@ (8006284 <HAL_DAC_ConfigChannel+0x36c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d90a      	bls.n	800618a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
 800617c:	e006      	b.n	800618c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	4313      	orrs	r3, r2
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
 8006188:	e000      	b.n	800618c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800618a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619a:	4313      	orrs	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	400a      	ands	r2, r1
 80061c2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061de:	4013      	ands	r3, r2
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	4313      	orrs	r3, r2
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6819      	ldr	r1, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	22c0      	movs	r2, #192	@ 0xc0
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43da      	mvns	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	400a      	ands	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	089b      	lsrs	r3, r3, #2
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	ea02 0103 	and.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	409a      	lsls	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006274:	7ffb      	ldrb	r3, [r7, #31]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3728      	adds	r7, #40	@ 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	09896800 	.word	0x09896800
 8006284:	04c4b400 	.word	0x04c4b400

08006288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e08d      	b.n	80063b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b47      	ldr	r3, [pc, #284]	@ (80063c0 <HAL_DMA_Init+0x138>)
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d80f      	bhi.n	80062c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b45      	ldr	r3, [pc, #276]	@ (80063c4 <HAL_DMA_Init+0x13c>)
 80062ae:	4413      	add	r3, r2
 80062b0:	4a45      	ldr	r2, [pc, #276]	@ (80063c8 <HAL_DMA_Init+0x140>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	009a      	lsls	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a42      	ldr	r2, [pc, #264]	@ (80063cc <HAL_DMA_Init+0x144>)
 80062c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80062c4:	e00e      	b.n	80062e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <HAL_DMA_Init+0x148>)
 80062ce:	4413      	add	r3, r2
 80062d0:	4a3d      	ldr	r2, [pc, #244]	@ (80063c8 <HAL_DMA_Init+0x140>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	009a      	lsls	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a3c      	ldr	r2, [pc, #240]	@ (80063d4 <HAL_DMA_Init+0x14c>)
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa76 	bl	8006828 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006344:	d102      	bne.n	800634c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006360:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d010      	beq.n	800638c <HAL_DMA_Init+0x104>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d80c      	bhi.n	800638c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa96 	bl	80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	e008      	b.n	800639e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40020407 	.word	0x40020407
 80063c4:	bffdfff8 	.word	0xbffdfff8
 80063c8:	cccccccd 	.word	0xcccccccd
 80063cc:	40020000 	.word	0x40020000
 80063d0:	bffdfbf8 	.word	0xbffdfbf8
 80063d4:	40020400 	.word	0x40020400

080063d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_DMA_Start_IT+0x20>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e066      	b.n	80064c6 <HAL_DMA_Start_IT+0xee>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d155      	bne.n	80064b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f9bb 	bl	80067ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 020e 	orr.w	r2, r2, #14
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e00f      	b.n	8006470 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0204 	bic.w	r2, r2, #4
 800645e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 020a 	orr.w	r2, r2, #10
 800646e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800648c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e005      	b.n	80064c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d005      	beq.n	80064f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2204      	movs	r2, #4
 80064ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e037      	b.n	8006562 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 020e 	bic.w	r2, r2, #14
 8006500:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006510:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	f003 021f 	and.w	r2, r3, #31
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f202 	lsl.w	r2, r1, r2
 8006534:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800653e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00c      	beq.n	8006562 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006556:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006560:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d00d      	beq.n	80065b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2204      	movs	r2, #4
 800659c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	e047      	b.n	8006644 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 020e 	bic.w	r2, r2, #14
 80065c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e8:	f003 021f 	and.w	r2, r3, #31
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f202 	lsl.w	r2, r1, r2
 80065f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006600:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006618:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006622:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
    }
  }
  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2204      	movs	r2, #4
 8006670:	409a      	lsls	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4013      	ands	r3, r2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d026      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7a>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d021      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d107      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0204 	bic.w	r2, r2, #4
 80066a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a6:	f003 021f 	and.w	r2, r3, #31
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	2104      	movs	r1, #4
 80066b0:	fa01 f202 	lsl.w	r2, r1, r2
 80066b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d071      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066c6:	e06c      	b.n	80067a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2202      	movs	r2, #2
 80066d2:	409a      	lsls	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02e      	beq.n	800673a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d029      	beq.n	800673a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 020a 	bic.w	r2, r2, #10
 8006702:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006710:	f003 021f 	and.w	r2, r3, #31
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	2102      	movs	r1, #2
 800671a:	fa01 f202 	lsl.w	r2, r1, r2
 800671e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d038      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006738:	e033      	b.n	80067a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2208      	movs	r2, #8
 8006744:	409a      	lsls	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d02a      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d025      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 020e 	bic.w	r2, r2, #14
 8006766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676c:	f003 021f 	and.w	r2, r3, #31
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	2101      	movs	r1, #1
 8006776:	fa01 f202 	lsl.w	r2, r1, r2
 800677a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
}
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067da:	f003 021f 	and.w	r2, r3, #31
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2101      	movs	r1, #1
 80067e4:	fa01 f202 	lsl.w	r2, r1, r2
 80067e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d108      	bne.n	800680c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800680a:	e007      	b.n	800681c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	4b16      	ldr	r3, [pc, #88]	@ (8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d802      	bhi.n	8006842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800683c:	4b15      	ldr	r3, [pc, #84]	@ (8006894 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e001      	b.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006842:	4b15      	ldr	r3, [pc, #84]	@ (8006898 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006844:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	3b08      	subs	r3, #8
 8006852:	4a12      	ldr	r2, [pc, #72]	@ (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006860:	089b      	lsrs	r3, r3, #2
 8006862:	009a      	lsls	r2, r3, #2
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a0b      	ldr	r2, [pc, #44]	@ (80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006872:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2201      	movs	r2, #1
 800687c:	409a      	lsls	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40020407 	.word	0x40020407
 8006894:	40020800 	.word	0x40020800
 8006898:	40020820 	.word	0x40020820
 800689c:	cccccccd 	.word	0xcccccccd
 80068a0:	40020880 	.word	0x40020880

080068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a08      	ldr	r2, [pc, #32]	@ (80068e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2201      	movs	r2, #1
 80068d2:	409a      	lsls	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	1000823f 	.word	0x1000823f
 80068e8:	40020940 	.word	0x40020940

080068ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068fa:	e15a      	b.n	8006bb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	2101      	movs	r1, #1
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 814c 	beq.w	8006bac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d005      	beq.n	800692c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006928:	2b02      	cmp	r3, #2
 800692a:	d130      	bne.n	800698e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	2203      	movs	r2, #3
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006962:	2201      	movs	r2, #1
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	f003 0201 	and.w	r2, r3, #1
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d017      	beq.n	80069ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	2203      	movs	r2, #3
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	43db      	mvns	r3, r3
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4013      	ands	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d123      	bne.n	8006a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	08da      	lsrs	r2, r3, #3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3208      	adds	r2, #8
 80069de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	220f      	movs	r2, #15
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4013      	ands	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	08da      	lsrs	r2, r3, #3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3208      	adds	r2, #8
 8006a18:	6939      	ldr	r1, [r7, #16]
 8006a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	2203      	movs	r2, #3
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4013      	ands	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 0203 	and.w	r2, r3, #3
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a6 	beq.w	8006bac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a60:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd0 <HAL_GPIO_Init+0x2e4>)
 8006a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a64:	4a5a      	ldr	r2, [pc, #360]	@ (8006bd0 <HAL_GPIO_Init+0x2e4>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a6c:	4b58      	ldr	r3, [pc, #352]	@ (8006bd0 <HAL_GPIO_Init+0x2e4>)
 8006a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a78:	4a56      	ldr	r2, [pc, #344]	@ (8006bd4 <HAL_GPIO_Init+0x2e8>)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	089b      	lsrs	r3, r3, #2
 8006a7e:	3302      	adds	r3, #2
 8006a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	220f      	movs	r2, #15
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	43db      	mvns	r3, r3
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006aa2:	d01f      	beq.n	8006ae4 <HAL_GPIO_Init+0x1f8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8006bd8 <HAL_GPIO_Init+0x2ec>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d019      	beq.n	8006ae0 <HAL_GPIO_Init+0x1f4>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a4b      	ldr	r2, [pc, #300]	@ (8006bdc <HAL_GPIO_Init+0x2f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_GPIO_Init+0x1f0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8006be0 <HAL_GPIO_Init+0x2f4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00d      	beq.n	8006ad8 <HAL_GPIO_Init+0x1ec>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a49      	ldr	r2, [pc, #292]	@ (8006be4 <HAL_GPIO_Init+0x2f8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d007      	beq.n	8006ad4 <HAL_GPIO_Init+0x1e8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a48      	ldr	r2, [pc, #288]	@ (8006be8 <HAL_GPIO_Init+0x2fc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d101      	bne.n	8006ad0 <HAL_GPIO_Init+0x1e4>
 8006acc:	2305      	movs	r3, #5
 8006ace:	e00a      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006ad0:	2306      	movs	r3, #6
 8006ad2:	e008      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	e006      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e004      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e002      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <HAL_GPIO_Init+0x1fa>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	f002 0203 	and.w	r2, r2, #3
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	4093      	lsls	r3, r2
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006af6:	4937      	ldr	r1, [pc, #220]	@ (8006bd4 <HAL_GPIO_Init+0x2e8>)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	089b      	lsrs	r3, r3, #2
 8006afc:	3302      	adds	r3, #2
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b04:	4b39      	ldr	r3, [pc, #228]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4013      	ands	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b28:	4a30      	ldr	r2, [pc, #192]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	43db      	mvns	r3, r3
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b52:	4a26      	ldr	r2, [pc, #152]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b58:	4b24      	ldr	r3, [pc, #144]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4013      	ands	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b82:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ba6:	4a11      	ldr	r2, [pc, #68]	@ (8006bec <HAL_GPIO_Init+0x300>)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f ae9d 	bne.w	80068fc <HAL_GPIO_Init+0x10>
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	48000400 	.word	0x48000400
 8006bdc:	48000800 	.word	0x48000800
 8006be0:	48000c00 	.word	0x48000c00
 8006be4:	48001000 	.word	0x48001000
 8006be8:	48001400 	.word	0x48001400
 8006bec:	40010400 	.word	0x40010400

08006bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	887b      	ldrh	r3, [r7, #2]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
 8006c0c:	e001      	b.n	8006c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	807b      	strh	r3, [r7, #2]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c30:	787b      	ldrb	r3, [r7, #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c3c:	e002      	b.n	8006c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e08d      	b.n	8006d7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fb fd9e 	bl	80027b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2224      	movs	r2, #36	@ 0x24
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ca0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d107      	bne.n	8006cca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cc6:	609a      	str	r2, [r3, #8]
 8006cc8:	e006      	b.n	8006cd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d108      	bne.n	8006cf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	e007      	b.n	8006d02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	69d9      	ldr	r1, [r3, #28]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d138      	bne.n	8006e0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e032      	b.n	8006e10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	@ 0x24
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e000      	b.n	8006e10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e0e:	2302      	movs	r3, #2
  }
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d139      	bne.n	8006ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e033      	b.n	8006ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2224      	movs	r2, #36	@ 0x24
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d141      	bne.n	8006f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ece:	d131      	bne.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ed0:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed6:	4a46      	ldr	r2, [pc, #280]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ee0:	4b43      	ldr	r3, [pc, #268]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ee8:	4a41      	ldr	r2, [pc, #260]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ef0:	4b40      	ldr	r3, [pc, #256]	@ (8006ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2232      	movs	r2, #50	@ 0x32
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	4a3f      	ldr	r2, [pc, #252]	@ (8006ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	0c9b      	lsrs	r3, r3, #18
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f06:	e002      	b.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f0e:	4b38      	ldr	r3, [pc, #224]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d102      	bne.n	8006f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f2      	bne.n	8006f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f22:	4b33      	ldr	r3, [pc, #204]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2e:	d158      	bne.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e057      	b.n	8006fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f34:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f44:	e04d      	b.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4c:	d141      	bne.n	8006fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f4e:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f5a:	d131      	bne.n	8006fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f5c:	4b24      	ldr	r3, [pc, #144]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f62:	4a23      	ldr	r2, [pc, #140]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f6c:	4b20      	ldr	r3, [pc, #128]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f74:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2232      	movs	r2, #50	@ 0x32
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f88:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8c:	0c9b      	lsrs	r3, r3, #18
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f92:	e002      	b.n	8006f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa6:	d102      	bne.n	8006fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f2      	bne.n	8006f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fae:	4b10      	ldr	r3, [pc, #64]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fba:	d112      	bne.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e011      	b.n	8006fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006fd0:	e007      	b.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fd2:	4b07      	ldr	r3, [pc, #28]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fda:	4a05      	ldr	r2, [pc, #20]	@ (8006ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fe0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40007000 	.word	0x40007000
 8006ff4:	20000004 	.word	0x20000004
 8006ff8:	431bde83 	.word	0x431bde83

08006ffc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4a04      	ldr	r2, [pc, #16]	@ (8007018 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800700a:	6093      	str	r3, [r2, #8]
}
 800700c:	bf00      	nop
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40007000 	.word	0x40007000

0800701c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e2fe      	b.n	800762c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d075      	beq.n	8007126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800703a:	4b97      	ldr	r3, [pc, #604]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007044:	4b94      	ldr	r3, [pc, #592]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b0c      	cmp	r3, #12
 8007052:	d102      	bne.n	800705a <HAL_RCC_OscConfig+0x3e>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d002      	beq.n	8007060 <HAL_RCC_OscConfig+0x44>
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d10b      	bne.n	8007078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	4b8d      	ldr	r3, [pc, #564]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d05b      	beq.n	8007124 <HAL_RCC_OscConfig+0x108>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d157      	bne.n	8007124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e2d9      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007080:	d106      	bne.n	8007090 <HAL_RCC_OscConfig+0x74>
 8007082:	4b85      	ldr	r3, [pc, #532]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a84      	ldr	r2, [pc, #528]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e01d      	b.n	80070cc <HAL_RCC_OscConfig+0xb0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007098:	d10c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x98>
 800709a:	4b7f      	ldr	r3, [pc, #508]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7e      	ldr	r2, [pc, #504]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e00b      	b.n	80070cc <HAL_RCC_OscConfig+0xb0>
 80070b4:	4b78      	ldr	r3, [pc, #480]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4b75      	ldr	r3, [pc, #468]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a74      	ldr	r2, [pc, #464]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d013      	beq.n	80070fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d4:	f7fc fbcc 	bl	8003870 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070dc:	f7fc fbc8 	bl	8003870 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b64      	cmp	r3, #100	@ 0x64
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e29e      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f0      	beq.n	80070dc <HAL_RCC_OscConfig+0xc0>
 80070fa:	e014      	b.n	8007126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fc fbb8 	bl	8003870 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007104:	f7fc fbb4 	bl	8003870 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	@ 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e28a      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007116:	4b60      	ldr	r3, [pc, #384]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0xe8>
 8007122:	e000      	b.n	8007126 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d075      	beq.n	800721e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007132:	4b59      	ldr	r3, [pc, #356]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800713c:	4b56      	ldr	r3, [pc, #344]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b0c      	cmp	r3, #12
 800714a:	d102      	bne.n	8007152 <HAL_RCC_OscConfig+0x136>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d002      	beq.n	8007158 <HAL_RCC_OscConfig+0x13c>
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b04      	cmp	r3, #4
 8007156:	d11f      	bne.n	8007198 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007158:	4b4f      	ldr	r3, [pc, #316]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <HAL_RCC_OscConfig+0x154>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e25d      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b49      	ldr	r3, [pc, #292]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	4946      	ldr	r1, [pc, #280]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007184:	4b45      	ldr	r3, [pc, #276]	@ (800729c <HAL_RCC_OscConfig+0x280>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc fb25 	bl	80037d8 <HAL_InitTick>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d043      	beq.n	800721c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e249      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d023      	beq.n	80071e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fc fb60 	bl	8003870 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fc fb5c 	bl	8003870 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e232      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071c6:	4b34      	ldr	r3, [pc, #208]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d2:	4b31      	ldr	r3, [pc, #196]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	061b      	lsls	r3, r3, #24
 80071e0:	492d      	ldr	r1, [pc, #180]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	604b      	str	r3, [r1, #4]
 80071e6:	e01a      	b.n	800721e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 80071ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fc fb3c 	bl	8003870 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fc fb38 	bl	8003870 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e20e      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800720e:	4b22      	ldr	r3, [pc, #136]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x1e0>
 800721a:	e000      	b.n	800721e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800721c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d041      	beq.n	80072ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01c      	beq.n	800726c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007232:	4b19      	ldr	r3, [pc, #100]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007238:	4a17      	ldr	r2, [pc, #92]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fc fb15 	bl	8003870 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724a:	f7fc fb11 	bl	8003870 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e1e7      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800725c:	4b0e      	ldr	r3, [pc, #56]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0ef      	beq.n	800724a <HAL_RCC_OscConfig+0x22e>
 800726a:	e020      	b.n	80072ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007272:	4a09      	ldr	r2, [pc, #36]	@ (8007298 <HAL_RCC_OscConfig+0x27c>)
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727c:	f7fc faf8 	bl	8003870 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007282:	e00d      	b.n	80072a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007284:	f7fc faf4 	bl	8003870 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d906      	bls.n	80072a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e1ca      	b.n	800762c <HAL_RCC_OscConfig+0x610>
 8007296:	bf00      	nop
 8007298:	40021000 	.word	0x40021000
 800729c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072a0:	4b8c      	ldr	r3, [pc, #560]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ea      	bne.n	8007284 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80a6 	beq.w	8007408 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072bc:	2300      	movs	r3, #0
 80072be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072c0:	4b84      	ldr	r3, [pc, #528]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_OscConfig+0x2b4>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_RCC_OscConfig+0x2b6>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072d6:	4b7f      	ldr	r3, [pc, #508]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072da:	4a7e      	ldr	r2, [pc, #504]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80072dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072e2:	4b7c      	ldr	r3, [pc, #496]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80072e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072ee:	2301      	movs	r3, #1
 80072f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072f2:	4b79      	ldr	r3, [pc, #484]	@ (80074d8 <HAL_RCC_OscConfig+0x4bc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d118      	bne.n	8007330 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072fe:	4b76      	ldr	r3, [pc, #472]	@ (80074d8 <HAL_RCC_OscConfig+0x4bc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a75      	ldr	r2, [pc, #468]	@ (80074d8 <HAL_RCC_OscConfig+0x4bc>)
 8007304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800730a:	f7fc fab1 	bl	8003870 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007312:	f7fc faad 	bl	8003870 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e183      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007324:	4b6c      	ldr	r3, [pc, #432]	@ (80074d8 <HAL_RCC_OscConfig+0x4bc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d108      	bne.n	800734a <HAL_RCC_OscConfig+0x32e>
 8007338:	4b66      	ldr	r3, [pc, #408]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733e:	4a65      	ldr	r2, [pc, #404]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007340:	f043 0301 	orr.w	r3, r3, #1
 8007344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007348:	e024      	b.n	8007394 <HAL_RCC_OscConfig+0x378>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b05      	cmp	r3, #5
 8007350:	d110      	bne.n	8007374 <HAL_RCC_OscConfig+0x358>
 8007352:	4b60      	ldr	r3, [pc, #384]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007358:	4a5e      	ldr	r2, [pc, #376]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800735a:	f043 0304 	orr.w	r3, r3, #4
 800735e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007362:	4b5c      	ldr	r3, [pc, #368]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007368:	4a5a      	ldr	r2, [pc, #360]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007372:	e00f      	b.n	8007394 <HAL_RCC_OscConfig+0x378>
 8007374:	4b57      	ldr	r3, [pc, #348]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	4a56      	ldr	r2, [pc, #344]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007384:	4b53      	ldr	r3, [pc, #332]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	4a52      	ldr	r2, [pc, #328]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800738c:	f023 0304 	bic.w	r3, r3, #4
 8007390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d016      	beq.n	80073ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fc fa68 	bl	8003870 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a4:	f7fc fa64 	bl	8003870 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e138      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ba:	4b46      	ldr	r3, [pc, #280]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0ed      	beq.n	80073a4 <HAL_RCC_OscConfig+0x388>
 80073c8:	e015      	b.n	80073f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ca:	f7fc fa51 	bl	8003870 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fc fa4d 	bl	8003870 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e121      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073e8:	4b3a      	ldr	r3, [pc, #232]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ed      	bne.n	80073d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073f6:	7ffb      	ldrb	r3, [r7, #31]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d105      	bne.n	8007408 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073fc:	4b35      	ldr	r3, [pc, #212]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007400:	4a34      	ldr	r2, [pc, #208]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007406:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d03c      	beq.n	800748e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01c      	beq.n	8007456 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800741c:	4b2d      	ldr	r3, [pc, #180]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800741e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007422:	4a2c      	ldr	r2, [pc, #176]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fc fa20 	bl	8003870 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007434:	f7fc fa1c 	bl	8003870 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0f2      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007446:	4b23      	ldr	r3, [pc, #140]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0ef      	beq.n	8007434 <HAL_RCC_OscConfig+0x418>
 8007454:	e01b      	b.n	800748e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007456:	4b1f      	ldr	r3, [pc, #124]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800745c:	4a1d      	ldr	r2, [pc, #116]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007466:	f7fc fa03 	bl	8003870 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800746e:	f7fc f9ff 	bl	8003870 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e0d5      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007480:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 8007482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1ef      	bne.n	800746e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80c9 	beq.w	800762a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007498:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 030c 	and.w	r3, r3, #12
 80074a0:	2b0c      	cmp	r3, #12
 80074a2:	f000 8083 	beq.w	80075ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d15e      	bne.n	800756c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a08      	ldr	r2, [pc, #32]	@ (80074d4 <HAL_RCC_OscConfig+0x4b8>)
 80074b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fc f9d9 	bl	8003870 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074c0:	e00c      	b.n	80074dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c2:	f7fc f9d5 	bl	8003870 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d905      	bls.n	80074dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e0ab      	b.n	800762c <HAL_RCC_OscConfig+0x610>
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074dc:	4b55      	ldr	r3, [pc, #340]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ec      	bne.n	80074c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e8:	4b52      	ldr	r3, [pc, #328]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	4b52      	ldr	r3, [pc, #328]	@ (8007638 <HAL_RCC_OscConfig+0x61c>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6a11      	ldr	r1, [r2, #32]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074f8:	3a01      	subs	r2, #1
 80074fa:	0112      	lsls	r2, r2, #4
 80074fc:	4311      	orrs	r1, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007502:	0212      	lsls	r2, r2, #8
 8007504:	4311      	orrs	r1, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800750a:	0852      	lsrs	r2, r2, #1
 800750c:	3a01      	subs	r2, #1
 800750e:	0552      	lsls	r2, r2, #21
 8007510:	4311      	orrs	r1, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007516:	0852      	lsrs	r2, r2, #1
 8007518:	3a01      	subs	r2, #1
 800751a:	0652      	lsls	r2, r2, #25
 800751c:	4311      	orrs	r1, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007522:	06d2      	lsls	r2, r2, #27
 8007524:	430a      	orrs	r2, r1
 8007526:	4943      	ldr	r1, [pc, #268]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 8007528:	4313      	orrs	r3, r2
 800752a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800752c:	4b41      	ldr	r3, [pc, #260]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a40      	ldr	r2, [pc, #256]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 8007532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007536:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007538:	4b3e      	ldr	r3, [pc, #248]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a3d      	ldr	r2, [pc, #244]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fc f994 	bl	8003870 <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754c:	f7fc f990 	bl	8003870 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e066      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800755e:	4b35      	ldr	r3, [pc, #212]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0f0      	beq.n	800754c <HAL_RCC_OscConfig+0x530>
 800756a:	e05e      	b.n	800762a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756c:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a30      	ldr	r2, [pc, #192]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 8007572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fc f97a 	bl	8003870 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fc f976 	bl	8003870 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e04c      	b.n	800762c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007592:	4b28      	ldr	r3, [pc, #160]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800759e:	4b25      	ldr	r3, [pc, #148]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	4924      	ldr	r1, [pc, #144]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 80075a4:	4b25      	ldr	r3, [pc, #148]	@ (800763c <HAL_RCC_OscConfig+0x620>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	60cb      	str	r3, [r1, #12]
 80075aa:	e03e      	b.n	800762a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e039      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007634 <HAL_RCC_OscConfig+0x618>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0203 	and.w	r2, r3, #3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d12c      	bne.n	8007626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d6:	3b01      	subs	r3, #1
 80075d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d123      	bne.n	8007626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d11b      	bne.n	8007626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d113      	bne.n	8007626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	085b      	lsrs	r3, r3, #1
 800760a:	3b01      	subs	r3, #1
 800760c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800760e:	429a      	cmp	r2, r3
 8007610:	d109      	bne.n	8007626 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	3b01      	subs	r3, #1
 8007620:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d001      	beq.n	800762a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40021000 	.word	0x40021000
 8007638:	019f800c 	.word	0x019f800c
 800763c:	feeefffc 	.word	0xfeeefffc

08007640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e11e      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007658:	4b91      	ldr	r3, [pc, #580]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b8e      	ldr	r3, [pc, #568]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 020f 	bic.w	r2, r3, #15
 800766e:	498c      	ldr	r1, [pc, #560]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b8a      	ldr	r3, [pc, #552]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e106      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d073      	beq.n	800777c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b03      	cmp	r3, #3
 800769a:	d129      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800769c:	4b81      	ldr	r3, [pc, #516]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0f4      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80076ac:	f000 f9e4 	bl	8007a78 <RCC_GetSysClockFreqFromPLLSource>
 80076b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4a7c      	ldr	r2, [pc, #496]	@ (80078a8 <HAL_RCC_ClockConfig+0x268>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d93f      	bls.n	800773a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076ba:	4b7a      	ldr	r3, [pc, #488]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d033      	beq.n	800773a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d12f      	bne.n	800773a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076da:	4b72      	ldr	r3, [pc, #456]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076e2:	4a70      	ldr	r2, [pc, #448]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80076e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076ea:	2380      	movs	r3, #128	@ 0x80
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	e024      	b.n	800773a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d107      	bne.n	8007708 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076f8:	4b6a      	ldr	r3, [pc, #424]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0c6      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007708:	4b66      	ldr	r3, [pc, #408]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0be      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007718:	f000 f914 	bl	8007944 <HAL_RCC_GetSysClockFreq>
 800771c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4a61      	ldr	r2, [pc, #388]	@ (80078a8 <HAL_RCC_ClockConfig+0x268>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d909      	bls.n	800773a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007726:	4b5f      	ldr	r3, [pc, #380]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800772e:	4a5d      	ldr	r2, [pc, #372]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007736:	2380      	movs	r3, #128	@ 0x80
 8007738:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800773a:	4b5a      	ldr	r3, [pc, #360]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f023 0203 	bic.w	r2, r3, #3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4957      	ldr	r1, [pc, #348]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007748:	4313      	orrs	r3, r2
 800774a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774c:	f7fc f890 	bl	8003870 <HAL_GetTick>
 8007750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007752:	e00a      	b.n	800776a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007754:	f7fc f88c 	bl	8003870 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e095      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800776a:	4b4e      	ldr	r3, [pc, #312]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 020c 	and.w	r2, r3, #12
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	429a      	cmp	r2, r3
 800777a:	d1eb      	bne.n	8007754 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d023      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007794:	4b43      	ldr	r3, [pc, #268]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4a42      	ldr	r2, [pc, #264]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800779a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800779e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80077ac:	4b3d      	ldr	r3, [pc, #244]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077b4:	4a3b      	ldr	r2, [pc, #236]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80077ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077bc:	4b39      	ldr	r3, [pc, #228]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4936      	ldr	r1, [pc, #216]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	608b      	str	r3, [r1, #8]
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b80      	cmp	r3, #128	@ 0x80
 80077d4:	d105      	bne.n	80077e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077d6:	4b33      	ldr	r3, [pc, #204]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	4a32      	ldr	r2, [pc, #200]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 80077dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077e2:	4b2f      	ldr	r3, [pc, #188]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d21d      	bcs.n	800782c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f0:	4b2b      	ldr	r3, [pc, #172]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f023 020f 	bic.w	r2, r3, #15
 80077f8:	4929      	ldr	r1, [pc, #164]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007800:	f7fc f836 	bl	8003870 <HAL_GetTick>
 8007804:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007806:	e00a      	b.n	800781e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007808:	f7fc f832 	bl	8003870 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e03b      	b.n	8007896 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800781e:	4b20      	ldr	r3, [pc, #128]	@ (80078a0 <HAL_RCC_ClockConfig+0x260>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d1ed      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007838:	4b1a      	ldr	r3, [pc, #104]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4917      	ldr	r1, [pc, #92]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007856:	4b13      	ldr	r3, [pc, #76]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	490f      	ldr	r1, [pc, #60]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800786a:	f000 f86b 	bl	8007944 <HAL_RCC_GetSysClockFreq>
 800786e:	4602      	mov	r2, r0
 8007870:	4b0c      	ldr	r3, [pc, #48]	@ (80078a4 <HAL_RCC_ClockConfig+0x264>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	490c      	ldr	r1, [pc, #48]	@ (80078ac <HAL_RCC_ClockConfig+0x26c>)
 800787c:	5ccb      	ldrb	r3, [r1, r3]
 800787e:	f003 031f 	and.w	r3, r3, #31
 8007882:	fa22 f303 	lsr.w	r3, r2, r3
 8007886:	4a0a      	ldr	r2, [pc, #40]	@ (80078b0 <HAL_RCC_ClockConfig+0x270>)
 8007888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800788a:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <HAL_RCC_ClockConfig+0x274>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f7fb ffa2 	bl	80037d8 <HAL_InitTick>
 8007894:	4603      	mov	r3, r0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40022000 	.word	0x40022000
 80078a4:	40021000 	.word	0x40021000
 80078a8:	04c4b400 	.word	0x04c4b400
 80078ac:	0800c318 	.word	0x0800c318
 80078b0:	20000004 	.word	0x20000004
 80078b4:	20000010 	.word	0x20000010

080078b8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08c      	sub	sp, #48	@ 0x30
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c8:	2303      	movs	r3, #3
 80078ca:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80078e4:	029b      	lsls	r3, r3, #10
 80078e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	0c1b      	lsrs	r3, r3, #16
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80078f2:	4b13      	ldr	r3, [pc, #76]	@ (8007940 <HAL_RCC_MCOConfig+0x88>)
 80078f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078f6:	2101      	movs	r1, #1
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	fa01 f303 	lsl.w	r3, r1, r3
 80078fe:	4910      	ldr	r1, [pc, #64]	@ (8007940 <HAL_RCC_MCOConfig+0x88>)
 8007900:	4313      	orrs	r3, r2
 8007902:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	b29b      	uxth	r3, r3
 8007908:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	0d1b      	lsrs	r3, r3, #20
 800790e:	b2db      	uxtb	r3, r3
 8007910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007912:	f107 0310 	add.w	r3, r7, #16
 8007916:	4619      	mov	r1, r3
 8007918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800791a:	f7fe ffe7 	bl	80068ec <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800791e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007924:	4b06      	ldr	r3, [pc, #24]	@ (8007940 <HAL_RCC_MCOConfig+0x88>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	430b      	orrs	r3, r1
 8007932:	4903      	ldr	r1, [pc, #12]	@ (8007940 <HAL_RCC_MCOConfig+0x88>)
 8007934:	4313      	orrs	r3, r2
 8007936:	608b      	str	r3, [r1, #8]
  }
}
 8007938:	bf00      	nop
 800793a:	3730      	adds	r7, #48	@ 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40021000 	.word	0x40021000

08007944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800794a:	4b2c      	ldr	r3, [pc, #176]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
 8007952:	2b04      	cmp	r3, #4
 8007954:	d102      	bne.n	800795c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007956:	4b2a      	ldr	r3, [pc, #168]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	e047      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800795c:	4b27      	ldr	r3, [pc, #156]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b08      	cmp	r3, #8
 8007966:	d102      	bne.n	800796e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007968:	4b26      	ldr	r3, [pc, #152]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	e03e      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800796e:	4b23      	ldr	r3, [pc, #140]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 030c 	and.w	r3, r3, #12
 8007976:	2b0c      	cmp	r3, #12
 8007978:	d136      	bne.n	80079e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800797a:	4b20      	ldr	r3, [pc, #128]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007984:	4b1d      	ldr	r3, [pc, #116]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	3301      	adds	r3, #1
 8007990:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d10c      	bne.n	80079b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007998:	4a1a      	ldr	r2, [pc, #104]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	4a16      	ldr	r2, [pc, #88]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a2:	68d2      	ldr	r2, [r2, #12]
 80079a4:	0a12      	lsrs	r2, r2, #8
 80079a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	617b      	str	r3, [r7, #20]
      break;
 80079b0:	e00c      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079b2:	4a13      	ldr	r2, [pc, #76]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ba:	4a10      	ldr	r2, [pc, #64]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80079bc:	68d2      	ldr	r2, [r2, #12]
 80079be:	0a12      	lsrs	r2, r2, #8
 80079c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]
      break;
 80079ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079cc:	4b0b      	ldr	r3, [pc, #44]	@ (80079fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	0e5b      	lsrs	r3, r3, #25
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	3301      	adds	r3, #1
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	e001      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80079ec:	693b      	ldr	r3, [r7, #16]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40021000 	.word	0x40021000
 8007a00:	00f42400 	.word	0x00f42400
 8007a04:	017d7840 	.word	0x017d7840

08007a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a0c:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000004 	.word	0x20000004

08007a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a24:	f7ff fff0 	bl	8007a08 <HAL_RCC_GetHCLKFreq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	0a1b      	lsrs	r3, r3, #8
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	4904      	ldr	r1, [pc, #16]	@ (8007a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a36:	5ccb      	ldrb	r3, [r1, r3]
 8007a38:	f003 031f 	and.w	r3, r3, #31
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000
 8007a48:	0800c328 	.word	0x0800c328

08007a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a50:	f7ff ffda 	bl	8007a08 <HAL_RCC_GetHCLKFreq>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	0adb      	lsrs	r3, r3, #11
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	4904      	ldr	r1, [pc, #16]	@ (8007a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a62:	5ccb      	ldrb	r3, [r1, r3]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40021000 	.word	0x40021000
 8007a74:	0800c328 	.word	0x0800c328

08007a78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a88:	4b1b      	ldr	r3, [pc, #108]	@ (8007af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	091b      	lsrs	r3, r3, #4
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d10c      	bne.n	8007ab6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a9c:	4a17      	ldr	r2, [pc, #92]	@ (8007afc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	4a14      	ldr	r2, [pc, #80]	@ (8007af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007aa6:	68d2      	ldr	r2, [r2, #12]
 8007aa8:	0a12      	lsrs	r2, r2, #8
 8007aaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	617b      	str	r3, [r7, #20]
    break;
 8007ab4:	e00c      	b.n	8007ad0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ab6:	4a12      	ldr	r2, [pc, #72]	@ (8007b00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	4a0e      	ldr	r2, [pc, #56]	@ (8007af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ac0:	68d2      	ldr	r2, [r2, #12]
 8007ac2:	0a12      	lsrs	r2, r2, #8
 8007ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]
    break;
 8007ace:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ad0:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	0e5b      	lsrs	r3, r3, #25
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	3301      	adds	r3, #1
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007aea:	687b      	ldr	r3, [r7, #4]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	40021000 	.word	0x40021000
 8007afc:	017d7840 	.word	0x017d7840
 8007b00:	00f42400 	.word	0x00f42400

08007b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b10:	2300      	movs	r3, #0
 8007b12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8098 	beq.w	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b22:	2300      	movs	r3, #0
 8007b24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b26:	4b43      	ldr	r3, [pc, #268]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b32:	4b40      	ldr	r3, [pc, #256]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b36:	4a3f      	ldr	r2, [pc, #252]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a39      	ldr	r2, [pc, #228]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b5a:	f7fb fe89 	bl	8003870 <HAL_GetTick>
 8007b5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b60:	e009      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b62:	f7fb fe85 	bl	8003870 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d902      	bls.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	74fb      	strb	r3, [r7, #19]
        break;
 8007b74:	e005      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b76:	4b30      	ldr	r3, [pc, #192]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0ef      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007b82:	7cfb      	ldrb	r3, [r7, #19]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d159      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b88:	4b2a      	ldr	r3, [pc, #168]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01e      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d019      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ba4:	4b23      	ldr	r3, [pc, #140]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bb0:	4b20      	ldr	r3, [pc, #128]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bd0:	4a18      	ldr	r2, [pc, #96]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be2:	f7fb fe45 	bl	8003870 <HAL_GetTick>
 8007be6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007be8:	e00b      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bea:	f7fb fe41 	bl	8003870 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d902      	bls.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	74fb      	strb	r3, [r7, #19]
            break;
 8007c00:	e006      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0ec      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c10:	7cfb      	ldrb	r3, [r7, #19]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c16:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c24:	4903      	ldr	r1, [pc, #12]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c2c:	e008      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c2e:	7cfb      	ldrb	r3, [r7, #19]
 8007c30:	74bb      	strb	r3, [r7, #18]
 8007c32:	e005      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3c:	7cfb      	ldrb	r3, [r7, #19]
 8007c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c40:	7c7b      	ldrb	r3, [r7, #17]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d105      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c46:	4ba7      	ldr	r3, [pc, #668]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c64:	f023 0203 	bic.w	r2, r3, #3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	499d      	ldr	r1, [pc, #628]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c80:	4b98      	ldr	r3, [pc, #608]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c86:	f023 020c 	bic.w	r2, r3, #12
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	4995      	ldr	r1, [pc, #596]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ca2:	4b90      	ldr	r3, [pc, #576]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	498c      	ldr	r1, [pc, #560]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cc4:	4b87      	ldr	r3, [pc, #540]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	4984      	ldr	r1, [pc, #528]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	497b      	ldr	r1, [pc, #492]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d08:	4b76      	ldr	r3, [pc, #472]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	4973      	ldr	r1, [pc, #460]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	496a      	ldr	r1, [pc, #424]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d4c:	4b65      	ldr	r3, [pc, #404]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	4962      	ldr	r1, [pc, #392]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7c:	4959      	ldr	r1, [pc, #356]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d90:	4b54      	ldr	r3, [pc, #336]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d96:	f023 0203 	bic.w	r2, r3, #3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	4951      	ldr	r1, [pc, #324]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007db2:	4b4c      	ldr	r3, [pc, #304]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc0:	4948      	ldr	r1, [pc, #288]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d015      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dd4:	4b43      	ldr	r3, [pc, #268]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de2:	4940      	ldr	r1, [pc, #256]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007df2:	d105      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007df4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4a3a      	ldr	r2, [pc, #232]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dfe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d015      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e0c:	4b35      	ldr	r3, [pc, #212]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1a:	4932      	ldr	r1, [pc, #200]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e2a:	d105      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e36:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d015      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e44:	4b27      	ldr	r3, [pc, #156]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	4924      	ldr	r1, [pc, #144]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e62:	d105      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e64:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d015      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8a:	4916      	ldr	r1, [pc, #88]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e9a:	d105      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4a10      	ldr	r2, [pc, #64]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ea6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d019      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed2:	d109      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed4:	4b03      	ldr	r3, [pc, #12]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4a02      	ldr	r2, [pc, #8]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ede:	60d3      	str	r3, [r2, #12]
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ee2:	bf00      	nop
 8007ee4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d015      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ef4:	4b29      	ldr	r3, [pc, #164]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f02:	4926      	ldr	r1, [pc, #152]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f12:	d105      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f14:	4b21      	ldr	r3, [pc, #132]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	4a20      	ldr	r2, [pc, #128]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d015      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3a:	4918      	ldr	r1, [pc, #96]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4a:	d105      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f4c:	4b13      	ldr	r3, [pc, #76]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4a12      	ldr	r2, [pc, #72]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d015      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f64:	4b0d      	ldr	r3, [pc, #52]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f72:	490a      	ldr	r1, [pc, #40]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f82:	d105      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4a04      	ldr	r2, [pc, #16]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40021000 	.word	0x40021000

08007fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e09d      	b.n	80080ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc2:	d009      	beq.n	8007fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	61da      	str	r2, [r3, #28]
 8007fca:	e005      	b.n	8007fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fa fc56 	bl	80028a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800800e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008018:	d902      	bls.n	8008020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e002      	b.n	8008026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800802e:	d007      	beq.n	8008040 <HAL_SPI_Init+0xa0>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008038:	d002      	beq.n	8008040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	ea42 0103 	orr.w	r1, r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	f003 0204 	and.w	r2, r3, #4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80080bc:	ea42 0103 	orr.w	r1, r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_SPI_Transmit+0x22>
 8008114:	2302      	movs	r3, #2
 8008116:	e15f      	b.n	80083d8 <HAL_SPI_Transmit+0x2e2>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008120:	f7fb fba6 	bl	8003870 <HAL_GetTick>
 8008124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	d002      	beq.n	800813c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008136:	2302      	movs	r3, #2
 8008138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800813a:	e148      	b.n	80083ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_SPI_Transmit+0x52>
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800814c:	e13f      	b.n	80083ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2203      	movs	r2, #3
 8008152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008198:	d10f      	bne.n	80081ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c4:	2b40      	cmp	r3, #64	@ 0x40
 80081c6:	d007      	beq.n	80081d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081e0:	d94f      	bls.n	8008282 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_SPI_Transmit+0xfa>
 80081ea:	8afb      	ldrh	r3, [r7, #22]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d142      	bne.n	8008276 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	1c9a      	adds	r2, r3, #2
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008214:	e02f      	b.n	8008276 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b02      	cmp	r3, #2
 8008222:	d112      	bne.n	800824a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	881a      	ldrh	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	1c9a      	adds	r2, r3, #2
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800823e:	b29b      	uxth	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008248:	e015      	b.n	8008276 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800824a:	f7fb fb11 	bl	8003870 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d803      	bhi.n	8008262 <HAL_SPI_Transmit+0x16c>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008260:	d102      	bne.n	8008268 <HAL_SPI_Transmit+0x172>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008274:	e0ab      	b.n	80083ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1ca      	bne.n	8008216 <HAL_SPI_Transmit+0x120>
 8008280:	e080      	b.n	8008384 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_SPI_Transmit+0x19a>
 800828a:	8afb      	ldrh	r3, [r7, #22]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d174      	bne.n	800837a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d912      	bls.n	80082c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	881a      	ldrh	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	1c9a      	adds	r2, r3, #2
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b02      	subs	r3, #2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082be:	e05c      	b.n	800837a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	330c      	adds	r3, #12
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80082e6:	e048      	b.n	800837a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d12b      	bne.n	800834e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d912      	bls.n	8008326 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	881a      	ldrh	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	1c9a      	adds	r2, r3, #2
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b02      	subs	r3, #2
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008324:	e029      	b.n	800837a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	330c      	adds	r3, #12
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800834c:	e015      	b.n	800837a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834e:	f7fb fa8f 	bl	8003870 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d803      	bhi.n	8008366 <HAL_SPI_Transmit+0x270>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d102      	bne.n	800836c <HAL_SPI_Transmit+0x276>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008378:	e029      	b.n	80083ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1b1      	bne.n	80082e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f947 	bl	800861c <SPI_EndRxTxTransaction>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e003      	b.n	80083ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80083d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083f0:	f7fb fa3e 	bl	8003870 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008400:	f7fb fa36 	bl	8003870 <HAL_GetTick>
 8008404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008406:	4b39      	ldr	r3, [pc, #228]	@ (80084ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	015b      	lsls	r3, r3, #5
 800840c:	0d1b      	lsrs	r3, r3, #20
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008416:	e054      	b.n	80084c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d050      	beq.n	80084c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008420:	f7fb fa26 	bl	8003870 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	429a      	cmp	r2, r3
 800842e:	d902      	bls.n	8008436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d13d      	bne.n	80084b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844e:	d111      	bne.n	8008474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008458:	d004      	beq.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008462:	d107      	bne.n	8008474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847c:	d10f      	bne.n	800849e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800849c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e017      	b.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3b01      	subs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4013      	ands	r3, r2
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	bf0c      	ite	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	2300      	movne	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d19b      	bne.n	8008418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000004 	.word	0x20000004

080084f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	@ 0x28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008502:	f7fb f9b5 	bl	8003870 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	4413      	add	r3, r2
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008512:	f7fb f9ad 	bl	8003870 <HAL_GetTick>
 8008516:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008520:	4b3d      	ldr	r3, [pc, #244]	@ (8008618 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	00da      	lsls	r2, r3, #3
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	0d1b      	lsrs	r3, r3, #20
 8008530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008538:	e060      	b.n	80085fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008540:	d107      	bne.n	8008552 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008550:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d050      	beq.n	80085fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800855a:	f7fb f989 	bl	8003870 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008566:	429a      	cmp	r2, r3
 8008568:	d902      	bls.n	8008570 <SPI_WaitFifoStateUntilTimeout+0x80>
 800856a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856c:	2b00      	cmp	r3, #0
 800856e:	d13d      	bne.n	80085ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800857e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008588:	d111      	bne.n	80085ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008592:	d004      	beq.n	800859e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859c:	d107      	bne.n	80085ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b6:	d10f      	bne.n	80085d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e010      	b.n	800860e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4013      	ands	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	429a      	cmp	r2, r3
 800860a:	d196      	bne.n	800853a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3728      	adds	r7, #40	@ 0x28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000004 	.word	0x20000004

0800861c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff ff5b 	bl	80084f0 <SPI_WaitFifoStateUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008644:	f043 0220 	orr.w	r2, r3, #32
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e027      	b.n	80086a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fec0 	bl	80083e0 <SPI_WaitFlagStateUntilTimeout>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e014      	b.n	80086a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2200      	movs	r2, #0
 800867e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff ff34 	bl	80084f0 <SPI_WaitFifoStateUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e000      	b.n	80086a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e049      	b.n	800874e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fa f92c 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f000 fae0 	bl	8008cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	d001      	beq.n	8008770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e04c      	b.n	800880a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a26      	ldr	r2, [pc, #152]	@ (8008818 <HAL_TIM_Base_Start+0xc0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d022      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878a:	d01d      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a22      	ldr	r2, [pc, #136]	@ (800881c <HAL_TIM_Base_Start+0xc4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d018      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a21      	ldr	r2, [pc, #132]	@ (8008820 <HAL_TIM_Base_Start+0xc8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008824 <HAL_TIM_Base_Start+0xcc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00e      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008828 <HAL_TIM_Base_Start+0xd0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1c      	ldr	r2, [pc, #112]	@ (800882c <HAL_TIM_Base_Start+0xd4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <HAL_TIM_Base_Start+0x70>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008830 <HAL_TIM_Base_Start+0xd8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d115      	bne.n	80087f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	4b19      	ldr	r3, [pc, #100]	@ (8008834 <HAL_TIM_Base_Start+0xdc>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d015      	beq.n	8008806 <HAL_TIM_Base_Start+0xae>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e0:	d011      	beq.n	8008806 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f042 0201 	orr.w	r2, r2, #1
 80087f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f2:	e008      	b.n	8008806 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e000      	b.n	8008808 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008806:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40012c00 	.word	0x40012c00
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40013400 	.word	0x40013400
 800882c:	40014000 	.word	0x40014000
 8008830:	40015000 	.word	0x40015000
 8008834:	00010007 	.word	0x00010007

08008838 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	f241 1311 	movw	r3, #4369	@ 0x1111
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10f      	bne.n	8008870 <HAL_TIM_Base_Stop+0x38>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	f244 4344 	movw	r3, #17476	@ 0x4444
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d107      	bne.n	8008870 <HAL_TIM_Base_Stop+0x38>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0201 	bic.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e049      	b.n	800892c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f841 	bl	8008934 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f000 f9f1 	bl	8008cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008962:	2302      	movs	r3, #2
 8008964:	e088      	b.n	8008a78 <HAL_TIM_IC_ConfigChannel+0x130>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11b      	bne.n	80089ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008984:	f000 fa46 	bl	8008e14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 020c 	bic.w	r2, r2, #12
 8008996:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6999      	ldr	r1, [r3, #24]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	619a      	str	r2, [r3, #24]
 80089aa:	e060      	b.n	8008a6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d11c      	bne.n	80089ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80089c2:	f000 faca 	bl	8008f5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80089d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6999      	ldr	r1, [r3, #24]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	021a      	lsls	r2, r3, #8
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	619a      	str	r2, [r3, #24]
 80089ea:	e040      	b.n	8008a6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d11b      	bne.n	8008a2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008a02:	f000 fb17 	bl	8009034 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 020c 	bic.w	r2, r2, #12
 8008a14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69d9      	ldr	r1, [r3, #28]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	61da      	str	r2, [r3, #28]
 8008a28:	e021      	b.n	8008a6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b0c      	cmp	r3, #12
 8008a2e:	d11c      	bne.n	8008a6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008a40:	f000 fb34 	bl	80090ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69da      	ldr	r2, [r3, #28]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008a52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69d9      	ldr	r1, [r3, #28]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	021a      	lsls	r2, r3, #8
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	61da      	str	r2, [r3, #28]
 8008a68:	e001      	b.n	8008a6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d101      	bne.n	8008a9c <HAL_TIM_ConfigClockSource+0x1c>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e0f6      	b.n	8008c8a <HAL_TIM_ConfigClockSource+0x20a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a6f      	ldr	r2, [pc, #444]	@ (8008c94 <HAL_TIM_ConfigClockSource+0x214>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	f000 80c1 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008adc:	4a6d      	ldr	r2, [pc, #436]	@ (8008c94 <HAL_TIM_ConfigClockSource+0x214>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f200 80c6 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8008c98 <HAL_TIM_ConfigClockSource+0x218>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f000 80b9 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008aec:	4a6a      	ldr	r2, [pc, #424]	@ (8008c98 <HAL_TIM_ConfigClockSource+0x218>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f200 80be 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008af4:	4a69      	ldr	r2, [pc, #420]	@ (8008c9c <HAL_TIM_ConfigClockSource+0x21c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	f000 80b1 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008afc:	4a67      	ldr	r2, [pc, #412]	@ (8008c9c <HAL_TIM_ConfigClockSource+0x21c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f200 80b6 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b04:	4a66      	ldr	r2, [pc, #408]	@ (8008ca0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f000 80a9 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b0c:	4a64      	ldr	r2, [pc, #400]	@ (8008ca0 <HAL_TIM_ConfigClockSource+0x220>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	f200 80ae 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b14:	4a63      	ldr	r2, [pc, #396]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f000 80a1 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b1c:	4a61      	ldr	r2, [pc, #388]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x224>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	f200 80a6 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b24:	4a60      	ldr	r2, [pc, #384]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	f000 8099 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x228>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f200 809e 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b38:	f000 8091 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b40:	f200 8096 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b48:	f000 8089 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b50:	f200 808e 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d03e      	beq.n	8008bd8 <HAL_TIM_ConfigClockSource+0x158>
 8008b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b5e:	f200 8087 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b66:	f000 8086 	beq.w	8008c76 <HAL_TIM_ConfigClockSource+0x1f6>
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b6e:	d87f      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b70:	2b70      	cmp	r3, #112	@ 0x70
 8008b72:	d01a      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0x12a>
 8008b74:	2b70      	cmp	r3, #112	@ 0x70
 8008b76:	d87b      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b78:	2b60      	cmp	r3, #96	@ 0x60
 8008b7a:	d050      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x19e>
 8008b7c:	2b60      	cmp	r3, #96	@ 0x60
 8008b7e:	d877      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b80:	2b50      	cmp	r3, #80	@ 0x50
 8008b82:	d03c      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x17e>
 8008b84:	2b50      	cmp	r3, #80	@ 0x50
 8008b86:	d873      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d058      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x1be>
 8008b8c:	2b40      	cmp	r3, #64	@ 0x40
 8008b8e:	d86f      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b90:	2b30      	cmp	r3, #48	@ 0x30
 8008b92:	d064      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b94:	2b30      	cmp	r3, #48	@ 0x30
 8008b96:	d86b      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d060      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d867      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d05c      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d05a      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x1de>
 8008ba8:	e062      	b.n	8008c70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bba:	f000 fad1 	bl	8009160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	609a      	str	r2, [r3, #8]
      break;
 8008bd6:	e04f      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008be8:	f000 faba 	bl	8009160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bfa:	609a      	str	r2, [r3, #8]
      break;
 8008bfc:	e03c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 f976 	bl	8008efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2150      	movs	r1, #80	@ 0x50
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fa85 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e02c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f000 f9d2 	bl	8008fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2160      	movs	r1, #96	@ 0x60
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fa75 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008c3c:	e01c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 f956 	bl	8008efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2140      	movs	r1, #64	@ 0x40
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fa65 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008c5c:	e00c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f000 fa5c 	bl	8009126 <TIM_ITRx_SetConfig>
      break;
 8008c6e:	e003      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e000      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	00100070 	.word	0x00100070
 8008c98:	00100060 	.word	0x00100060
 8008c9c:	00100050 	.word	0x00100050
 8008ca0:	00100040 	.word	0x00100040
 8008ca4:	00100030 	.word	0x00100030
 8008ca8:	00100020 	.word	0x00100020

08008cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a4c      	ldr	r2, [pc, #304]	@ (8008df0 <TIM_Base_SetConfig+0x144>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d017      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cca:	d013      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a49      	ldr	r2, [pc, #292]	@ (8008df4 <TIM_Base_SetConfig+0x148>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a48      	ldr	r2, [pc, #288]	@ (8008df8 <TIM_Base_SetConfig+0x14c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a47      	ldr	r2, [pc, #284]	@ (8008dfc <TIM_Base_SetConfig+0x150>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a46      	ldr	r2, [pc, #280]	@ (8008e00 <TIM_Base_SetConfig+0x154>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0x48>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a45      	ldr	r2, [pc, #276]	@ (8008e04 <TIM_Base_SetConfig+0x158>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d108      	bne.n	8008d06 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a39      	ldr	r2, [pc, #228]	@ (8008df0 <TIM_Base_SetConfig+0x144>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d023      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d14:	d01f      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a36      	ldr	r2, [pc, #216]	@ (8008df4 <TIM_Base_SetConfig+0x148>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d01b      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a35      	ldr	r2, [pc, #212]	@ (8008df8 <TIM_Base_SetConfig+0x14c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d017      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a34      	ldr	r2, [pc, #208]	@ (8008dfc <TIM_Base_SetConfig+0x150>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a33      	ldr	r2, [pc, #204]	@ (8008e00 <TIM_Base_SetConfig+0x154>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a33      	ldr	r2, [pc, #204]	@ (8008e08 <TIM_Base_SetConfig+0x15c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a32      	ldr	r2, [pc, #200]	@ (8008e0c <TIM_Base_SetConfig+0x160>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a31      	ldr	r2, [pc, #196]	@ (8008e10 <TIM_Base_SetConfig+0x164>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_Base_SetConfig+0xaa>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a2c      	ldr	r2, [pc, #176]	@ (8008e04 <TIM_Base_SetConfig+0x158>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d108      	bne.n	8008d68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a18      	ldr	r2, [pc, #96]	@ (8008df0 <TIM_Base_SetConfig+0x144>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d013      	beq.n	8008dbc <TIM_Base_SetConfig+0x110>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1a      	ldr	r2, [pc, #104]	@ (8008e00 <TIM_Base_SetConfig+0x154>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00f      	beq.n	8008dbc <TIM_Base_SetConfig+0x110>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008e08 <TIM_Base_SetConfig+0x15c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <TIM_Base_SetConfig+0x110>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a19      	ldr	r2, [pc, #100]	@ (8008e0c <TIM_Base_SetConfig+0x160>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d007      	beq.n	8008dbc <TIM_Base_SetConfig+0x110>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a18      	ldr	r2, [pc, #96]	@ (8008e10 <TIM_Base_SetConfig+0x164>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d003      	beq.n	8008dbc <TIM_Base_SetConfig+0x110>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a13      	ldr	r2, [pc, #76]	@ (8008e04 <TIM_Base_SetConfig+0x158>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d103      	bne.n	8008dc4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d105      	bne.n	8008de2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f023 0201 	bic.w	r2, r3, #1
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	611a      	str	r2, [r3, #16]
  }
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40012c00 	.word	0x40012c00
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40000800 	.word	0x40000800
 8008dfc:	40000c00 	.word	0x40000c00
 8008e00:	40013400 	.word	0x40013400
 8008e04:	40015000 	.word	0x40015000
 8008e08:	40014000 	.word	0x40014000
 8008e0c:	40014400 	.word	0x40014400
 8008e10:	40014800 	.word	0x40014800

08008e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f023 0201 	bic.w	r2, r3, #1
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a28      	ldr	r2, [pc, #160]	@ (8008ee0 <TIM_TI1_SetConfig+0xcc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d01b      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e48:	d017      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	@ (8008ee4 <TIM_TI1_SetConfig+0xd0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d013      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4a24      	ldr	r2, [pc, #144]	@ (8008ee8 <TIM_TI1_SetConfig+0xd4>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00f      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a23      	ldr	r2, [pc, #140]	@ (8008eec <TIM_TI1_SetConfig+0xd8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00b      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a22      	ldr	r2, [pc, #136]	@ (8008ef0 <TIM_TI1_SetConfig+0xdc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d007      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4a21      	ldr	r2, [pc, #132]	@ (8008ef4 <TIM_TI1_SetConfig+0xe0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d003      	beq.n	8008e7a <TIM_TI1_SetConfig+0x66>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4a20      	ldr	r2, [pc, #128]	@ (8008ef8 <TIM_TI1_SetConfig+0xe4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d101      	bne.n	8008e7e <TIM_TI1_SetConfig+0x6a>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <TIM_TI1_SetConfig+0x6c>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e003      	b.n	8008e9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f043 0301 	orr.w	r3, r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f023 030a 	bic.w	r3, r3, #10
 8008eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f003 030a 	and.w	r3, r3, #10
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	621a      	str	r2, [r3, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40000400 	.word	0x40000400
 8008ee8:	40000800 	.word	0x40000800
 8008eec:	40000c00 	.word	0x40000c00
 8008ef0:	40013400 	.word	0x40013400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40015000 	.word	0x40015000

08008efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 030a 	bic.w	r3, r3, #10
 8008f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	621a      	str	r2, [r3, #32]
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
 8008f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f023 0210 	bic.w	r2, r3, #16
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	621a      	str	r2, [r3, #32]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f023 0210 	bic.w	r2, r3, #16
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	031b      	lsls	r3, r3, #12
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	621a      	str	r2, [r3, #32]
}
 8009028:	bf00      	nop
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4313      	orrs	r3, r2
 8009068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009070:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	b2db      	uxtb	r3, r3
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009084:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	021b      	lsls	r3, r3, #8
 800908a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	621a      	str	r2, [r3, #32]
}
 80090a0:	bf00      	nop
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	031b      	lsls	r3, r3, #12
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80090fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	031b      	lsls	r3, r3, #12
 8009104:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800913c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	f043 0307 	orr.w	r3, r3, #7
 800914c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	609a      	str	r2, [r3, #8]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800917a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	021a      	lsls	r2, r3, #8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	431a      	orrs	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	609a      	str	r2, [r3, #8]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e074      	b.n	80092a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a34      	ldr	r2, [pc, #208]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d009      	beq.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a33      	ldr	r2, [pc, #204]	@ (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d004      	beq.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a31      	ldr	r2, [pc, #196]	@ (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d108      	bne.n	8009208 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800920e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a21      	ldr	r2, [pc, #132]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d022      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009238:	d01d      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1f      	ldr	r2, [pc, #124]	@ (80092bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d018      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1d      	ldr	r2, [pc, #116]	@ (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d013      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1c      	ldr	r2, [pc, #112]	@ (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00e      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a15      	ldr	r2, [pc, #84]	@ (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d009      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a18      	ldr	r2, [pc, #96]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d004      	beq.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d10c      	bne.n	8009290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800927c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	4313      	orrs	r3, r2
 8009286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40012c00 	.word	0x40012c00
 80092b4:	40013400 	.word	0x40013400
 80092b8:	40015000 	.word	0x40015000
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800
 80092c4:	40000c00 	.word	0x40000c00
 80092c8:	40014000 	.word	0x40014000

080092cc <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_TIMEx_TISelection+0x1e>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e073      	b.n	80093d2 <HAL_TIMEx_TISelection+0x106>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b0c      	cmp	r3, #12
 80092f6:	d864      	bhi.n	80093c2 <HAL_TIMEx_TISelection+0xf6>
 80092f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009300 <HAL_TIMEx_TISelection+0x34>)
 80092fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fe:	bf00      	nop
 8009300:	08009335 	.word	0x08009335
 8009304:	080093c3 	.word	0x080093c3
 8009308:	080093c3 	.word	0x080093c3
 800930c:	080093c3 	.word	0x080093c3
 8009310:	08009381 	.word	0x08009381
 8009314:	080093c3 	.word	0x080093c3
 8009318:	080093c3 	.word	0x080093c3
 800931c:	080093c3 	.word	0x080093c3
 8009320:	08009397 	.word	0x08009397
 8009324:	080093c3 	.word	0x080093c3
 8009328:	080093c3 	.word	0x080093c3
 800932c:	080093c3 	.word	0x080093c3
 8009330:	080093ad 	.word	0x080093ad
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800933a:	f023 010f 	bic.w	r1, r3, #15
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	430a      	orrs	r2, r1
 8009346:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a24      	ldr	r2, [pc, #144]	@ (80093e0 <HAL_TIMEx_TISelection+0x114>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_TIMEx_TISelection+0x90>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a23      	ldr	r2, [pc, #140]	@ (80093e4 <HAL_TIMEx_TISelection+0x118>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d108      	bne.n	800936e <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0201 	orr.w	r2, r2, #1
 800936a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800936c:	e02c      	b.n	80093c8 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800937e:	e023      	b.n	80093c8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009386:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	430a      	orrs	r2, r1
 8009392:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009394:	e018      	b.n	80093c8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800939c:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80093aa:	e00d      	b.n	80093c8 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	430a      	orrs	r2, r1
 80093be:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80093c0:	e002      	b.n	80093c8 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	75fb      	strb	r3, [r7, #23]
      break;
 80093c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	40014400 	.word	0x40014400
 80093e4:	40014800 	.word	0x40014800

080093e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e042      	b.n	8009480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009400:	2b00      	cmp	r3, #0
 8009402:	d106      	bne.n	8009412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7f9 fb15 	bl	8002a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2224      	movs	r2, #36	@ 0x24
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fe8e 	bl	800a154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb8f 	bl	8009b5c <UART_SetConfig>
 800943e:	4603      	mov	r3, r0
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e01b      	b.n	8009480 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 ff0d 	bl	800a298 <UART_CheckIdleState>
 800947e:	4603      	mov	r3, r0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b0ba      	sub	sp, #232	@ 0xe8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80094b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094b6:	4013      	ands	r3, r2
 80094b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d11b      	bne.n	80094fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d015      	beq.n	80094fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 8300 	beq.w	8009af2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
      }
      return;
 80094fa:	e2fa      	b.n	8009af2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8123 	beq.w	800974c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009506:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800950a:	4b8d      	ldr	r3, [pc, #564]	@ (8009740 <HAL_UART_IRQHandler+0x2b8>)
 800950c:	4013      	ands	r3, r2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009512:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009516:	4b8b      	ldr	r3, [pc, #556]	@ (8009744 <HAL_UART_IRQHandler+0x2bc>)
 8009518:	4013      	ands	r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8116 	beq.w	800974c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d011      	beq.n	8009550 <HAL_UART_IRQHandler+0xc8>
 800952c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2201      	movs	r2, #1
 800953e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	f043 0201 	orr.w	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d011      	beq.n	8009580 <HAL_UART_IRQHandler+0xf8>
 800955c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2202      	movs	r2, #2
 800956e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009576:	f043 0204 	orr.w	r2, r3, #4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d011      	beq.n	80095b0 <HAL_UART_IRQHandler+0x128>
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2204      	movs	r2, #4
 800959e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a6:	f043 0202 	orr.w	r2, r3, #2
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d017      	beq.n	80095ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d105      	bne.n	80095d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009740 <HAL_UART_IRQHandler+0x2b8>)
 80095ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2208      	movs	r2, #8
 80095da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e2:	f043 0208 	orr.w	r2, r3, #8
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d012      	beq.n	800961e <HAL_UART_IRQHandler+0x196>
 80095f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800960c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009614:	f043 0220 	orr.w	r2, r3, #32
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8266 	beq.w	8009af6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800962a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d013      	beq.n	800965e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009664:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009672:	2b40      	cmp	r3, #64	@ 0x40
 8009674:	d005      	beq.n	8009682 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800967a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800967e:	2b00      	cmp	r3, #0
 8009680:	d054      	beq.n	800972c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 f807 	bl	800a696 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009692:	2b40      	cmp	r3, #64	@ 0x40
 8009694:	d146      	bne.n	8009724 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1d9      	bne.n	8009696 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d017      	beq.n	800971c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f2:	4a15      	ldr	r2, [pc, #84]	@ (8009748 <HAL_UART_IRQHandler+0x2c0>)
 80096f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fc ff3f 	bl	8006580 <HAL_DMA_Abort_IT>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d019      	beq.n	800973c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009716:	4610      	mov	r0, r2
 8009718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971a:	e00f      	b.n	800973c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa13 	bl	8009b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009722:	e00b      	b.n	800973c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fa0f 	bl	8009b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972a:	e007      	b.n	800973c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fa0b 	bl	8009b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800973a:	e1dc      	b.n	8009af6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	bf00      	nop
    return;
 800973e:	e1da      	b.n	8009af6 <HAL_UART_IRQHandler+0x66e>
 8009740:	10000001 	.word	0x10000001
 8009744:	04000120 	.word	0x04000120
 8009748:	0800a94d 	.word	0x0800a94d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009750:	2b01      	cmp	r3, #1
 8009752:	f040 8170 	bne.w	8009a36 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 8169 	beq.w	8009a36 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8162 	beq.w	8009a36 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2210      	movs	r2, #16
 8009778:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009784:	2b40      	cmp	r3, #64	@ 0x40
 8009786:	f040 80d8 	bne.w	800993a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80af 	beq.w	8009900 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097ac:	429a      	cmp	r2, r3
 80097ae:	f080 80a7 	bcs.w	8009900 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 8087 	bne.w	80098de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80097e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80097fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1da      	bne.n	80097d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800982a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800982c:	f023 0301 	bic.w	r3, r3, #1
 8009830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800983e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009842:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009846:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800984a:	e841 2300 	strex	r3, r2, [r1]
 800984e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e1      	bne.n	800981a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800986c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3308      	adds	r3, #8
 8009876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800987a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800987c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e3      	bne.n	8009856 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098ac:	f023 0310 	bic.w	r3, r3, #16
 80098b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e4      	bne.n	800989c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fc fdf8 	bl	80064ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7f9 fb0b 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80098fe:	e0fc      	b.n	8009afa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800990a:	429a      	cmp	r2, r3
 800990c:	f040 80f5 	bne.w	8009afa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b20      	cmp	r3, #32
 8009920:	f040 80eb 	bne.w	8009afa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7f9 faee 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
      return;
 8009938:	e0df      	b.n	8009afa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009946:	b29b      	uxth	r3, r3
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80d1 	beq.w	8009afe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800995c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80cc 	beq.w	8009afe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009976:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800997a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009988:	647b      	str	r3, [r7, #68]	@ 0x44
 800998a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800998e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e4      	bne.n	8009966 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	623b      	str	r3, [r7, #32]
   return(result);
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099b2:	f023 0301 	bic.w	r3, r3, #1
 80099b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3308      	adds	r3, #8
 80099c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80099c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80099c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e1      	bne.n	800999c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f023 0310 	bic.w	r3, r3, #16
 8009a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	69b9      	ldr	r1, [r7, #24]
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e4      	bne.n	80099ec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7f9 fa70 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a34:	e063      	b.n	8009afe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00e      	beq.n	8009a60 <HAL_UART_IRQHandler+0x5d8>
 8009a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d008      	beq.n	8009a60 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 ffb8 	bl	800a9ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a5e:	e051      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d014      	beq.n	8009a96 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d008      	beq.n	8009a96 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d03a      	beq.n	8009b02 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	4798      	blx	r3
    }
    return;
 8009a94:	e035      	b.n	8009b02 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x62e>
 8009aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 ff62 	bl	800a978 <UART_EndTransmit_IT>
    return;
 8009ab4:	e026      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x64e>
 8009ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 ff91 	bl	800a9f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ad4:	e016      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ada:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d010      	beq.n	8009b04 <HAL_UART_IRQHandler+0x67c>
 8009ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da0c      	bge.n	8009b04 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 ff79 	bl	800a9e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009af0:	e008      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
      return;
 8009af2:	bf00      	nop
 8009af4:	e006      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
    return;
 8009af6:	bf00      	nop
 8009af8:	e004      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
      return;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
      return;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <HAL_UART_IRQHandler+0x67c>
    return;
 8009b02:	bf00      	nop
  }
}
 8009b04:	37e8      	adds	r7, #232	@ 0xe8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop

08009b0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b60:	b08c      	sub	sp, #48	@ 0x30
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	431a      	orrs	r2, r3
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4baa      	ldr	r3, [pc, #680]	@ (8009e34 <UART_SetConfig+0x2d8>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b94:	430b      	orrs	r3, r1
 8009b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a9f      	ldr	r2, [pc, #636]	@ (8009e38 <UART_SetConfig+0x2dc>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d004      	beq.n	8009bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009bd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	f023 010f 	bic.w	r1, r3, #15
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a90      	ldr	r2, [pc, #576]	@ (8009e3c <UART_SetConfig+0x2e0>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d125      	bne.n	8009c4c <UART_SetConfig+0xf0>
 8009c00:	4b8f      	ldr	r3, [pc, #572]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c06:	f003 0303 	and.w	r3, r3, #3
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d81a      	bhi.n	8009c44 <UART_SetConfig+0xe8>
 8009c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <UART_SetConfig+0xb8>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c35 	.word	0x08009c35
 8009c1c:	08009c2d 	.word	0x08009c2d
 8009c20:	08009c3d 	.word	0x08009c3d
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2a:	e116      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c32:	e112      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009c34:	2304      	movs	r3, #4
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c3a:	e10e      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c42:	e10a      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c4a:	e106      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a7c      	ldr	r2, [pc, #496]	@ (8009e44 <UART_SetConfig+0x2e8>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d138      	bne.n	8009cc8 <UART_SetConfig+0x16c>
 8009c56:	4b7a      	ldr	r3, [pc, #488]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5c:	f003 030c 	and.w	r3, r3, #12
 8009c60:	2b0c      	cmp	r3, #12
 8009c62:	d82d      	bhi.n	8009cc0 <UART_SetConfig+0x164>
 8009c64:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <UART_SetConfig+0x110>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009ca1 	.word	0x08009ca1
 8009c70:	08009cc1 	.word	0x08009cc1
 8009c74:	08009cc1 	.word	0x08009cc1
 8009c78:	08009cc1 	.word	0x08009cc1
 8009c7c:	08009cb1 	.word	0x08009cb1
 8009c80:	08009cc1 	.word	0x08009cc1
 8009c84:	08009cc1 	.word	0x08009cc1
 8009c88:	08009cc1 	.word	0x08009cc1
 8009c8c:	08009ca9 	.word	0x08009ca9
 8009c90:	08009cc1 	.word	0x08009cc1
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	08009cc1 	.word	0x08009cc1
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ca6:	e0d8      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cae:	e0d4      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009cb0:	2304      	movs	r3, #4
 8009cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cb6:	e0d0      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cbe:	e0cc      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cc6:	e0c8      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8009e48 <UART_SetConfig+0x2ec>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d125      	bne.n	8009d1e <UART_SetConfig+0x1c2>
 8009cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009cdc:	2b30      	cmp	r3, #48	@ 0x30
 8009cde:	d016      	beq.n	8009d0e <UART_SetConfig+0x1b2>
 8009ce0:	2b30      	cmp	r3, #48	@ 0x30
 8009ce2:	d818      	bhi.n	8009d16 <UART_SetConfig+0x1ba>
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d00a      	beq.n	8009cfe <UART_SetConfig+0x1a2>
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d814      	bhi.n	8009d16 <UART_SetConfig+0x1ba>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <UART_SetConfig+0x19a>
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d008      	beq.n	8009d06 <UART_SetConfig+0x1aa>
 8009cf4:	e00f      	b.n	8009d16 <UART_SetConfig+0x1ba>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfc:	e0ad      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d04:	e0a9      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d06:	2304      	movs	r3, #4
 8009d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0c:	e0a5      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d0e:	2308      	movs	r3, #8
 8009d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d14:	e0a1      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d16:	2310      	movs	r3, #16
 8009d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d1c:	e09d      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a4a      	ldr	r2, [pc, #296]	@ (8009e4c <UART_SetConfig+0x2f0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d125      	bne.n	8009d74 <UART_SetConfig+0x218>
 8009d28:	4b45      	ldr	r3, [pc, #276]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d34:	d016      	beq.n	8009d64 <UART_SetConfig+0x208>
 8009d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d38:	d818      	bhi.n	8009d6c <UART_SetConfig+0x210>
 8009d3a:	2b80      	cmp	r3, #128	@ 0x80
 8009d3c:	d00a      	beq.n	8009d54 <UART_SetConfig+0x1f8>
 8009d3e:	2b80      	cmp	r3, #128	@ 0x80
 8009d40:	d814      	bhi.n	8009d6c <UART_SetConfig+0x210>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <UART_SetConfig+0x1f0>
 8009d46:	2b40      	cmp	r3, #64	@ 0x40
 8009d48:	d008      	beq.n	8009d5c <UART_SetConfig+0x200>
 8009d4a:	e00f      	b.n	8009d6c <UART_SetConfig+0x210>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d52:	e082      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d54:	2302      	movs	r3, #2
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5a:	e07e      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d62:	e07a      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d64:	2308      	movs	r3, #8
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6a:	e076      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d72:	e072      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a35      	ldr	r2, [pc, #212]	@ (8009e50 <UART_SetConfig+0x2f4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d12a      	bne.n	8009dd4 <UART_SetConfig+0x278>
 8009d7e:	4b30      	ldr	r3, [pc, #192]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d8c:	d01a      	beq.n	8009dc4 <UART_SetConfig+0x268>
 8009d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d92:	d81b      	bhi.n	8009dcc <UART_SetConfig+0x270>
 8009d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d98:	d00c      	beq.n	8009db4 <UART_SetConfig+0x258>
 8009d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d9e:	d815      	bhi.n	8009dcc <UART_SetConfig+0x270>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <UART_SetConfig+0x250>
 8009da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da8:	d008      	beq.n	8009dbc <UART_SetConfig+0x260>
 8009daa:	e00f      	b.n	8009dcc <UART_SetConfig+0x270>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	e052      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dba:	e04e      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc2:	e04a      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dca:	e046      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dd2:	e042      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a17      	ldr	r2, [pc, #92]	@ (8009e38 <UART_SetConfig+0x2dc>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d13a      	bne.n	8009e54 <UART_SetConfig+0x2f8>
 8009dde:	4b18      	ldr	r3, [pc, #96]	@ (8009e40 <UART_SetConfig+0x2e4>)
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009de8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009dec:	d01a      	beq.n	8009e24 <UART_SetConfig+0x2c8>
 8009dee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009df2:	d81b      	bhi.n	8009e2c <UART_SetConfig+0x2d0>
 8009df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009df8:	d00c      	beq.n	8009e14 <UART_SetConfig+0x2b8>
 8009dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dfe:	d815      	bhi.n	8009e2c <UART_SetConfig+0x2d0>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <UART_SetConfig+0x2b0>
 8009e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e08:	d008      	beq.n	8009e1c <UART_SetConfig+0x2c0>
 8009e0a:	e00f      	b.n	8009e2c <UART_SetConfig+0x2d0>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e12:	e022      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009e14:	2302      	movs	r3, #2
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1a:	e01e      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e22:	e01a      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2a:	e016      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e32:	e012      	b.n	8009e5a <UART_SetConfig+0x2fe>
 8009e34:	cfff69f3 	.word	0xcfff69f3
 8009e38:	40008000 	.word	0x40008000
 8009e3c:	40013800 	.word	0x40013800
 8009e40:	40021000 	.word	0x40021000
 8009e44:	40004400 	.word	0x40004400
 8009e48:	40004800 	.word	0x40004800
 8009e4c:	40004c00 	.word	0x40004c00
 8009e50:	40005000 	.word	0x40005000
 8009e54:	2310      	movs	r3, #16
 8009e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4aae      	ldr	r2, [pc, #696]	@ (800a118 <UART_SetConfig+0x5bc>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	f040 8097 	bne.w	8009f94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	2b08      	cmp	r3, #8
 8009e6c:	d823      	bhi.n	8009eb6 <UART_SetConfig+0x35a>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <UART_SetConfig+0x318>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009eb7 	.word	0x08009eb7
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009eb7 	.word	0x08009eb7
 8009e84:	08009ea7 	.word	0x08009ea7
 8009e88:	08009eb7 	.word	0x08009eb7
 8009e8c:	08009eb7 	.word	0x08009eb7
 8009e90:	08009eb7 	.word	0x08009eb7
 8009e94:	08009eaf 	.word	0x08009eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e98:	f7fd fdc2 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 8009e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e9e:	e010      	b.n	8009ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ea0:	4b9e      	ldr	r3, [pc, #632]	@ (800a11c <UART_SetConfig+0x5c0>)
 8009ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ea4:	e00d      	b.n	8009ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea6:	f7fd fd4d 	bl	8007944 <HAL_RCC_GetSysClockFreq>
 8009eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eac:	e009      	b.n	8009ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eb4:	e005      	b.n	8009ec2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8130 	beq.w	800a12a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	4a94      	ldr	r2, [pc, #592]	@ (800a120 <UART_SetConfig+0x5c4>)
 8009ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009edc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d305      	bcc.n	8009efa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d903      	bls.n	8009f02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f00:	e113      	b.n	800a12a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f04:	2200      	movs	r2, #0
 8009f06:	60bb      	str	r3, [r7, #8]
 8009f08:	60fa      	str	r2, [r7, #12]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0e:	4a84      	ldr	r2, [pc, #528]	@ (800a120 <UART_SetConfig+0x5c4>)
 8009f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2200      	movs	r2, #0
 8009f18:	603b      	str	r3, [r7, #0]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f24:	f7f6 fe0e 	bl	8000b44 <__aeabi_uldivmod>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4619      	mov	r1, r3
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	020b      	lsls	r3, r1, #8
 8009f3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f3e:	0202      	lsls	r2, r0, #8
 8009f40:	6979      	ldr	r1, [r7, #20]
 8009f42:	6849      	ldr	r1, [r1, #4]
 8009f44:	0849      	lsrs	r1, r1, #1
 8009f46:	2000      	movs	r0, #0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	eb12 0804 	adds.w	r8, r2, r4
 8009f50:	eb43 0905 	adc.w	r9, r3, r5
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	4693      	mov	fp, r2
 8009f5e:	4652      	mov	r2, sl
 8009f60:	465b      	mov	r3, fp
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 fded 	bl	8000b44 <__aeabi_uldivmod>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4613      	mov	r3, r2
 8009f70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f78:	d308      	bcc.n	8009f8c <UART_SetConfig+0x430>
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f80:	d204      	bcs.n	8009f8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	e0ce      	b.n	800a12a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f92:	e0ca      	b.n	800a12a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f9c:	d166      	bne.n	800a06c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d827      	bhi.n	8009ff6 <UART_SetConfig+0x49a>
 8009fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fac <UART_SetConfig+0x450>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009fd9 	.word	0x08009fd9
 8009fb4:	08009fe1 	.word	0x08009fe1
 8009fb8:	08009ff7 	.word	0x08009ff7
 8009fbc:	08009fe7 	.word	0x08009fe7
 8009fc0:	08009ff7 	.word	0x08009ff7
 8009fc4:	08009ff7 	.word	0x08009ff7
 8009fc8:	08009ff7 	.word	0x08009ff7
 8009fcc:	08009fef 	.word	0x08009fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd0:	f7fd fd26 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 8009fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fd6:	e014      	b.n	800a002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fd8:	f7fd fd38 	bl	8007a4c <HAL_RCC_GetPCLK2Freq>
 8009fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fde:	e010      	b.n	800a002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800a11c <UART_SetConfig+0x5c0>)
 8009fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fe4:	e00d      	b.n	800a002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fe6:	f7fd fcad 	bl	8007944 <HAL_RCC_GetSysClockFreq>
 8009fea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fec:	e009      	b.n	800a002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ff4:	e005      	b.n	800a002 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 8090 	beq.w	800a12a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00e:	4a44      	ldr	r2, [pc, #272]	@ (800a120 <UART_SetConfig+0x5c4>)
 800a010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a014:	461a      	mov	r2, r3
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	fbb3 f3f2 	udiv	r3, r3, r2
 800a01c:	005a      	lsls	r2, r3, #1
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	085b      	lsrs	r3, r3, #1
 800a024:	441a      	add	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a02e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2b0f      	cmp	r3, #15
 800a034:	d916      	bls.n	800a064 <UART_SetConfig+0x508>
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a03c:	d212      	bcs.n	800a064 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f023 030f 	bic.w	r3, r3, #15
 800a046:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	b29a      	uxth	r2, r3
 800a054:	8bfb      	ldrh	r3, [r7, #30]
 800a056:	4313      	orrs	r3, r2
 800a058:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	8bfa      	ldrh	r2, [r7, #30]
 800a060:	60da      	str	r2, [r3, #12]
 800a062:	e062      	b.n	800a12a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a06a:	e05e      	b.n	800a12a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a06c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a070:	2b08      	cmp	r3, #8
 800a072:	d828      	bhi.n	800a0c6 <UART_SetConfig+0x56a>
 800a074:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <UART_SetConfig+0x520>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0b1 	.word	0x0800a0b1
 800a088:	0800a0c7 	.word	0x0800a0c7
 800a08c:	0800a0b7 	.word	0x0800a0b7
 800a090:	0800a0c7 	.word	0x0800a0c7
 800a094:	0800a0c7 	.word	0x0800a0c7
 800a098:	0800a0c7 	.word	0x0800a0c7
 800a09c:	0800a0bf 	.word	0x0800a0bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a0:	f7fd fcbe 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 800a0a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0a6:	e014      	b.n	800a0d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0a8:	f7fd fcd0 	bl	8007a4c <HAL_RCC_GetPCLK2Freq>
 800a0ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0ae:	e010      	b.n	800a0d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a11c <UART_SetConfig+0x5c0>)
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0b4:	e00d      	b.n	800a0d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0b6:	f7fd fc45 	bl	8007944 <HAL_RCC_GetSysClockFreq>
 800a0ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0bc:	e009      	b.n	800a0d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0c4:	e005      	b.n	800a0d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0d0:	bf00      	nop
    }

    if (pclk != 0U)
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d028      	beq.n	800a12a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0dc:	4a10      	ldr	r2, [pc, #64]	@ (800a120 <UART_SetConfig+0x5c4>)
 800a0de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	085b      	lsrs	r3, r3, #1
 800a0f0:	441a      	add	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	2b0f      	cmp	r3, #15
 800a100:	d910      	bls.n	800a124 <UART_SetConfig+0x5c8>
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a108:	d20c      	bcs.n	800a124 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60da      	str	r2, [r3, #12]
 800a114:	e009      	b.n	800a12a <UART_SetConfig+0x5ce>
 800a116:	bf00      	nop
 800a118:	40008000 	.word	0x40008000
 800a11c:	00f42400 	.word	0x00f42400
 800a120:	0800c330 	.word	0x0800c330
      }
      else
      {
        ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2201      	movs	r2, #1
 800a136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2200      	movs	r2, #0
 800a13e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2200      	movs	r2, #0
 800a144:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a146:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3730      	adds	r7, #48	@ 0x30
 800a14e:	46bd      	mov	sp, r7
 800a150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00a      	beq.n	800a17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01a      	beq.n	800a26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a24e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a252:	d10a      	bne.n	800a26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
  }
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b098      	sub	sp, #96	@ 0x60
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2a8:	f7f9 fae2 	bl	8003870 <HAL_GetTick>
 800a2ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0308 	and.w	r3, r3, #8
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d12f      	bne.n	800a31c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f88e 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d022      	beq.n	800a31c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e063      	b.n	800a3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b04      	cmp	r3, #4
 800a328:	d149      	bne.n	800a3be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a32a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a332:	2200      	movs	r2, #0
 800a334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f857 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d03c      	beq.n	800a3be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	623b      	str	r3, [r7, #32]
   return(result);
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
 800a364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e6      	bne.n	800a344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3308      	adds	r3, #8
 800a37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	60fb      	str	r3, [r7, #12]
   return(result);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f023 0301 	bic.w	r3, r3, #1
 800a38c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a396:	61fa      	str	r2, [r7, #28]
 800a398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	69b9      	ldr	r1, [r7, #24]
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e5      	bne.n	800a376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e012      	b.n	800a3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3758      	adds	r7, #88	@ 0x58
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fc:	e04f      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	d04b      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a406:	f7f9 fa33 	bl	8003870 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	429a      	cmp	r2, r3
 800a414:	d302      	bcc.n	800a41c <UART_WaitOnFlagUntilTimeout+0x30>
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e04e      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d037      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b80      	cmp	r3, #128	@ 0x80
 800a432:	d034      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b40      	cmp	r3, #64	@ 0x40
 800a438:	d031      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	f003 0308 	and.w	r3, r3, #8
 800a444:	2b08      	cmp	r3, #8
 800a446:	d110      	bne.n	800a46a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2208      	movs	r2, #8
 800a44e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f920 	bl	800a696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2208      	movs	r2, #8
 800a45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e029      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a478:	d111      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f906 	bl	800a696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e00f      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69da      	ldr	r2, [r3, #28]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2301      	moveq	r3, #1
 800a4b0:	2300      	movne	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d0a0      	beq.n	800a3fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b096      	sub	sp, #88	@ 0x58
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	88fa      	ldrh	r2, [r7, #6]
 800a4e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2222      	movs	r2, #34	@ 0x22
 800a4f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02d      	beq.n	800a55a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a504:	4a40      	ldr	r2, [pc, #256]	@ (800a608 <UART_Start_Receive_DMA+0x140>)
 800a506:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a50e:	4a3f      	ldr	r2, [pc, #252]	@ (800a60c <UART_Start_Receive_DMA+0x144>)
 800a510:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a518:	4a3d      	ldr	r2, [pc, #244]	@ (800a610 <UART_Start_Receive_DMA+0x148>)
 800a51a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a522:	2200      	movs	r2, #0
 800a524:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3324      	adds	r3, #36	@ 0x24
 800a532:	4619      	mov	r1, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a538:	461a      	mov	r2, r3
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	f7fb ff4c 	bl	80063d8 <HAL_DMA_Start_IT>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2210      	movs	r2, #16
 800a54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e051      	b.n	800a5fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d018      	beq.n	800a594 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a576:	657b      	str	r3, [r7, #84]	@ 0x54
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a580:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a582:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a5b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e5      	bne.n	800a594 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5e8:	623a      	str	r2, [r7, #32]
 800a5ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69f9      	ldr	r1, [r7, #28]
 800a5ee:	6a3a      	ldr	r2, [r7, #32]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3758      	adds	r7, #88	@ 0x58
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	0800a763 	.word	0x0800a763
 800a60c:	0800a88f 	.word	0x0800a88f
 800a610:	0800a8cd 	.word	0x0800a8cd

0800a614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b08f      	sub	sp, #60	@ 0x3c
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	e853 3f00 	ldrex	r3, [r3]
 800a628:	61fb      	str	r3, [r7, #28]
   return(result);
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a630:	637b      	str	r3, [r7, #52]	@ 0x34
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a63c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e6      	bne.n	800a61c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3308      	adds	r3, #8
 800a654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a664:	633b      	str	r3, [r7, #48]	@ 0x30
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3308      	adds	r3, #8
 800a66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a66e:	61ba      	str	r2, [r7, #24]
 800a670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6979      	ldr	r1, [r7, #20]
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	613b      	str	r3, [r7, #16]
   return(result);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e5      	bne.n	800a64e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2220      	movs	r2, #32
 800a686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a68a:	bf00      	nop
 800a68c:	373c      	adds	r7, #60	@ 0x3c
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a696:	b480      	push	{r7}
 800a698:	b095      	sub	sp, #84	@ 0x54
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a6:	e853 3f00 	ldrex	r3, [r3]
 800a6aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6c4:	e841 2300 	strex	r3, r2, [r1]
 800a6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1e6      	bne.n	800a69e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6e6:	f023 0301 	bic.w	r3, r3, #1
 800a6ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e3      	bne.n	800a6d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d118      	bne.n	800a742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f023 0310 	bic.w	r3, r3, #16
 800a724:	647b      	str	r3, [r7, #68]	@ 0x44
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6979      	ldr	r1, [r7, #20]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	613b      	str	r3, [r7, #16]
   return(result);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e6      	bne.n	800a710 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a756:	bf00      	nop
 800a758:	3754      	adds	r7, #84	@ 0x54
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b09c      	sub	sp, #112	@ 0x70
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d171      	bne.n	800a862 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a77e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a780:	2200      	movs	r2, #0
 800a782:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a79a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a79c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a802:	663b      	str	r3, [r7, #96]	@ 0x60
 800a804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a80c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d118      	bne.n	800a862 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f023 0310 	bic.w	r3, r3, #16
 800a844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	69b9      	ldr	r1, [r7, #24]
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	617b      	str	r3, [r7, #20]
   return(result);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e6      	bne.n	800a830 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a864:	2200      	movs	r2, #0
 800a866:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d107      	bne.n	800a880 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a876:	4619      	mov	r1, r3
 800a878:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a87a:	f7f8 fb4b 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a87e:	e002      	b.n	800a886 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a880:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a882:	f7ff f94d 	bl	8009b20 <HAL_UART_RxCpltCallback>
}
 800a886:	bf00      	nop
 800a888:	3770      	adds	r7, #112	@ 0x70
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d109      	bne.n	800a8be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7f8 fb2c 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8bc:	e002      	b.n	800a8c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff f938 	bl	8009b34 <HAL_UART_RxHalfCpltCallback>
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8f4:	2b80      	cmp	r3, #128	@ 0x80
 800a8f6:	d109      	bne.n	800a90c <UART_DMAError+0x40>
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	2b21      	cmp	r3, #33	@ 0x21
 800a8fc:	d106      	bne.n	800a90c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a906:	6978      	ldr	r0, [r7, #20]
 800a908:	f7ff fe84 	bl	800a614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a916:	2b40      	cmp	r3, #64	@ 0x40
 800a918:	d109      	bne.n	800a92e <UART_DMAError+0x62>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2b22      	cmp	r3, #34	@ 0x22
 800a91e:	d106      	bne.n	800a92e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2200      	movs	r2, #0
 800a924:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a928:	6978      	ldr	r0, [r7, #20]
 800a92a:	f7ff feb4 	bl	800a696 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a934:	f043 0210 	orr.w	r2, r3, #16
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a93e:	6978      	ldr	r0, [r7, #20]
 800a940:	f7ff f902 	bl	8009b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a944:	bf00      	nop
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff f8ec 	bl	8009b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a970:	bf00      	nop
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a994:	61fb      	str	r3, [r7, #28]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	61bb      	str	r3, [r7, #24]
 800a9a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	6979      	ldr	r1, [r7, #20]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e6      	bne.n	800a980 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff f8a3 	bl	8009b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9c6:	bf00      	nop
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d101      	bne.n	800aa20 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e027      	b.n	800aa70 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2224      	movs	r2, #36	@ 0x24
 800aa2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0201 	bic.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e02d      	b.n	800aaf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2224      	movs	r2, #36	@ 0x24
 800aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f022 0201 	bic.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f8a3 	bl	800ac1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e02d      	b.n	800ab6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2224      	movs	r2, #36	@ 0x24
 800ab1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0201 	bic.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f865 	bl	800ac1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08c      	sub	sp, #48	@ 0x30
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d142      	bne.n	800ac12 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e03b      	b.n	800ac14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	461a      	mov	r2, r3
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff fc8a 	bl	800a4c8 <UART_Start_Receive_DMA>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800abba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d124      	bne.n	800ac0c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d11d      	bne.n	800ac06 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2210      	movs	r2, #16
 800abd0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	e853 3f00 	ldrex	r3, [r3]
 800abde:	617b      	str	r3, [r7, #20]
   return(result);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f043 0310 	orr.w	r3, r3, #16
 800abe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800abf2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	6a39      	ldr	r1, [r7, #32]
 800abf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	61fb      	str	r3, [r7, #28]
   return(result);
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e6      	bne.n	800abd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ac04:	e002      	b.n	800ac0c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ac0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac10:	e000      	b.n	800ac14 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ac12:	2302      	movs	r3, #2
  }
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3730      	adds	r7, #48	@ 0x30
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d108      	bne.n	800ac3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac3c:	e031      	b.n	800aca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac3e:	2308      	movs	r3, #8
 800ac40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac42:	2308      	movs	r3, #8
 800ac44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	0e5b      	lsrs	r3, r3, #25
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 0307 	and.w	r3, r3, #7
 800ac54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	0f5b      	lsrs	r3, r3, #29
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	7b3a      	ldrb	r2, [r7, #12]
 800ac6a:	4911      	ldr	r1, [pc, #68]	@ (800acb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac6c:	5c8a      	ldrb	r2, [r1, r2]
 800ac6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac72:	7b3a      	ldrb	r2, [r7, #12]
 800ac74:	490f      	ldr	r1, [pc, #60]	@ (800acb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	7b7a      	ldrb	r2, [r7, #13]
 800ac88:	4909      	ldr	r1, [pc, #36]	@ (800acb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ac8a:	5c8a      	ldrb	r2, [r1, r2]
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac90:	7b7a      	ldrb	r2, [r7, #13]
 800ac92:	4908      	ldr	r1, [pc, #32]	@ (800acb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ac94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aca2:	bf00      	nop
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	0800c348 	.word	0x0800c348
 800acb4:	0800c350 	.word	0x0800c350

0800acb8 <arm_rfft_1024_fast_init_f32>:
 800acb8:	b190      	cbz	r0, 800ace0 <arm_rfft_1024_fast_init_f32+0x28>
 800acba:	b430      	push	{r4, r5}
 800acbc:	490a      	ldr	r1, [pc, #40]	@ (800ace8 <arm_rfft_1024_fast_init_f32+0x30>)
 800acbe:	4a0b      	ldr	r2, [pc, #44]	@ (800acec <arm_rfft_1024_fast_init_f32+0x34>)
 800acc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800acc8:	8003      	strh	r3, [r0, #0]
 800acca:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800acce:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800acd2:	4b07      	ldr	r3, [pc, #28]	@ (800acf0 <arm_rfft_1024_fast_init_f32+0x38>)
 800acd4:	8205      	strh	r5, [r0, #16]
 800acd6:	8184      	strh	r4, [r0, #12]
 800acd8:	6143      	str	r3, [r0, #20]
 800acda:	bc30      	pop	{r4, r5}
 800acdc:	2000      	movs	r0, #0
 800acde:	4770      	bx	lr
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	0800c358 	.word	0x0800c358
 800acec:	0800cedc 	.word	0x0800cedc
 800acf0:	0800dedc 	.word	0x0800dedc

0800acf4 <stage_rfft_f32>:
 800acf4:	b410      	push	{r4}
 800acf6:	edd1 7a00 	vldr	s15, [r1]
 800acfa:	ed91 7a01 	vldr	s14, [r1, #4]
 800acfe:	8804      	ldrh	r4, [r0, #0]
 800ad00:	6940      	ldr	r0, [r0, #20]
 800ad02:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ad06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad0a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ad0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ad12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad16:	3c01      	subs	r4, #1
 800ad18:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ad1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ad24:	ed82 7a00 	vstr	s14, [r2]
 800ad28:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad2c:	3010      	adds	r0, #16
 800ad2e:	3210      	adds	r2, #16
 800ad30:	3b08      	subs	r3, #8
 800ad32:	3110      	adds	r1, #16
 800ad34:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ad38:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ad40:	edd3 4a03 	vldr	s9, [r3, #12]
 800ad44:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad48:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ad4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ad50:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ad54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ad58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ad5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ad60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ad64:	ee37 7a23 	vadd.f32	s14, s14, s7
 800ad68:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ad6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ad70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ad74:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ad78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ad80:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad84:	3c01      	subs	r4, #1
 800ad86:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ad8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ad8e:	f1a3 0308 	sub.w	r3, r3, #8
 800ad92:	f101 0108 	add.w	r1, r1, #8
 800ad96:	f100 0008 	add.w	r0, r0, #8
 800ad9a:	f102 0208 	add.w	r2, r2, #8
 800ad9e:	d1c9      	bne.n	800ad34 <stage_rfft_f32+0x40>
 800ada0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop

0800ada8 <merge_rfft_f32>:
 800ada8:	b410      	push	{r4}
 800adaa:	edd1 7a00 	vldr	s15, [r1]
 800adae:	edd1 6a01 	vldr	s13, [r1, #4]
 800adb2:	8804      	ldrh	r4, [r0, #0]
 800adb4:	6940      	ldr	r0, [r0, #20]
 800adb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800adba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adbe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800adc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800adc6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800adca:	3c01      	subs	r4, #1
 800adcc:	ed82 7a00 	vstr	s14, [r2]
 800add0:	edc2 7a01 	vstr	s15, [r2, #4]
 800add4:	b3dc      	cbz	r4, 800ae4e <merge_rfft_f32+0xa6>
 800add6:	00e3      	lsls	r3, r4, #3
 800add8:	3b08      	subs	r3, #8
 800adda:	440b      	add	r3, r1
 800addc:	3010      	adds	r0, #16
 800adde:	3210      	adds	r2, #16
 800ade0:	3110      	adds	r1, #16
 800ade2:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ade6:	ed93 7a02 	vldr	s14, [r3, #8]
 800adea:	ed50 6a02 	vldr	s13, [r0, #-8]
 800adee:	edd3 4a03 	vldr	s9, [r3, #12]
 800adf2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800adf6:	ed10 6a01 	vldr	s12, [r0, #-4]
 800adfa:	ee75 5a47 	vsub.f32	s11, s10, s14
 800adfe:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ae02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ae06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ae0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ae0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ae12:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ae16:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ae1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ae1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ae22:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ae26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae32:	3c01      	subs	r4, #1
 800ae34:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ae38:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ae3c:	f1a3 0308 	sub.w	r3, r3, #8
 800ae40:	f101 0108 	add.w	r1, r1, #8
 800ae44:	f100 0008 	add.w	r0, r0, #8
 800ae48:	f102 0208 	add.w	r2, r2, #8
 800ae4c:	d1c9      	bne.n	800ade2 <merge_rfft_f32+0x3a>
 800ae4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <arm_rfft_fast_f32>:
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	8a05      	ldrh	r5, [r0, #16]
 800ae5a:	086d      	lsrs	r5, r5, #1
 800ae5c:	8005      	strh	r5, [r0, #0]
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4616      	mov	r6, r2
 800ae62:	461d      	mov	r5, r3
 800ae64:	b14b      	cbz	r3, 800ae7a <arm_rfft_fast_f32+0x26>
 800ae66:	f7ff ff9f 	bl	800ada8 <merge_rfft_f32>
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4620      	mov	r0, r4
 800ae70:	2301      	movs	r3, #1
 800ae72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	f000 bb33 	b.w	800b4e0 <arm_cfft_f32>
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f000 fb2e 	bl	800b4e0 <arm_cfft_f32>
 800ae84:	4632      	mov	r2, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	4620      	mov	r0, r4
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	f7ff bf31 	b.w	800acf4 <stage_rfft_f32>
 800ae92:	bf00      	nop

0800ae94 <arm_cfft_radix8by2_f32>:
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	ed2d 8b08 	vpush	{d8-d11}
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	4608      	mov	r0, r1
 800aea0:	f8b7 c000 	ldrh.w	ip, [r7]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800aeaa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800aeae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800aeb2:	f000 80b0 	beq.w	800b016 <arm_cfft_radix8by2_f32+0x182>
 800aeb6:	008c      	lsls	r4, r1, #2
 800aeb8:	3410      	adds	r4, #16
 800aeba:	f100 0310 	add.w	r3, r0, #16
 800aebe:	1906      	adds	r6, r0, r4
 800aec0:	3210      	adds	r2, #16
 800aec2:	4444      	add	r4, r8
 800aec4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800aec8:	f108 0510 	add.w	r5, r8, #16
 800aecc:	ed15 2a04 	vldr	s4, [r5, #-16]
 800aed0:	ed55 2a03 	vldr	s5, [r5, #-12]
 800aed4:	ed54 4a04 	vldr	s9, [r4, #-16]
 800aed8:	ed14 4a03 	vldr	s8, [r4, #-12]
 800aedc:	ed14 6a02 	vldr	s12, [r4, #-8]
 800aee0:	ed54 5a01 	vldr	s11, [r4, #-4]
 800aee4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800aee8:	ed15 0a02 	vldr	s0, [r5, #-8]
 800aeec:	ed55 0a01 	vldr	s1, [r5, #-4]
 800aef0:	ed56 6a04 	vldr	s13, [r6, #-16]
 800aef4:	ed16 3a03 	vldr	s6, [r6, #-12]
 800aef8:	ed13 7a03 	vldr	s14, [r3, #-12]
 800aefc:	ed13 5a02 	vldr	s10, [r3, #-8]
 800af00:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af04:	ed16 1a02 	vldr	s2, [r6, #-8]
 800af08:	ed56 1a01 	vldr	s3, [r6, #-4]
 800af0c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800af10:	ee37 ba22 	vadd.f32	s22, s14, s5
 800af14:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800af18:	ee33 9a04 	vadd.f32	s18, s6, s8
 800af1c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800af20:	ee75 aa00 	vadd.f32	s21, s10, s0
 800af24:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800af28:	ee71 8a06 	vadd.f32	s17, s2, s12
 800af2c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800af30:	ed03 ba03 	vstr	s22, [r3, #-12]
 800af34:	ed43 aa02 	vstr	s21, [r3, #-8]
 800af38:	ed03 aa01 	vstr	s20, [r3, #-4]
 800af3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800af40:	ed46 9a04 	vstr	s19, [r6, #-16]
 800af44:	ed06 9a03 	vstr	s18, [r6, #-12]
 800af48:	ed46 8a02 	vstr	s17, [r6, #-8]
 800af4c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800af50:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800af54:	ee34 4a43 	vsub.f32	s8, s8, s6
 800af58:	ed52 6a03 	vldr	s13, [r2, #-12]
 800af5c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800af60:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800af64:	ee27 8a26 	vmul.f32	s16, s14, s13
 800af68:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800af6c:	ee23 2a83 	vmul.f32	s4, s7, s6
 800af70:	ee64 4a83 	vmul.f32	s9, s9, s6
 800af74:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800af78:	ee27 7a03 	vmul.f32	s14, s14, s6
 800af7c:	ee64 6a26 	vmul.f32	s13, s8, s13
 800af80:	ee24 4a03 	vmul.f32	s8, s8, s6
 800af84:	ee37 7a63 	vsub.f32	s14, s14, s7
 800af88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800af8c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800af90:	ee32 3a08 	vadd.f32	s6, s4, s16
 800af94:	ed05 7a03 	vstr	s14, [r5, #-12]
 800af98:	ed05 3a04 	vstr	s6, [r5, #-16]
 800af9c:	ed04 4a04 	vstr	s8, [r4, #-16]
 800afa0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800afa4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800afa8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800afac:	ee35 5a40 	vsub.f32	s10, s10, s0
 800afb0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800afb4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800afb8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800afbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800afc0:	ee66 4a87 	vmul.f32	s9, s13, s14
 800afc4:	ee25 4a25 	vmul.f32	s8, s10, s11
 800afc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800afcc:	ee25 5a07 	vmul.f32	s10, s10, s14
 800afd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800afd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800afd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800afdc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800afe0:	ee74 5a23 	vadd.f32	s11, s8, s7
 800afe4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800afe8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800afec:	3310      	adds	r3, #16
 800afee:	4563      	cmp	r3, ip
 800aff0:	ed45 5a02 	vstr	s11, [r5, #-8]
 800aff4:	f106 0610 	add.w	r6, r6, #16
 800aff8:	ed45 7a01 	vstr	s15, [r5, #-4]
 800affc:	f102 0210 	add.w	r2, r2, #16
 800b000:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b004:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b008:	f105 0510 	add.w	r5, r5, #16
 800b00c:	f104 0410 	add.w	r4, r4, #16
 800b010:	f47f af5c 	bne.w	800aecc <arm_cfft_radix8by2_f32+0x38>
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	b28c      	uxth	r4, r1
 800b018:	4621      	mov	r1, r4
 800b01a:	2302      	movs	r3, #2
 800b01c:	f000 fc66 	bl	800b8ec <arm_radix8_butterfly_f32>
 800b020:	ecbd 8b08 	vpop	{d8-d11}
 800b024:	4621      	mov	r1, r4
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4640      	mov	r0, r8
 800b02a:	2302      	movs	r3, #2
 800b02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	f000 bc5c 	b.w	800b8ec <arm_radix8_butterfly_f32>

0800b034 <arm_cfft_radix8by4_f32>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	ed2d 8b0a 	vpush	{d8-d12}
 800b03c:	b08d      	sub	sp, #52	@ 0x34
 800b03e:	460d      	mov	r5, r1
 800b040:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b042:	8801      	ldrh	r1, [r0, #0]
 800b044:	6842      	ldr	r2, [r0, #4]
 800b046:	900a      	str	r0, [sp, #40]	@ 0x28
 800b048:	0849      	lsrs	r1, r1, #1
 800b04a:	008b      	lsls	r3, r1, #2
 800b04c:	18ee      	adds	r6, r5, r3
 800b04e:	18f0      	adds	r0, r6, r3
 800b050:	edd0 5a00 	vldr	s11, [r0]
 800b054:	edd5 7a00 	vldr	s15, [r5]
 800b058:	ed96 7a00 	vldr	s14, [r6]
 800b05c:	edd0 3a01 	vldr	s7, [r0, #4]
 800b060:	ed96 4a01 	vldr	s8, [r6, #4]
 800b064:	ed95 5a01 	vldr	s10, [r5, #4]
 800b068:	9008      	str	r0, [sp, #32]
 800b06a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b06e:	18c7      	adds	r7, r0, r3
 800b070:	edd7 4a00 	vldr	s9, [r7]
 800b074:	ed97 3a01 	vldr	s6, [r7, #4]
 800b078:	9701      	str	r7, [sp, #4]
 800b07a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b07e:	462c      	mov	r4, r5
 800b080:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b084:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b088:	ee16 ca90 	vmov	ip, s13
 800b08c:	f844 cb08 	str.w	ip, [r4], #8
 800b090:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b094:	edd6 5a01 	vldr	s11, [r6, #4]
 800b098:	edd7 2a01 	vldr	s5, [r7, #4]
 800b09c:	9404      	str	r4, [sp, #16]
 800b09e:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b0a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b0a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b0aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b0ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b0b2:	0849      	lsrs	r1, r1, #1
 800b0b4:	f102 0e08 	add.w	lr, r2, #8
 800b0b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b0bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b0c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b0c6:	f1a1 0902 	sub.w	r9, r1, #2
 800b0ca:	f8cd e00c 	str.w	lr, [sp, #12]
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	ee13 ea90 	vmov	lr, s7
 800b0d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b0d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b0dc:	4604      	mov	r4, r0
 800b0de:	edc5 5a01 	vstr	s11, [r5, #4]
 800b0e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b0e6:	f841 eb08 	str.w	lr, [r1], #8
 800b0ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b0ee:	ee16 ea10 	vmov	lr, s12
 800b0f2:	ed86 5a01 	vstr	s10, [r6, #4]
 800b0f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b0fa:	f844 eb08 	str.w	lr, [r4], #8
 800b0fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b102:	edc0 6a01 	vstr	s13, [r0, #4]
 800b106:	9405      	str	r4, [sp, #20]
 800b108:	4604      	mov	r4, r0
 800b10a:	ee17 0a90 	vmov	r0, s15
 800b10e:	9106      	str	r1, [sp, #24]
 800b110:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b114:	f102 0110 	add.w	r1, r2, #16
 800b118:	46bc      	mov	ip, r7
 800b11a:	9100      	str	r1, [sp, #0]
 800b11c:	f847 0b08 	str.w	r0, [r7], #8
 800b120:	f102 0118 	add.w	r1, r2, #24
 800b124:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b128:	9102      	str	r1, [sp, #8]
 800b12a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b12e:	9007      	str	r0, [sp, #28]
 800b130:	f000 8134 	beq.w	800b39c <arm_cfft_radix8by4_f32+0x368>
 800b134:	f102 0920 	add.w	r9, r2, #32
 800b138:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800b13c:	9a01      	ldr	r2, [sp, #4]
 800b13e:	f8dd a000 	ldr.w	sl, [sp]
 800b142:	3b0c      	subs	r3, #12
 800b144:	4683      	mov	fp, r0
 800b146:	4463      	add	r3, ip
 800b148:	f105 0e10 	add.w	lr, r5, #16
 800b14c:	f1a4 010c 	sub.w	r1, r4, #12
 800b150:	f104 0510 	add.w	r5, r4, #16
 800b154:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b158:	f1a2 040c 	sub.w	r4, r2, #12
 800b15c:	f106 0010 	add.w	r0, r6, #16
 800b160:	3210      	adds	r2, #16
 800b162:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b166:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b16a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b16e:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b172:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b176:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b17a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b17e:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b182:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b186:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b18a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b18e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b192:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b196:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b19a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b19e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b1a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b1a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b1aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b1ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b1b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b1b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b1ba:	ed94 7a02 	vldr	s14, [r4, #8]
 800b1be:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b1c2:	ed91 ba02 	vldr	s22, [r1, #8]
 800b1c6:	edd3 9a02 	vldr	s19, [r3, #8]
 800b1ca:	edd4 2a01 	vldr	s5, [r4, #4]
 800b1ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b1d2:	ed93 5a01 	vldr	s10, [r3, #4]
 800b1d6:	edd1 0a01 	vldr	s1, [r1, #4]
 800b1da:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b1de:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b1e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b1e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b1ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b1ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b1f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b1f6:	ed91 7a01 	vldr	s14, [r1, #4]
 800b1fa:	edd3 8a01 	vldr	s17, [r3, #4]
 800b1fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b202:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b206:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b20a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b20e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b212:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b216:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b21a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b21e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b222:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b226:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b22a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b22e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b232:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b236:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b23a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b23e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b242:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b246:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b24a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b24e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b252:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b256:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b25a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b25e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b262:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b266:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b26a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b26e:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b272:	edc1 8a01 	vstr	s17, [r1, #4]
 800b276:	ed81 aa02 	vstr	s20, [r1, #8]
 800b27a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b27e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b282:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b286:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b28a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b28e:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b292:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b296:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b29a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b29e:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b2a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b2a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b2aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b2ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b2b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b2b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b2ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b2be:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b2c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b2c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b2ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b2ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b2d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b2d6:	ed84 7a01 	vstr	s14, [r4, #4]
 800b2da:	ed84 4a02 	vstr	s8, [r4, #8]
 800b2de:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b2e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b2e6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b2ea:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b2ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b2f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b2f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b2fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b2fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b302:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b306:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b30a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b30e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b312:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b316:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b31a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b31e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b322:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b326:	f1bb 0b01 	subs.w	fp, fp, #1
 800b32a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b32e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b332:	f10e 0e08 	add.w	lr, lr, #8
 800b336:	ed83 3a02 	vstr	s6, [r3, #8]
 800b33a:	ed83 7a01 	vstr	s14, [r3, #4]
 800b33e:	f1ac 0c08 	sub.w	ip, ip, #8
 800b342:	f10a 0a08 	add.w	sl, sl, #8
 800b346:	f100 0008 	add.w	r0, r0, #8
 800b34a:	f1a1 0108 	sub.w	r1, r1, #8
 800b34e:	f109 0910 	add.w	r9, r9, #16
 800b352:	f105 0508 	add.w	r5, r5, #8
 800b356:	f1a4 0408 	sub.w	r4, r4, #8
 800b35a:	f108 0818 	add.w	r8, r8, #24
 800b35e:	f102 0208 	add.w	r2, r2, #8
 800b362:	f1a3 0308 	sub.w	r3, r3, #8
 800b366:	f47f aefc 	bne.w	800b162 <arm_cfft_radix8by4_f32+0x12e>
 800b36a:	9907      	ldr	r1, [sp, #28]
 800b36c:	9800      	ldr	r0, [sp, #0]
 800b36e:	00cb      	lsls	r3, r1, #3
 800b370:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b374:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b378:	9100      	str	r1, [sp, #0]
 800b37a:	9904      	ldr	r1, [sp, #16]
 800b37c:	4419      	add	r1, r3
 800b37e:	9104      	str	r1, [sp, #16]
 800b380:	9903      	ldr	r1, [sp, #12]
 800b382:	4419      	add	r1, r3
 800b384:	9103      	str	r1, [sp, #12]
 800b386:	9906      	ldr	r1, [sp, #24]
 800b388:	4419      	add	r1, r3
 800b38a:	9106      	str	r1, [sp, #24]
 800b38c:	9905      	ldr	r1, [sp, #20]
 800b38e:	441f      	add	r7, r3
 800b390:	4419      	add	r1, r3
 800b392:	9b02      	ldr	r3, [sp, #8]
 800b394:	9105      	str	r1, [sp, #20]
 800b396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	9904      	ldr	r1, [sp, #16]
 800b39e:	9805      	ldr	r0, [sp, #20]
 800b3a0:	ed91 4a00 	vldr	s8, [r1]
 800b3a4:	edd0 6a00 	vldr	s13, [r0]
 800b3a8:	9b06      	ldr	r3, [sp, #24]
 800b3aa:	ed97 3a00 	vldr	s6, [r7]
 800b3ae:	edd3 7a00 	vldr	s15, [r3]
 800b3b2:	edd0 4a01 	vldr	s9, [r0, #4]
 800b3b6:	edd1 3a01 	vldr	s7, [r1, #4]
 800b3ba:	ed97 2a01 	vldr	s4, [r7, #4]
 800b3be:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3c2:	9a03      	ldr	r2, [sp, #12]
 800b3c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b3c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b3cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b3d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b3d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b3d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b3dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b3e0:	ed81 5a00 	vstr	s10, [r1]
 800b3e4:	ed93 5a01 	vldr	s10, [r3, #4]
 800b3e8:	edd7 4a01 	vldr	s9, [r7, #4]
 800b3ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b3f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b3f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b3f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b3fc:	ed81 5a01 	vstr	s10, [r1, #4]
 800b400:	edd2 1a00 	vldr	s3, [r2]
 800b404:	edd2 2a01 	vldr	s5, [r2, #4]
 800b408:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b40c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b410:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b414:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b418:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b41c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b420:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b424:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b428:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b42c:	edc3 2a00 	vstr	s5, [r3]
 800b430:	ed83 5a01 	vstr	s10, [r3, #4]
 800b434:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b438:	9b00      	ldr	r3, [sp, #0]
 800b43a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b43e:	ed93 4a01 	vldr	s8, [r3, #4]
 800b442:	ed93 5a00 	vldr	s10, [r3]
 800b446:	9b02      	ldr	r3, [sp, #8]
 800b448:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b44c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b450:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b454:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b458:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b45c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b460:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b464:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b468:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b46c:	ed80 6a01 	vstr	s12, [r0, #4]
 800b470:	edc0 5a00 	vstr	s11, [r0]
 800b474:	edd3 5a01 	vldr	s11, [r3, #4]
 800b478:	edd3 6a00 	vldr	s13, [r3]
 800b47c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b480:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b484:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b488:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b48c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b490:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b494:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b498:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b49c:	ed87 7a01 	vstr	s14, [r7, #4]
 800b4a0:	edc7 7a00 	vstr	s15, [r7]
 800b4a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	686a      	ldr	r2, [r5, #4]
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	f000 fa1d 	bl	800b8ec <arm_radix8_butterfly_f32>
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	686a      	ldr	r2, [r5, #4]
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	f000 fa17 	bl	800b8ec <arm_radix8_butterfly_f32>
 800b4be:	9808      	ldr	r0, [sp, #32]
 800b4c0:	686a      	ldr	r2, [r5, #4]
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f000 fa11 	bl	800b8ec <arm_radix8_butterfly_f32>
 800b4ca:	686a      	ldr	r2, [r5, #4]
 800b4cc:	9801      	ldr	r0, [sp, #4]
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	b00d      	add	sp, #52	@ 0x34
 800b4d4:	ecbd 8b0a 	vpop	{d8-d12}
 800b4d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	f000 ba06 	b.w	800b8ec <arm_radix8_butterfly_f32>

0800b4e0 <arm_cfft_f32>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	2a01      	cmp	r2, #1
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	4617      	mov	r7, r2
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	4698      	mov	r8, r3
 800b4ee:	8805      	ldrh	r5, [r0, #0]
 800b4f0:	d056      	beq.n	800b5a0 <arm_cfft_f32+0xc0>
 800b4f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b4f6:	d063      	beq.n	800b5c0 <arm_cfft_f32+0xe0>
 800b4f8:	d916      	bls.n	800b528 <arm_cfft_f32+0x48>
 800b4fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b4fe:	d01a      	beq.n	800b536 <arm_cfft_f32+0x56>
 800b500:	d947      	bls.n	800b592 <arm_cfft_f32+0xb2>
 800b502:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b506:	d05b      	beq.n	800b5c0 <arm_cfft_f32+0xe0>
 800b508:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b50c:	d105      	bne.n	800b51a <arm_cfft_f32+0x3a>
 800b50e:	2301      	movs	r3, #1
 800b510:	6872      	ldr	r2, [r6, #4]
 800b512:	4629      	mov	r1, r5
 800b514:	4620      	mov	r0, r4
 800b516:	f000 f9e9 	bl	800b8ec <arm_radix8_butterfly_f32>
 800b51a:	f1b8 0f00 	cmp.w	r8, #0
 800b51e:	d111      	bne.n	800b544 <arm_cfft_f32+0x64>
 800b520:	2f01      	cmp	r7, #1
 800b522:	d016      	beq.n	800b552 <arm_cfft_f32+0x72>
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	2d20      	cmp	r5, #32
 800b52a:	d049      	beq.n	800b5c0 <arm_cfft_f32+0xe0>
 800b52c:	d935      	bls.n	800b59a <arm_cfft_f32+0xba>
 800b52e:	2d40      	cmp	r5, #64	@ 0x40
 800b530:	d0ed      	beq.n	800b50e <arm_cfft_f32+0x2e>
 800b532:	2d80      	cmp	r5, #128	@ 0x80
 800b534:	d1f1      	bne.n	800b51a <arm_cfft_f32+0x3a>
 800b536:	4621      	mov	r1, r4
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff fcab 	bl	800ae94 <arm_cfft_radix8by2_f32>
 800b53e:	f1b8 0f00 	cmp.w	r8, #0
 800b542:	d0ed      	beq.n	800b520 <arm_cfft_f32+0x40>
 800b544:	68b2      	ldr	r2, [r6, #8]
 800b546:	89b1      	ldrh	r1, [r6, #12]
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 f841 	bl	800b5d0 <arm_bitreversal_32>
 800b54e:	2f01      	cmp	r7, #1
 800b550:	d1e8      	bne.n	800b524 <arm_cfft_f32+0x44>
 800b552:	ee07 5a90 	vmov	s15, r5
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b55e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b562:	2d00      	cmp	r5, #0
 800b564:	d0de      	beq.n	800b524 <arm_cfft_f32+0x44>
 800b566:	f104 0108 	add.w	r1, r4, #8
 800b56a:	2300      	movs	r3, #0
 800b56c:	3301      	adds	r3, #1
 800b56e:	429d      	cmp	r5, r3
 800b570:	f101 0108 	add.w	r1, r1, #8
 800b574:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b578:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b57c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b580:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b584:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b588:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b58c:	d1ee      	bne.n	800b56c <arm_cfft_f32+0x8c>
 800b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b592:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b596:	d0ba      	beq.n	800b50e <arm_cfft_f32+0x2e>
 800b598:	e7bf      	b.n	800b51a <arm_cfft_f32+0x3a>
 800b59a:	2d10      	cmp	r5, #16
 800b59c:	d0cb      	beq.n	800b536 <arm_cfft_f32+0x56>
 800b59e:	e7bc      	b.n	800b51a <arm_cfft_f32+0x3a>
 800b5a0:	b19d      	cbz	r5, 800b5ca <arm_cfft_f32+0xea>
 800b5a2:	f101 030c 	add.w	r3, r1, #12
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b5ac:	3201      	adds	r2, #1
 800b5ae:	eef1 7a67 	vneg.f32	s15, s15
 800b5b2:	4295      	cmp	r5, r2
 800b5b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b5b8:	f103 0308 	add.w	r3, r3, #8
 800b5bc:	d1f4      	bne.n	800b5a8 <arm_cfft_f32+0xc8>
 800b5be:	e798      	b.n	800b4f2 <arm_cfft_f32+0x12>
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7ff fd36 	bl	800b034 <arm_cfft_radix8by4_f32>
 800b5c8:	e7a7      	b.n	800b51a <arm_cfft_f32+0x3a>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0aa      	beq.n	800b524 <arm_cfft_f32+0x44>
 800b5ce:	e7b9      	b.n	800b544 <arm_cfft_f32+0x64>

0800b5d0 <arm_bitreversal_32>:
 800b5d0:	b1e9      	cbz	r1, 800b60e <arm_bitreversal_32+0x3e>
 800b5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d4:	2500      	movs	r5, #0
 800b5d6:	f102 0e02 	add.w	lr, r2, #2
 800b5da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b5de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b5e2:	08a4      	lsrs	r4, r4, #2
 800b5e4:	089b      	lsrs	r3, r3, #2
 800b5e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b5ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b5ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b5f2:	00a6      	lsls	r6, r4, #2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	1d34      	adds	r4, r6, #4
 800b5fe:	3502      	adds	r5, #2
 800b600:	58c6      	ldr	r6, [r0, r3]
 800b602:	5907      	ldr	r7, [r0, r4]
 800b604:	50c7      	str	r7, [r0, r3]
 800b606:	428d      	cmp	r5, r1
 800b608:	5106      	str	r6, [r0, r4]
 800b60a:	d3e6      	bcc.n	800b5da <arm_bitreversal_32+0xa>
 800b60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60e:	4770      	bx	lr

0800b610 <arm_cmplx_mag_f32>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	ed2d 8b02 	vpush	{d8}
 800b618:	0897      	lsrs	r7, r2, #2
 800b61a:	b084      	sub	sp, #16
 800b61c:	d077      	beq.n	800b70e <arm_cmplx_mag_f32+0xfe>
 800b61e:	f04f 0800 	mov.w	r8, #0
 800b622:	f100 0420 	add.w	r4, r0, #32
 800b626:	f101 0510 	add.w	r5, r1, #16
 800b62a:	463e      	mov	r6, r7
 800b62c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b630:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b634:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b63c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	f2c0 80c5 	blt.w	800b7d6 <arm_cmplx_mag_f32+0x1c6>
 800b64c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b654:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b658:	f100 80cb 	bmi.w	800b7f2 <arm_cmplx_mag_f32+0x1e2>
 800b65c:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b660:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b664:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b668:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b66c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b670:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b674:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67c:	f2c0 80a8 	blt.w	800b7d0 <arm_cmplx_mag_f32+0x1c0>
 800b680:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b68c:	f100 80a8 	bmi.w	800b7e0 <arm_cmplx_mag_f32+0x1d0>
 800b690:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b694:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b698:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b69c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b6a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b6a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	f2c0 808b 	blt.w	800b7ca <arm_cmplx_mag_f32+0x1ba>
 800b6b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b6c0:	f100 80a9 	bmi.w	800b816 <arm_cmplx_mag_f32+0x206>
 800b6c4:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b6c8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b6cc:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b6d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b6d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b6dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e4:	db6e      	blt.n	800b7c4 <arm_cmplx_mag_f32+0x1b4>
 800b6e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b6f2:	f100 8087 	bmi.w	800b804 <arm_cmplx_mag_f32+0x1f4>
 800b6f6:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b6fa:	3e01      	subs	r6, #1
 800b6fc:	f104 0420 	add.w	r4, r4, #32
 800b700:	f105 0510 	add.w	r5, r5, #16
 800b704:	d192      	bne.n	800b62c <arm_cmplx_mag_f32+0x1c>
 800b706:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b70a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b70e:	f012 0203 	ands.w	r2, r2, #3
 800b712:	d052      	beq.n	800b7ba <arm_cmplx_mag_f32+0x1aa>
 800b714:	ed90 0a00 	vldr	s0, [r0]
 800b718:	edd0 7a01 	vldr	s15, [r0, #4]
 800b71c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b720:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b724:	2300      	movs	r3, #0
 800b726:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b72a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b732:	bfb8      	it	lt
 800b734:	600b      	strlt	r3, [r1, #0]
 800b736:	db08      	blt.n	800b74a <arm_cmplx_mag_f32+0x13a>
 800b738:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b740:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b744:	d479      	bmi.n	800b83a <arm_cmplx_mag_f32+0x22a>
 800b746:	ed81 8a00 	vstr	s16, [r1]
 800b74a:	3a01      	subs	r2, #1
 800b74c:	d035      	beq.n	800b7ba <arm_cmplx_mag_f32+0x1aa>
 800b74e:	ed90 0a02 	vldr	s0, [r0, #8]
 800b752:	edd0 7a03 	vldr	s15, [r0, #12]
 800b756:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b75a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b75e:	2300      	movs	r3, #0
 800b760:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b764:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76c:	bfb8      	it	lt
 800b76e:	604b      	strlt	r3, [r1, #4]
 800b770:	db08      	blt.n	800b784 <arm_cmplx_mag_f32+0x174>
 800b772:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b77e:	d453      	bmi.n	800b828 <arm_cmplx_mag_f32+0x218>
 800b780:	ed81 8a01 	vstr	s16, [r1, #4]
 800b784:	2a01      	cmp	r2, #1
 800b786:	d018      	beq.n	800b7ba <arm_cmplx_mag_f32+0x1aa>
 800b788:	ed90 0a04 	vldr	s0, [r0, #16]
 800b78c:	edd0 7a05 	vldr	s15, [r0, #20]
 800b790:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b798:	2300      	movs	r3, #0
 800b79a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b79e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	db19      	blt.n	800b7dc <arm_cmplx_mag_f32+0x1cc>
 800b7a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b7b4:	d44a      	bmi.n	800b84c <arm_cmplx_mag_f32+0x23c>
 800b7b6:	ed81 8a02 	vstr	s16, [r1, #8]
 800b7ba:	b004      	add	sp, #16
 800b7bc:	ecbd 8b02 	vpop	{d8}
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	f845 8c04 	str.w	r8, [r5, #-4]
 800b7c8:	e797      	b.n	800b6fa <arm_cmplx_mag_f32+0xea>
 800b7ca:	f845 8c08 	str.w	r8, [r5, #-8]
 800b7ce:	e77b      	b.n	800b6c8 <arm_cmplx_mag_f32+0xb8>
 800b7d0:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b7d4:	e75e      	b.n	800b694 <arm_cmplx_mag_f32+0x84>
 800b7d6:	f845 8c10 	str.w	r8, [r5, #-16]
 800b7da:	e741      	b.n	800b660 <arm_cmplx_mag_f32+0x50>
 800b7dc:	608b      	str	r3, [r1, #8]
 800b7de:	e7ec      	b.n	800b7ba <arm_cmplx_mag_f32+0x1aa>
 800b7e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b7e4:	9001      	str	r0, [sp, #4]
 800b7e6:	f000 fbc3 	bl	800bf70 <sqrtf>
 800b7ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b7ee:	9801      	ldr	r0, [sp, #4]
 800b7f0:	e74e      	b.n	800b690 <arm_cmplx_mag_f32+0x80>
 800b7f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b7f6:	9001      	str	r0, [sp, #4]
 800b7f8:	f000 fbba 	bl	800bf70 <sqrtf>
 800b7fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b800:	9801      	ldr	r0, [sp, #4]
 800b802:	e72b      	b.n	800b65c <arm_cmplx_mag_f32+0x4c>
 800b804:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b808:	9001      	str	r0, [sp, #4]
 800b80a:	f000 fbb1 	bl	800bf70 <sqrtf>
 800b80e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b812:	9801      	ldr	r0, [sp, #4]
 800b814:	e76f      	b.n	800b6f6 <arm_cmplx_mag_f32+0xe6>
 800b816:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b81a:	9001      	str	r0, [sp, #4]
 800b81c:	f000 fba8 	bl	800bf70 <sqrtf>
 800b820:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b824:	9801      	ldr	r0, [sp, #4]
 800b826:	e74d      	b.n	800b6c4 <arm_cmplx_mag_f32+0xb4>
 800b828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b82c:	9201      	str	r2, [sp, #4]
 800b82e:	f000 fb9f 	bl	800bf70 <sqrtf>
 800b832:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b836:	9903      	ldr	r1, [sp, #12]
 800b838:	e7a2      	b.n	800b780 <arm_cmplx_mag_f32+0x170>
 800b83a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83e:	9201      	str	r2, [sp, #4]
 800b840:	f000 fb96 	bl	800bf70 <sqrtf>
 800b844:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b848:	9903      	ldr	r1, [sp, #12]
 800b84a:	e77c      	b.n	800b746 <arm_cmplx_mag_f32+0x136>
 800b84c:	9101      	str	r1, [sp, #4]
 800b84e:	f000 fb8f 	bl	800bf70 <sqrtf>
 800b852:	9901      	ldr	r1, [sp, #4]
 800b854:	e7af      	b.n	800b7b6 <arm_cmplx_mag_f32+0x1a6>
 800b856:	bf00      	nop

0800b858 <arm_cos_f32>:
 800b858:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b8e0 <arm_cos_f32+0x88>
 800b85c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b860:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b864:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b868:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b870:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b874:	d504      	bpl.n	800b880 <arm_cos_f32+0x28>
 800b876:	ee17 3a90 	vmov	r3, s15
 800b87a:	3b01      	subs	r3, #1
 800b87c:	ee07 3a90 	vmov	s15, r3
 800b880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b884:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800b8e4 <arm_cos_f32+0x8c>
 800b888:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b88c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b890:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b894:	ee17 3a90 	vmov	r3, s15
 800b898:	b29b      	uxth	r3, r3
 800b89a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b89e:	d21a      	bcs.n	800b8d6 <arm_cos_f32+0x7e>
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a8:	1c59      	adds	r1, r3, #1
 800b8aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8ae:	4a0e      	ldr	r2, [pc, #56]	@ (800b8e8 <arm_cos_f32+0x90>)
 800b8b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b8b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b8bc:	ed93 7a00 	vldr	s14, [r3]
 800b8c0:	edd2 6a00 	vldr	s13, [r2]
 800b8c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b8c8:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b8cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8d4:	4770      	bx	lr
 800b8d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8da:	2101      	movs	r1, #1
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e7e6      	b.n	800b8ae <arm_cos_f32+0x56>
 800b8e0:	3e22f983 	.word	0x3e22f983
 800b8e4:	44000000 	.word	0x44000000
 800b8e8:	0800c6d8 	.word	0x0800c6d8

0800b8ec <arm_radix8_butterfly_f32>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	ed2d 8b10 	vpush	{d8-d15}
 800b8f4:	b095      	sub	sp, #84	@ 0x54
 800b8f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800bbe4 <arm_radix8_butterfly_f32+0x2f8>
 800b902:	9012      	str	r0, [sp, #72]	@ 0x48
 800b904:	468b      	mov	fp, r1
 800b906:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b908:	4689      	mov	r9, r1
 800b90a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b90e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b910:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b912:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b916:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b91a:	eb03 0508 	add.w	r5, r3, r8
 800b91e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b922:	eb05 040e 	add.w	r4, r5, lr
 800b926:	0137      	lsls	r7, r6, #4
 800b928:	eba6 030a 	sub.w	r3, r6, sl
 800b92c:	eb04 000e 	add.w	r0, r4, lr
 800b930:	44b2      	add	sl, r6
 800b932:	1d3a      	adds	r2, r7, #4
 800b934:	9702      	str	r7, [sp, #8]
 800b936:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b93a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b93e:	ebae 0c06 	sub.w	ip, lr, r6
 800b942:	9703      	str	r7, [sp, #12]
 800b944:	eb03 0708 	add.w	r7, r3, r8
 800b948:	9701      	str	r7, [sp, #4]
 800b94a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b94e:	9706      	str	r7, [sp, #24]
 800b950:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b952:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b956:	f10e 0104 	add.w	r1, lr, #4
 800b95a:	4439      	add	r1, r7
 800b95c:	443a      	add	r2, r7
 800b95e:	0137      	lsls	r7, r6, #4
 800b960:	00f6      	lsls	r6, r6, #3
 800b962:	9704      	str	r7, [sp, #16]
 800b964:	9605      	str	r6, [sp, #20]
 800b966:	9f01      	ldr	r7, [sp, #4]
 800b968:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b96a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b96e:	f04f 0c00 	mov.w	ip, #0
 800b972:	edd4 6a00 	vldr	s13, [r4]
 800b976:	edd7 1a00 	vldr	s3, [r7]
 800b97a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b97e:	edd5 5a00 	vldr	s11, [r5]
 800b982:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b986:	ed90 6a00 	vldr	s12, [r0]
 800b98a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b98e:	ed93 3a00 	vldr	s6, [r3]
 800b992:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b996:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b99a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b99e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b9a2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b9a6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b9aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9ae:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b9b2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b9b6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b9ba:	ed85 4a00 	vstr	s8, [r5]
 800b9be:	edd1 6a00 	vldr	s13, [r1]
 800b9c2:	ed94 9a01 	vldr	s18, [r4, #4]
 800b9c6:	edd3 2a01 	vldr	s5, [r3, #4]
 800b9ca:	edd7 8a01 	vldr	s17, [r7, #4]
 800b9ce:	edd6 0a00 	vldr	s1, [r6]
 800b9d2:	edd5 3a01 	vldr	s7, [r5, #4]
 800b9d6:	ed90 8a01 	vldr	s16, [r0, #4]
 800b9da:	ed92 7a00 	vldr	s14, [r2]
 800b9de:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b9e2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b9e6:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b9ea:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b9ee:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b9f2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b9f6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b9fa:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b9fe:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ba02:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ba06:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ba0a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800ba0e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800ba12:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ba16:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ba1a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ba1e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ba22:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ba26:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ba2a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ba2e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ba32:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ba36:	ee33 2a20 	vadd.f32	s4, s6, s1
 800ba3a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ba3e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ba42:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ba46:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ba4a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800ba4e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800ba52:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ba56:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800ba5a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ba5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ba62:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ba66:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ba6a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ba6e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ba72:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ba76:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ba7a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ba7e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ba82:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ba86:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ba8a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ba8e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ba92:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ba96:	44dc      	add	ip, fp
 800ba98:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ba9c:	45e1      	cmp	r9, ip
 800ba9e:	ed86 8a00 	vstr	s16, [r6]
 800baa2:	ed85 2a01 	vstr	s4, [r5, #4]
 800baa6:	4456      	add	r6, sl
 800baa8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800baac:	4455      	add	r5, sl
 800baae:	edc0 6a00 	vstr	s13, [r0]
 800bab2:	ed82 1a00 	vstr	s2, [r2]
 800bab6:	ed80 5a01 	vstr	s10, [r0, #4]
 800baba:	4452      	add	r2, sl
 800babc:	ed01 3a01 	vstr	s6, [r1, #-4]
 800bac0:	4450      	add	r0, sl
 800bac2:	edc7 2a00 	vstr	s5, [r7]
 800bac6:	edc4 4a00 	vstr	s9, [r4]
 800baca:	ed83 7a00 	vstr	s14, [r3]
 800bace:	edc1 5a00 	vstr	s11, [r1]
 800bad2:	edc7 3a01 	vstr	s7, [r7, #4]
 800bad6:	4451      	add	r1, sl
 800bad8:	ed84 6a01 	vstr	s12, [r4, #4]
 800badc:	4457      	add	r7, sl
 800bade:	edc3 7a01 	vstr	s15, [r3, #4]
 800bae2:	4454      	add	r4, sl
 800bae4:	4453      	add	r3, sl
 800bae6:	f63f af44 	bhi.w	800b972 <arm_radix8_butterfly_f32+0x86>
 800baea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baec:	2b07      	cmp	r3, #7
 800baee:	f240 81b7 	bls.w	800be60 <arm_radix8_butterfly_f32+0x574>
 800baf2:	9b06      	ldr	r3, [sp, #24]
 800baf4:	9903      	ldr	r1, [sp, #12]
 800baf6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800baf8:	9e05      	ldr	r6, [sp, #20]
 800bafa:	9a04      	ldr	r2, [sp, #16]
 800bafc:	f103 0c08 	add.w	ip, r3, #8
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	3108      	adds	r1, #8
 800bb04:	f108 0808 	add.w	r8, r8, #8
 800bb08:	1841      	adds	r1, r0, r1
 800bb0a:	3608      	adds	r6, #8
 800bb0c:	330c      	adds	r3, #12
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4444      	add	r4, r8
 800bb12:	18c3      	adds	r3, r0, r3
 800bb14:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb16:	1981      	adds	r1, r0, r6
 800bb18:	f10e 0e08 	add.w	lr, lr, #8
 800bb1c:	3208      	adds	r2, #8
 800bb1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb20:	9107      	str	r1, [sp, #28]
 800bb22:	4604      	mov	r4, r0
 800bb24:	4601      	mov	r1, r0
 800bb26:	9304      	str	r3, [sp, #16]
 800bb28:	f100 030c 	add.w	r3, r0, #12
 800bb2c:	4474      	add	r4, lr
 800bb2e:	f04f 0801 	mov.w	r8, #1
 800bb32:	1882      	adds	r2, r0, r2
 800bb34:	4461      	add	r1, ip
 800bb36:	9305      	str	r3, [sp, #20]
 800bb38:	464b      	mov	r3, r9
 800bb3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb3c:	46c1      	mov	r9, r8
 800bb3e:	9208      	str	r2, [sp, #32]
 800bb40:	46d8      	mov	r8, fp
 800bb42:	9106      	str	r1, [sp, #24]
 800bb44:	f04f 0e00 	mov.w	lr, #0
 800bb48:	469b      	mov	fp, r3
 800bb4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb4e:	449e      	add	lr, r3
 800bb50:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800bb54:	441a      	add	r2, r3
 800bb56:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb58:	441a      	add	r2, r3
 800bb5a:	18d4      	adds	r4, r2, r3
 800bb5c:	18e5      	adds	r5, r4, r3
 800bb5e:	18ee      	adds	r6, r5, r3
 800bb60:	18f7      	adds	r7, r6, r3
 800bb62:	eb07 0c03 	add.w	ip, r7, r3
 800bb66:	920d      	str	r2, [sp, #52]	@ 0x34
 800bb68:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800bb6c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800bb70:	910c      	str	r1, [sp, #48]	@ 0x30
 800bb72:	4419      	add	r1, r3
 800bb74:	9103      	str	r1, [sp, #12]
 800bb76:	4419      	add	r1, r3
 800bb78:	18ca      	adds	r2, r1, r3
 800bb7a:	9202      	str	r2, [sp, #8]
 800bb7c:	441a      	add	r2, r3
 800bb7e:	18d0      	adds	r0, r2, r3
 800bb80:	ed92 ea01 	vldr	s28, [r2, #4]
 800bb84:	9a02      	ldr	r2, [sp, #8]
 800bb86:	edd4 7a00 	vldr	s15, [r4]
 800bb8a:	edd2 da01 	vldr	s27, [r2, #4]
 800bb8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bb90:	ed91 da01 	vldr	s26, [r1, #4]
 800bb94:	ed92 ca01 	vldr	s24, [r2, #4]
 800bb98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb9a:	9903      	ldr	r1, [sp, #12]
 800bb9c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bba0:	edd2 7a00 	vldr	s15, [r2]
 800bba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bba6:	edcd 7a02 	vstr	s15, [sp, #8]
 800bbaa:	edd2 7a00 	vldr	s15, [r2]
 800bbae:	edd0 ea01 	vldr	s29, [r0, #4]
 800bbb2:	edd1 ca01 	vldr	s25, [r1, #4]
 800bbb6:	eddc ba00 	vldr	s23, [ip]
 800bbba:	edd7 aa00 	vldr	s21, [r7]
 800bbbe:	ed96 aa00 	vldr	s20, [r6]
 800bbc2:	edd5 9a00 	vldr	s19, [r5]
 800bbc6:	edcd 7a01 	vstr	s15, [sp, #4]
 800bbca:	4403      	add	r3, r0
 800bbcc:	ed93 fa01 	vldr	s30, [r3, #4]
 800bbd0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800bbd4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800bbd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800bbe0:	46cc      	mov	ip, r9
 800bbe2:	e001      	b.n	800bbe8 <arm_radix8_butterfly_f32+0x2fc>
 800bbe4:	3f3504f3 	.word	0x3f3504f3
 800bbe8:	ed91 6a00 	vldr	s12, [r1]
 800bbec:	ed93 5a00 	vldr	s10, [r3]
 800bbf0:	edd0 fa00 	vldr	s31, [r0]
 800bbf4:	edd4 7a00 	vldr	s15, [r4]
 800bbf8:	ed95 7a00 	vldr	s14, [r5]
 800bbfc:	ed56 3a01 	vldr	s7, [r6, #-4]
 800bc00:	ed17 3a01 	vldr	s6, [r7, #-4]
 800bc04:	ed92 2a00 	vldr	s4, [r2]
 800bc08:	ed96 0a00 	vldr	s0, [r6]
 800bc0c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bc10:	ee32 1a06 	vadd.f32	s2, s4, s12
 800bc14:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800bc18:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bc1c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800bc20:	ee71 6a24 	vadd.f32	s13, s2, s9
 800bc24:	ee32 2a46 	vsub.f32	s4, s4, s12
 800bc28:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800bc2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc30:	ed06 6a01 	vstr	s12, [r6, #-4]
 800bc34:	edd4 8a01 	vldr	s17, [r4, #4]
 800bc38:	ed92 9a01 	vldr	s18, [r2, #4]
 800bc3c:	edd7 0a00 	vldr	s1, [r7]
 800bc40:	edd1 2a01 	vldr	s5, [r1, #4]
 800bc44:	ed95 7a01 	vldr	s14, [r5, #4]
 800bc48:	ed93 6a01 	vldr	s12, [r3, #4]
 800bc4c:	edd0 5a01 	vldr	s11, [r0, #4]
 800bc50:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800bc54:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800bc58:	ee39 5a62 	vsub.f32	s10, s18, s5
 800bc5c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800bc60:	ee38 4a44 	vsub.f32	s8, s16, s8
 800bc64:	ee38 7a87 	vadd.f32	s14, s17, s14
 800bc68:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800bc6c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800bc70:	ee32 9a27 	vadd.f32	s18, s4, s15
 800bc74:	ee72 7a67 	vsub.f32	s15, s4, s15
 800bc78:	ee30 2a06 	vadd.f32	s4, s0, s12
 800bc7c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800bc80:	ee71 4a64 	vsub.f32	s9, s2, s9
 800bc84:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800bc88:	ee32 1a08 	vadd.f32	s2, s4, s16
 800bc8c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800bc90:	ee32 2a48 	vsub.f32	s4, s4, s16
 800bc94:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800bc98:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800bc9c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800bca0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800bca4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800bca8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800bcac:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800bcb0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bcb4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800bcb8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800bcbc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bcc0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bcc4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bcc8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800bccc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bcd0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bcd4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bcd8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800bcdc:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bce0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bce4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bce8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800bcec:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800bcf0:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bcf4:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bcf8:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bcfc:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bd00:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800bd04:	ed9d 2a01 	vldr	s4, [sp, #4]
 800bd08:	eddd 1a02 	vldr	s3, [sp, #8]
 800bd0c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bd10:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bd14:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bd18:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bd1c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bd20:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bd24:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bd28:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bd2c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bd30:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bd34:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bd38:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bd3c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800bd40:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bd44:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bd48:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bd4c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800bd50:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bd54:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bd58:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bd5c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bd60:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bd64:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bd68:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bd6c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bd70:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bd74:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bd78:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bd7c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bd80:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bd84:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bd88:	eddd 5a03 	vldr	s11, [sp, #12]
 800bd8c:	edc6 fa00 	vstr	s31, [r6]
 800bd90:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bd94:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bd98:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bd9c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bda0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bda4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bda8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bdac:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bdb0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bdb4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bdb8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bdbc:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bdc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bdc4:	44c4      	add	ip, r8
 800bdc6:	45e3      	cmp	fp, ip
 800bdc8:	edc3 3a00 	vstr	s7, [r3]
 800bdcc:	edc3 6a01 	vstr	s13, [r3, #4]
 800bdd0:	4456      	add	r6, sl
 800bdd2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bdd6:	edc7 0a00 	vstr	s1, [r7]
 800bdda:	4453      	add	r3, sl
 800bddc:	ed80 2a00 	vstr	s4, [r0]
 800bde0:	edc0 2a01 	vstr	s5, [r0, #4]
 800bde4:	4457      	add	r7, sl
 800bde6:	edc2 1a00 	vstr	s3, [r2]
 800bdea:	ed82 7a01 	vstr	s14, [r2, #4]
 800bdee:	4450      	add	r0, sl
 800bdf0:	ed85 8a00 	vstr	s16, [r5]
 800bdf4:	ed85 0a01 	vstr	s0, [r5, #4]
 800bdf8:	4452      	add	r2, sl
 800bdfa:	edc1 4a00 	vstr	s9, [r1]
 800bdfe:	4455      	add	r5, sl
 800be00:	ed81 3a01 	vstr	s6, [r1, #4]
 800be04:	edc4 8a00 	vstr	s17, [r4]
 800be08:	ed84 6a01 	vstr	s12, [r4, #4]
 800be0c:	4451      	add	r1, sl
 800be0e:	4454      	add	r4, sl
 800be10:	f63f aeea 	bhi.w	800bbe8 <arm_radix8_butterfly_f32+0x2fc>
 800be14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be16:	3308      	adds	r3, #8
 800be18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be1c:	3308      	adds	r3, #8
 800be1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be22:	3308      	adds	r3, #8
 800be24:	9309      	str	r3, [sp, #36]	@ 0x24
 800be26:	9b08      	ldr	r3, [sp, #32]
 800be28:	3308      	adds	r3, #8
 800be2a:	9308      	str	r3, [sp, #32]
 800be2c:	9b07      	ldr	r3, [sp, #28]
 800be2e:	3308      	adds	r3, #8
 800be30:	9307      	str	r3, [sp, #28]
 800be32:	9b06      	ldr	r3, [sp, #24]
 800be34:	3308      	adds	r3, #8
 800be36:	9306      	str	r3, [sp, #24]
 800be38:	9b05      	ldr	r3, [sp, #20]
 800be3a:	3308      	adds	r3, #8
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	3308      	adds	r3, #8
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be46:	f109 0901 	add.w	r9, r9, #1
 800be4a:	454b      	cmp	r3, r9
 800be4c:	f47f ae7d 	bne.w	800bb4a <arm_radix8_butterfly_f32+0x25e>
 800be50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	b29b      	uxth	r3, r3
 800be56:	46d9      	mov	r9, fp
 800be58:	9310      	str	r3, [sp, #64]	@ 0x40
 800be5a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800be5e:	e554      	b.n	800b90a <arm_radix8_butterfly_f32+0x1e>
 800be60:	b015      	add	sp, #84	@ 0x54
 800be62:	ecbd 8b10 	vpop	{d8-d15}
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	bf00      	nop

0800be6c <_ZdlPvj>:
 800be6c:	f000 b875 	b.w	800bf5a <_ZdlPv>

0800be70 <_Znwj>:
 800be70:	2801      	cmp	r0, #1
 800be72:	bf38      	it	cc
 800be74:	2001      	movcc	r0, #1
 800be76:	b510      	push	{r4, lr}
 800be78:	4604      	mov	r4, r0
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 f8a0 	bl	800bfc0 <malloc>
 800be80:	b100      	cbz	r0, 800be84 <_Znwj+0x14>
 800be82:	bd10      	pop	{r4, pc}
 800be84:	f000 f86c 	bl	800bf60 <_ZSt15get_new_handlerv>
 800be88:	b908      	cbnz	r0, 800be8e <_Znwj+0x1e>
 800be8a:	f000 f892 	bl	800bfb2 <abort>
 800be8e:	4780      	blx	r0
 800be90:	e7f3      	b.n	800be7a <_Znwj+0xa>

0800be92 <_ZNSaIcEC1Ev>:
 800be92:	4770      	bx	lr

0800be94 <_ZNSaIcED1Ev>:
 800be94:	4770      	bx	lr

0800be96 <_ZSt17__throw_bad_allocv>:
 800be96:	b508      	push	{r3, lr}
 800be98:	f000 f88b 	bl	800bfb2 <abort>

0800be9c <_ZSt20__throw_length_errorPKc>:
 800be9c:	b508      	push	{r3, lr}
 800be9e:	f000 f888 	bl	800bfb2 <abort>

0800bea2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800bea2:	b10a      	cbz	r2, 800bea8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800bea4:	f000 b94a 	b.w	800c13c <memcmp>
 800bea8:	4610      	mov	r0, r2
 800beaa:	4770      	bx	lr

0800beac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800beac:	6001      	str	r1, [r0, #0]
 800beae:	4770      	bx	lr

0800beb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800beb0:	6800      	ldr	r0, [r0, #0]
 800beb2:	4770      	bx	lr

0800beb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800beb4:	3008      	adds	r0, #8
 800beb6:	4770      	bx	lr

0800beb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800beb8:	6081      	str	r1, [r0, #8]
 800beba:	4770      	bx	lr

0800bebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800bebc:	6803      	ldr	r3, [r0, #0]
 800bebe:	6041      	str	r1, [r0, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	545a      	strb	r2, [r3, r1]
 800bec4:	4770      	bx	lr

0800bec6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800bec6:	f850 3b08 	ldr.w	r3, [r0], #8
 800beca:	1a1b      	subs	r3, r3, r0
 800becc:	4258      	negs	r0, r3
 800bece:	4158      	adcs	r0, r3
 800bed0:	4770      	bx	lr
	...

0800bed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800bed4:	b508      	push	{r3, lr}
 800bed6:	680b      	ldr	r3, [r1, #0]
 800bed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bedc:	d302      	bcc.n	800bee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bede:	480d      	ldr	r0, [pc, #52]	@ (800bf14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800bee0:	f7ff ffdc 	bl	800be9c <_ZSt20__throw_length_errorPKc>
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d90b      	bls.n	800bf00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bee8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800beec:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800bef0:	d206      	bcs.n	800bf00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bef2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800bef6:	bf2a      	itet	cs
 800bef8:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800befc:	6008      	strcc	r0, [r1, #0]
 800befe:	600b      	strcs	r3, [r1, #0]
 800bf00:	6808      	ldr	r0, [r1, #0]
 800bf02:	3001      	adds	r0, #1
 800bf04:	d501      	bpl.n	800bf0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800bf06:	f7ff ffc6 	bl	800be96 <_ZSt17__throw_bad_allocv>
 800bf0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bf0e:	f7ff bfaf 	b.w	800be70 <_Znwj>
 800bf12:	bf00      	nop
 800bf14:	0800eedc 	.word	0x0800eedc

0800bf18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	f7ff ffd3 	bl	800bec6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bf20:	b920      	cbnz	r0, 800bf2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800bf22:	6820      	ldr	r0, [r4, #0]
 800bf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf28:	f000 b817 	b.w	800bf5a <_ZdlPv>
 800bf2c:	bd10      	pop	{r4, pc}

0800bf2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	4604      	mov	r4, r0
 800bf32:	f7ff fff1 	bl	800bf18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bf36:	4620      	mov	r0, r4
 800bf38:	bd10      	pop	{r4, pc}

0800bf3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800bf3a:	b538      	push	{r3, r4, r5, lr}
 800bf3c:	6845      	ldr	r5, [r0, #4]
 800bf3e:	684c      	ldr	r4, [r1, #4]
 800bf40:	6800      	ldr	r0, [r0, #0]
 800bf42:	6809      	ldr	r1, [r1, #0]
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	462a      	mov	r2, r5
 800bf48:	bf28      	it	cs
 800bf4a:	4622      	movcs	r2, r4
 800bf4c:	f7ff ffa9 	bl	800bea2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800bf50:	b900      	cbnz	r0, 800bf54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800bf52:	1b28      	subs	r0, r5, r4
 800bf54:	bd38      	pop	{r3, r4, r5, pc}

0800bf56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800bf56:	6001      	str	r1, [r0, #0]
 800bf58:	4770      	bx	lr

0800bf5a <_ZdlPv>:
 800bf5a:	f000 b839 	b.w	800bfd0 <free>
	...

0800bf60 <_ZSt15get_new_handlerv>:
 800bf60:	4b02      	ldr	r3, [pc, #8]	@ (800bf6c <_ZSt15get_new_handlerv+0xc>)
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	f3bf 8f5b 	dmb	ish
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20001f18 	.word	0x20001f18

0800bf70 <sqrtf>:
 800bf70:	b508      	push	{r3, lr}
 800bf72:	ed2d 8b02 	vpush	{d8}
 800bf76:	eeb0 8a40 	vmov.f32	s16, s0
 800bf7a:	f000 f817 	bl	800bfac <__ieee754_sqrtf>
 800bf7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	d60c      	bvs.n	800bfa2 <sqrtf+0x32>
 800bf88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bfa8 <sqrtf+0x38>
 800bf8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf94:	d505      	bpl.n	800bfa2 <sqrtf+0x32>
 800bf96:	f000 f93d 	bl	800c214 <__errno>
 800bf9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf9e:	2321      	movs	r3, #33	@ 0x21
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	ecbd 8b02 	vpop	{d8}
 800bfa6:	bd08      	pop	{r3, pc}
 800bfa8:	00000000 	.word	0x00000000

0800bfac <__ieee754_sqrtf>:
 800bfac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bfb0:	4770      	bx	lr

0800bfb2 <abort>:
 800bfb2:	b508      	push	{r3, lr}
 800bfb4:	2006      	movs	r0, #6
 800bfb6:	f000 f901 	bl	800c1bc <raise>
 800bfba:	2001      	movs	r0, #1
 800bfbc:	f7f6 fe3c 	bl	8002c38 <_exit>

0800bfc0 <malloc>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	@ (800bfcc <malloc+0xc>)
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	f000 b82d 	b.w	800c024 <_malloc_r>
 800bfca:	bf00      	nop
 800bfcc:	20000018 	.word	0x20000018

0800bfd0 <free>:
 800bfd0:	4b02      	ldr	r3, [pc, #8]	@ (800bfdc <free+0xc>)
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	6818      	ldr	r0, [r3, #0]
 800bfd6:	f000 b949 	b.w	800c26c <_free_r>
 800bfda:	bf00      	nop
 800bfdc:	20000018 	.word	0x20000018

0800bfe0 <sbrk_aligned>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	4e0f      	ldr	r6, [pc, #60]	@ (800c020 <sbrk_aligned+0x40>)
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	6831      	ldr	r1, [r6, #0]
 800bfe8:	4605      	mov	r5, r0
 800bfea:	b911      	cbnz	r1, 800bff2 <sbrk_aligned+0x12>
 800bfec:	f000 f902 	bl	800c1f4 <_sbrk_r>
 800bff0:	6030      	str	r0, [r6, #0]
 800bff2:	4621      	mov	r1, r4
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 f8fd 	bl	800c1f4 <_sbrk_r>
 800bffa:	1c43      	adds	r3, r0, #1
 800bffc:	d103      	bne.n	800c006 <sbrk_aligned+0x26>
 800bffe:	f04f 34ff 	mov.w	r4, #4294967295
 800c002:	4620      	mov	r0, r4
 800c004:	bd70      	pop	{r4, r5, r6, pc}
 800c006:	1cc4      	adds	r4, r0, #3
 800c008:	f024 0403 	bic.w	r4, r4, #3
 800c00c:	42a0      	cmp	r0, r4
 800c00e:	d0f8      	beq.n	800c002 <sbrk_aligned+0x22>
 800c010:	1a21      	subs	r1, r4, r0
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f8ee 	bl	800c1f4 <_sbrk_r>
 800c018:	3001      	adds	r0, #1
 800c01a:	d1f2      	bne.n	800c002 <sbrk_aligned+0x22>
 800c01c:	e7ef      	b.n	800bffe <sbrk_aligned+0x1e>
 800c01e:	bf00      	nop
 800c020:	20001f1c 	.word	0x20001f1c

0800c024 <_malloc_r>:
 800c024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c028:	1ccd      	adds	r5, r1, #3
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	2d00      	cmp	r5, #0
 800c038:	4606      	mov	r6, r0
 800c03a:	db01      	blt.n	800c040 <_malloc_r+0x1c>
 800c03c:	42a9      	cmp	r1, r5
 800c03e:	d904      	bls.n	800c04a <_malloc_r+0x26>
 800c040:	230c      	movs	r3, #12
 800c042:	6033      	str	r3, [r6, #0]
 800c044:	2000      	movs	r0, #0
 800c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c120 <_malloc_r+0xfc>
 800c04e:	f000 f869 	bl	800c124 <__malloc_lock>
 800c052:	f8d8 3000 	ldr.w	r3, [r8]
 800c056:	461c      	mov	r4, r3
 800c058:	bb44      	cbnz	r4, 800c0ac <_malloc_r+0x88>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ffbf 	bl	800bfe0 <sbrk_aligned>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	4604      	mov	r4, r0
 800c066:	d158      	bne.n	800c11a <_malloc_r+0xf6>
 800c068:	f8d8 4000 	ldr.w	r4, [r8]
 800c06c:	4627      	mov	r7, r4
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d143      	bne.n	800c0fa <_malloc_r+0xd6>
 800c072:	2c00      	cmp	r4, #0
 800c074:	d04b      	beq.n	800c10e <_malloc_r+0xea>
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	4639      	mov	r1, r7
 800c07a:	4630      	mov	r0, r6
 800c07c:	eb04 0903 	add.w	r9, r4, r3
 800c080:	f000 f8b8 	bl	800c1f4 <_sbrk_r>
 800c084:	4581      	cmp	r9, r0
 800c086:	d142      	bne.n	800c10e <_malloc_r+0xea>
 800c088:	6821      	ldr	r1, [r4, #0]
 800c08a:	1a6d      	subs	r5, r5, r1
 800c08c:	4629      	mov	r1, r5
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ffa6 	bl	800bfe0 <sbrk_aligned>
 800c094:	3001      	adds	r0, #1
 800c096:	d03a      	beq.n	800c10e <_malloc_r+0xea>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	442b      	add	r3, r5
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	bb62      	cbnz	r2, 800c100 <_malloc_r+0xdc>
 800c0a6:	f8c8 7000 	str.w	r7, [r8]
 800c0aa:	e00f      	b.n	800c0cc <_malloc_r+0xa8>
 800c0ac:	6822      	ldr	r2, [r4, #0]
 800c0ae:	1b52      	subs	r2, r2, r5
 800c0b0:	d420      	bmi.n	800c0f4 <_malloc_r+0xd0>
 800c0b2:	2a0b      	cmp	r2, #11
 800c0b4:	d917      	bls.n	800c0e6 <_malloc_r+0xc2>
 800c0b6:	1961      	adds	r1, r4, r5
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	6025      	str	r5, [r4, #0]
 800c0bc:	bf18      	it	ne
 800c0be:	6059      	strne	r1, [r3, #4]
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	bf08      	it	eq
 800c0c4:	f8c8 1000 	streq.w	r1, [r8]
 800c0c8:	5162      	str	r2, [r4, r5]
 800c0ca:	604b      	str	r3, [r1, #4]
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f000 f82f 	bl	800c130 <__malloc_unlock>
 800c0d2:	f104 000b 	add.w	r0, r4, #11
 800c0d6:	1d23      	adds	r3, r4, #4
 800c0d8:	f020 0007 	bic.w	r0, r0, #7
 800c0dc:	1ac2      	subs	r2, r0, r3
 800c0de:	bf1c      	itt	ne
 800c0e0:	1a1b      	subne	r3, r3, r0
 800c0e2:	50a3      	strne	r3, [r4, r2]
 800c0e4:	e7af      	b.n	800c046 <_malloc_r+0x22>
 800c0e6:	6862      	ldr	r2, [r4, #4]
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	bf0c      	ite	eq
 800c0ec:	f8c8 2000 	streq.w	r2, [r8]
 800c0f0:	605a      	strne	r2, [r3, #4]
 800c0f2:	e7eb      	b.n	800c0cc <_malloc_r+0xa8>
 800c0f4:	4623      	mov	r3, r4
 800c0f6:	6864      	ldr	r4, [r4, #4]
 800c0f8:	e7ae      	b.n	800c058 <_malloc_r+0x34>
 800c0fa:	463c      	mov	r4, r7
 800c0fc:	687f      	ldr	r7, [r7, #4]
 800c0fe:	e7b6      	b.n	800c06e <_malloc_r+0x4a>
 800c100:	461a      	mov	r2, r3
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	42a3      	cmp	r3, r4
 800c106:	d1fb      	bne.n	800c100 <_malloc_r+0xdc>
 800c108:	2300      	movs	r3, #0
 800c10a:	6053      	str	r3, [r2, #4]
 800c10c:	e7de      	b.n	800c0cc <_malloc_r+0xa8>
 800c10e:	230c      	movs	r3, #12
 800c110:	6033      	str	r3, [r6, #0]
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f80c 	bl	800c130 <__malloc_unlock>
 800c118:	e794      	b.n	800c044 <_malloc_r+0x20>
 800c11a:	6005      	str	r5, [r0, #0]
 800c11c:	e7d6      	b.n	800c0cc <_malloc_r+0xa8>
 800c11e:	bf00      	nop
 800c120:	20001f20 	.word	0x20001f20

0800c124 <__malloc_lock>:
 800c124:	4801      	ldr	r0, [pc, #4]	@ (800c12c <__malloc_lock+0x8>)
 800c126:	f000 b89f 	b.w	800c268 <__retarget_lock_acquire_recursive>
 800c12a:	bf00      	nop
 800c12c:	20002060 	.word	0x20002060

0800c130 <__malloc_unlock>:
 800c130:	4801      	ldr	r0, [pc, #4]	@ (800c138 <__malloc_unlock+0x8>)
 800c132:	f000 b89a 	b.w	800c26a <__retarget_lock_release_recursive>
 800c136:	bf00      	nop
 800c138:	20002060 	.word	0x20002060

0800c13c <memcmp>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	3901      	subs	r1, #1
 800c140:	4402      	add	r2, r0
 800c142:	4290      	cmp	r0, r2
 800c144:	d101      	bne.n	800c14a <memcmp+0xe>
 800c146:	2000      	movs	r0, #0
 800c148:	e005      	b.n	800c156 <memcmp+0x1a>
 800c14a:	7803      	ldrb	r3, [r0, #0]
 800c14c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c150:	42a3      	cmp	r3, r4
 800c152:	d001      	beq.n	800c158 <memcmp+0x1c>
 800c154:	1b18      	subs	r0, r3, r4
 800c156:	bd10      	pop	{r4, pc}
 800c158:	3001      	adds	r0, #1
 800c15a:	e7f2      	b.n	800c142 <memcmp+0x6>

0800c15c <memset>:
 800c15c:	4402      	add	r2, r0
 800c15e:	4603      	mov	r3, r0
 800c160:	4293      	cmp	r3, r2
 800c162:	d100      	bne.n	800c166 <memset+0xa>
 800c164:	4770      	bx	lr
 800c166:	f803 1b01 	strb.w	r1, [r3], #1
 800c16a:	e7f9      	b.n	800c160 <memset+0x4>

0800c16c <_raise_r>:
 800c16c:	291f      	cmp	r1, #31
 800c16e:	b538      	push	{r3, r4, r5, lr}
 800c170:	4605      	mov	r5, r0
 800c172:	460c      	mov	r4, r1
 800c174:	d904      	bls.n	800c180 <_raise_r+0x14>
 800c176:	2316      	movs	r3, #22
 800c178:	6003      	str	r3, [r0, #0]
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c182:	b112      	cbz	r2, 800c18a <_raise_r+0x1e>
 800c184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c188:	b94b      	cbnz	r3, 800c19e <_raise_r+0x32>
 800c18a:	4628      	mov	r0, r5
 800c18c:	f000 f830 	bl	800c1f0 <_getpid_r>
 800c190:	4622      	mov	r2, r4
 800c192:	4601      	mov	r1, r0
 800c194:	4628      	mov	r0, r5
 800c196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c19a:	f000 b817 	b.w	800c1cc <_kill_r>
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d00a      	beq.n	800c1b8 <_raise_r+0x4c>
 800c1a2:	1c59      	adds	r1, r3, #1
 800c1a4:	d103      	bne.n	800c1ae <_raise_r+0x42>
 800c1a6:	2316      	movs	r3, #22
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	e7e7      	b.n	800c17e <_raise_r+0x12>
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4798      	blx	r3
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e7e0      	b.n	800c17e <_raise_r+0x12>

0800c1bc <raise>:
 800c1bc:	4b02      	ldr	r3, [pc, #8]	@ (800c1c8 <raise+0xc>)
 800c1be:	4601      	mov	r1, r0
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f7ff bfd3 	b.w	800c16c <_raise_r>
 800c1c6:	bf00      	nop
 800c1c8:	20000018 	.word	0x20000018

0800c1cc <_kill_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d07      	ldr	r5, [pc, #28]	@ (800c1ec <_kill_r+0x20>)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	f7f6 fd1d 	bl	8002c18 <_kill>
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	d102      	bne.n	800c1e8 <_kill_r+0x1c>
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	b103      	cbz	r3, 800c1e8 <_kill_r+0x1c>
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ea:	bf00      	nop
 800c1ec:	2000205c 	.word	0x2000205c

0800c1f0 <_getpid_r>:
 800c1f0:	f7f6 bd0a 	b.w	8002c08 <_getpid>

0800c1f4 <_sbrk_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d06      	ldr	r5, [pc, #24]	@ (800c210 <_sbrk_r+0x1c>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	f7f6 fd26 	bl	8002c50 <_sbrk>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_sbrk_r+0x1a>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_sbrk_r+0x1a>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	2000205c 	.word	0x2000205c

0800c214 <__errno>:
 800c214:	4b01      	ldr	r3, [pc, #4]	@ (800c21c <__errno+0x8>)
 800c216:	6818      	ldr	r0, [r3, #0]
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	20000018 	.word	0x20000018

0800c220 <__libc_init_array>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	4d0d      	ldr	r5, [pc, #52]	@ (800c258 <__libc_init_array+0x38>)
 800c224:	4c0d      	ldr	r4, [pc, #52]	@ (800c25c <__libc_init_array+0x3c>)
 800c226:	1b64      	subs	r4, r4, r5
 800c228:	10a4      	asrs	r4, r4, #2
 800c22a:	2600      	movs	r6, #0
 800c22c:	42a6      	cmp	r6, r4
 800c22e:	d109      	bne.n	800c244 <__libc_init_array+0x24>
 800c230:	4d0b      	ldr	r5, [pc, #44]	@ (800c260 <__libc_init_array+0x40>)
 800c232:	4c0c      	ldr	r4, [pc, #48]	@ (800c264 <__libc_init_array+0x44>)
 800c234:	f000 f864 	bl	800c300 <_init>
 800c238:	1b64      	subs	r4, r4, r5
 800c23a:	10a4      	asrs	r4, r4, #2
 800c23c:	2600      	movs	r6, #0
 800c23e:	42a6      	cmp	r6, r4
 800c240:	d105      	bne.n	800c24e <__libc_init_array+0x2e>
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	f855 3b04 	ldr.w	r3, [r5], #4
 800c248:	4798      	blx	r3
 800c24a:	3601      	adds	r6, #1
 800c24c:	e7ee      	b.n	800c22c <__libc_init_array+0xc>
 800c24e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c252:	4798      	blx	r3
 800c254:	3601      	adds	r6, #1
 800c256:	e7f2      	b.n	800c23e <__libc_init_array+0x1e>
 800c258:	0800eefc 	.word	0x0800eefc
 800c25c:	0800eefc 	.word	0x0800eefc
 800c260:	0800eefc 	.word	0x0800eefc
 800c264:	0800ef04 	.word	0x0800ef04

0800c268 <__retarget_lock_acquire_recursive>:
 800c268:	4770      	bx	lr

0800c26a <__retarget_lock_release_recursive>:
 800c26a:	4770      	bx	lr

0800c26c <_free_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4605      	mov	r5, r0
 800c270:	2900      	cmp	r1, #0
 800c272:	d041      	beq.n	800c2f8 <_free_r+0x8c>
 800c274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c278:	1f0c      	subs	r4, r1, #4
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bfb8      	it	lt
 800c27e:	18e4      	addlt	r4, r4, r3
 800c280:	f7ff ff50 	bl	800c124 <__malloc_lock>
 800c284:	4a1d      	ldr	r2, [pc, #116]	@ (800c2fc <_free_r+0x90>)
 800c286:	6813      	ldr	r3, [r2, #0]
 800c288:	b933      	cbnz	r3, 800c298 <_free_r+0x2c>
 800c28a:	6063      	str	r3, [r4, #4]
 800c28c:	6014      	str	r4, [r2, #0]
 800c28e:	4628      	mov	r0, r5
 800c290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c294:	f7ff bf4c 	b.w	800c130 <__malloc_unlock>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d908      	bls.n	800c2ae <_free_r+0x42>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	1821      	adds	r1, r4, r0
 800c2a0:	428b      	cmp	r3, r1
 800c2a2:	bf01      	itttt	eq
 800c2a4:	6819      	ldreq	r1, [r3, #0]
 800c2a6:	685b      	ldreq	r3, [r3, #4]
 800c2a8:	1809      	addeq	r1, r1, r0
 800c2aa:	6021      	streq	r1, [r4, #0]
 800c2ac:	e7ed      	b.n	800c28a <_free_r+0x1e>
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	b10b      	cbz	r3, 800c2b8 <_free_r+0x4c>
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	d9fa      	bls.n	800c2ae <_free_r+0x42>
 800c2b8:	6811      	ldr	r1, [r2, #0]
 800c2ba:	1850      	adds	r0, r2, r1
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d10b      	bne.n	800c2d8 <_free_r+0x6c>
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	4401      	add	r1, r0
 800c2c4:	1850      	adds	r0, r2, r1
 800c2c6:	4283      	cmp	r3, r0
 800c2c8:	6011      	str	r1, [r2, #0]
 800c2ca:	d1e0      	bne.n	800c28e <_free_r+0x22>
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	6053      	str	r3, [r2, #4]
 800c2d2:	4408      	add	r0, r1
 800c2d4:	6010      	str	r0, [r2, #0]
 800c2d6:	e7da      	b.n	800c28e <_free_r+0x22>
 800c2d8:	d902      	bls.n	800c2e0 <_free_r+0x74>
 800c2da:	230c      	movs	r3, #12
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	e7d6      	b.n	800c28e <_free_r+0x22>
 800c2e0:	6820      	ldr	r0, [r4, #0]
 800c2e2:	1821      	adds	r1, r4, r0
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	bf04      	itt	eq
 800c2e8:	6819      	ldreq	r1, [r3, #0]
 800c2ea:	685b      	ldreq	r3, [r3, #4]
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	bf04      	itt	eq
 800c2f0:	1809      	addeq	r1, r1, r0
 800c2f2:	6021      	streq	r1, [r4, #0]
 800c2f4:	6054      	str	r4, [r2, #4]
 800c2f6:	e7ca      	b.n	800c28e <_free_r+0x22>
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20001f20 	.word	0x20001f20

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
