
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c088  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  0800c260  0800c260  0000d260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee44  0800ee44  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee44  0800ee44  0000fe44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee4c  0800ee4c  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ee4c  0800ee4c  0000fe4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ee54  0800ee54  0000fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ee5c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  20000068  0800eec4  00010068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002064  0800eec4  00011064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039788  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e00  00000000  00000000  00049820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d8  00000000  00000000  0004f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a28  00000000  00000000  000518f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eeb6  00000000  00000000  00053320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a16c  00000000  00000000  000821d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147ba0  00000000  00000000  000ac342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001f3ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b140  00000000  00000000  001f3f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ff0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  001ff144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00202ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c248 	.word	0x0800c248

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800c248 	.word	0x0800c248

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f003 fa24 	bl	80041f8 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000db2:	f007 fce5 	bl	8008780 <HAL_TIM_Base_Stop>
 8000db6:	e000      	b.n	8000dba <HAL_ADC_ConvCpltCallback+0x26>
		return;
 8000db8:	bf00      	nop
}
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	20001cec 	.word	0x20001cec
 8000dc8:	200002fc 	.word	0x200002fc

08000dcc <AFE_Offset_LDAC_Init>:
void AFE_Offset_LDAC_Init()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  uint8_t cmd[2]={144,0};
 8000dd2:	2390      	movs	r3, #144	@ 0x90
 8000dd4:	80bb      	strh	r3, [r7, #4]
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <AFE_Offset_LDAC_Init+0x38>)
 8000dde:	f005 fec3 	bl	8006b68 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, cmd, 2, 1000);
 8000de2:	1d39      	adds	r1, r7, #4
 8000de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de8:	2202      	movs	r2, #2
 8000dea:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <AFE_Offset_LDAC_Init+0x3c>)
 8000dec:	f007 f927 	bl	800803e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df6:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <AFE_Offset_LDAC_Init+0x38>)
 8000df8:	f005 feb6 	bl	8006b68 <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000400 	.word	0x48000400
 8000e08:	20000200 	.word	0x20000200

08000e0c <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    if (gain_level<=0 || gain_level>6){
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02a      	beq.n	8000e72 <AFE_Gain+0x66>
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d827      	bhi.n	8000e72 <AFE_Gain+0x66>
        return;
    }
    else {
    uint8_t Gain_Levels[6]={
 8000e22:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <AFE_Gain+0x70>)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2c:	6018      	str	r0, [r3, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	3310      	adds	r3, #16
 8000e38:	443b      	add	r3, r7
 8000e3a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <AFE_Gain+0x74>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <AFE_Gain+0x74>)
 8000e48:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <AFE_Gain+0x78>)
 8000e52:	f005 fe89 	bl	8006b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &gain_state, 1, 1000);
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <AFE_Gain+0x74>)
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <AFE_Gain+0x7c>)
 8000e60:	f007 f8ed 	bl	800803e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <AFE_Gain+0x78>)
 8000e6c:	f005 fe7c 	bl	8006b68 <HAL_GPIO_WritePin>
 8000e70:	e000      	b.n	8000e74 <AFE_Gain+0x68>
        return;
 8000e72:	bf00      	nop
    }
}
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	0800c260 	.word	0x0800c260
 8000e80:	20000cea 	.word	0x20000cea
 8000e84:	48000400 	.word	0x48000400
 8000e88:	20000200 	.word	0x20000200

08000e8c <AFE_Offset>:
/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4095, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level >= 4096) {
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e9c:	d21e      	bcs.n	8000edc <AFE_Offset+0x50>
    return ;
  }
  else {
    uint8_t AFE_cmd[2];
    AFE_cmd[0]= DAC_AFE_OFF2*16+offset_level/256;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	733b      	strb	r3, [r7, #12]
    AFE_cmd[1]= offset_level%256;
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <AFE_Offset+0x58>)
 8000eba:	f005 fe55 	bl	8006b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, AFE_cmd, 2, 1000);
 8000ebe:	f107 010c 	add.w	r1, r7, #12
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <AFE_Offset+0x5c>)
 8000eca:	f007 f8b8 	bl	800803e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <AFE_Offset+0x58>)
 8000ed6:	f005 fe47 	bl	8006b68 <HAL_GPIO_WritePin>
 8000eda:	e000      	b.n	8000ede <AFE_Offset+0x52>
    return ;
 8000edc:	bf00      	nop
  }
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	20000200 	.word	0x20000200

08000eec <roundToNearest5>:

int roundToNearest5(int num)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <roundToNearest5+0x44>)
 8000ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8000efc:	1059      	asrs	r1, r3, #1
 8000efe:	17d3      	asrs	r3, r2, #31
 8000f00:	1ac9      	subs	r1, r1, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	dd05      	ble.n	8000f1e <roundToNearest5+0x32>
        return num + (5 - remainder);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1c3 0205 	rsb	r2, r3, #5
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	e002      	b.n	8000f24 <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1ad3      	subs	r3, r2, r3
    }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	66666667 	.word	0x66666667
 8000f34:	00000000 	.word	0x00000000

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 5d62 	sub.w	sp, sp, #14464	@ 0x3880
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f002 fbed 	bl	800371e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 fdc6 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f001 f95e 	bl	8002208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f001 f916 	bl	800217c <MX_DMA_Init>
  MX_CRC_Init();
 8000f50:	f000 feb0 	bl	8001cb4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000f54:	f001 f8c6 	bl	80020e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f58:	f000 fe0e 	bl	8001b78 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000f5c:	f000 ff50 	bl	8001e00 <MX_SPI3_Init>
  MX_TIM6_Init();
 8000f60:	f001 f854 	bl	800200c <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f64:	f000 ff0c 	bl	8001d80 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000f68:	f000 fed0 	bl	8001d0c <MX_DAC1_Init>
  MX_COMP3_Init();
 8000f6c:	f000 fe7c 	bl	8001c68 <MX_COMP3_Init>
  MX_TIM3_Init();
 8000f70:	f000 fffe 	bl	8001f70 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f74:	f000 ff82 	bl	8001e7c <MX_TIM2_Init>
  MX_TIM7_Init();
 8000f78:	f001 f87e 	bl	8002078 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8000f82:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e03c      	b.n	8001004 <main+0xcc>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 8000f8a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000f8e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80011c0 <main+0x288>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa8:	f00a fbfa 	bl	800b7a0 <arm_cos_f32>
 8000fac:	ee10 3a10 	vmov	r3, s0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa95 	bl	80004e0 <__aeabi_f2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b82      	ldr	r3, [pc, #520]	@ (80011c4 <main+0x28c>)
 8000fbc:	f7ff fae8 	bl	8000590 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	f04f 0000 	mov.w	r0, #0
 8000fc8:	497e      	ldr	r1, [pc, #504]	@ (80011c4 <main+0x28c>)
 8000fca:	f7ff f929 	bl	8000220 <__aeabi_dsub>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fd15 	bl	8000a04 <__aeabi_d2f>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	497a      	ldr	r1, [pc, #488]	@ (80011c8 <main+0x290>)
 8000fde:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000fe2:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; ++i)
 8000fee:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000ff2:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8000ffe:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001008:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001012:	dbba      	blt.n	8000f8a <main+0x52>
  }
  AFE_Offset_LDAC_Init();
 8001014:	f7ff feda 	bl	8000dcc <AFE_Offset_LDAC_Init>
  AFE_Gain(3);
 8001018:	2003      	movs	r0, #3
 800101a:	f7ff fef7 	bl	8000e0c <AFE_Gain>
  AFE_Offset(256);
 800101e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001022:	f7ff ff33 	bl	8000e8c <AFE_Offset>

  float fft_in[N] = {0};
 8001026:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 800102a:	3b44      	subs	r3, #68	@ 0x44
 800102c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f00b f836 	bl	800c0a4 <memset>
  float fft_out[N] = {0};
 8001038:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 800103c:	3b44      	subs	r3, #68	@ 0x44
 800103e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00b f82d 	bl	800c0a4 <memset>
  float deal_mag[N] = {0};
 800104a:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800104e:	3b44      	subs	r3, #68	@ 0x44
 8001050:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00b f824 	bl	800c0a4 <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */
	  uint32_t big_mag[6] = {0};
 800105c:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001060:	3b64      	subs	r3, #100	@ 0x64
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
	  int index[6] = {0};
 8001070:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001074:	3b7c      	subs	r3, #124	@ 0x7c
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
	  int freq_counter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800108a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800108e:	6013      	str	r3, [r2, #0]
	  set_sm_freq(1e6 , &htim6);
 8001090:	494e      	ldr	r1, [pc, #312]	@ (80011cc <main+0x294>)
 8001092:	484f      	ldr	r0, [pc, #316]	@ (80011d0 <main+0x298>)
 8001094:	f001 f9b6 	bl	8002404 <set_sm_freq>
	  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001098:	4b4e      	ldr	r3, [pc, #312]	@ (80011d4 <main+0x29c>)
 800109a:	4a4c      	ldr	r2, [pc, #304]	@ (80011cc <main+0x294>)
 800109c:	f240 4101 	movw	r1, #1025	@ 0x401
 80010a0:	484d      	ldr	r0, [pc, #308]	@ (80011d8 <main+0x2a0>)
 80010a2:	f001 f991 	bl	80023c8 <samp>
	  uint16_t temp_buffer[1025];
	  make_8to16(adc_buffer, 2050, temp_buffer);
 80010a6:	463b      	mov	r3, r7
 80010a8:	461a      	mov	r2, r3
 80010aa:	f640 0102 	movw	r1, #2050	@ 0x802
 80010ae:	484a      	ldr	r0, [pc, #296]	@ (80011d8 <main+0x2a0>)
 80010b0:	f001 f954 	bl	800235c <make_8to16>
	  int_to_float(temp_buffer + 1, fft_in);
 80010b4:	463b      	mov	r3, r7
 80010b6:	3302      	adds	r3, #2
 80010b8:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 80010bc:	3a04      	subs	r2, #4
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f9bd 	bl	8002440 <int_to_float>
	  for (int i = 0; i < N; ++i)
 80010c6:	2300      	movs	r3, #0
 80010c8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80010cc:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e030      	b.n	8001136 <main+0x1fe>
	  {
	  	  fft_in[i] *= window[i];
 80010d4:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80010d8:	461a      	mov	r2, r3
 80010da:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80010de:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b44      	subs	r3, #68	@ 0x44
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <main+0x290>)
 80010f0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80010f4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 800110a:	461a      	mov	r2, r3
 800110c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001110:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b44      	subs	r3, #68	@ 0x44
 800111c:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < N; ++i)
 8001120:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001124:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001130:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800113a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001144:	dbc6      	blt.n	80010d4 <main+0x19c>
	  }
	  fft_transfer(fft_in, fft_out, deal_mag);
 8001146:	f507 6204 	add.w	r2, r7, #2112	@ 0x840
 800114a:	3a04      	subs	r2, #4
 800114c:	f507 51c2 	add.w	r1, r7, #6208	@ 0x1840
 8001150:	3904      	subs	r1, #4
 8001152:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8001156:	3b04      	subs	r3, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f001 f996 	bl	800248a <fft_transfer>

	  uint8_t k = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001164:	f102 0233 	add.w	r2, r2, #51	@ 0x33
 8001168:	7013      	strb	r3, [r2, #0]
	  float max = 0;
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001172:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001176:	6013      	str	r3, [r2, #0]
	  float sec = 0;
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001180:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001184:	6013      	str	r3, [r2, #0]
	  int freq_1 = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800118c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001190:	6013      	str	r3, [r2, #0]
	  int freq_2 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001198:	f102 0220 	add.w	r2, r2, #32
 800119c:	6013      	str	r3, [r2, #0]
      int waveform_1 = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011a4:	6013      	str	r3, [r2, #0]
      int waveform_2 = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80011ac:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80011b0:	6013      	str	r3, [r2, #0]
	  for(int i = 2; i < 510; ++i)
 80011b2:	2302      	movs	r3, #2
 80011b4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011b8:	f102 021c 	add.w	r2, r2, #28
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e0aa      	b.n	8001316 <main+0x3de>
 80011c0:	3bc9422c 	.word	0x3bc9422c
 80011c4:	3fe00000 	.word	0x3fe00000
 80011c8:	20000cec 	.word	0x20000cec
 80011cc:	200002fc 	.word	0x200002fc
 80011d0:	000f4240 	.word	0x000f4240
 80011d4:	20000084 	.word	0x20000084
 80011d8:	200004e8 	.word	0x200004e8
 80011dc:	45160000 	.word	0x45160000
	  {
		  if((deal_mag[i]) > 2400)
 80011e0:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80011e4:	461a      	mov	r2, r3
 80011e6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80011ea:	f103 031c 	add.w	r3, r3, #28
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b44      	subs	r3, #68	@ 0x44
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 80011dc <main+0x2a4>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	dd74      	ble.n	80012f2 <main+0x3ba>
		  {
			  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 8001208:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800120c:	461a      	mov	r2, r3
 800120e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001212:	f103 031c 	add.w	r3, r3, #28
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b44      	subs	r3, #68	@ 0x44
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001226:	f103 031c 	add.w	r3, r3, #28
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b44      	subs	r3, #68	@ 0x44
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	dd55      	ble.n	80012f2 <main+0x3ba>
 8001246:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800124a:	461a      	mov	r2, r3
 800124c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001250:	f103 031c 	add.w	r3, r3, #28
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3b44      	subs	r3, #68	@ 0x44
 800125c:	ed93 7a00 	vldr	s14, [r3]
 8001260:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001264:	f103 031c 	add.w	r3, r3, #28
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3b44      	subs	r3, #68	@ 0x44
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	dd36      	ble.n	80012f2 <main+0x3ba>
			  {
				  big_mag[k] = deal_mag[i];
 8001284:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001288:	461a      	mov	r2, r3
 800128a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800128e:	f103 031c 	add.w	r3, r3, #28
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b44      	subs	r3, #68	@ 0x44
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012a2:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ac:	ee17 1a90 	vmov	r1, s15
 80012b0:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	f843 1c64 	str.w	r1, [r3, #-100]
				  index[k] = i;
 80012bc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012c0:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012d2:	f102 021c 	add.w	r2, r2, #28
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	f843 2c7c 	str.w	r2, [r3, #-124]
				  k++;
 80012dc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012e0:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012ec:	f102 0233 	add.w	r2, r2, #51	@ 0x33
 80012f0:	7013      	strb	r3, [r2, #0]
			  }
		  }
		  if(k == 6) break;
 80012f2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012f6:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d014      	beq.n	800132a <main+0x3f2>
	  for(int i = 2; i < 510; ++i)
 8001300:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001304:	f103 031c 	add.w	r3, r3, #28
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001310:	f102 021c 	add.w	r2, r2, #28
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800131a:	f103 031c 	add.w	r3, r3, #28
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001324:	f6ff af5c 	blt.w	80011e0 <main+0x2a8>
 8001328:	e000      	b.n	800132c <main+0x3f4>
		  if(k == 6) break;
 800132a:	bf00      	nop
	  }
	  for(int i = 0;i < 6; ++i)
 800132c:	2300      	movs	r3, #0
 800132e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001332:	f102 0218 	add.w	r2, r2, #24
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e078      	b.n	800142c <main+0x4f4>
	  {
		  index[i] = ((index[i] * 0.97656) / 5) * 5;
 800133a:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800133e:	461a      	mov	r2, r3
 8001340:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001344:	f103 0318 	add.w	r3, r3, #24
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8b2 	bl	80004bc <__aeabi_i2d>
 8001358:	a3b2      	add	r3, pc, #712	@ (adr r3, 8001624 <main+0x6ec>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f917 	bl	8000590 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4bac      	ldr	r3, [pc, #688]	@ (8001620 <main+0x6e8>)
 8001370:	f7ff fa38 	bl	80007e4 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4ba7      	ldr	r3, [pc, #668]	@ (8001620 <main+0x6e8>)
 8001382:	f7ff f905 	bl	8000590 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fb11 	bl	80009b4 <__aeabi_d2iz>
 8001392:	4602      	mov	r2, r0
 8001394:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001398:	4619      	mov	r1, r3
 800139a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800139e:	f103 0318 	add.w	r3, r3, #24
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	f843 2c7c 	str.w	r2, [r3, #-124]
		  index[i] = roundToNearest5(index[i]);
 80013ac:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80013b0:	461a      	mov	r2, r3
 80013b2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013b6:	f103 0318 	add.w	r3, r3, #24
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd91 	bl	8000eec <roundToNearest5>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80013d0:	4619      	mov	r1, r3
 80013d2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013d6:	f103 0318 	add.w	r3, r3, #24
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	f843 2c7c 	str.w	r2, [r3, #-124]
		  if(index[i] > 0) freq_counter ++;
 80013e4:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80013e8:	461a      	mov	r2, r3
 80013ea:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013ee:	f103 0318 	add.w	r3, r3, #24
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd0a      	ble.n	8001416 <main+0x4de>
 8001400:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001404:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001410:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001414:	6013      	str	r3, [r2, #0]
	  for(int i = 0;i < 6; ++i)
 8001416:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800141a:	f103 0318 	add.w	r3, r3, #24
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001426:	f102 0218 	add.w	r2, r2, #24
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001430:	f103 0318 	add.w	r3, r3, #24
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b05      	cmp	r3, #5
 8001438:	f77f af7f 	ble.w	800133a <main+0x402>
	  }
	  switch(freq_counter)
 800143c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001440:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	2b05      	cmp	r3, #5
 800144a:	f200 8332 	bhi.w	8001ab2 <main+0xb7a>
 800144e:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <main+0x51c>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	0800146d 	.word	0x0800146d
 8001458:	08001515 	.word	0x08001515
 800145c:	080015f3 	.word	0x080015f3
 8001460:	0800173d 	.word	0x0800173d
 8001464:	080018b9 	.word	0x080018b9
 8001468:	080018b9 	.word	0x080018b9
	  {
		  case 1:
		  {
			  waveform_1 = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001472:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800147a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800147e:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001480:	2300      	movs	r3, #0
 8001482:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001486:	f102 0214 	add.w	r2, r2, #20
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e03a      	b.n	8001504 <main+0x5cc>
				  if(index[i] > 0)
 800148e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001492:	461a      	mov	r2, r3
 8001494:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001498:	f103 0314 	add.w	r3, r3, #20
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dd21      	ble.n	80014ee <main+0x5b6>
				  {
					  freq_1 = index[i];
 80014aa:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80014ae:	461a      	mov	r2, r3
 80014b0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014b4:	f103 0314 	add.w	r3, r3, #20
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80014c2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014c6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80014ca:	6013      	str	r3, [r2, #0]
					  freq_2 = index[i];
 80014cc:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80014d0:	461a      	mov	r2, r3
 80014d2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014d6:	f103 0314 	add.w	r3, r3, #20
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80014e4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014e8:	f102 0220 	add.w	r2, r2, #32
 80014ec:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 80014ee:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80014f2:	f103 0314 	add.w	r3, r3, #20
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014fe:	f102 0214 	add.w	r2, r2, #20
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001508:	f103 0314 	add.w	r3, r3, #20
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b05      	cmp	r3, #5
 8001510:	ddbd      	ble.n	800148e <main+0x556>
				  }
			  break;
 8001512:	e2ce      	b.n	8001ab2 <main+0xb7a>
		  }
		  case 2 :
		  {
			  waveform_1 = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800151a:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001522:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001526:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001528:	2300      	movs	r3, #0
 800152a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800152e:	f102 0210 	add.w	r2, r2, #16
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e056      	b.n	80015e4 <main+0x6ac>
			  {
				  if(index[i] > 0 && freq_1 == 0) freq_1 = index[i];
 8001536:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800153a:	461a      	mov	r2, r3
 800153c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001540:	f103 0310 	add.w	r3, r3, #16
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800154e:	2b00      	cmp	r3, #0
 8001550:	dd17      	ble.n	8001582 <main+0x64a>
 8001552:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001556:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d110      	bne.n	8001582 <main+0x64a>
 8001560:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001564:	461a      	mov	r2, r3
 8001566:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800156a:	f103 0310 	add.w	r3, r3, #16
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001578:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800157c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001580:	6013      	str	r3, [r2, #0]
				  if(index[i] > 0 && freq_1 > 0)  freq_2 = index[i];
 8001582:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001586:	461a      	mov	r2, r3
 8001588:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800158c:	f103 0310 	add.w	r3, r3, #16
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dd17      	ble.n	80015ce <main+0x696>
 800159e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015a2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd10      	ble.n	80015ce <main+0x696>
 80015ac:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80015b0:	461a      	mov	r2, r3
 80015b2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015b6:	f103 0310 	add.w	r3, r3, #16
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80015c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015c8:	f102 0220 	add.w	r2, r2, #32
 80015cc:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 80015ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015d2:	f103 0310 	add.w	r3, r3, #16
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015de:	f102 0210 	add.w	r2, r2, #16
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015e8:	f103 0310 	add.w	r3, r3, #16
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	dda1      	ble.n	8001536 <main+0x5fe>
			  }
		  }
		  case 3:
		  {
			  waveform_1 = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015f8:	6013      	str	r3, [r2, #0]
			  waveform_2 = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001600:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001604:	6013      	str	r3, [r2, #0]
			  freq_2 = 100;
 8001606:	2364      	movs	r3, #100	@ 0x64
 8001608:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800160c:	f102 0220 	add.w	r2, r2, #32
 8001610:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001612:	2300      	movs	r3, #0
 8001614:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001618:	f102 020c 	add.w	r2, r2, #12
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e084      	b.n	800172a <main+0x7f2>
 8001620:	40140000 	.word	0x40140000
 8001624:	c1d29dc7 	.word	0xc1d29dc7
 8001628:	3fef3ffa 	.word	0x3fef3ffa
			  {
				  if(big_mag[i] > max)
 800162c:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001630:	461a      	mov	r2, r3
 8001632:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001636:	f103 030c 	add.w	r3, r3, #12
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001650:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d526      	bpl.n	80016b0 <main+0x778>
				  {
					  max = big_mag[i];
 8001662:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001666:	461a      	mov	r2, r3
 8001668:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800166c:	f103 030c 	add.w	r3, r3, #12
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001686:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800168a:	edc3 7a00 	vstr	s15, [r3]
					  freq_1 = index[i];
 800168e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001692:	461a      	mov	r2, r3
 8001694:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001698:	f103 030c 	add.w	r3, r3, #12
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80016a6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80016aa:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80016ae:	6013      	str	r3, [r2, #0]
				  }
				  if(freq_2 > index[i] && index[i] > 0)
 80016b0:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80016b4:	461a      	mov	r2, r3
 80016b6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016ba:	f103 030c 	add.w	r3, r3, #12
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80016c8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80016cc:	f102 0220 	add.w	r2, r2, #32
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dd1e      	ble.n	8001714 <main+0x7dc>
 80016d6:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80016da:	461a      	mov	r2, r3
 80016dc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016e0:	f103 030c 	add.w	r3, r3, #12
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd10      	ble.n	8001714 <main+0x7dc>
				  {
					  freq_2 = index[i];
 80016f2:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80016f6:	461a      	mov	r2, r3
 80016f8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016fc:	f103 030c 	add.w	r3, r3, #12
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800170a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800170e:	f102 0220 	add.w	r2, r2, #32
 8001712:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001714:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001718:	f103 030c 	add.w	r3, r3, #12
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001724:	f102 020c 	add.w	r2, r2, #12
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800172e:	f103 030c 	add.w	r3, r3, #12
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b05      	cmp	r3, #5
 8001736:	f77f af79 	ble.w	800162c <main+0x6f4>
				  }
			  }
			  break;
 800173a:	e1ba      	b.n	8001ab2 <main+0xb7a>
		  }
		  case 4 :
		  {
			  waveform_1 = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001742:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800174a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800174e:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001750:	2300      	movs	r3, #0
 8001752:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001756:	f102 0208 	add.w	r2, r2, #8
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e0a3      	b.n	80018a6 <main+0x96e>
			  {
				  if(big_mag[i] > sec)
 800175e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001762:	461a      	mov	r2, r3
 8001764:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001768:	f103 0308 	add.w	r3, r3, #8
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001782:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d57d      	bpl.n	8001890 <main+0x958>
				  {
					  if(big_mag[i] > max)
 8001794:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001798:	461a      	mov	r2, r3
 800179a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800179e:	f103 0308 	add.w	r3, r3, #8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017b8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d53b      	bpl.n	8001842 <main+0x90a>
					  {
						  sec = max;
 80017ca:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017ce:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017d8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80017dc:	6013      	str	r3, [r2, #0]
						  freq_2 = freq_1;
 80017de:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017e2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017ec:	f102 0220 	add.w	r2, r2, #32
 80017f0:	6013      	str	r3, [r2, #0]
						  max = big_mag[i];
 80017f2:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80017f6:	461a      	mov	r2, r3
 80017f8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017fc:	f103 0308 	add.w	r3, r3, #8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001812:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001816:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800181a:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 800181e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001822:	461a      	mov	r2, r3
 8001824:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001828:	f103 0308 	add.w	r3, r3, #8
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001836:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800183a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e026      	b.n	8001890 <main+0x958>
					  }
					  else
					  {
						  sec = big_mag[i];
 8001842:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001846:	461a      	mov	r2, r3
 8001848:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800184c:	f103 0308 	add.w	r3, r3, #8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001862:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001866:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800186a:	edc3 7a00 	vstr	s15, [r3]
						  freq_2 = index[i];
 800186e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001872:	461a      	mov	r2, r3
 8001874:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001878:	f103 0308 	add.w	r3, r3, #8
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001886:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800188a:	f102 0220 	add.w	r2, r2, #32
 800188e:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001890:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001894:	f103 0308 	add.w	r3, r3, #8
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018a0:	f102 0208 	add.w	r2, r2, #8
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018aa:	f103 0308 	add.w	r3, r3, #8
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	f77f af54 	ble.w	800175e <main+0x826>
					  }
				  }
			  }
			  break;
 80018b6:	e0fc      	b.n	8001ab2 <main+0xb7a>
		  }
		  case 5 : case 6:
		  {
			  waveform_1 = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80018be:	6013      	str	r3, [r2, #0]
			  waveform_2 = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80018c6:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80018ca:	6013      	str	r3, [r2, #0]
			  if(index[0] == index[1] / 2 && index[0] == index[2] / 3 &&index[0] == index[3] / 5)
 80018cc:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80018d0:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80018d4:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80018d8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80018dc:	0fd9      	lsrs	r1, r3, #31
 80018de:	440b      	add	r3, r1
 80018e0:	105b      	asrs	r3, r3, #1
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d131      	bne.n	800194a <main+0xa12>
 80018e6:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80018ea:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80018ee:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80018f2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80018f6:	4975      	ldr	r1, [pc, #468]	@ (8001acc <main+0xb94>)
 80018f8:	fb81 0103 	smull	r0, r1, r1, r3
 80018fc:	17db      	asrs	r3, r3, #31
 80018fe:	1acb      	subs	r3, r1, r3
 8001900:	429a      	cmp	r2, r3
 8001902:	d122      	bne.n	800194a <main+0xa12>
 8001904:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001908:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 800190c:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001910:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001914:	496e      	ldr	r1, [pc, #440]	@ (8001ad0 <main+0xb98>)
 8001916:	fb81 0103 	smull	r0, r1, r1, r3
 800191a:	1049      	asrs	r1, r1, #1
 800191c:	17db      	asrs	r3, r3, #31
 800191e:	1acb      	subs	r3, r1, r3
 8001920:	429a      	cmp	r2, r3
 8001922:	d112      	bne.n	800194a <main+0xa12>
			  {
				  freq_1 = index[0];
 8001924:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001928:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800192c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001930:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001934:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 8001936:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800193a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800193e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001942:	f102 0220 	add.w	r2, r2, #32
 8001946:	6013      	str	r3, [r2, #0]
				  break;
 8001948:	e0b3      	b.n	8001ab2 <main+0xb7a>
			  }
			  for(int i = 0;i < 6; ++i)
 800194a:	2300      	movs	r3, #0
 800194c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001950:	f102 0204 	add.w	r2, r2, #4
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e0a3      	b.n	8001aa0 <main+0xb68>
			  {
				  if(big_mag[i] > sec)
 8001958:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 800195c:	461a      	mov	r2, r3
 800195e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001962:	f103 0304 	add.w	r3, r3, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001978:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800197c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d57d      	bpl.n	8001a8a <main+0xb52>
				  {
					  if(big_mag[i] > max)
 800198e:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001992:	461a      	mov	r2, r3
 8001994:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001998:	f103 0304 	add.w	r3, r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ae:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019b2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d53b      	bpl.n	8001a3c <main+0xb04>
					  {
						  sec = max;
 80019c4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019c8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019d2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80019d6:	6013      	str	r3, [r2, #0]
						  freq_2 = freq_1;
 80019d8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019dc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019e6:	f102 0220 	add.w	r2, r2, #32
 80019ea:	6013      	str	r3, [r2, #0]
						  max = big_mag[i];
 80019ec:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 80019f0:	461a      	mov	r2, r3
 80019f2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019f6:	f103 0304 	add.w	r3, r3, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a10:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001a14:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 8001a18:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a22:	f103 0304 	add.w	r3, r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001a30:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a34:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e026      	b.n	8001a8a <main+0xb52>
					  }
					  else
					  {
						  sec = big_mag[i];
 8001a3c:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001a40:	461a      	mov	r2, r3
 8001a42:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a46:	f103 0304 	add.w	r3, r3, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a60:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001a64:	edc3 7a00 	vstr	s15, [r3]
						  freq_2 = index[i];
 8001a68:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a72:	f103 0304 	add.w	r3, r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001a80:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a84:	f102 0220 	add.w	r2, r2, #32
 8001a88:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001a8a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a8e:	f103 0304 	add.w	r3, r3, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001a9a:	f102 0204 	add.w	r2, r2, #4
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001aa4:	f103 0304 	add.w	r3, r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	f77f af54 	ble.w	8001958 <main+0xa20>
					  }
				  }
			  }
			  break;
 8001ab0:	bf00      	nop
		  }
	  }

	  dds[0] = freq_1;
 8001ab2:	f507 6308 	add.w	r3, r7, #2176	@ 0x880
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001abc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f842 3c4c 	str.w	r3, [r2, #-76]
  {
 8001ac6:	f7ff bac9 	b.w	800105c <main+0x124>
 8001aca:	bf00      	nop
 8001acc:	55555556 	.word	0x55555556
 8001ad0:	66666667 	.word	0x66666667

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	@ 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0318 	add.w	r3, r7, #24
 8001ade:	2238      	movs	r2, #56	@ 0x38
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00a fade 	bl	800c0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001afa:	f005 f97f 	bl	8006dfc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8001b10:	2305      	movs	r3, #5
 8001b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b14:	233c      	movs	r3, #60	@ 0x3c
 8001b16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f005 fa1b 	bl	8006f64 <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001b34:	f000 fc0c 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b38:	230f      	movs	r3, #15
 8001b3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fd19 	bl	8007588 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b5c:	f000 fbf8 	bl	8002350 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001b66:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <SystemClock_Config+0xa0>)
 8001b68:	f005 fe4a 	bl	8007800 <HAL_RCC_MCOConfig>
}
 8001b6c:	bf00      	nop
 8001b6e:	3750      	adds	r7, #80	@ 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	00060400 	.word	0x00060400

08001b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00a fa87 	bl	800c0a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001b98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bc2:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001bce:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001bdc:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bde:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c02:	4817      	ldr	r0, [pc, #92]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001c04:	f002 f868 	bl	8003cd8 <HAL_ADC_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001c0e:	f000 fb9f 	bl	8002350 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001c1e:	f003 fa0d 	bl	800503c <HAL_ADCEx_MultiModeConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001c28:	f000 fb92 	bl	8002350 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <MX_ADC1_Init+0xec>)
 8001c2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c30:	2306      	movs	r3, #6
 8001c32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c38:	237f      	movs	r3, #127	@ 0x7f
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_ADC1_Init+0xe8>)
 8001c4a:	f002 fb4b 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001c54:	f000 fb7c 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	@ 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000084 	.word	0x20000084
 8001c64:	04300002 	.word	0x04300002

08001c68 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <MX_COMP3_Init+0x48>)
 8001c70:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c7a:	2250      	movs	r2, #80	@ 0x50
 8001c7c:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c86:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001c8a:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <MX_COMP3_Init+0x44>)
 8001c9a:	f003 fc27 	bl	80054ec <HAL_COMP_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8001ca4:	f000 fb54 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000150 	.word	0x20000150
 8001cb0:	40010208 	.word	0x40010208

08001cb4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	@ (8001d08 <MX_CRC_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001ccc:	f241 0221 	movw	r2, #4129	@ 0x1021
 8001cd0:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <MX_CRC_Init+0x50>)
 8001cf2:	f003 fea5 	bl	8005a40 <HAL_CRC_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f000 fb28 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000174 	.word	0x20000174
 8001d08:	40023000 	.word	0x40023000

08001d0c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d12:	463b      	mov	r3, r7
 8001d14:	2230      	movs	r2, #48	@ 0x30
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f00a f9c3 	bl	800c0a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_DAC1_Init+0x6c>)
 8001d20:	4a16      	ldr	r2, [pc, #88]	@ (8001d7c <MX_DAC1_Init+0x70>)
 8001d22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d24:	4814      	ldr	r0, [pc, #80]	@ (8001d78 <MX_DAC1_Init+0x6c>)
 8001d26:	f004 f891 	bl	8005e4c <HAL_DAC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d30:	f000 fb0e 	bl	8002350 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d34:	2302      	movs	r3, #2
 8001d36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <MX_DAC1_Init+0x6c>)
 8001d60:	f004 f896 	bl	8005e90 <HAL_DAC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001d6a:	f000 faf1 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	@ 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000198 	.word	0x20000198
 8001d7c:	50000800 	.word	0x50000800

08001d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001d86:	4a1c      	ldr	r2, [pc, #112]	@ (8001df8 <MX_I2C1_Init+0x78>)
 8001d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <MX_I2C1_Init+0x7c>)
 8001d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d96:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dba:	480e      	ldr	r0, [pc, #56]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001dbc:	f004 feec 	bl	8006b98 <HAL_I2C_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dc6:	f000 fac3 	bl	8002350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001dce:	f004 ff7e 	bl	8006cce <HAL_I2CEx_ConfigAnalogFilter>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dd8:	f000 faba 	bl	8002350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_I2C1_Init+0x74>)
 8001de0:	f004 ffc0 	bl	8006d64 <HAL_I2CEx_ConfigDigitalFilter>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dea:	f000 fab1 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200001ac 	.word	0x200001ac
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	10e32879 	.word	0x10e32879

08001e00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <MX_SPI3_Init+0x78>)
 8001e08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e36:	2218      	movs	r2, #24
 8001e38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e4e:	2207      	movs	r2, #7
 8001e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_SPI3_Init+0x74>)
 8001e60:	f006 f842 	bl	8007ee8 <HAL_SPI_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e6a:	f000 fa71 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000200 	.word	0x20000200
 8001e78:	40003c00 	.word	0x40003c00

08001e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ea8:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed0:	4826      	ldr	r0, [pc, #152]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001ed2:	f006 fb8d 	bl	80085f0 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001edc:	f000 fa38 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	4619      	mov	r1, r3
 8001eec:	481f      	ldr	r0, [pc, #124]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001eee:	f006 fd6b 	bl	80089c8 <HAL_TIM_ConfigClockSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ef8:	f000 fa2a 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001efc:	481b      	ldr	r0, [pc, #108]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001efe:	f006 fc66 	bl	80087ce <HAL_TIM_IC_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f08:	f000 fa22 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4814      	ldr	r0, [pc, #80]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001f1c:	f007 f8e4 	bl	80090e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001f26:	f000 fa13 	bl	8002350 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480a      	ldr	r0, [pc, #40]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001f42:	f006 fca5 	bl	8008890 <HAL_TIM_IC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001f4c:	f000 fa00 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8001f50:	2200      	movs	r2, #0
 8001f52:	2103      	movs	r1, #3
 8001f54:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_TIM2_Init+0xf0>)
 8001f56:	f007 f95d 	bl	8009214 <HAL_TIMEx_TISelection>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001f60:	f000 f9f6 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3730      	adds	r7, #48	@ 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000264 	.word	0x20000264

08001f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001f90:	4a1d      	ldr	r2, [pc, #116]	@ (8002008 <MX_TIM3_Init+0x98>)
 8001f92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fb4:	4813      	ldr	r0, [pc, #76]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001fb6:	f006 fb1b 	bl	80085f0 <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001fc0:	f000 f9c6 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001fd2:	f006 fcf9 	bl	80089c8 <HAL_TIM_ConfigClockSource>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001fdc:	f000 f9b8 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_TIM3_Init+0x94>)
 8001fee:	f007 f87b 	bl	80090e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ff8:	f000 f9aa 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200002b0 	.word	0x200002b0
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <MX_TIM6_Init+0x64>)
 800201e:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <MX_TIM6_Init+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_TIM6_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <MX_TIM6_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <MX_TIM6_Init+0x64>)
 8002030:	2295      	movs	r2, #149	@ 0x95
 8002032:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <MX_TIM6_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_TIM6_Init+0x64>)
 800203c:	f006 fad8 	bl	80085f0 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002046:	f000 f983 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800204a:	2320      	movs	r3, #32
 800204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	@ (8002070 <MX_TIM6_Init+0x64>)
 8002058:	f007 f846 	bl	80090e8 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002062:	f000 f975 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200002fc 	.word	0x200002fc
 8002074:	40001000 	.word	0x40001000

08002078 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <MX_TIM7_Init+0x64>)
 800208a:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <MX_TIM7_Init+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <MX_TIM7_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <MX_TIM7_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_TIM7_Init+0x64>)
 800209c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_TIM7_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <MX_TIM7_Init+0x64>)
 80020aa:	f006 faa1 	bl	80085f0 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020b4:	f000 f94c 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_TIM7_Init+0x64>)
 80020c6:	f007 f80f 	bl	80090e8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80020d0:	f000 f93e 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000348 	.word	0x20000348
 80020e0:	40001400 	.word	0x40001400

080020e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e8:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <MX_USART2_UART_Init+0x94>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212c:	4811      	ldr	r0, [pc, #68]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 800212e:	f007 f8ff 	bl	8009330 <HAL_UART_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002138:	f000 f90a 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213c:	2100      	movs	r1, #0
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002140:	f008 fc40 	bl	800a9c4 <HAL_UARTEx_SetTxFifoThreshold>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800214a:	f000 f901 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	4808      	ldr	r0, [pc, #32]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002152:	f008 fc75 	bl	800aa40 <HAL_UARTEx_SetRxFifoThreshold>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800215c:	f000 f8f8 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	@ (8002174 <MX_USART2_UART_Init+0x90>)
 8002162:	f008 fbf6 	bl	800a952 <HAL_UARTEx_DisableFifoMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800216c:	f000 f8f0 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200003f4 	.word	0x200003f4
 8002178:	40004400 	.word	0x40004400

0800217c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <MX_DMA_Init+0x88>)
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <MX_DMA_Init+0x88>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6493      	str	r3, [r2, #72]	@ 0x48
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <MX_DMA_Init+0x88>)
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <MX_DMA_Init+0x88>)
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <MX_DMA_Init+0x88>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <MX_DMA_Init+0x88>)
 80021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <MX_DMA_Init+0x88>)
 80021b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b6:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <MX_DMA_Init+0x88>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <MX_DMA_Init+0x88>)
 80021c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200b      	movs	r0, #11
 80021d0:	f003 fc01 	bl	80059d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021d4:	200b      	movs	r0, #11
 80021d6:	f003 fc18 	bl	8005a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	200c      	movs	r0, #12
 80021e0:	f003 fbf9 	bl	80059d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021e4:	200c      	movs	r0, #12
 80021e6:	f003 fc10 	bl	8005a0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2063      	movs	r0, #99	@ 0x63
 80021f0:	f003 fbf1 	bl	80059d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 80021f4:	2063      	movs	r0, #99	@ 0x63
 80021f6:	f003 fc08 	bl	8005a0a <HAL_NVIC_EnableIRQ>

}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221e:	4b48      	ldr	r3, [pc, #288]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	4a47      	ldr	r2, [pc, #284]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222a:	4b45      	ldr	r3, [pc, #276]	@ (8002340 <MX_GPIO_Init+0x138>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002236:	4b42      	ldr	r3, [pc, #264]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a41      	ldr	r2, [pc, #260]	@ (8002340 <MX_GPIO_Init+0x138>)
 800223c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	4b3c      	ldr	r3, [pc, #240]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	4a3b      	ldr	r2, [pc, #236]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <MX_GPIO_Init+0x138>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	4a35      	ldr	r2, [pc, #212]	@ (8002340 <MX_GPIO_Init+0x138>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b30      	ldr	r3, [pc, #192]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <MX_GPIO_Init+0x138>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <MX_GPIO_Init+0x138>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	2101      	movs	r1, #1
 800229a:	482a      	ldr	r0, [pc, #168]	@ (8002344 <MX_GPIO_Init+0x13c>)
 800229c:	f004 fc64 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022aa:	f004 fc5d 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIPO_CS_Pin|XDAC_CS_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022b4:	4824      	ldr	r0, [pc, #144]	@ (8002348 <MX_GPIO_Init+0x140>)
 80022b6:	f004 fc57 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	481d      	ldr	r0, [pc, #116]	@ (800234c <MX_GPIO_Init+0x144>)
 80022d8:	f004 fac4 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : con_Pin */
  GPIO_InitStruct.Pin = con_Pin;
 80022dc:	2301      	movs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4814      	ldr	r0, [pc, #80]	@ (8002344 <MX_GPIO_Init+0x13c>)
 80022f4:	f004 fab6 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002314:	f004 faa6 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8002318:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	@ (8002348 <MX_GPIO_Init+0x140>)
 8002332:	f004 fa97 	bl	8006864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	@ 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	48000800 	.word	0x48000800
 8002348:	48000400 	.word	0x48000400
 800234c:	48001800 	.word	0x48001800

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01b      	beq.n	80023ae <make_8to16+0x52>
		return 0;
 8002376:	2300      	movs	r3, #0
 8002378:	e01f      	b.n	80023ba <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b21a      	sxth	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	3301      	adds	r3, #1
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	440b      	add	r3, r1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21b      	sxth	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	b219      	sxth	r1, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	b28a      	uxth	r2, r1
 80023a6:	801a      	strh	r2, [r3, #0]
		++i;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	085a      	lsrs	r2, r3, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8e0      	bhi.n	800237a <make_8to16+0x1e>
	}
	return new_buffer;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f006 f962 	bl	80086a0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	68f9      	ldr	r1, [r7, #12]
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	f001 fe35 	bl	8004050 <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <samp+0x38>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <samp+0x38>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d000      	beq.n	80023f6 <samp+0x2e>
 80023f4:	e7fa      	b.n	80023ec <samp+0x24>
    		break;
 80023f6:	bf00      	nop
    }
    return;
 80023f8:	bf00      	nop
}
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20001cec 	.word	0x20001cec

08002404 <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <set_sm_freq+0x38>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
	if (set <38)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b25      	cmp	r3, #37	@ 0x25
 8002420:	d801      	bhi.n	8002426 <set_sm_freq+0x22>
		set = 38;
 8002422:	2326      	movs	r3, #38	@ 0x26
 8002424:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e011      	b.n	8002474 <int_to_float+0x34>
		fft_in[i] = buffer[i];
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	8819      	ldrh	r1, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	ee07 1a90 	vmov	s15, r1
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	d1e9      	bne.n	8002450 <int_to_float+0x10>
	}
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b08a      	sub	sp, #40	@ 0x28
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f008 fbb0 	bl	800ac00 <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 80024a0:	f107 0010 	add.w	r0, r7, #16
 80024a4:	2300      	movs	r3, #0
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	f008 fc77 	bl	800ad9c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 80024ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f009 f84f 	bl	800b558 <arm_cmplx_mag_f32>
}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	@ 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <HAL_MspInit+0x44>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <HAL_MspInit+0x44>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <HAL_MspInit+0x44>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_MspInit+0x44>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_MspInit+0x44>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_MspInit+0x44>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024fa:	f004 fd23 	bl	8006f44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09e      	sub	sp, #120	@ 0x78
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	2254      	movs	r2, #84	@ 0x54
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f009 fdb9 	bl	800c0a4 <memset>
  if(hadc->Instance==ADC1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253a:	d15f      	bne.n	80025fc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800253c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002540:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002542:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002546:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4618      	mov	r0, r3
 800254e:	f005 fa7d 	bl	8007a4c <HAL_RCCEx_PeriphCLKConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002558:	f7ff fefa 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800255c:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002560:	4a28      	ldr	r2, [pc, #160]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 8002562:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002568:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002578:	4a22      	ldr	r2, [pc, #136]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002580:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_ADC_MspInit+0xf8>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800258c:	2301      	movs	r3, #1
 800258e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002590:	2303      	movs	r3, #3
 8002592:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800259c:	4619      	mov	r1, r3
 800259e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a2:	f004 f95f 	bl	8006864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025a6:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025a8:	4a18      	ldr	r2, [pc, #96]	@ (800260c <HAL_ADC_MspInit+0x100>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025ae:	2205      	movs	r2, #5
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025c0:	2280      	movs	r2, #128	@ 0x80
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e0:	4809      	ldr	r0, [pc, #36]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025e2:	f003 fe0d 	bl	8006200 <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80025ec:	f7ff feb0 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80025f6:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <HAL_ADC_MspInit+0xfc>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025fc:	bf00      	nop
 80025fe:	3778      	adds	r7, #120	@ 0x78
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	200000f0 	.word	0x200000f0
 800260c:	40020008 	.word	0x40020008

08002610 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	@ (80026a4 <HAL_COMP_MspInit+0x94>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d134      	bne.n	800269c <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002632:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a16      	ldr	r2, [pc, #88]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <HAL_COMP_MspInit+0x98>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002662:	2304      	movs	r3, #4
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8002672:	2303      	movs	r3, #3
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	480b      	ldr	r0, [pc, #44]	@ (80026ac <HAL_COMP_MspInit+0x9c>)
 800267e:	f004 f8f1 	bl	8006864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002682:	2301      	movs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002686:	2303      	movs	r3, #3
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002698:	f004 f8e4 	bl	8006864 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	@ 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010208 	.word	0x40010208
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800

080026b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_CRC_MspInit+0x38>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10b      	bne.n	80026da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_CRC_MspInit+0x3c>)
 80026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_CRC_MspInit+0x3c>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_CRC_MspInit+0x3c>)
 80026d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023000 	.word	0x40023000
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_DAC_MspInit+0x38>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10b      	bne.n	800271a <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_DAC_MspInit+0x3c>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a09      	ldr	r2, [pc, #36]	@ (800272c <HAL_DAC_MspInit+0x3c>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <HAL_DAC_MspInit+0x3c>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	50000800 	.word	0x50000800
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0a0      	sub	sp, #128	@ 0x80
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	2254      	movs	r2, #84	@ 0x54
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f009 fca7 	bl	800c0a4 <memset>
  if(hi2c->Instance==I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <HAL_I2C_MspInit+0xe0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d153      	bne.n	8002808 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002760:	2340      	movs	r3, #64	@ 0x40
 8002762:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	4618      	mov	r0, r3
 800276e:	f005 f96d 	bl	8007a4c <HAL_RCCEx_PeriphCLKConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002778:	f7ff fdea 	bl	8002350 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002788:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 800278a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b2:	2312      	movs	r3, #18
 80027b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027be:	2304      	movs	r3, #4
 80027c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027cc:	f004 f84a 	bl	8006864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d4:	2312      	movs	r3, #18
 80027d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e0:	2304      	movs	r3, #4
 80027e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80027e8:	4619      	mov	r1, r3
 80027ea:	480b      	ldr	r0, [pc, #44]	@ (8002818 <HAL_I2C_MspInit+0xe8>)
 80027ec:	f004 f83a 	bl	8006864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 80027f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_I2C_MspInit+0xe4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002808:	bf00      	nop
 800280a:	3780      	adds	r7, #128	@ 0x80
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40005400 	.word	0x40005400
 8002814:	40021000 	.word	0x40021000
 8002818:	48000400 	.word	0x48000400

0800281c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <HAL_SPI_MspInit+0x7c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d128      	bne.n	8002890 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <HAL_SPI_MspInit+0x80>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	4a16      	ldr	r2, [pc, #88]	@ (800289c <HAL_SPI_MspInit+0x80>)
 8002844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002848:	6593      	str	r3, [r2, #88]	@ 0x58
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_SPI_MspInit+0x80>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_SPI_MspInit+0x80>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_SPI_MspInit+0x80>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <HAL_SPI_MspInit+0x80>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800286e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002880:	2306      	movs	r3, #6
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <HAL_SPI_MspInit+0x84>)
 800288c:	f003 ffea 	bl	8006864 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	@ 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40003c00 	.word	0x40003c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	48000800 	.word	0x48000800

080028a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b4:	d138      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	4a38      	ldr	r2, [pc, #224]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 80028ce:	4b34      	ldr	r3, [pc, #208]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028d0:	4a34      	ldr	r2, [pc, #208]	@ (80029a4 <HAL_TIM_Base_MspInit+0x100>)
 80028d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80028d4:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028d6:	2238      	movs	r2, #56	@ 0x38
 80028d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028da:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e0:	4b2f      	ldr	r3, [pc, #188]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028f4:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80028fc:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002902:	4b27      	ldr	r3, [pc, #156]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 8002904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800290a:	4825      	ldr	r0, [pc, #148]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 800290c:	f003 fc78 	bl	8006200 <HAL_DMA_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002916:	f7ff fd1b 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002920:	4a1f      	ldr	r2, [pc, #124]	@ (80029a0 <HAL_TIM_Base_MspInit+0xfc>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002926:	e034      	b.n	8002992 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <HAL_TIM_Base_MspInit+0x104>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6593      	str	r3, [r2, #88]	@ 0x58
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	e022      	b.n	8002992 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a16      	ldr	r2, [pc, #88]	@ (80029ac <HAL_TIM_Base_MspInit+0x108>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10c      	bne.n	8002970 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6593      	str	r3, [r2, #88]	@ 0x58
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	e010      	b.n	8002992 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <HAL_TIM_Base_MspInit+0x10c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10b      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	4a07      	ldr	r2, [pc, #28]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	6593      	str	r3, [r2, #88]	@ 0x58
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_TIM_Base_MspInit+0xf8>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	20000394 	.word	0x20000394
 80029a4:	4002001c 	.word	0x4002001c
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40001000 	.word	0x40001000
 80029b0:	40001400 	.word	0x40001400

080029b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	@ 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2254      	movs	r2, #84	@ 0x54
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f009 fb65 	bl	800c0a4 <memset>
  if(huart->Instance==USART2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a37      	ldr	r2, [pc, #220]	@ (8002abc <HAL_UART_MspInit+0x108>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d167      	bne.n	8002ab4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029e4:	2302      	movs	r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80029e8:	2304      	movs	r3, #4
 80029ea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 f82b 	bl	8007a4c <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029fc:	f7ff fca8 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	4a2e      	ldr	r2, [pc, #184]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a18:	4b29      	ldr	r3, [pc, #164]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <HAL_UART_MspInit+0x10c>)
 8002a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a30:	2318      	movs	r3, #24
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a40:	2307      	movs	r3, #7
 8002a42:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481e      	ldr	r0, [pc, #120]	@ (8002ac4 <HAL_UART_MspInit+0x110>)
 8002a4c:	f003 ff0a 	bl	8006864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a52:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_UART_MspInit+0x118>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a58:	221a      	movs	r2, #26
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a74:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a86:	4810      	ldr	r0, [pc, #64]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a88:	f003 fbba 	bl	8006200 <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002a92:	f7ff fc5d 	bl	8002350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <HAL_UART_MspInit+0x114>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	210e      	movs	r1, #14
 8002aa8:	2026      	movs	r0, #38	@ 0x26
 8002aaa:	f002 ff94 	bl	80059d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aae:	2026      	movs	r0, #38	@ 0x26
 8002ab0:	f002 ffab 	bl	8005a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3778      	adds	r7, #120	@ 0x78
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40004400 	.word	0x40004400
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	20000488 	.word	0x20000488
 8002acc:	40020494 	.word	0x40020494

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <HardFault_Handler+0x4>

08002ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <MemManage_Handler+0x4>

08002ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b26:	f000 fe4d 	bl	80037c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <DMA1_Channel1_IRQHandler+0x10>)
 8002b36:	f003 fd46 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200000f0 	.word	0x200000f0

08002b44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002b48:	4802      	ldr	r0, [pc, #8]	@ (8002b54 <DMA1_Channel2_IRQHandler+0x10>)
 8002b4a:	f003 fd3c 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000394 	.word	0x20000394

08002b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b5c:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <USART2_IRQHandler+0x10>)
 8002b5e:	f006 fc37 	bl	80093d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200003f4 	.word	0x200003f4

08002b6c <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <DMA2_Channel8_IRQHandler+0x10>)
 8002b72:	f003 fd28 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000488 	.word	0x20000488

08002b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return 1;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_kill>:

int _kill(int pid, int sig)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b9a:	f009 fadf 	bl	800c15c <__errno>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2216      	movs	r2, #22
 8002ba2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_exit>:

void _exit (int status)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ffe7 	bl	8002b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <_exit+0x12>
	...

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f009 fab0 	bl	800c15c <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	20001cf0 	.word	0x20001cf0
 8002c30:	20002068 	.word	0x20002068

08002c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	701a      	strb	r2, [r3, #0]
      }
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f805 	bl	8002c94 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
    }
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f940 	bl	8002f4e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f91e 	bl	8002f24 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ffeb 	bl	8002cd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b090      	sub	sp, #64	@ 0x40
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	dc02      	bgt.n	8002d26 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e0aa      	b.n	8002e7c <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b55      	cmp	r3, #85	@ 0x55
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <_ZL12uart_managerPhS_+0x36>
    return -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d40:	e09c      	b.n	8002e7c <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2ba5      	cmp	r3, #165	@ 0xa5
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <_ZL12uart_managerPhS_+0x52>
    return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	e08e      	b.n	8002e7c <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d74:	4413      	add	r3, r2
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	3302      	adds	r3, #2
 8002d80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dc02      	bgt.n	8002d8c <_ZL12uart_managerPhS_+0x80>
 8002d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	dc02      	bgt.n	8002d92 <_ZL12uart_managerPhS_+0x86>
    return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	e074      	b.n	8002e7c <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 8002d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	3301      	adds	r3, #1
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	440b      	add	r3, r1
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	461a      	mov	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4834      	ldr	r0, [pc, #208]	@ (8002e84 <_ZL12uart_managerPhS_+0x178>)
 8002db4:	f002 fea8 	bl	8005b08 <HAL_CRC_Calculate>
 8002db8:	4603      	mov	r3, r0
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 8002dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d002      	beq.n	8002dca <_ZL12uart_managerPhS_+0xbe>
    return -1;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e058      	b.n	8002e7c <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	603b      	str	r3, [r7, #0]
  auto p = begin;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 8002dd6:	e006      	b.n	8002de6 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b3a      	cmp	r3, #58	@ 0x3a
 8002dde:	d007      	beq.n	8002df0 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 8002de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de2:	3301      	adds	r3, #1
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d1f4      	bne.n	8002dd8 <_ZL12uart_managerPhS_+0xcc>
 8002dee:	e000      	b.n	8002df2 <_ZL12uart_managerPhS_+0xe6>
      break;
 8002df0:	bf00      	nop
  }

  if (p != end)
 8002df2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d03e      	beq.n	8002e78 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 8002dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f008 ffeb 	bl	800bdda <_ZNSaIcEC1Ev>
 8002e04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e08:	f107 0010 	add.w	r0, r7, #16
 8002e0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f000 f8be 	bl	8002f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8002e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f008 ffdf 	bl	800bddc <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4619      	mov	r1, r3
 8002e24:	4818      	ldr	r0, [pc, #96]	@ (8002e88 <_ZL12uart_managerPhS_+0x17c>)
 8002e26:	f000 f8d8 	bl	8002fda <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 8002e2e:	4816      	ldr	r0, [pc, #88]	@ (8002e88 <_ZL12uart_managerPhS_+0x17c>)
 8002e30:	f000 f8e2 	bl	8002ff8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e38:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f8e5 	bl	8003012 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e50:	3301      	adds	r3, #1
 8002e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f8ee 	bl	800303a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	6839      	ldr	r1, [r7, #0]
 8002e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e66:	1a8a      	subs	r2, r1, r2
 8002e68:	4611      	mov	r1, r2
 8002e6a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e6c:	4798      	blx	r3
    }
  }
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4618      	mov	r0, r3
 8002e74:	f008 ffff 	bl	800be76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8002e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7a:	3306      	adds	r3, #6
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3740      	adds	r7, #64	@ 0x40
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000174 	.word	0x20000174
 8002e88:	20001efc 	.word	0x20001efc

08002e8c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x58>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11b      	bne.n	8002eda <HAL_UARTEx_RxEventCallback+0x4e>
    return;

  auto end = rx_buf + Size;
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e00b      	b.n	8002ec8 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 8002eb0:	6939      	ldr	r1, [r7, #16]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff2a 	bl	8002d0c <_ZL12uart_managerPhS_>
 8002eb8:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db08      	blt.n	8002ed2 <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3ef      	bcc.n	8002eb0 <HAL_UARTEx_RxEventCallback+0x24>
 8002ed0:	e000      	b.n	8002ed4 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 8002ed2:	bf00      	nop
  }

  uart_receive_start();
 8002ed4:	f000 f80a 	bl	8002eec <_ZL18uart_receive_startv>
 8002ed8:	e000      	b.n	8002edc <HAL_UARTEx_RxEventCallback+0x50>
    return;
 8002eda:	bf00      	nop
}
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000008 	.word	0x20000008
 8002ee8:	20001cf4 	.word	0x20001cf4

08002eec <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <_ZL18uart_receive_startv+0x2c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8002ef8:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <_ZL18uart_receive_startv+0x30>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f007 fdde 	bl	800aabc <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <_ZL18uart_receive_startv+0x34>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <_ZL18uart_receive_startv+0x34>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	20001cf4 	.word	0x20001cf4
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f892 	bl	8003056 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f89a 	bl	800306e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe99 	bl	8002c76 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f894 	bl	8003084 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8b3 	bl	80030da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f88e 	bl	800309a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe9d 	bl	8002cc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8002f9e:	68fc      	ldr	r4, [r7, #12]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f008 ff2b 	bl	800bdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4620      	mov	r0, r4
 8002fae:	f008 ff76 	bl	800be9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 8002fb8:	68bc      	ldr	r4, [r7, #8]
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f8ba 	bl	8003138 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4621      	mov	r1, r4
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f8e0 	bl	8003190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bdb0      	pop	{r4, r5, r7, pc}

08002fda <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f917 	bl	800321c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f946 	bl	8003294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8003008:	4603      	mov	r3, r0
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f935 	bl	80032b6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f937 	bl	80032d2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
      { }
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80030a4:	e011      	b.n	80030ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f000 f91e 	bl	80032e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4619      	mov	r1, r3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fff2 	bl	800309a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80030b6:	6838      	ldr	r0, [r7, #0]
 80030b8:	f000 f922 	bl	8003300 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80030bc:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f929 	bl	8003318 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ea      	bne.n	80030a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f929 	bl	800333a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68b8      	ldr	r0, [r7, #8]
 800312a:	f000 f912 	bl	8003352 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800312e:	4603      	mov	r3, r0
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003140:	bf00      	nop
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f008 fe6d 	bl	800be60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	f000 f8f5 	bl	8003390 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80031a6:	4603      	mov	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d911      	bls.n	80031d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80031b0:	f107 0318 	add.w	r3, r7, #24
 80031b4:	2200      	movs	r2, #0
 80031b6:	4619      	mov	r1, r3
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f008 fe2f 	bl	800be1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80031be:	4603      	mov	r3, r0
 80031c0:	4619      	mov	r1, r3
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f008 fe16 	bl	800bdf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4619      	mov	r1, r3
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f008 fe17 	bl	800be00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80031d2:	e005      	b.n	80031e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80031d8:	69f8      	ldr	r0, [r7, #28]
 80031da:	f008 fe0f 	bl	800bdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80031de:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ffb1 	bl	800314e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f008 fe03 	bl	800bdf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80031f2:	4603      	mov	r3, r0
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f8dd 	bl	80033b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4619      	mov	r1, r3
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f008 fdfc 	bl	800be04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ffab 	bl	800316c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff57 	bl	80030da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800322c:	4604      	mov	r4, r0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8e1 	bl	80033f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8003234:	4602      	mov	r2, r0
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	4621      	mov	r1, r4
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8e7 	bl	800340e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8003240:	4603      	mov	r3, r0
 8003242:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f825 	bl	8003294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800324a:	4603      	mov	r3, r0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	f107 020c 	add.w	r2, r7, #12
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff4a 	bl	80030f2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 800325e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8003264:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8003266:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f901 	bl	8003470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ff50 	bl	800311a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f807 	bl	8003294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8003286:	4603      	mov	r3, r0
 8003288:	e000      	b.n	800328c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 800328a:	68bb      	ldr	r3, [r7, #8]
    }
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}

08003294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f863 	bl	8003372 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3310      	adds	r3, #16
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f8e0 	bl	8003488 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8bb 	bl	80034a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8cc 	bl	80034ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f008 fd8f 	bl	800be82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8003364:	4603      	mov	r3, r0
 8003366:	0fdb      	lsrs	r3, r3, #31
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800339a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff feca 	bl	8003138 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80033a4:	462a      	mov	r2, r5
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 f8b3 	bl	8003514 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80033ae:	4603      	mov	r3, r0
    }
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}

080033b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80033c4:	e00e      	b.n	80033e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	75fb      	strb	r3, [r7, #23]
 80033cc:	f107 0317 	add.w	r3, r7, #23
 80033d0:	4619      	mov	r1, r3
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff fc40 	bl	8002c58 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3301      	adds	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1ec      	bne.n	80033c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800340e:	b590      	push	{r4, r7, lr}
 8003410:	b087      	sub	sp, #28
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800341c:	e01a      	b.n	8003454 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800341e:	68fc      	ldr	r4, [r7, #12]
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f000 f864 	bl	80034ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8003426:	4603      	mov	r3, r0
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4620      	mov	r0, r4
 800342e:	f7ff fe74 	bl	800311a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003432:	4603      	mov	r3, r0
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	68b8      	ldr	r0, [r7, #8]
 8003444:	f7ff ff5c 	bl	8003300 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003448:	60b8      	str	r0, [r7, #8]
 800344a:	e003      	b.n	8003454 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 800344c:	68b8      	ldr	r0, [r7, #8]
 800344e:	f7ff ff4b 	bl	80032e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003452:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e1      	bne.n	800341e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff86 	bl	8003372 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8003466:	697b      	ldr	r3, [r7, #20]
    }
 8003468:	4618      	mov	r0, r3
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}

08003470 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f838 	bl	80034ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800347e:	4603      	mov	r3, r0
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f84e 	bl	8003532 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8003496:	4603      	mov	r3, r0
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f84c 	bl	8003548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80034b0:	4604      	mov	r4, r0
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f7ff feff 	bl	80032b6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f84e 	bl	800355e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}

080034ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f837 	bl	8003548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80034da:	4603      	mov	r3, r0
 80034dc:	2201      	movs	r2, #1
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f849 	bl	8003578 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f84d 	bl	8003596 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f854 	bl	80035b2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 800350a:	4603      	mov	r3, r0
      }
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
    }
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f83a 	bl	80035e4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f837 	bl	80035fc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3310      	adds	r3, #16
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f83c 	bl	8003620 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f008 fc4e 	bl	800be76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f7ff ffeb 	bl	80035ca <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	222c      	movs	r2, #44	@ 0x2c
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	4619      	mov	r1, r3
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f008 fbce 	bl	800bdb4 <_ZdlPvj>
      }
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f805 	bl	8003638 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 800362e:	4603      	mov	r3, r0
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fc84 	bl	8002f66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800367e:	4293      	cmp	r3, r2
 8003680:	d102      	bne.n	8003688 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 8003682:	4809      	ldr	r0, [pc, #36]	@ (80036a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003684:	f7ff fb35 	bl	8002cf2 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003694:	4293      	cmp	r3, r2
 8003696:	d102      	bne.n	800369e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003698:	4803      	ldr	r0, [pc, #12]	@ (80036a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800369a:	f7ff ffd8 	bl	800364e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20001efc 	.word	0x20001efc

080036ac <_GLOBAL__sub_I_huart_reg>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80036b4:	2001      	movs	r0, #1
 80036b6:	f7ff ffd7 	bl	8003668 <_Z41__static_initialization_and_destruction_0ii>
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_GLOBAL__sub_D_huart_reg>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
 80036c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7ff ffcf 	bl	8003668 <_Z41__static_initialization_and_destruction_0ii>
 80036ca:	bd80      	pop	{r7, pc}

080036cc <Reset_Handler>:
 80036cc:	480d      	ldr	r0, [pc, #52]	@ (8003704 <LoopForever+0x2>)
 80036ce:	4685      	mov	sp, r0
 80036d0:	f7ff fab0 	bl	8002c34 <SystemInit>
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <LoopForever+0x6>)
 80036d6:	490d      	ldr	r1, [pc, #52]	@ (800370c <LoopForever+0xa>)
 80036d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <LoopForever+0xe>)
 80036da:	2300      	movs	r3, #0
 80036dc:	e002      	b.n	80036e4 <LoopCopyDataInit>

080036de <CopyDataInit>:
 80036de:	58d4      	ldr	r4, [r2, r3]
 80036e0:	50c4      	str	r4, [r0, r3]
 80036e2:	3304      	adds	r3, #4

080036e4 <LoopCopyDataInit>:
 80036e4:	18c4      	adds	r4, r0, r3
 80036e6:	428c      	cmp	r4, r1
 80036e8:	d3f9      	bcc.n	80036de <CopyDataInit>
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <LoopForever+0x12>)
 80036ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003718 <LoopForever+0x16>)
 80036ee:	2300      	movs	r3, #0
 80036f0:	e001      	b.n	80036f6 <LoopFillZerobss>

080036f2 <FillZerobss>:
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	3204      	adds	r2, #4

080036f6 <LoopFillZerobss>:
 80036f6:	42a2      	cmp	r2, r4
 80036f8:	d3fb      	bcc.n	80036f2 <FillZerobss>
 80036fa:	f008 fd35 	bl	800c168 <__libc_init_array>
 80036fe:	f7fd fc1b 	bl	8000f38 <main>

08003702 <LoopForever>:
 8003702:	e7fe      	b.n	8003702 <LoopForever>
 8003704:	20020000 	.word	0x20020000
 8003708:	20000000 	.word	0x20000000
 800370c:	20000068 	.word	0x20000068
 8003710:	0800ee5c 	.word	0x0800ee5c
 8003714:	20000068 	.word	0x20000068
 8003718:	20002064 	.word	0x20002064

0800371c <ADC1_2_IRQHandler>:
 800371c:	e7fe      	b.n	800371c <ADC1_2_IRQHandler>

0800371e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003728:	2003      	movs	r0, #3
 800372a:	f002 f949 	bl	80059c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800372e:	200f      	movs	r0, #15
 8003730:	f000 f80e 	bl	8003750 <HAL_InitTick>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	71fb      	strb	r3, [r7, #7]
 800373e:	e001      	b.n	8003744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003740:	f7fe fec0 	bl	80024c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003744:	79fb      	ldrb	r3, [r7, #7]

}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800375c:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_InitTick+0x68>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003764:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_InitTick+0x6c>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <HAL_InitTick+0x68>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003770:	fbb1 f3f3 	udiv	r3, r1, r3
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4618      	mov	r0, r3
 800377a:	f002 f954 	bl	8005a26 <HAL_SYSTICK_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10f      	bne.n	80037a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d809      	bhi.n	800379e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378a:	2200      	movs	r2, #0
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	f04f 30ff 	mov.w	r0, #4294967295
 8003792:	f002 f920 	bl	80059d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <HAL_InitTick+0x70>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e007      	b.n	80037ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e004      	b.n	80037ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e001      	b.n	80037ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000014 	.word	0x20000014
 80037bc:	20000004 	.word	0x20000004
 80037c0:	20000010 	.word	0x20000010

080037c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_IncTick+0x20>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a03      	ldr	r2, [pc, #12]	@ (80037e0 <HAL_IncTick+0x1c>)
 80037d4:	6013      	str	r3, [r2, #0]
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20001f14 	.word	0x20001f14
 80037e4:	20000014 	.word	0x20000014

080037e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return uwTick;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_GetTick+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20001f14 	.word	0x20001f14

08003800 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3360      	adds	r3, #96	@ 0x60
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <LL_ADC_SetOffset+0x44>)
 800388a:	4013      	ands	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	03fff000 	.word	0x03fff000

080038b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3360      	adds	r3, #96	@ 0x60
 80038be:	461a      	mov	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3360      	adds	r3, #96	@ 0x60
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	431a      	orrs	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3360      	adds	r3, #96	@ 0x60
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	431a      	orrs	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3360      	adds	r3, #96	@ 0x60
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	431a      	orrs	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	615a      	str	r2, [r3, #20]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3330      	adds	r3, #48	@ 0x30
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	4413      	add	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	211f      	movs	r1, #31
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	401a      	ands	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	f003 011f 	and.w	r1, r3, #31
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	431a      	orrs	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b087      	sub	sp, #28
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3314      	adds	r3, #20
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	0e5b      	lsrs	r3, r3, #25
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0d1b      	lsrs	r3, r3, #20
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2107      	movs	r1, #7
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0d1b      	lsrs	r3, r3, #20
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	431a      	orrs	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0318 	and.w	r3, r3, #24
 8003a9a:	4908      	ldr	r1, [pc, #32]	@ (8003abc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a9c:	40d9      	lsrs	r1, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	0007ffff 	.word	0x0007ffff

08003ac0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 031f 	and.w	r3, r3, #31
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6093      	str	r3, [r2, #8]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b14:	d101      	bne.n	8003b1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb4:	f043 0202 	orr.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <LL_ADC_IsEnabled+0x18>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <LL_ADC_IsEnabled+0x1a>
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d101      	bne.n	8003c06 <LL_ADC_IsDisableOngoing+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_ADC_IsDisableOngoing+0x1a>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c50:	f043 0210 	orr.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d101      	bne.n	8003c7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d101      	bne.n	8003cca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b089      	sub	sp, #36	@ 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1a9      	b.n	8004046 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fe fc03 	bl	800250c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fef1 	bl	8003b00 <LL_ADC_IsDeepPowerDownEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fed7 	bl	8003adc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ff0c 	bl	8003b50 <LL_ADC_IsInternalRegulatorEnabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d115      	bne.n	8003d6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fef0 	bl	8003b28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d48:	4b9c      	ldr	r3, [pc, #624]	@ (8003fbc <HAL_ADC_Init+0x2e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	4a9c      	ldr	r2, [pc, #624]	@ (8003fc0 <HAL_ADC_Init+0x2e8>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d5c:	e002      	b.n	8003d64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f9      	bne.n	8003d5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff feee 	bl	8003b50 <LL_ADC_IsInternalRegulatorEnabled>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff62 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 8003da0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 8142 	bne.w	8004034 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 813e 	bne.w	8004034 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003dc0:	f043 0202 	orr.w	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fefb 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d141      	bne.n	8003e5c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de0:	d004      	beq.n	8003dec <HAL_ADC_Init+0x114>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a77      	ldr	r2, [pc, #476]	@ (8003fc4 <HAL_ADC_Init+0x2ec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10f      	bne.n	8003e0c <HAL_ADC_Init+0x134>
 8003dec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003df0:	f7ff feea 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003df4:	4604      	mov	r4, r0
 8003df6:	4873      	ldr	r0, [pc, #460]	@ (8003fc4 <HAL_ADC_Init+0x2ec>)
 8003df8:	f7ff fee6 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4323      	orrs	r3, r4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e012      	b.n	8003e32 <HAL_ADC_Init+0x15a>
 8003e0c:	486e      	ldr	r0, [pc, #440]	@ (8003fc8 <HAL_ADC_Init+0x2f0>)
 8003e0e:	f7ff fedb 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003e12:	4604      	mov	r4, r0
 8003e14:	486d      	ldr	r0, [pc, #436]	@ (8003fcc <HAL_ADC_Init+0x2f4>)
 8003e16:	f7ff fed7 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	431c      	orrs	r4, r3
 8003e1e:	486c      	ldr	r0, [pc, #432]	@ (8003fd0 <HAL_ADC_Init+0x2f8>)
 8003e20:	f7ff fed2 	bl	8003bc8 <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4323      	orrs	r3, r4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d012      	beq.n	8003e5c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e3e:	d004      	beq.n	8003e4a <HAL_ADC_Init+0x172>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5f      	ldr	r2, [pc, #380]	@ (8003fc4 <HAL_ADC_Init+0x2ec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_Init+0x176>
 8003e4a:	4a62      	ldr	r2, [pc, #392]	@ (8003fd4 <HAL_ADC_Init+0x2fc>)
 8003e4c:	e000      	b.n	8003e50 <HAL_ADC_Init+0x178>
 8003e4e:	4a62      	ldr	r2, [pc, #392]	@ (8003fd8 <HAL_ADC_Init+0x300>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7ff fcd2 	bl	8003800 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7f5b      	ldrb	r3, [r3, #29]
 8003e60:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e66:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e6c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e72:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e7a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d106      	bne.n	8003e98 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	045b      	lsls	r3, r3, #17
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	4b48      	ldr	r3, [pc, #288]	@ (8003fdc <HAL_ADC_Init+0x304>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	69b9      	ldr	r1, [r7, #24]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fee5 	bl	8003cb2 <LL_ADC_INJ_IsConversionOngoing>
 8003ee8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d17f      	bne.n	8003ff0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d17c      	bne.n	8003ff0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003efa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f12:	f023 0302 	bic.w	r3, r3, #2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f40:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6911      	ldr	r1, [r2, #16]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003f56:	e013      	b.n	8003f80 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f7c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d12a      	bne.n	8003fe0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fac:	430a      	orrs	r2, r1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	e019      	b.n	8003ff0 <HAL_ADC_Init+0x318>
 8003fbc:	20000004 	.word	0x20000004
 8003fc0:	053e2d63 	.word	0x053e2d63
 8003fc4:	50000100 	.word	0x50000100
 8003fc8:	50000400 	.word	0x50000400
 8003fcc:	50000500 	.word	0x50000500
 8003fd0:	50000600 	.word	0x50000600
 8003fd4:	50000300 	.word	0x50000300
 8003fd8:	50000700 	.word	0x50000700
 8003fdc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10c      	bne.n	8004012 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f023 010f 	bic.w	r1, r3, #15
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004010:	e007      	b.n	8004022 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 020f 	bic.w	r2, r2, #15
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	f043 0201 	orr.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004032:	e007      	b.n	8004044 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f043 0210 	orr.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004044:	7ffb      	ldrb	r3, [r7, #31]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop

08004050 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004064:	d004      	beq.n	8004070 <HAL_ADC_Start_DMA+0x20>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5a      	ldr	r2, [pc, #360]	@ (80041d4 <HAL_ADC_Start_DMA+0x184>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_ADC_Start_DMA+0x24>
 8004070:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <HAL_ADC_Start_DMA+0x188>)
 8004072:	e000      	b.n	8004076 <HAL_ADC_Start_DMA+0x26>
 8004074:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <HAL_ADC_Start_DMA+0x18c>)
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fd22 	bl	8003ac0 <LL_ADC_GetMultimode>
 800407c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fdee 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 809b 	bne.w	80041c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_ADC_Start_DMA+0x4e>
 800409a:	2302      	movs	r3, #2
 800409c:	e096      	b.n	80041cc <HAL_ADC_Start_DMA+0x17c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a4d      	ldr	r2, [pc, #308]	@ (80041e0 <HAL_ADC_Start_DMA+0x190>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d008      	beq.n	80040c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d002      	beq.n	80040c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d17a      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fe0a 	bl	8004cdc <ADC_Enable>
 80040c8:	4603      	mov	r3, r0
 80040ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d16d      	bne.n	80041ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3a      	ldr	r2, [pc, #232]	@ (80041d4 <HAL_ADC_Start_DMA+0x184>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_ADC_Start_DMA+0xb4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3b      	ldr	r2, [pc, #236]	@ (80041e4 <HAL_ADC_Start_DMA+0x194>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d002      	beq.n	8004100 <HAL_ADC_Start_DMA+0xb0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	e003      	b.n	8004108 <HAL_ADC_Start_DMA+0xb8>
 8004100:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_ADC_Start_DMA+0x198>)
 8004102:	e001      	b.n	8004108 <HAL_ADC_Start_DMA+0xb8>
 8004104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4293      	cmp	r3, r2
 800410e:	d002      	beq.n	8004116 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004132:	f023 0206 	bic.w	r2, r3, #6
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	661a      	str	r2, [r3, #96]	@ 0x60
 800413a:	e002      	b.n	8004142 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	4a29      	ldr	r2, [pc, #164]	@ (80041ec <HAL_ADC_Start_DMA+0x19c>)
 8004148:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	4a28      	ldr	r2, [pc, #160]	@ (80041f0 <HAL_ADC_Start_DMA+0x1a0>)
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004156:	4a27      	ldr	r2, [pc, #156]	@ (80041f4 <HAL_ADC_Start_DMA+0x1a4>)
 8004158:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	221c      	movs	r2, #28
 8004160:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0210 	orr.w	r2, r2, #16
 8004178:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3340      	adds	r3, #64	@ 0x40
 8004194:	4619      	mov	r1, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f002 f8d9 	bl	8006350 <HAL_DMA_Start_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fd34 	bl	8003c14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041ac:	e00d      	b.n	80041ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80041b6:	e008      	b.n	80041ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80041c4:	e001      	b.n	80041ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	50000100 	.word	0x50000100
 80041d8:	50000300 	.word	0x50000300
 80041dc:	50000700 	.word	0x50000700
 80041e0:	50000600 	.word	0x50000600
 80041e4:	50000500 	.word	0x50000500
 80041e8:	50000400 	.word	0x50000400
 80041ec:	08004ec7 	.word	0x08004ec7
 80041f0:	08004f9f 	.word	0x08004f9f
 80041f4:	08004fbb 	.word	0x08004fbb

080041f8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_ADC_Stop_DMA+0x16>
 800420a:	2302      	movs	r3, #2
 800420c:	e051      	b.n	80042b2 <HAL_ADC_Stop_DMA+0xba>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004216:	2103      	movs	r1, #3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fca3 	bl	8004b64 <ADC_ConversionStop>
 800421e:	4603      	mov	r3, r0
 8004220:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d13f      	bne.n	80042a8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d10f      	bne.n	8004266 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	4618      	mov	r0, r3
 800424c:	f002 f8fb 	bl	8006446 <HAL_DMA_Abort>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0210 	bic.w	r2, r2, #16
 8004274:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fdc3 	bl	8004e08 <ADC_Disable>
 8004282:	4603      	mov	r3, r0
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e002      	b.n	800428e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fdbd 	bl	8004e08 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0b6      	sub	sp, #216	@ 0xd8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x24>
 8004302:	2302      	movs	r3, #2
 8004304:	f000 bc13 	b.w	8004b2e <HAL_ADC_ConfigChannel+0x84a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fca5 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 83f3 	bne.w	8004b08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	f7ff fb4b 	bl	80039ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fc93 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 800433e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fcb3 	bl	8003cb2 <LL_ADC_INJ_IsConversionOngoing>
 800434c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 81d9 	bne.w	800470c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800435a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 81d4 	bne.w	800470c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800436c:	d10f      	bne.n	800438e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	4619      	mov	r1, r3
 800437a:	f7ff fb52 	bl	8003a22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff faf9 	bl	800397e <LL_ADC_SetSamplingTimeCommonConfig>
 800438c:	e00e      	b.n	80043ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	461a      	mov	r2, r3
 800439c:	f7ff fb41 	bl	8003a22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fae9 	bl	800397e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d022      	beq.n	8004414 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043de:	f7ff fa43 	bl	8003868 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7ff fa8f 	bl	8003912 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_ADC_ConfigChannel+0x126>
 8004404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004408:	e000      	b.n	800440c <HAL_ADC_ConfigChannel+0x128>
 800440a:	2300      	movs	r3, #0
 800440c:	461a      	mov	r2, r3
 800440e:	f7ff fa9b 	bl	8003948 <LL_ADC_SetOffsetSaturation>
 8004412:	e17b      	b.n	800470c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fa48 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x15c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fa3d 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	f003 021f 	and.w	r2, r3, #31
 800443e:	e01e      	b.n	800447e <HAL_ADC_ConfigChannel+0x19a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fa32 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 800444c:	4603      	mov	r3, r0
 800444e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800445e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004462:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e004      	b.n	800447c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x1b2>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	0e9b      	lsrs	r3, r3, #26
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	e018      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x1e4>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80044aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80044b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80044ba:	2320      	movs	r3, #32
 80044bc:	e004      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80044be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d106      	bne.n	80044da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fa01 	bl	80038dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff f9e5 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x222>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f9da 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 80044fc:	4603      	mov	r3, r0
 80044fe:	0e9b      	lsrs	r3, r3, #26
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	e01e      	b.n	8004544 <HAL_ADC_ConfigChannel+0x260>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f9cf 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 8004512:	4603      	mov	r3, r0
 8004514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800452c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	e004      	b.n	8004542 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_ADC_ConfigChannel+0x278>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	e018      	b.n	800458e <HAL_ADC_ConfigChannel+0x2aa>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004570:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004580:	2320      	movs	r3, #32
 8004582:	e004      	b.n	800458e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458e:	429a      	cmp	r2, r3
 8004590:	d106      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff f99e 	bl	80038dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2102      	movs	r1, #2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff f982 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x2e8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2102      	movs	r1, #2
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff f977 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	f003 021f 	and.w	r2, r3, #31
 80045ca:	e01e      	b.n	800460a <HAL_ADC_ConfigChannel+0x326>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2102      	movs	r1, #2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f96c 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 80045d8:	4603      	mov	r3, r0
 80045da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80045ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80045f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045fa:	2320      	movs	r3, #32
 80045fc:	e004      	b.n	8004608 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x33e>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0e9b      	lsrs	r3, r3, #26
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	e016      	b.n	8004650 <HAL_ADC_ConfigChannel+0x36c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800463a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004642:	2320      	movs	r3, #32
 8004644:	e004      	b.n	8004650 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004650:	429a      	cmp	r2, r3
 8004652:	d106      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f93d 	bl	80038dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2103      	movs	r1, #3
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f921 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <HAL_ADC_ConfigChannel+0x3aa>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2103      	movs	r1, #3
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f916 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 8004684:	4603      	mov	r3, r0
 8004686:	0e9b      	lsrs	r3, r3, #26
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	e017      	b.n	80046be <HAL_ADC_ConfigChannel+0x3da>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2103      	movs	r1, #3
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff f90b 	bl	80038b0 <LL_ADC_GetOffsetChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80046a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80046aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e003      	b.n	80046bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80046b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x3f2>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0e9b      	lsrs	r3, r3, #26
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	e011      	b.n	80046fa <HAL_ADC_ConfigChannel+0x416>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80046e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80046e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80046ee:	2320      	movs	r3, #32
 80046f0:	e003      	b.n	80046fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d106      	bne.n	800470c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	2103      	movs	r1, #3
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff f8e8 	bl	80038dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fa59 	bl	8003bc8 <LL_ADC_IsEnabled>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 813d 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f7ff f9a4 	bl	8003a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4aa2      	ldr	r2, [pc, #648]	@ (80049c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f040 812e 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x480>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	3301      	adds	r3, #1
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2b09      	cmp	r3, #9
 800475a:	bf94      	ite	ls
 800475c:	2301      	movls	r3, #1
 800475e:	2300      	movhi	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e019      	b.n	8004798 <HAL_ADC_ConfigChannel+0x4b4>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004774:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e003      	b.n	8004788 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3301      	adds	r3, #1
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2b09      	cmp	r3, #9
 8004790:	bf94      	ite	ls
 8004792:	2301      	movls	r3, #1
 8004794:	2300      	movhi	r3, #0
 8004796:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004798:	2b00      	cmp	r3, #0
 800479a:	d079      	beq.n	8004890 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x4d4>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0e9b      	lsrs	r3, r3, #26
 80047ae:	3301      	adds	r3, #1
 80047b0:	069b      	lsls	r3, r3, #26
 80047b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047b6:	e015      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x500>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80047ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e003      	b.n	80047dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80047d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	069b      	lsls	r3, r3, #26
 80047e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x520>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	0e9b      	lsrs	r3, r3, #26
 80047f6:	3301      	adds	r3, #1
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	2101      	movs	r1, #1
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	e017      	b.n	8004834 <HAL_ADC_ConfigChannel+0x550>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004814:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e003      	b.n	8004828 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2101      	movs	r1, #1
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_ADC_ConfigChannel+0x576>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	3301      	adds	r3, #1
 800484c:	f003 021f 	and.w	r2, r3, #31
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	051b      	lsls	r3, r3, #20
 8004858:	e018      	b.n	800488c <HAL_ADC_ConfigChannel+0x5a8>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800486c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004872:	2320      	movs	r3, #32
 8004874:	e003      	b.n	800487e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800488c:	430b      	orrs	r3, r1
 800488e:	e07e      	b.n	800498e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x5c8>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	3301      	adds	r3, #1
 80048a4:	069b      	lsls	r3, r3, #26
 80048a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048aa:	e015      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x5f4>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80048c4:	2320      	movs	r3, #32
 80048c6:	e003      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	069b      	lsls	r3, r3, #26
 80048d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x614>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	3301      	adds	r3, #1
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	e017      	b.n	8004928 <HAL_ADC_ConfigChannel+0x644>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	61fb      	str	r3, [r7, #28]
  return result;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004910:	2320      	movs	r3, #32
 8004912:	e003      	b.n	800491c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	3301      	adds	r3, #1
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	ea42 0103 	orr.w	r1, r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x670>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	0e9b      	lsrs	r3, r3, #26
 800493e:	3301      	adds	r3, #1
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	3b1e      	subs	r3, #30
 800494c:	051b      	lsls	r3, r3, #20
 800494e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004952:	e01b      	b.n	800498c <HAL_ADC_ConfigChannel+0x6a8>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	613b      	str	r3, [r7, #16]
  return result;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800496c:	2320      	movs	r3, #32
 800496e:	e003      	b.n	8004978 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f003 021f 	and.w	r2, r3, #31
 800497e:	4613      	mov	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4413      	add	r3, r2
 8004984:	3b1e      	subs	r3, #30
 8004986:	051b      	lsls	r3, r3, #20
 8004988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800498c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004992:	4619      	mov	r1, r3
 8004994:	f7ff f845 	bl	8003a22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80be 	beq.w	8004b22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ae:	d004      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x6d6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	@ (80049c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10a      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x6ec>
 80049ba:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <HAL_ADC_ConfigChannel+0x6e8>)
 80049bc:	e009      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x6ee>
 80049be:	bf00      	nop
 80049c0:	407f0000 	.word	0x407f0000
 80049c4:	80080000 	.word	0x80080000
 80049c8:	50000100 	.word	0x50000100
 80049cc:	50000300 	.word	0x50000300
 80049d0:	4b59      	ldr	r3, [pc, #356]	@ (8004b38 <HAL_ADC_ConfigChannel+0x854>)
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe ff3a 	bl	800384c <LL_ADC_GetCommonPathInternalCh>
 80049d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a56      	ldr	r2, [pc, #344]	@ (8004b3c <HAL_ADC_ConfigChannel+0x858>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_ADC_ConfigChannel+0x70c>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a55      	ldr	r2, [pc, #340]	@ (8004b40 <HAL_ADC_ConfigChannel+0x85c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d13a      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d134      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a04:	d005      	beq.n	8004a12 <HAL_ADC_ConfigChannel+0x72e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <HAL_ADC_ConfigChannel+0x860>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	f040 8085 	bne.w	8004b1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a1a:	d004      	beq.n	8004a26 <HAL_ADC_ConfigChannel+0x742>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a49      	ldr	r2, [pc, #292]	@ (8004b48 <HAL_ADC_ConfigChannel+0x864>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x746>
 8004a26:	4a49      	ldr	r2, [pc, #292]	@ (8004b4c <HAL_ADC_ConfigChannel+0x868>)
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x748>
 8004a2a:	4a43      	ldr	r2, [pc, #268]	@ (8004b38 <HAL_ADC_ConfigChannel+0x854>)
 8004a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f7fe fef5 	bl	8003826 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a3c:	4b44      	ldr	r3, [pc, #272]	@ (8004b50 <HAL_ADC_ConfigChannel+0x86c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	4a44      	ldr	r2, [pc, #272]	@ (8004b54 <HAL_ADC_ConfigChannel+0x870>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a56:	e002      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f9      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a64:	e05a      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b58 <HAL_ADC_ConfigChannel+0x874>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d125      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11f      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a31      	ldr	r2, [pc, #196]	@ (8004b48 <HAL_ADC_ConfigChannel+0x864>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d104      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x7ac>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a34      	ldr	r2, [pc, #208]	@ (8004b5c <HAL_ADC_ConfigChannel+0x878>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d047      	beq.n	8004b20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0x7c0>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b48 <HAL_ADC_ConfigChannel+0x864>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x7c4>
 8004aa4:	4a29      	ldr	r2, [pc, #164]	@ (8004b4c <HAL_ADC_ConfigChannel+0x868>)
 8004aa6:	e000      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x7c6>
 8004aa8:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_ADC_ConfigChannel+0x854>)
 8004aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fe feb6 	bl	8003826 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aba:	e031      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a27      	ldr	r2, [pc, #156]	@ (8004b60 <HAL_ADC_ConfigChannel+0x87c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d12d      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d127      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <HAL_ADC_ConfigChannel+0x864>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ae4:	d004      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x80c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <HAL_ADC_ConfigChannel+0x864>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x810>
 8004af0:	4a16      	ldr	r2, [pc, #88]	@ (8004b4c <HAL_ADC_ConfigChannel+0x868>)
 8004af2:	e000      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x812>
 8004af4:	4a10      	ldr	r2, [pc, #64]	@ (8004b38 <HAL_ADC_ConfigChannel+0x854>)
 8004af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004afa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7fe fe90 	bl	8003826 <LL_ADC_SetCommonPathInternalCh>
 8004b06:	e00c      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b1a:	e002      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	37d8      	adds	r7, #216	@ 0xd8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	50000700 	.word	0x50000700
 8004b3c:	c3210000 	.word	0xc3210000
 8004b40:	90c00010 	.word	0x90c00010
 8004b44:	50000600 	.word	0x50000600
 8004b48:	50000100 	.word	0x50000100
 8004b4c:	50000300 	.word	0x50000300
 8004b50:	20000004 	.word	0x20000004
 8004b54:	053e2d63 	.word	0x053e2d63
 8004b58:	c7520000 	.word	0xc7520000
 8004b5c:	50000500 	.word	0x50000500
 8004b60:	cb840000 	.word	0xcb840000

08004b64 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff f872 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 8004b80:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f893 	bl	8003cb2 <LL_ADC_INJ_IsConversionOngoing>
 8004b8c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8098 	beq.w	8004ccc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d02a      	beq.n	8004c00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7f5b      	ldrb	r3, [r3, #29]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d126      	bne.n	8004c00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7f1b      	ldrb	r3, [r3, #28]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d122      	bne.n	8004c00 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004bbe:	e014      	b.n	8004bea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4a45      	ldr	r2, [pc, #276]	@ (8004cd8 <ADC_ConversionStop+0x174>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d90d      	bls.n	8004be4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f043 0210 	orr.w	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd8:	f043 0201 	orr.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e074      	b.n	8004cce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d1e3      	bne.n	8004bc0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2240      	movs	r2, #64	@ 0x40
 8004bfe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d014      	beq.n	8004c30 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f82a 	bl	8003c64 <LL_ADC_REG_IsConversionOngoing>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe ffe7 	bl	8003bee <LL_ADC_IsDisableOngoing>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f806 	bl	8003c3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d014      	beq.n	8004c60 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f839 	bl	8003cb2 <LL_ADC_INJ_IsConversionOngoing>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe ffcf 	bl	8003bee <LL_ADC_IsDisableOngoing>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff f815 	bl	8003c8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d005      	beq.n	8004c72 <ADC_ConversionStop+0x10e>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d105      	bne.n	8004c78 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	617b      	str	r3, [r7, #20]
        break;
 8004c70:	e005      	b.n	8004c7e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004c72:	2308      	movs	r3, #8
 8004c74:	617b      	str	r3, [r7, #20]
        break;
 8004c76:	e002      	b.n	8004c7e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004c78:	2304      	movs	r3, #4
 8004c7a:	617b      	str	r3, [r7, #20]
        break;
 8004c7c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004c7e:	f7fe fdb3 	bl	80037e8 <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c84:	e01b      	b.n	8004cbe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c86:	f7fe fdaf 	bl	80037e8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d914      	bls.n	8004cbe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1dc      	bne.n	8004c86 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	a33fffff 	.word	0xa33fffff

08004cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe ff6b 	bl	8003bc8 <LL_ADC_IsEnabled>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d176      	bne.n	8004de6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <ADC_Enable+0x114>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0a:	f043 0210 	orr.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d16:	f043 0201 	orr.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e062      	b.n	8004de8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe ff26 	bl	8003b78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d34:	d004      	beq.n	8004d40 <ADC_Enable+0x64>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004df4 <ADC_Enable+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <ADC_Enable+0x68>
 8004d40:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <ADC_Enable+0x11c>)
 8004d42:	e000      	b.n	8004d46 <ADC_Enable+0x6a>
 8004d44:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <ADC_Enable+0x120>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fd80 	bl	800384c <LL_ADC_GetCommonPathInternalCh>
 8004d4c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d56:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <ADC_Enable+0x124>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <ADC_Enable+0x128>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d70:	e002      	b.n	8004d78 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f9      	bne.n	8004d72 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d7e:	f7fe fd33 	bl	80037e8 <HAL_GetTick>
 8004d82:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d84:	e028      	b.n	8004dd8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe ff1c 	bl	8003bc8 <LL_ADC_IsEnabled>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe feec 	bl	8003b78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004da0:	f7fe fd22 	bl	80037e8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d914      	bls.n	8004dd8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d00d      	beq.n	8004dd8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	f043 0210 	orr.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	f043 0201 	orr.w	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d1cf      	bne.n	8004d86 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	8000003f 	.word	0x8000003f
 8004df4:	50000100 	.word	0x50000100
 8004df8:	50000300 	.word	0x50000300
 8004dfc:	50000700 	.word	0x50000700
 8004e00:	20000004 	.word	0x20000004
 8004e04:	053e2d63 	.word	0x053e2d63

08004e08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe feea 	bl	8003bee <LL_ADC_IsDisableOngoing>
 8004e1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fed1 	bl	8003bc8 <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d047      	beq.n	8004ebc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d144      	bne.n	8004ebc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030d 	and.w	r3, r3, #13
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10c      	bne.n	8004e5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe feab 	bl	8003ba0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e52:	f7fe fcc9 	bl	80037e8 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e58:	e029      	b.n	8004eae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e023      	b.n	8004ebe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e76:	f7fe fcb7 	bl	80037e8 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d914      	bls.n	8004eae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e007      	b.n	8004ebe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1dc      	bne.n	8004e76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d14b      	bne.n	8004f78 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fd50 	bl	80039a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d032      	beq.n	8004f70 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d12b      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11f      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f3c:	e018      	b.n	8004f70 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d111      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fb ff0f 	bl	8000d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f76:	e00e      	b.n	8004f96 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff f9a2 	bl	80042ce <HAL_ADC_ErrorCallback>
}
 8004f8a:	e004      	b.n	8004f96 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff f984 	bl	80042ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff f974 	bl	80042ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <LL_ADC_IsEnabled>:
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <LL_ADC_IsEnabled+0x18>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <LL_ADC_IsEnabled+0x1a>
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_ADC_REG_IsConversionOngoing>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d101      	bne.n	800502c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b0a1      	sub	sp, #132	@ 0x84
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0e7      	b.n	800522a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005062:	2300      	movs	r3, #0
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005066:	2300      	movs	r3, #0
 8005068:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005072:	d102      	bne.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005074:	4b6f      	ldr	r3, [pc, #444]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e009      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6e      	ldr	r2, [pc, #440]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005084:	4b6d      	ldr	r3, [pc, #436]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	e001      	b.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0be      	b.n	800522a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffb0 	bl	8005014 <LL_ADC_REG_IsConversionOngoing>
 80050b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ffaa 	bl	8005014 <LL_ADC_REG_IsConversionOngoing>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 80a0 	bne.w	8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 809c 	bne.w	8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d8:	d004      	beq.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a55      	ldr	r2, [pc, #340]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050e4:	4b56      	ldr	r3, [pc, #344]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050e6:	e000      	b.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050e8:	4b56      	ldr	r3, [pc, #344]	@ (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d04b      	beq.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005106:	035b      	lsls	r3, r3, #13
 8005108:	430b      	orrs	r3, r1
 800510a:	431a      	orrs	r2, r3
 800510c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800510e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005118:	d004      	beq.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a45      	ldr	r2, [pc, #276]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10f      	bne.n	8005144 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005124:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005128:	f7ff ff61 	bl	8004fee <LL_ADC_IsEnabled>
 800512c:	4604      	mov	r4, r0
 800512e:	4841      	ldr	r0, [pc, #260]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005130:	f7ff ff5d 	bl	8004fee <LL_ADC_IsEnabled>
 8005134:	4603      	mov	r3, r0
 8005136:	4323      	orrs	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e012      	b.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005144:	483c      	ldr	r0, [pc, #240]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005146:	f7ff ff52 	bl	8004fee <LL_ADC_IsEnabled>
 800514a:	4604      	mov	r4, r0
 800514c:	483b      	ldr	r0, [pc, #236]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800514e:	f7ff ff4e 	bl	8004fee <LL_ADC_IsEnabled>
 8005152:	4603      	mov	r3, r0
 8005154:	431c      	orrs	r4, r3
 8005156:	483c      	ldr	r0, [pc, #240]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005158:	f7ff ff49 	bl	8004fee <LL_ADC_IsEnabled>
 800515c:	4603      	mov	r3, r0
 800515e:	4323      	orrs	r3, r4
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d056      	beq.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800516e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	430a      	orrs	r2, r1
 8005184:	431a      	orrs	r2, r3
 8005186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005188:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800518a:	e047      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800518c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005196:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051a0:	d004      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d10f      	bne.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80051ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80051b0:	f7ff ff1d 	bl	8004fee <LL_ADC_IsEnabled>
 80051b4:	4604      	mov	r4, r0
 80051b6:	481f      	ldr	r0, [pc, #124]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051b8:	f7ff ff19 	bl	8004fee <LL_ADC_IsEnabled>
 80051bc:	4603      	mov	r3, r0
 80051be:	4323      	orrs	r3, r4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e012      	b.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80051cc:	481a      	ldr	r0, [pc, #104]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ce:	f7ff ff0e 	bl	8004fee <LL_ADC_IsEnabled>
 80051d2:	4604      	mov	r4, r0
 80051d4:	4819      	ldr	r0, [pc, #100]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051d6:	f7ff ff0a 	bl	8004fee <LL_ADC_IsEnabled>
 80051da:	4603      	mov	r3, r0
 80051dc:	431c      	orrs	r4, r3
 80051de:	481a      	ldr	r0, [pc, #104]	@ (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051e0:	f7ff ff05 	bl	8004fee <LL_ADC_IsEnabled>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4323      	orrs	r3, r4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d012      	beq.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051fe:	f023 030f 	bic.w	r3, r3, #15
 8005202:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005204:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005206:	e009      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	f043 0220 	orr.w	r2, r3, #32
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800521a:	e000      	b.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800521c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005226:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800522a:	4618      	mov	r0, r3
 800522c:	3784      	adds	r7, #132	@ 0x84
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	bf00      	nop
 8005234:	50000100 	.word	0x50000100
 8005238:	50000400 	.word	0x50000400
 800523c:	50000500 	.word	0x50000500
 8005240:	50000300 	.word	0x50000300
 8005244:	50000700 	.word	0x50000700
 8005248:	50000600 	.word	0x50000600

0800524c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <LL_EXTI_EnableIT_0_31+0x20>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <LL_EXTI_EnableIT_0_31+0x20>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010400 	.word	0x40010400

08005270 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <LL_EXTI_EnableIT_32_63+0x20>)
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	4904      	ldr	r1, [pc, #16]	@ (8005290 <LL_EXTI_EnableIT_32_63+0x20>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4313      	orrs	r3, r2
 8005282:	620b      	str	r3, [r1, #32]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40010400 	.word	0x40010400

08005294 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	4904      	ldr	r1, [pc, #16]	@ (80052b8 <LL_EXTI_DisableIT_0_31+0x24>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010400 	.word	0x40010400

080052bc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	43db      	mvns	r3, r3
 80052cc:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	620b      	str	r3, [r1, #32]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010400 	.word	0x40010400

080052e4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4904      	ldr	r1, [pc, #16]	@ (8005304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]

}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40010400 	.word	0x40010400

08005308 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005314:	4904      	ldr	r1, [pc, #16]	@ (8005328 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010400 	.word	0x40010400

0800532c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	43db      	mvns	r3, r3
 800533c:	4904      	ldr	r1, [pc, #16]	@ (8005350 <LL_EXTI_DisableEvent_0_31+0x24>)
 800533e:	4013      	ands	r3, r2
 8005340:	604b      	str	r3, [r1, #4]
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010400 	.word	0x40010400

08005354 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800535c:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <LL_EXTI_DisableEvent_32_63+0x24>)
 800535e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	43db      	mvns	r3, r3
 8005364:	4904      	ldr	r1, [pc, #16]	@ (8005378 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005366:	4013      	ands	r3, r2
 8005368:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010400 	.word	0x40010400

0800537c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	4904      	ldr	r1, [pc, #16]	@ (800539c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]

}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40010400 	.word	0x40010400

080053a0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80053aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ac:	4904      	ldr	r1, [pc, #16]	@ (80053c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40010400 	.word	0x40010400

080053c4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80053cc:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	43db      	mvns	r3, r3
 80053d4:	4904      	ldr	r1, [pc, #16]	@ (80053e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]

}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40010400 	.word	0x40010400

080053ec <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80053f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	4904      	ldr	r1, [pc, #16]	@ (8005410 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80053fe:	4013      	ands	r3, r2
 8005400:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010400 	.word	0x40010400

08005414 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4904      	ldr	r1, [pc, #16]	@ (8005434 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4313      	orrs	r3, r2
 8005426:	60cb      	str	r3, [r1, #12]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40010400 	.word	0x40010400

08005438 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	4904      	ldr	r1, [pc, #16]	@ (8005458 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4313      	orrs	r3, r2
 800544a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010400 	.word	0x40010400

0800545c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005464:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	43db      	mvns	r3, r3
 800546c:	4904      	ldr	r1, [pc, #16]	@ (8005480 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800546e:	4013      	ands	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010400 	.word	0x40010400

08005484 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800548e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	43db      	mvns	r3, r3
 8005494:	4904      	ldr	r1, [pc, #16]	@ (80054a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005496:	4013      	ands	r3, r2
 8005498:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010400 	.word	0x40010400

080054ac <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80054b4:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6153      	str	r3, [r2, #20]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010400 	.word	0x40010400

080054cc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80054d4:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010400 	.word	0x40010400

080054ec <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e181      	b.n	800580c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005516:	d102      	bne.n	800551e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e176      	b.n	800580c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7f5b      	ldrb	r3, [r3, #29]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fd f86b 	bl	8002610 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005544:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b90      	ldr	r3, [pc, #576]	@ (80057ac <HAL_COMP_Init+0x2c0>)
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	430b      	orrs	r3, r1
 8005576:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_COMP_Init+0xc8>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d113      	bne.n	80055b4 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800558c:	4b88      	ldr	r3, [pc, #544]	@ (80057b0 <HAL_COMP_Init+0x2c4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	099b      	lsrs	r3, r3, #6
 8005592:	4a88      	ldr	r2, [pc, #544]	@ (80057b4 <HAL_COMP_Init+0x2c8>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	099b      	lsrs	r3, r3, #6
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80055a6:	e002      	b.n	80055ae <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f9      	bne.n	80055a8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a7f      	ldr	r2, [pc, #508]	@ (80057b8 <HAL_COMP_Init+0x2cc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d028      	beq.n	8005610 <HAL_COMP_Init+0x124>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a7e      	ldr	r2, [pc, #504]	@ (80057bc <HAL_COMP_Init+0x2d0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d020      	beq.n	800560a <HAL_COMP_Init+0x11e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a7c      	ldr	r2, [pc, #496]	@ (80057c0 <HAL_COMP_Init+0x2d4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_COMP_Init+0x118>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a7b      	ldr	r2, [pc, #492]	@ (80057c4 <HAL_COMP_Init+0x2d8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d010      	beq.n	80055fe <HAL_COMP_Init+0x112>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a79      	ldr	r2, [pc, #484]	@ (80057c8 <HAL_COMP_Init+0x2dc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d008      	beq.n	80055f8 <HAL_COMP_Init+0x10c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a78      	ldr	r2, [pc, #480]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_COMP_Init+0x108>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e00f      	b.n	8005614 <HAL_COMP_Init+0x128>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e00d      	b.n	8005614 <HAL_COMP_Init+0x128>
 80055f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80055fc:	e00a      	b.n	8005614 <HAL_COMP_Init+0x128>
 80055fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005602:	e007      	b.n	8005614 <HAL_COMP_Init+0x128>
 8005604:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005608:	e004      	b.n	8005614 <HAL_COMP_Init+0x128>
 800560a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800560e:	e001      	b.n	8005614 <HAL_COMP_Init+0x128>
 8005610:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005614:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80b6 	beq.w	8005790 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d011      	beq.n	8005654 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a65      	ldr	r2, [pc, #404]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_COMP_Init+0x158>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a64      	ldr	r2, [pc, #400]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005644:	6938      	ldr	r0, [r7, #16]
 8005646:	f7ff feab 	bl	80053a0 <LL_EXTI_EnableRisingTrig_32_63>
 800564a:	e014      	b.n	8005676 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f7ff fe95 	bl	800537c <LL_EXTI_EnableRisingTrig_0_31>
 8005652:	e010      	b.n	8005676 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a5c      	ldr	r2, [pc, #368]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_COMP_Init+0x17c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a5b      	ldr	r2, [pc, #364]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8005668:	6938      	ldr	r0, [r7, #16]
 800566a:	f7ff febf 	bl	80053ec <LL_EXTI_DisableRisingTrig_32_63>
 800566e:	e002      	b.n	8005676 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f7ff fea7 	bl	80053c4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d011      	beq.n	80056a6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a51      	ldr	r2, [pc, #324]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_COMP_Init+0x1aa>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4f      	ldr	r2, [pc, #316]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d103      	bne.n	800569e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f7ff fece 	bl	8005438 <LL_EXTI_EnableFallingTrig_32_63>
 800569c:	e014      	b.n	80056c8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f7ff feb8 	bl	8005414 <LL_EXTI_EnableFallingTrig_0_31>
 80056a4:	e010      	b.n	80056c8 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a48      	ldr	r2, [pc, #288]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_COMP_Init+0x1ce>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a46      	ldr	r2, [pc, #280]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d103      	bne.n	80056c2 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80056ba:	6938      	ldr	r0, [r7, #16]
 80056bc:	f7ff fee2 	bl	8005484 <LL_EXTI_DisableFallingTrig_32_63>
 80056c0:	e002      	b.n	80056c8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80056c2:	6938      	ldr	r0, [r7, #16]
 80056c4:	f7ff feca 	bl	800545c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3f      	ldr	r2, [pc, #252]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_COMP_Init+0x1f0>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3e      	ldr	r2, [pc, #248]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d103      	bne.n	80056e4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80056dc:	6938      	ldr	r0, [r7, #16]
 80056de:	f7ff fef5 	bl	80054cc <LL_EXTI_ClearFlag_32_63>
 80056e2:	e002      	b.n	80056ea <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80056e4:	6938      	ldr	r0, [r7, #16]
 80056e6:	f7ff fee1 	bl	80054ac <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a34      	ldr	r2, [pc, #208]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_COMP_Init+0x21e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a32      	ldr	r2, [pc, #200]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d103      	bne.n	8005712 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7ff fdfc 	bl	8005308 <LL_EXTI_EnableEvent_32_63>
 8005710:	e014      	b.n	800573c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005712:	6938      	ldr	r0, [r7, #16]
 8005714:	f7ff fde6 	bl	80052e4 <LL_EXTI_EnableEvent_0_31>
 8005718:	e010      	b.n	800573c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2b      	ldr	r2, [pc, #172]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_COMP_Init+0x242>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a29      	ldr	r2, [pc, #164]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d103      	bne.n	8005736 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	f7ff fe10 	bl	8005354 <LL_EXTI_DisableEvent_32_63>
 8005734:	e002      	b.n	800573c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005736:	6938      	ldr	r0, [r7, #16]
 8005738:	f7ff fdf8 	bl	800532c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_COMP_Init+0x270>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1e      	ldr	r2, [pc, #120]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800575c:	6938      	ldr	r0, [r7, #16]
 800575e:	f7ff fd87 	bl	8005270 <LL_EXTI_EnableIT_32_63>
 8005762:	e04b      	b.n	80057fc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f7ff fd71 	bl	800524c <LL_EXTI_EnableIT_0_31>
 800576a:	e047      	b.n	80057fc <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_COMP_Init+0x294>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f7ff fd9b 	bl	80052bc <LL_EXTI_DisableIT_32_63>
 8005786:	e039      	b.n	80057fc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8005788:	6938      	ldr	r0, [r7, #16]
 800578a:	f7ff fd83 	bl	8005294 <LL_EXTI_DisableIT_0_31>
 800578e:	e035      	b.n	80057fc <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0d      	ldr	r2, [pc, #52]	@ (80057cc <HAL_COMP_Init+0x2e0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_COMP_Init+0x2b8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0c      	ldr	r2, [pc, #48]	@ (80057d0 <HAL_COMP_Init+0x2e4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d117      	bne.n	80057d4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f7ff fdd5 	bl	8005354 <LL_EXTI_DisableEvent_32_63>
 80057aa:	e016      	b.n	80057da <HAL_COMP_Init+0x2ee>
 80057ac:	ff007e0f 	.word	0xff007e0f
 80057b0:	20000004 	.word	0x20000004
 80057b4:	053e2d63 	.word	0x053e2d63
 80057b8:	40010200 	.word	0x40010200
 80057bc:	40010204 	.word	0x40010204
 80057c0:	40010208 	.word	0x40010208
 80057c4:	4001020c 	.word	0x4001020c
 80057c8:	40010210 	.word	0x40010210
 80057cc:	40010214 	.word	0x40010214
 80057d0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80057d4:	6938      	ldr	r0, [r7, #16]
 80057d6:	f7ff fda9 	bl	800532c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a0e      	ldr	r2, [pc, #56]	@ (8005818 <HAL_COMP_Init+0x32c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_COMP_Init+0x302>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0c      	ldr	r2, [pc, #48]	@ (800581c <HAL_COMP_Init+0x330>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d103      	bne.n	80057f6 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80057ee:	6938      	ldr	r0, [r7, #16]
 80057f0:	f7ff fd64 	bl	80052bc <LL_EXTI_DisableIT_32_63>
 80057f4:	e002      	b.n	80057fc <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f7ff fd4c 	bl	8005294 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7f5b      	ldrb	r3, [r3, #29]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800580c:	7ffb      	ldrb	r3, [r7, #31]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40010214 	.word	0x40010214
 800581c:	40010218 	.word	0x40010218

08005820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005830:	4b0c      	ldr	r3, [pc, #48]	@ (8005864 <__NVIC_SetPriorityGrouping+0x44>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800584c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005852:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <__NVIC_SetPriorityGrouping+0x44>)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	60d3      	str	r3, [r2, #12]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <__NVIC_GetPriorityGrouping+0x18>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 0307 	and.w	r3, r3, #7
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	e000ed00 	.word	0xe000ed00

08005884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	2b00      	cmp	r3, #0
 8005894:	db0b      	blt.n	80058ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	f003 021f 	and.w	r2, r3, #31
 800589c:	4907      	ldr	r1, [pc, #28]	@ (80058bc <__NVIC_EnableIRQ+0x38>)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2001      	movs	r0, #1
 80058a6:	fa00 f202 	lsl.w	r2, r0, r2
 80058aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	e000e100 	.word	0xe000e100

080058c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	6039      	str	r1, [r7, #0]
 80058ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	db0a      	blt.n	80058ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	490c      	ldr	r1, [pc, #48]	@ (800590c <__NVIC_SetPriority+0x4c>)
 80058da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058de:	0112      	lsls	r2, r2, #4
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	440b      	add	r3, r1
 80058e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e8:	e00a      	b.n	8005900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4908      	ldr	r1, [pc, #32]	@ (8005910 <__NVIC_SetPriority+0x50>)
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	3b04      	subs	r3, #4
 80058f8:	0112      	lsls	r2, r2, #4
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	440b      	add	r3, r1
 80058fe:	761a      	strb	r2, [r3, #24]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000e100 	.word	0xe000e100
 8005910:	e000ed00 	.word	0xe000ed00

08005914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	@ 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f1c3 0307 	rsb	r3, r3, #7
 800592e:	2b04      	cmp	r3, #4
 8005930:	bf28      	it	cs
 8005932:	2304      	movcs	r3, #4
 8005934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3304      	adds	r3, #4
 800593a:	2b06      	cmp	r3, #6
 800593c:	d902      	bls.n	8005944 <NVIC_EncodePriority+0x30>
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3b03      	subs	r3, #3
 8005942:	e000      	b.n	8005946 <NVIC_EncodePriority+0x32>
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005948:	f04f 32ff 	mov.w	r2, #4294967295
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43da      	mvns	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	401a      	ands	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800595c:	f04f 31ff 	mov.w	r1, #4294967295
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fa01 f303 	lsl.w	r3, r1, r3
 8005966:	43d9      	mvns	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800596c:	4313      	orrs	r3, r2
         );
}
 800596e:	4618      	mov	r0, r3
 8005970:	3724      	adds	r7, #36	@ 0x24
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3b01      	subs	r3, #1
 8005988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800598c:	d301      	bcc.n	8005992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800598e:	2301      	movs	r3, #1
 8005990:	e00f      	b.n	80059b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005992:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <SysTick_Config+0x40>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800599a:	210f      	movs	r1, #15
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	f7ff ff8e 	bl	80058c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <SysTick_Config+0x40>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059aa:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <SysTick_Config+0x40>)
 80059ac:	2207      	movs	r2, #7
 80059ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	e000e010 	.word	0xe000e010

080059c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff ff29 	bl	8005820 <__NVIC_SetPriorityGrouping>
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	4603      	mov	r3, r0
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059e4:	f7ff ff40 	bl	8005868 <__NVIC_GetPriorityGrouping>
 80059e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	6978      	ldr	r0, [r7, #20]
 80059f0:	f7ff ff90 	bl	8005914 <NVIC_EncodePriority>
 80059f4:	4602      	mov	r2, r0
 80059f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff ff5f 	bl	80058c0 <__NVIC_SetPriority>
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	4603      	mov	r3, r0
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ff33 	bl	8005884 <__NVIC_EnableIRQ>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff ffa4 	bl	800597c <SysTick_Config>
 8005a34:	4603      	mov	r3, r0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e054      	b.n	8005afc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7f5b      	ldrb	r3, [r3, #29]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc fe24 	bl	80026b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	791b      	ldrb	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <HAL_CRC_Init+0xc4>)
 8005a7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0218 	bic.w	r2, r2, #24
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	e00c      	b.n	8005aaa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f948 	bl	8005d30 <HAL_CRCEx_Polynomial_Set>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e028      	b.n	8005afc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	795b      	ldrb	r3, [r3, #5]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	611a      	str	r2, [r3, #16]
 8005abc:	e004      	b.n	8005ac8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6912      	ldr	r2, [r2, #16]
 8005ac6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	04c11db7 	.word	0x04c11db7

08005b08 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d006      	beq.n	8005b44 <HAL_CRC_Calculate+0x3c>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d829      	bhi.n	8005b8e <HAL_CRC_Calculate+0x86>
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d019      	beq.n	8005b72 <HAL_CRC_Calculate+0x6a>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d01e      	beq.n	8005b80 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005b42:	e024      	b.n	8005b8e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e00a      	b.n	8005b60 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	441a      	add	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d3f0      	bcc.n	8005b4a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	613b      	str	r3, [r7, #16]
      break;
 8005b70:	e00e      	b.n	8005b90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f812 	bl	8005ba0 <CRC_Handle_8>
 8005b7c:	6138      	str	r0, [r7, #16]
      break;
 8005b7e:	e007      	b.n	8005b90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f899 	bl	8005cbc <CRC_Handle_16>
 8005b8a:	6138      	str	r0, [r7, #16]
      break;
 8005b8c:	e000      	b.n	8005b90 <HAL_CRC_Calculate+0x88>
      break;
 8005b8e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005b96:	693b      	ldr	r3, [r7, #16]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	@ 0x24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005bac:	2300      	movs	r3, #0
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e023      	b.n	8005bfa <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	440b      	add	r3, r1
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005bcc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	440b      	add	r3, r1
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005bdc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	3303      	adds	r3, #3
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	440b      	add	r3, r1
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005bf0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d3d6      	bcc.n	8005bb2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d04d      	beq.n	8005caa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	4413      	add	r3, r2
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d116      	bne.n	8005c60 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	b21a      	sxth	r2, r3
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	3301      	adds	r3, #1
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	440b      	add	r3, r1
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	b21b      	sxth	r3, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b21b      	sxth	r3, r3
 8005c52:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	8b7a      	ldrh	r2, [r7, #26]
 8005c5e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d11f      	bne.n	8005caa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	b21a      	sxth	r2, r3
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	440b      	add	r3, r1
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	4313      	orrs	r3, r2
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	8b7a      	ldrh	r2, [r7, #26]
 8005c96:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3724      	adds	r7, #36	@ 0x24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e013      	b.n	8005cf6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	041a      	lsls	r2, r3, #16
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	3302      	adds	r3, #2
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	440b      	add	r3, r1
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3e6      	bcc.n	8005cce <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	4413      	add	r3, r2
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005d40:	231f      	movs	r3, #31
 8005d42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
 8005d52:	e063      	b.n	8005e1c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005d54:	bf00      	nop
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1e5a      	subs	r2, r3, #1
 8005d5a:	613a      	str	r2, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <HAL_CRCEx_Polynomial_Set+0x44>
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b18      	cmp	r3, #24
 8005d78:	d846      	bhi.n	8005e08 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e0f 	.word	0x08005e0f
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e09 	.word	0x08005e09
 8005d8c:	08005e09 	.word	0x08005e09
 8005d90:	08005e09 	.word	0x08005e09
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e09 	.word	0x08005e09
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005dfd 	.word	0x08005dfd
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e09 	.word	0x08005e09
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005e09 	.word	0x08005e09
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005de5 	.word	0x08005de5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d913      	bls.n	8005e12 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005dee:	e010      	b.n	8005e12 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b07      	cmp	r3, #7
 8005df4:	d90f      	bls.n	8005e16 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b0f      	cmp	r3, #15
 8005e00:	d90b      	bls.n	8005e1a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005e06:	e008      	b.n	8005e1a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e004      	b.n	8005e1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005e1a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10d      	bne.n	8005e3e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 0118 	bic.w	r1, r3, #24
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e014      	b.n	8005e88 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fc fc3e 	bl	80026f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_DAC_ConfigChannel+0x1c>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e19e      	b.n	80061ee <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	795b      	ldrb	r3, [r3, #5]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_DAC_ConfigChannel+0x2c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e198      	b.n	80061ee <HAL_DAC_ConfigChannel+0x35e>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d17a      	bne.n	8005fc6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ed0:	f7fd fc8a 	bl	80037e8 <HAL_GetTick>
 8005ed4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d13d      	bne.n	8005f58 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005edc:	e018      	b.n	8005f10 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ede:	f7fd fc83 	bl	80037e8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d911      	bls.n	8005f10 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f043 0208 	orr.w	r2, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2203      	movs	r2, #3
 8005f0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e16e      	b.n	80061ee <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1df      	bne.n	8005ede <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f28:	e020      	b.n	8005f6c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f2a:	f7fd fc5d 	bl	80037e8 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d90f      	bls.n	8005f58 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da0a      	bge.n	8005f58 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f043 0208 	orr.w	r2, r3, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2203      	movs	r2, #3
 8005f52:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e14a      	b.n	80061ee <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dbe3      	blt.n	8005f2a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	ea02 0103 	and.w	r1, r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	21ff      	movs	r1, #255	@ 0xff
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	ea02 0103 	and.w	r1, r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	409a      	lsls	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d11d      	bne.n	800600a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	221f      	movs	r2, #31
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffe:	4313      	orrs	r3, r2
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2207      	movs	r2, #7
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006022:	4013      	ands	r3, r2
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	e00f      	b.n	8006054 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d102      	bne.n	8006042 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800603c:	2301      	movs	r3, #1
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	e008      	b.n	8006054 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800604a:	2301      	movs	r3, #1
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	e001      	b.n	8006054 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006050:	2300      	movs	r3, #0
 8006052:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006076:	4013      	ands	r3, r2
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d102      	bne.n	8006088 <HAL_DAC_ConfigChannel+0x1f8>
 8006082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006086:	e000      	b.n	800608a <HAL_DAC_ConfigChannel+0x1fa>
 8006088:	2300      	movs	r3, #0
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a2:	4013      	ands	r3, r2
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	795b      	ldrb	r3, [r3, #5]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <HAL_DAC_ConfigChannel+0x224>
 80060ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060b2:	e000      	b.n	80060b6 <HAL_DAC_ConfigChannel+0x226>
 80060b4:	2300      	movs	r3, #0
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d114      	bne.n	80060f6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80060cc:	f001 fc40 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 80060d0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4a48      	ldr	r2, [pc, #288]	@ (80061f8 <HAL_DAC_ConfigChannel+0x368>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d904      	bls.n	80060e4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e2:	e00f      	b.n	8006104 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4a45      	ldr	r2, [pc, #276]	@ (80061fc <HAL_DAC_ConfigChannel+0x36c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d90a      	bls.n	8006102 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f4:	e006      	b.n	8006104 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fc:	4313      	orrs	r3, r2
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006100:	e000      	b.n	8006104 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006102:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006112:	4313      	orrs	r3, r2
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43da      	mvns	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	400a      	ands	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006156:	4013      	ands	r3, r2
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616e:	4313      	orrs	r3, r2
 8006170:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006178:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	22c0      	movs	r2, #192	@ 0xc0
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43da      	mvns	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	400a      	ands	r2, r1
 8006194:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	089b      	lsrs	r3, r3, #2
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	ea02 0103 	and.w	r1, r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	409a      	lsls	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3728      	adds	r7, #40	@ 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	09896800 	.word	0x09896800
 80061fc:	04c4b400 	.word	0x04c4b400

08006200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e08d      	b.n	800632e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	4b47      	ldr	r3, [pc, #284]	@ (8006338 <HAL_DMA_Init+0x138>)
 800621a:	429a      	cmp	r2, r3
 800621c:	d80f      	bhi.n	800623e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	4b45      	ldr	r3, [pc, #276]	@ (800633c <HAL_DMA_Init+0x13c>)
 8006226:	4413      	add	r3, r2
 8006228:	4a45      	ldr	r2, [pc, #276]	@ (8006340 <HAL_DMA_Init+0x140>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	009a      	lsls	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a42      	ldr	r2, [pc, #264]	@ (8006344 <HAL_DMA_Init+0x144>)
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40
 800623c:	e00e      	b.n	800625c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	4b40      	ldr	r3, [pc, #256]	@ (8006348 <HAL_DMA_Init+0x148>)
 8006246:	4413      	add	r3, r2
 8006248:	4a3d      	ldr	r2, [pc, #244]	@ (8006340 <HAL_DMA_Init+0x140>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	091b      	lsrs	r3, r3, #4
 8006250:	009a      	lsls	r2, r3, #2
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a3c      	ldr	r2, [pc, #240]	@ (800634c <HAL_DMA_Init+0x14c>)
 800625a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa76 	bl	80067a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062bc:	d102      	bne.n	80062c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d010      	beq.n	8006304 <HAL_DMA_Init+0x104>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d80c      	bhi.n	8006304 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa96 	bl	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	e008      	b.n	8006316 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40020407 	.word	0x40020407
 800633c:	bffdfff8 	.word	0xbffdfff8
 8006340:	cccccccd 	.word	0xcccccccd
 8006344:	40020000 	.word	0x40020000
 8006348:	bffdfbf8 	.word	0xbffdfbf8
 800634c:	40020400 	.word	0x40020400

08006350 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_DMA_Start_IT+0x20>
 800636c:	2302      	movs	r3, #2
 800636e:	e066      	b.n	800643e <HAL_DMA_Start_IT+0xee>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d155      	bne.n	8006430 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f9bb 	bl	8006724 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 020e 	orr.w	r2, r2, #14
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e00f      	b.n	80063e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 020a 	orr.w	r2, r2, #10
 80063e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006404:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800641c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0201 	orr.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	e005      	b.n	800643c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006438:	2302      	movs	r3, #2
 800643a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d005      	beq.n	800646a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2204      	movs	r2, #4
 8006462:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e037      	b.n	80064da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 020e 	bic.w	r2, r2, #14
 8006478:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006488:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f003 021f 	and.w	r2, r3, #31
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	2101      	movs	r1, #1
 80064a8:	fa01 f202 	lsl.w	r2, r1, r2
 80064ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00c      	beq.n	80064da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d00d      	beq.n	800652c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2204      	movs	r2, #4
 8006514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
 800652a:	e047      	b.n	80065bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 020e 	bic.w	r2, r2, #14
 800653a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006556:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800655a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006560:	f003 021f 	and.w	r2, r3, #31
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f202 	lsl.w	r2, r1, r2
 800656e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006578:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006590:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800659a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
    }
  }
  return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2204      	movs	r2, #4
 80065e8:	409a      	lsls	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d026      	beq.n	8006640 <HAL_DMA_IRQHandler+0x7a>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d021      	beq.n	8006640 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0204 	bic.w	r2, r2, #4
 8006618:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f003 021f 	and.w	r2, r3, #31
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	2104      	movs	r1, #4
 8006628:	fa01 f202 	lsl.w	r2, r1, r2
 800662c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d071      	beq.n	800671a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800663e:	e06c      	b.n	800671a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2202      	movs	r2, #2
 800664a:	409a      	lsls	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d02e      	beq.n	80066b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d029      	beq.n	80066b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 020a 	bic.w	r2, r2, #10
 800667a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006690:	2102      	movs	r1, #2
 8006692:	fa01 f202 	lsl.w	r2, r1, r2
 8006696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d038      	beq.n	800671a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066b0:	e033      	b.n	800671a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2208      	movs	r2, #8
 80066bc:	409a      	lsls	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02a      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d025      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 020e 	bic.w	r2, r2, #14
 80066de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e4:	f003 021f 	and.w	r2, r3, #31
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f202 	lsl.w	r2, r1, r2
 80066f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800671a:	bf00      	nop
 800671c:	bf00      	nop
}
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800673a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f003 021f 	and.w	r2, r3, #31
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f202 	lsl.w	r2, r1, r2
 8006760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b10      	cmp	r3, #16
 8006770:	d108      	bne.n	8006784 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006782:	e007      	b.n	8006794 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d802      	bhi.n	80067ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067b4:	4b15      	ldr	r3, [pc, #84]	@ (800680c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e001      	b.n	80067be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80067ba:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80067bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3b08      	subs	r3, #8
 80067ca:	4a12      	ldr	r2, [pc, #72]	@ (8006814 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d8:	089b      	lsrs	r3, r3, #2
 80067da:	009a      	lsls	r2, r3, #2
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0b      	ldr	r2, [pc, #44]	@ (8006818 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2201      	movs	r2, #1
 80067f4:	409a      	lsls	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40020407 	.word	0x40020407
 800680c:	40020800 	.word	0x40020800
 8006810:	40020820 	.word	0x40020820
 8006814:	cccccccd 	.word	0xcccccccd
 8006818:	40020880 	.word	0x40020880

0800681c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800683e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3b01      	subs	r3, #1
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	1000823f 	.word	0x1000823f
 8006860:	40020940 	.word	0x40020940

08006864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006872:	e15a      	b.n	8006b2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 814c 	beq.w	8006b24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d005      	beq.n	80068a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d130      	bne.n	8006906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	2203      	movs	r2, #3
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4013      	ands	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068da:	2201      	movs	r2, #1
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43db      	mvns	r3, r3
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4013      	ands	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	f003 0201 	and.w	r2, r3, #1
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d017      	beq.n	8006942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	2203      	movs	r2, #3
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	fa02 f303 	lsl.w	r3, r2, r3
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d123      	bne.n	8006996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	08da      	lsrs	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3208      	adds	r2, #8
 8006956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	220f      	movs	r2, #15
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	691a      	ldr	r2, [r3, #16]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	08da      	lsrs	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3208      	adds	r2, #8
 8006990:	6939      	ldr	r1, [r7, #16]
 8006992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	2203      	movs	r2, #3
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	43db      	mvns	r3, r3
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4013      	ands	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0203 	and.w	r2, r3, #3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a6 	beq.w	8006b24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80069e4:	4b58      	ldr	r3, [pc, #352]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069f0:	4a56      	ldr	r2, [pc, #344]	@ (8006b4c <HAL_GPIO_Init+0x2e8>)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	3302      	adds	r3, #2
 80069f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	220f      	movs	r2, #15
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006a1a:	d01f      	beq.n	8006a5c <HAL_GPIO_Init+0x1f8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b50 <HAL_GPIO_Init+0x2ec>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d019      	beq.n	8006a58 <HAL_GPIO_Init+0x1f4>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a4b      	ldr	r2, [pc, #300]	@ (8006b54 <HAL_GPIO_Init+0x2f0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_GPIO_Init+0x1f0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b58 <HAL_GPIO_Init+0x2f4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00d      	beq.n	8006a50 <HAL_GPIO_Init+0x1ec>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a49      	ldr	r2, [pc, #292]	@ (8006b5c <HAL_GPIO_Init+0x2f8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <HAL_GPIO_Init+0x1e8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a48      	ldr	r2, [pc, #288]	@ (8006b60 <HAL_GPIO_Init+0x2fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_GPIO_Init+0x1e4>
 8006a44:	2305      	movs	r3, #5
 8006a46:	e00a      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a48:	2306      	movs	r3, #6
 8006a4a:	e008      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	e006      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a50:	2303      	movs	r3, #3
 8006a52:	e004      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e002      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	f002 0203 	and.w	r2, r2, #3
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	4093      	lsls	r3, r2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a6e:	4937      	ldr	r1, [pc, #220]	@ (8006b4c <HAL_GPIO_Init+0x2e8>)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	3302      	adds	r3, #2
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a7c:	4b39      	ldr	r3, [pc, #228]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006aa0:	4a30      	ldr	r2, [pc, #192]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006aca:	4a26      	ldr	r2, [pc, #152]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006ad0:	4b24      	ldr	r3, [pc, #144]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4013      	ands	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006af4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4013      	ands	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b1e:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3301      	adds	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f47f ae9d 	bne.w	8006874 <HAL_GPIO_Init+0x10>
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	48000400 	.word	0x48000400
 8006b54:	48000800 	.word	0x48000800
 8006b58:	48000c00 	.word	0x48000c00
 8006b5c:	48001000 	.word	0x48001000
 8006b60:	48001400 	.word	0x48001400
 8006b64:	40010400 	.word	0x40010400

08006b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
 8006b74:	4613      	mov	r3, r2
 8006b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b78:	787b      	ldrb	r3, [r7, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b84:	e002      	b.n	8006b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b86:	887a      	ldrh	r2, [r7, #2]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e08d      	b.n	8006cc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fdb6 	bl	8002730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c0e:	609a      	str	r2, [r3, #8]
 8006c10:	e006      	b.n	8006c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d108      	bne.n	8006c3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	e007      	b.n	8006c4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69d9      	ldr	r1, [r3, #28]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d138      	bne.n	8006d56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e032      	b.n	8006d58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2224      	movs	r2, #36	@ 0x24
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e000      	b.n	8006d58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d56:	2302      	movs	r3, #2
  }
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d139      	bne.n	8006dee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e033      	b.n	8006df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	@ 0x24
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006db6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d141      	bne.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d131      	bne.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e18:	4b47      	ldr	r3, [pc, #284]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e1e:	4a46      	ldr	r2, [pc, #280]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e28:	4b43      	ldr	r3, [pc, #268]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e30:	4a41      	ldr	r2, [pc, #260]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e38:	4b40      	ldr	r3, [pc, #256]	@ (8006f3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2232      	movs	r2, #50	@ 0x32
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	4a3f      	ldr	r2, [pc, #252]	@ (8006f40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	0c9b      	lsrs	r3, r3, #18
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e4e:	e002      	b.n	8006e56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e56:	4b38      	ldr	r3, [pc, #224]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e62:	d102      	bne.n	8006e6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f2      	bne.n	8006e50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e6a:	4b33      	ldr	r3, [pc, #204]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e76:	d158      	bne.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e057      	b.n	8006f2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e82:	4a2d      	ldr	r2, [pc, #180]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e8c:	e04d      	b.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e94:	d141      	bne.n	8006f1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e96:	4b28      	ldr	r3, [pc, #160]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ea2:	d131      	bne.n	8006f08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ea4:	4b24      	ldr	r3, [pc, #144]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eaa:	4a23      	ldr	r2, [pc, #140]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eb4:	4b20      	ldr	r3, [pc, #128]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2232      	movs	r2, #50	@ 0x32
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
 8006ece:	4a1c      	ldr	r2, [pc, #112]	@ (8006f40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed4:	0c9b      	lsrs	r3, r3, #18
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eda:	e002      	b.n	8006ee2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee2:	4b15      	ldr	r3, [pc, #84]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eee:	d102      	bne.n	8006ef6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f2      	bne.n	8006edc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f02:	d112      	bne.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e011      	b.n	8006f2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f08:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006f18:	e007      	b.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f1a:	4b07      	ldr	r3, [pc, #28]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f22:	4a05      	ldr	r2, [pc, #20]	@ (8006f38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40007000 	.word	0x40007000
 8006f3c:	20000004 	.word	0x20000004
 8006f40:	431bde83 	.word	0x431bde83

08006f44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f48:	4b05      	ldr	r3, [pc, #20]	@ (8006f60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4a04      	ldr	r2, [pc, #16]	@ (8006f60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f52:	6093      	str	r3, [r2, #8]
}
 8006f54:	bf00      	nop
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40007000 	.word	0x40007000

08006f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e2fe      	b.n	8007574 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d075      	beq.n	800706e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f82:	4b97      	ldr	r3, [pc, #604]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f8c:	4b94      	ldr	r3, [pc, #592]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b0c      	cmp	r3, #12
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x3e>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d002      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x44>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d10b      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d05b      	beq.n	800706c <HAL_RCC_OscConfig+0x108>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d157      	bne.n	800706c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e2d9      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x74>
 8006fca:	4b85      	ldr	r3, [pc, #532]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a84      	ldr	r2, [pc, #528]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e01d      	b.n	8007014 <HAL_RCC_OscConfig+0xb0>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fe0:	d10c      	bne.n	8006ffc <HAL_RCC_OscConfig+0x98>
 8006fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	4b7c      	ldr	r3, [pc, #496]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7b      	ldr	r2, [pc, #492]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e00b      	b.n	8007014 <HAL_RCC_OscConfig+0xb0>
 8006ffc:	4b78      	ldr	r3, [pc, #480]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a77      	ldr	r2, [pc, #476]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b75      	ldr	r3, [pc, #468]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a74      	ldr	r2, [pc, #464]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800700e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d013      	beq.n	8007044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fc fbe4 	bl	80037e8 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007024:	f7fc fbe0 	bl	80037e8 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	@ 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e29e      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007036:	4b6a      	ldr	r3, [pc, #424]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0xc0>
 8007042:	e014      	b.n	800706e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fc fbd0 	bl	80037e8 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800704c:	f7fc fbcc 	bl	80037e8 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b64      	cmp	r3, #100	@ 0x64
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e28a      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800705e:	4b60      	ldr	r3, [pc, #384]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f0      	bne.n	800704c <HAL_RCC_OscConfig+0xe8>
 800706a:	e000      	b.n	800706e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800706c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d075      	beq.n	8007166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707a:	4b59      	ldr	r3, [pc, #356]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007084:	4b56      	ldr	r3, [pc, #344]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d102      	bne.n	800709a <HAL_RCC_OscConfig+0x136>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d002      	beq.n	80070a0 <HAL_RCC_OscConfig+0x13c>
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d11f      	bne.n	80070e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070a0:	4b4f      	ldr	r3, [pc, #316]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_OscConfig+0x154>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e25d      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b8:	4b49      	ldr	r3, [pc, #292]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	061b      	lsls	r3, r3, #24
 80070c6:	4946      	ldr	r1, [pc, #280]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070cc:	4b45      	ldr	r3, [pc, #276]	@ (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fc fb3d 	bl	8003750 <HAL_InitTick>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d043      	beq.n	8007164 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e249      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d023      	beq.n	8007130 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070e8:	4b3d      	ldr	r3, [pc, #244]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a3c      	ldr	r2, [pc, #240]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80070ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fc fb78 	bl	80037e8 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fc fb74 	bl	80037e8 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e232      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800710e:	4b34      	ldr	r3, [pc, #208]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711a:	4b31      	ldr	r3, [pc, #196]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	492d      	ldr	r1, [pc, #180]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	604b      	str	r3, [r1, #4]
 800712e:	e01a      	b.n	8007166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007130:	4b2b      	ldr	r3, [pc, #172]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2a      	ldr	r2, [pc, #168]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007136:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800713a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fc fb54 	bl	80037e8 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007144:	f7fc fb50 	bl	80037e8 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e20e      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007156:	4b22      	ldr	r3, [pc, #136]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f0      	bne.n	8007144 <HAL_RCC_OscConfig+0x1e0>
 8007162:	e000      	b.n	8007166 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d041      	beq.n	80071f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01c      	beq.n	80071b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800717a:	4b19      	ldr	r3, [pc, #100]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 800717c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007180:	4a17      	ldr	r2, [pc, #92]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718a:	f7fc fb2d 	bl	80037e8 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007192:	f7fc fb29 	bl	80037e8 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e1e7      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071a4:	4b0e      	ldr	r3, [pc, #56]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80071a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0ef      	beq.n	8007192 <HAL_RCC_OscConfig+0x22e>
 80071b2:	e020      	b.n	80071f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071b4:	4b0a      	ldr	r3, [pc, #40]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80071b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ba:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <HAL_RCC_OscConfig+0x27c>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c4:	f7fc fb10 	bl	80037e8 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071ca:	e00d      	b.n	80071e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071cc:	f7fc fb0c 	bl	80037e8 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d906      	bls.n	80071e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e1ca      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
 80071de:	bf00      	nop
 80071e0:	40021000 	.word	0x40021000
 80071e4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071e8:	4b8c      	ldr	r3, [pc, #560]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80071ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ea      	bne.n	80071cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80a6 	beq.w	8007350 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007208:	4b84      	ldr	r3, [pc, #528]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 800720a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_RCC_OscConfig+0x2b4>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <HAL_RCC_OscConfig+0x2b6>
 8007218:	2300      	movs	r3, #0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	4b7f      	ldr	r3, [pc, #508]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007222:	4a7e      	ldr	r2, [pc, #504]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007228:	6593      	str	r3, [r2, #88]	@ 0x58
 800722a:	4b7c      	ldr	r3, [pc, #496]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007236:	2301      	movs	r3, #1
 8007238:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723a:	4b79      	ldr	r3, [pc, #484]	@ (8007420 <HAL_RCC_OscConfig+0x4bc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d118      	bne.n	8007278 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007246:	4b76      	ldr	r3, [pc, #472]	@ (8007420 <HAL_RCC_OscConfig+0x4bc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a75      	ldr	r2, [pc, #468]	@ (8007420 <HAL_RCC_OscConfig+0x4bc>)
 800724c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007252:	f7fc fac9 	bl	80037e8 <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725a:	f7fc fac5 	bl	80037e8 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e183      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800726c:	4b6c      	ldr	r3, [pc, #432]	@ (8007420 <HAL_RCC_OscConfig+0x4bc>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d108      	bne.n	8007292 <HAL_RCC_OscConfig+0x32e>
 8007280:	4b66      	ldr	r3, [pc, #408]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	4a65      	ldr	r2, [pc, #404]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007288:	f043 0301 	orr.w	r3, r3, #1
 800728c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007290:	e024      	b.n	80072dc <HAL_RCC_OscConfig+0x378>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d110      	bne.n	80072bc <HAL_RCC_OscConfig+0x358>
 800729a:	4b60      	ldr	r3, [pc, #384]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a0:	4a5e      	ldr	r2, [pc, #376]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f043 0304 	orr.w	r3, r3, #4
 80072a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072aa:	4b5c      	ldr	r3, [pc, #368]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b0:	4a5a      	ldr	r2, [pc, #360]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072ba:	e00f      	b.n	80072dc <HAL_RCC_OscConfig+0x378>
 80072bc:	4b57      	ldr	r3, [pc, #348]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c2:	4a56      	ldr	r2, [pc, #344]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072cc:	4b53      	ldr	r3, [pc, #332]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d2:	4a52      	ldr	r2, [pc, #328]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80072d4:	f023 0304 	bic.w	r3, r3, #4
 80072d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d016      	beq.n	8007312 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e4:	f7fc fa80 	bl	80037e8 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ec:	f7fc fa7c 	bl	80037e8 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e138      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007302:	4b46      	ldr	r3, [pc, #280]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0ed      	beq.n	80072ec <HAL_RCC_OscConfig+0x388>
 8007310:	e015      	b.n	800733e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007312:	f7fc fa69 	bl	80037e8 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007318:	e00a      	b.n	8007330 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731a:	f7fc fa65 	bl	80037e8 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007328:	4293      	cmp	r3, r2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e121      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007330:	4b3a      	ldr	r3, [pc, #232]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ed      	bne.n	800731a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800733e:	7ffb      	ldrb	r3, [r7, #31]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d105      	bne.n	8007350 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007344:	4b35      	ldr	r3, [pc, #212]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	4a34      	ldr	r2, [pc, #208]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 800734a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800734e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03c      	beq.n	80073d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01c      	beq.n	800739e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007364:	4b2d      	ldr	r3, [pc, #180]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800736a:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007374:	f7fc fa38 	bl	80037e8 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800737c:	f7fc fa34 	bl	80037e8 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e0f2      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800738e:	4b23      	ldr	r3, [pc, #140]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 8007390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0ef      	beq.n	800737c <HAL_RCC_OscConfig+0x418>
 800739c:	e01b      	b.n	80073d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800739e:	4b1f      	ldr	r3, [pc, #124]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a4:	4a1d      	ldr	r2, [pc, #116]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fc fa1b 	bl	80037e8 <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073b6:	f7fc fa17 	bl	80037e8 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e0d5      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073c8:	4b14      	ldr	r3, [pc, #80]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1ef      	bne.n	80073b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80c9 	beq.w	8007572 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073e0:	4b0e      	ldr	r3, [pc, #56]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 030c 	and.w	r3, r3, #12
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	f000 8083 	beq.w	80074f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d15e      	bne.n	80074b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f6:	4b09      	ldr	r3, [pc, #36]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a08      	ldr	r2, [pc, #32]	@ (800741c <HAL_RCC_OscConfig+0x4b8>)
 80073fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fc f9f1 	bl	80037e8 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007408:	e00c      	b.n	8007424 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740a:	f7fc f9ed 	bl	80037e8 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d905      	bls.n	8007424 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e0ab      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
 800741c:	40021000 	.word	0x40021000
 8007420:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007424:	4b55      	ldr	r3, [pc, #340]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1ec      	bne.n	800740a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007430:	4b52      	ldr	r3, [pc, #328]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	4b52      	ldr	r3, [pc, #328]	@ (8007580 <HAL_RCC_OscConfig+0x61c>)
 8007436:	4013      	ands	r3, r2
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6a11      	ldr	r1, [r2, #32]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007440:	3a01      	subs	r2, #1
 8007442:	0112      	lsls	r2, r2, #4
 8007444:	4311      	orrs	r1, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800744a:	0212      	lsls	r2, r2, #8
 800744c:	4311      	orrs	r1, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	3a01      	subs	r2, #1
 8007456:	0552      	lsls	r2, r2, #21
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800745e:	0852      	lsrs	r2, r2, #1
 8007460:	3a01      	subs	r2, #1
 8007462:	0652      	lsls	r2, r2, #25
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800746a:	06d2      	lsls	r2, r2, #27
 800746c:	430a      	orrs	r2, r1
 800746e:	4943      	ldr	r1, [pc, #268]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007470:	4313      	orrs	r3, r2
 8007472:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007474:	4b41      	ldr	r3, [pc, #260]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a40      	ldr	r2, [pc, #256]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 800747a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800747e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007480:	4b3e      	ldr	r3, [pc, #248]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a3d      	ldr	r2, [pc, #244]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fc f9ac 	bl	80037e8 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007494:	f7fc f9a8 	bl	80037e8 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e066      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074a6:	4b35      	ldr	r3, [pc, #212]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x530>
 80074b2:	e05e      	b.n	8007572 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b4:	4b31      	ldr	r3, [pc, #196]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a30      	ldr	r2, [pc, #192]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c0:	f7fc f992 	bl	80037e8 <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c8:	f7fc f98e 	bl	80037e8 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e04c      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074da:	4b28      	ldr	r3, [pc, #160]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074e6:	4b25      	ldr	r3, [pc, #148]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	4924      	ldr	r1, [pc, #144]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 80074ec:	4b25      	ldr	r3, [pc, #148]	@ (8007584 <HAL_RCC_OscConfig+0x620>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	60cb      	str	r3, [r1, #12]
 80074f2:	e03e      	b.n	8007572 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e039      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007500:	4b1e      	ldr	r3, [pc, #120]	@ (800757c <HAL_RCC_OscConfig+0x618>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 0203 	and.w	r2, r3, #3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	429a      	cmp	r2, r3
 8007512:	d12c      	bne.n	800756e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	3b01      	subs	r3, #1
 8007520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007522:	429a      	cmp	r2, r3
 8007524:	d123      	bne.n	800756e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d11b      	bne.n	800756e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007540:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007542:	429a      	cmp	r2, r3
 8007544:	d113      	bne.n	800756e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	3b01      	subs	r3, #1
 8007554:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d109      	bne.n	800756e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007564:	085b      	lsrs	r3, r3, #1
 8007566:	3b01      	subs	r3, #1
 8007568:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40021000 	.word	0x40021000
 8007580:	019f800c 	.word	0x019f800c
 8007584:	feeefffc 	.word	0xfeeefffc

08007588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e11e      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075a0:	4b91      	ldr	r3, [pc, #580]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d910      	bls.n	80075d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b8e      	ldr	r3, [pc, #568]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 020f 	bic.w	r2, r3, #15
 80075b6:	498c      	ldr	r1, [pc, #560]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b8a      	ldr	r3, [pc, #552]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e106      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d073      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d129      	bne.n	8007638 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075e4:	4b81      	ldr	r3, [pc, #516]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0f4      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075f4:	f000 f9e4 	bl	80079c0 <RCC_GetSysClockFreqFromPLLSource>
 80075f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4a7c      	ldr	r2, [pc, #496]	@ (80077f0 <HAL_RCC_ClockConfig+0x268>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d93f      	bls.n	8007682 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007602:	4b7a      	ldr	r3, [pc, #488]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007616:	2b00      	cmp	r3, #0
 8007618:	d033      	beq.n	8007682 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800761e:	2b00      	cmp	r3, #0
 8007620:	d12f      	bne.n	8007682 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007622:	4b72      	ldr	r3, [pc, #456]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800762a:	4a70      	ldr	r2, [pc, #448]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 800762c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007630:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007632:	2380      	movs	r3, #128	@ 0x80
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e024      	b.n	8007682 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d107      	bne.n	8007650 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007640:	4b6a      	ldr	r3, [pc, #424]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0c6      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007650:	4b66      	ldr	r3, [pc, #408]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0be      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007660:	f000 f914 	bl	800788c <HAL_RCC_GetSysClockFreq>
 8007664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4a61      	ldr	r2, [pc, #388]	@ (80077f0 <HAL_RCC_ClockConfig+0x268>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d909      	bls.n	8007682 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800766e:	4b5f      	ldr	r3, [pc, #380]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007676:	4a5d      	ldr	r2, [pc, #372]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800767e:	2380      	movs	r3, #128	@ 0x80
 8007680:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007682:	4b5a      	ldr	r3, [pc, #360]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f023 0203 	bic.w	r2, r3, #3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4957      	ldr	r1, [pc, #348]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007690:	4313      	orrs	r3, r2
 8007692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007694:	f7fc f8a8 	bl	80037e8 <HAL_GetTick>
 8007698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769a:	e00a      	b.n	80076b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800769c:	f7fc f8a4 	bl	80037e8 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e095      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	4b4e      	ldr	r3, [pc, #312]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 020c 	and.w	r2, r3, #12
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d1eb      	bne.n	800769c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d023      	beq.n	8007718 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076dc:	4b43      	ldr	r3, [pc, #268]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4a42      	ldr	r2, [pc, #264]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80076e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076f4:	4b3d      	ldr	r3, [pc, #244]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076fc:	4a3b      	ldr	r2, [pc, #236]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80076fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007702:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007704:	4b39      	ldr	r3, [pc, #228]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4936      	ldr	r1, [pc, #216]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007712:	4313      	orrs	r3, r2
 8007714:	608b      	str	r3, [r1, #8]
 8007716:	e008      	b.n	800772a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2b80      	cmp	r3, #128	@ 0x80
 800771c:	d105      	bne.n	800772a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800771e:	4b33      	ldr	r3, [pc, #204]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007724:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007728:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800772a:	4b2f      	ldr	r3, [pc, #188]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d21d      	bcs.n	8007774 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007738:	4b2b      	ldr	r3, [pc, #172]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f023 020f 	bic.w	r2, r3, #15
 8007740:	4929      	ldr	r1, [pc, #164]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	4313      	orrs	r3, r2
 8007746:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007748:	f7fc f84e 	bl	80037e8 <HAL_GetTick>
 800774c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800774e:	e00a      	b.n	8007766 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007750:	f7fc f84a 	bl	80037e8 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800775e:	4293      	cmp	r3, r2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e03b      	b.n	80077de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007766:	4b20      	ldr	r3, [pc, #128]	@ (80077e8 <HAL_RCC_ClockConfig+0x260>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d1ed      	bne.n	8007750 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007780:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	4917      	ldr	r1, [pc, #92]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 800778e:	4313      	orrs	r3, r2
 8007790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800779e:	4b13      	ldr	r3, [pc, #76]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	490f      	ldr	r1, [pc, #60]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077b2:	f000 f86b 	bl	800788c <HAL_RCC_GetSysClockFreq>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <HAL_RCC_ClockConfig+0x264>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	490c      	ldr	r1, [pc, #48]	@ (80077f4 <HAL_RCC_ClockConfig+0x26c>)
 80077c4:	5ccb      	ldrb	r3, [r1, r3]
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	4a0a      	ldr	r2, [pc, #40]	@ (80077f8 <HAL_RCC_ClockConfig+0x270>)
 80077d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <HAL_RCC_ClockConfig+0x274>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fb ffba 	bl	8003750 <HAL_InitTick>
 80077dc:	4603      	mov	r3, r0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40022000 	.word	0x40022000
 80077ec:	40021000 	.word	0x40021000
 80077f0:	04c4b400 	.word	0x04c4b400
 80077f4:	0800c268 	.word	0x0800c268
 80077f8:	20000004 	.word	0x20000004
 80077fc:	20000010 	.word	0x20000010

08007800 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08c      	sub	sp, #48	@ 0x30
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800780c:	2302      	movs	r3, #2
 800780e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007810:	2303      	movs	r3, #3
 8007812:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800781e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	0c1b      	lsrs	r3, r3, #16
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800783a:	4b13      	ldr	r3, [pc, #76]	@ (8007888 <HAL_RCC_MCOConfig+0x88>)
 800783c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800783e:	2101      	movs	r1, #1
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	4910      	ldr	r1, [pc, #64]	@ (8007888 <HAL_RCC_MCOConfig+0x88>)
 8007848:	4313      	orrs	r3, r2
 800784a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	b29b      	uxth	r3, r3
 8007850:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	0d1b      	lsrs	r3, r3, #20
 8007856:	b2db      	uxtb	r3, r3
 8007858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800785a:	f107 0310 	add.w	r3, r7, #16
 800785e:	4619      	mov	r1, r3
 8007860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007862:	f7fe ffff 	bl	8006864 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800786c:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <HAL_RCC_MCOConfig+0x88>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	430b      	orrs	r3, r1
 800787a:	4903      	ldr	r1, [pc, #12]	@ (8007888 <HAL_RCC_MCOConfig+0x88>)
 800787c:	4313      	orrs	r3, r2
 800787e:	608b      	str	r3, [r1, #8]
  }
}
 8007880:	bf00      	nop
 8007882:	3730      	adds	r7, #48	@ 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40021000 	.word	0x40021000

0800788c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007892:	4b2c      	ldr	r3, [pc, #176]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 030c 	and.w	r3, r3, #12
 800789a:	2b04      	cmp	r3, #4
 800789c:	d102      	bne.n	80078a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800789e:	4b2a      	ldr	r3, [pc, #168]	@ (8007948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	e047      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 030c 	and.w	r3, r3, #12
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d102      	bne.n	80078b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078b0:	4b26      	ldr	r3, [pc, #152]	@ (800794c <HAL_RCC_GetSysClockFreq+0xc0>)
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	e03e      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80078b6:	4b23      	ldr	r3, [pc, #140]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	d136      	bne.n	8007930 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078c2:	4b20      	ldr	r3, [pc, #128]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	091b      	lsrs	r3, r3, #4
 80078d2:	f003 030f 	and.w	r3, r3, #15
 80078d6:	3301      	adds	r3, #1
 80078d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d10c      	bne.n	80078fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e0:	4a1a      	ldr	r2, [pc, #104]	@ (800794c <HAL_RCC_GetSysClockFreq+0xc0>)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	4a16      	ldr	r2, [pc, #88]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078ea:	68d2      	ldr	r2, [r2, #12]
 80078ec:	0a12      	lsrs	r2, r2, #8
 80078ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	617b      	str	r3, [r7, #20]
      break;
 80078f8:	e00c      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078fa:	4a13      	ldr	r2, [pc, #76]	@ (8007948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007902:	4a10      	ldr	r2, [pc, #64]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007904:	68d2      	ldr	r2, [r2, #12]
 8007906:	0a12      	lsrs	r2, r2, #8
 8007908:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]
      break;
 8007912:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007914:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	0e5b      	lsrs	r3, r3, #25
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	e001      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007934:	693b      	ldr	r3, [r7, #16]
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	40021000 	.word	0x40021000
 8007948:	00f42400 	.word	0x00f42400
 800794c:	017d7840 	.word	0x017d7840

08007950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <HAL_RCC_GetHCLKFreq+0x14>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000004 	.word	0x20000004

08007968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800796c:	f7ff fff0 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	4b06      	ldr	r3, [pc, #24]	@ (800798c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4904      	ldr	r1, [pc, #16]	@ (8007990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800797e:	5ccb      	ldrb	r3, [r1, r3]
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40021000 	.word	0x40021000
 8007990:	0800c278 	.word	0x0800c278

08007994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007998:	f7ff ffda 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 800799c:	4602      	mov	r2, r0
 800799e:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	0adb      	lsrs	r3, r3, #11
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	4904      	ldr	r1, [pc, #16]	@ (80079bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80079aa:	5ccb      	ldrb	r3, [r1, r3]
 80079ac:	f003 031f 	and.w	r3, r3, #31
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40021000 	.word	0x40021000
 80079bc:	0800c278 	.word	0x0800c278

080079c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d10c      	bne.n	80079fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e4:	4a17      	ldr	r2, [pc, #92]	@ (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ec:	4a14      	ldr	r2, [pc, #80]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ee:	68d2      	ldr	r2, [r2, #12]
 80079f0:	0a12      	lsrs	r2, r2, #8
 80079f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	617b      	str	r3, [r7, #20]
    break;
 80079fc:	e00c      	b.n	8007a18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079fe:	4a12      	ldr	r2, [pc, #72]	@ (8007a48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	4a0e      	ldr	r2, [pc, #56]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a08:	68d2      	ldr	r2, [r2, #12]
 8007a0a:	0a12      	lsrs	r2, r2, #8
 8007a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]
    break;
 8007a16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a18:	4b09      	ldr	r3, [pc, #36]	@ (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	0e5b      	lsrs	r3, r3, #25
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	3301      	adds	r3, #1
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a32:	687b      	ldr	r3, [r7, #4]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	40021000 	.word	0x40021000
 8007a44:	017d7840 	.word	0x017d7840
 8007a48:	00f42400 	.word	0x00f42400

08007a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a54:	2300      	movs	r3, #0
 8007a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a58:	2300      	movs	r3, #0
 8007a5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8098 	beq.w	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a6e:	4b43      	ldr	r3, [pc, #268]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a7a:	4b40      	ldr	r3, [pc, #256]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a86:	4b3d      	ldr	r3, [pc, #244]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	60bb      	str	r3, [r7, #8]
 8007a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a92:	2301      	movs	r3, #1
 8007a94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a96:	4b3a      	ldr	r3, [pc, #232]	@ (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a39      	ldr	r2, [pc, #228]	@ (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aa2:	f7fb fea1 	bl	80037e8 <HAL_GetTick>
 8007aa6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa8:	e009      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aaa:	f7fb fe9d 	bl	80037e8 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d902      	bls.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	74fb      	strb	r3, [r7, #19]
        break;
 8007abc:	e005      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007abe:	4b30      	ldr	r3, [pc, #192]	@ (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0ef      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007aca:	7cfb      	ldrb	r3, [r7, #19]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d159      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ada:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d01e      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d019      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007aec:	4b23      	ldr	r3, [pc, #140]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af8:	4b20      	ldr	r3, [pc, #128]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	4a1f      	ldr	r2, [pc, #124]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b08:	4b1c      	ldr	r3, [pc, #112]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b18:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2a:	f7fb fe5d 	bl	80037e8 <HAL_GetTick>
 8007b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b30:	e00b      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fb fe59 	bl	80037e8 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d902      	bls.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	74fb      	strb	r3, [r7, #19]
            break;
 8007b48:	e006      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0ec      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b58:	7cfb      	ldrb	r3, [r7, #19]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b5e:	4b07      	ldr	r3, [pc, #28]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6c:	4903      	ldr	r1, [pc, #12]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b74:	e008      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b76:	7cfb      	ldrb	r3, [r7, #19]
 8007b78:	74bb      	strb	r3, [r7, #18]
 8007b7a:	e005      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	7cfb      	ldrb	r3, [r7, #19]
 8007b86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b88:	7c7b      	ldrb	r3, [r7, #17]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d105      	bne.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b8e:	4ba7      	ldr	r3, [pc, #668]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b92:	4aa6      	ldr	r2, [pc, #664]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bac:	f023 0203 	bic.w	r2, r3, #3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	499d      	ldr	r1, [pc, #628]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc8:	4b98      	ldr	r3, [pc, #608]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	f023 020c 	bic.w	r2, r3, #12
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	4995      	ldr	r1, [pc, #596]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bea:	4b90      	ldr	r3, [pc, #576]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	498c      	ldr	r1, [pc, #560]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c0c:	4b87      	ldr	r3, [pc, #540]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	4984      	ldr	r1, [pc, #528]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0310 	and.w	r3, r3, #16
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	497b      	ldr	r1, [pc, #492]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c50:	4b76      	ldr	r3, [pc, #472]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	4973      	ldr	r1, [pc, #460]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c72:	4b6e      	ldr	r3, [pc, #440]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	496a      	ldr	r1, [pc, #424]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c94:	4b65      	ldr	r3, [pc, #404]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	4962      	ldr	r1, [pc, #392]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	4959      	ldr	r1, [pc, #356]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cd8:	4b54      	ldr	r3, [pc, #336]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cde:	f023 0203 	bic.w	r2, r3, #3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce6:	4951      	ldr	r1, [pc, #324]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	4948      	ldr	r1, [pc, #288]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d1c:	4b43      	ldr	r3, [pc, #268]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2a:	4940      	ldr	r1, [pc, #256]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d3a:	d105      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	4a3a      	ldr	r2, [pc, #232]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d015      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d54:	4b35      	ldr	r3, [pc, #212]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d62:	4932      	ldr	r1, [pc, #200]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d72:	d105      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d74:	4b2d      	ldr	r3, [pc, #180]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4a2c      	ldr	r2, [pc, #176]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d015      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d8c:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	4924      	ldr	r1, [pc, #144]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007daa:	d105      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dac:	4b1f      	ldr	r3, [pc, #124]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007db6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d015      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dc4:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd2:	4916      	ldr	r1, [pc, #88]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007de2:	d105      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007de4:	4b11      	ldr	r3, [pc, #68]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4a10      	ldr	r2, [pc, #64]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d019      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0a:	4908      	ldr	r1, [pc, #32]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e1a:	d109      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e1c:	4b03      	ldr	r3, [pc, #12]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4a02      	ldr	r2, [pc, #8]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e26:	60d3      	str	r3, [r2, #12]
 8007e28:	e002      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007e2a:	bf00      	nop
 8007e2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d015      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e3c:	4b29      	ldr	r3, [pc, #164]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4a:	4926      	ldr	r1, [pc, #152]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e5a:	d105      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e5c:	4b21      	ldr	r3, [pc, #132]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4a20      	ldr	r2, [pc, #128]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d015      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e82:	4918      	ldr	r1, [pc, #96]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e92:	d105      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e94:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	4a12      	ldr	r2, [pc, #72]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007eac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eba:	490a      	ldr	r1, [pc, #40]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eca:	d105      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ecc:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4a04      	ldr	r2, [pc, #16]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ed8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40021000 	.word	0x40021000

08007ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e09d      	b.n	8008036 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d108      	bne.n	8007f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f0a:	d009      	beq.n	8007f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	61da      	str	r2, [r3, #28]
 8007f12:	e005      	b.n	8007f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fa fc6e 	bl	800281c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f60:	d902      	bls.n	8007f68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e002      	b.n	8007f6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007f76:	d007      	beq.n	8007f88 <HAL_SPI_Init+0xa0>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fca:	ea42 0103 	orr.w	r1, r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	0c1b      	lsrs	r3, r3, #16
 8007fe4:	f003 0204 	and.w	r2, r3, #4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008004:	ea42 0103 	orr.w	r1, r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b088      	sub	sp, #32
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_SPI_Transmit+0x22>
 800805c:	2302      	movs	r3, #2
 800805e:	e15f      	b.n	8008320 <HAL_SPI_Transmit+0x2e2>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008068:	f7fb fbbe 	bl	80037e8 <HAL_GetTick>
 800806c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d002      	beq.n	8008084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800807e:	2302      	movs	r3, #2
 8008080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008082:	e148      	b.n	8008316 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_SPI_Transmit+0x52>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008094:	e13f      	b.n	8008316 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2203      	movs	r2, #3
 800809a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080e0:	d10f      	bne.n	8008102 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810c:	2b40      	cmp	r3, #64	@ 0x40
 800810e:	d007      	beq.n	8008120 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800811e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008128:	d94f      	bls.n	80081ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_SPI_Transmit+0xfa>
 8008132:	8afb      	ldrh	r3, [r7, #22]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d142      	bne.n	80081be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	1c9a      	adds	r2, r3, #2
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800815c:	e02f      	b.n	80081be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b02      	cmp	r3, #2
 800816a:	d112      	bne.n	8008192 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	1c9a      	adds	r2, r3, #2
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008190:	e015      	b.n	80081be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008192:	f7fb fb29 	bl	80037e8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d803      	bhi.n	80081aa <HAL_SPI_Transmit+0x16c>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a8:	d102      	bne.n	80081b0 <HAL_SPI_Transmit+0x172>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80081bc:	e0ab      	b.n	8008316 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ca      	bne.n	800815e <HAL_SPI_Transmit+0x120>
 80081c8:	e080      	b.n	80082cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_SPI_Transmit+0x19a>
 80081d2:	8afb      	ldrh	r3, [r7, #22]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d174      	bne.n	80082c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d912      	bls.n	8008208 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e6:	881a      	ldrh	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f2:	1c9a      	adds	r2, r3, #2
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b02      	subs	r3, #2
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008206:	e05c      	b.n	80082c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800822e:	e048      	b.n	80082c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b02      	cmp	r3, #2
 800823c:	d12b      	bne.n	8008296 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	d912      	bls.n	800826e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824c:	881a      	ldrh	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	1c9a      	adds	r2, r3, #2
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008262:	b29b      	uxth	r3, r3
 8008264:	3b02      	subs	r3, #2
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800826c:	e029      	b.n	80082c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008294:	e015      	b.n	80082c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008296:	f7fb faa7 	bl	80037e8 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d803      	bhi.n	80082ae <HAL_SPI_Transmit+0x270>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d102      	bne.n	80082b4 <HAL_SPI_Transmit+0x276>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80082c0:	e029      	b.n	8008316 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1b1      	bne.n	8008230 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f947 	bl	8008564 <SPI_EndRxTxTransaction>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10a      	bne.n	8008300 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082ea:	2300      	movs	r3, #0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	77fb      	strb	r3, [r7, #31]
 800830c:	e003      	b.n	8008316 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800831e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008338:	f7fb fa56 	bl	80037e8 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4413      	add	r3, r2
 8008346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008348:	f7fb fa4e 	bl	80037e8 <HAL_GetTick>
 800834c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800834e:	4b39      	ldr	r3, [pc, #228]	@ (8008434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	015b      	lsls	r3, r3, #5
 8008354:	0d1b      	lsrs	r3, r3, #20
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	fb02 f303 	mul.w	r3, r2, r3
 800835c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800835e:	e054      	b.n	800840a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d050      	beq.n	800840a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008368:	f7fb fa3e 	bl	80037e8 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	429a      	cmp	r2, r3
 8008376:	d902      	bls.n	800837e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d13d      	bne.n	80083fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800838c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008396:	d111      	bne.n	80083bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083a0:	d004      	beq.n	80083ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083aa:	d107      	bne.n	80083bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083c4:	d10f      	bne.n	80083e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e017      	b.n	800842a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3b01      	subs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d19b      	bne.n	8008360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000004 	.word	0x20000004

08008438 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08a      	sub	sp, #40	@ 0x28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800844a:	f7fb f9cd 	bl	80037e8 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	4413      	add	r3, r2
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800845a:	f7fb f9c5 	bl	80037e8 <HAL_GetTick>
 800845e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	330c      	adds	r3, #12
 8008466:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008468:	4b3d      	ldr	r3, [pc, #244]	@ (8008560 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	00da      	lsls	r2, r3, #3
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	0d1b      	lsrs	r3, r3, #20
 8008478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847a:	fb02 f303 	mul.w	r3, r2, r3
 800847e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008480:	e060      	b.n	8008544 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008488:	d107      	bne.n	800849a <SPI_WaitFifoStateUntilTimeout+0x62>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008498:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d050      	beq.n	8008544 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084a2:	f7fb f9a1 	bl	80037e8 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d902      	bls.n	80084b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d13d      	bne.n	8008534 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084d0:	d111      	bne.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084da:	d004      	beq.n	80084e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e4:	d107      	bne.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084fe:	d10f      	bne.n	8008520 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800851e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e010      	b.n	8008556 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	3b01      	subs	r3, #1
 8008542:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d196      	bne.n	8008482 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	@ 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000004 	.word	0x20000004

08008564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff ff5b 	bl	8008438 <SPI_WaitFifoStateUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800858c:	f043 0220 	orr.w	r2, r3, #32
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e027      	b.n	80085e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2200      	movs	r2, #0
 80085a0:	2180      	movs	r1, #128	@ 0x80
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fec0 	bl	8008328 <SPI_WaitFlagStateUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e014      	b.n	80085e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff ff34 	bl	8008438 <SPI_WaitFifoStateUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e000      	b.n	80085e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e049      	b.n	8008696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fa f944 	bl	80028a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f000 fae0 	bl	8008bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d001      	beq.n	80086b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e04c      	b.n	8008752 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a26      	ldr	r2, [pc, #152]	@ (8008760 <HAL_TIM_Base_Start+0xc0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d022      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	d01d      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a22      	ldr	r2, [pc, #136]	@ (8008764 <HAL_TIM_Base_Start+0xc4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d018      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a21      	ldr	r2, [pc, #132]	@ (8008768 <HAL_TIM_Base_Start+0xc8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d013      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1f      	ldr	r2, [pc, #124]	@ (800876c <HAL_TIM_Base_Start+0xcc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00e      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008770 <HAL_TIM_Base_Start+0xd0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d009      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1c      	ldr	r2, [pc, #112]	@ (8008774 <HAL_TIM_Base_Start+0xd4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d004      	beq.n	8008710 <HAL_TIM_Base_Start+0x70>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a1b      	ldr	r2, [pc, #108]	@ (8008778 <HAL_TIM_Base_Start+0xd8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d115      	bne.n	800873c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	4b19      	ldr	r3, [pc, #100]	@ (800877c <HAL_TIM_Base_Start+0xdc>)
 8008718:	4013      	ands	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b06      	cmp	r3, #6
 8008720:	d015      	beq.n	800874e <HAL_TIM_Base_Start+0xae>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008728:	d011      	beq.n	800874e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0201 	orr.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873a:	e008      	b.n	800874e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0201 	orr.w	r2, r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e000      	b.n	8008750 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40012c00 	.word	0x40012c00
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40015000 	.word	0x40015000
 800877c:	00010007 	.word	0x00010007

08008780 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008792:	4013      	ands	r3, r2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10f      	bne.n	80087b8 <HAL_TIM_Base_Stop+0x38>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	f244 4344 	movw	r3, #17476	@ 0x4444
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d107      	bne.n	80087b8 <HAL_TIM_Base_Stop+0x38>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e049      	b.n	8008874 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f841 	bl	800887c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f000 f9f1 	bl	8008bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e088      	b.n	80089c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d11b      	bne.n	80088f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80088cc:	f000 fa46 	bl	8008d5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 020c 	bic.w	r2, r2, #12
 80088de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6999      	ldr	r1, [r3, #24]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	619a      	str	r2, [r3, #24]
 80088f2:	e060      	b.n	80089b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d11c      	bne.n	8008934 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800890a:	f000 faca 	bl	8008ea2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	699a      	ldr	r2, [r3, #24]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800891c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6999      	ldr	r1, [r3, #24]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	021a      	lsls	r2, r3, #8
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	619a      	str	r2, [r3, #24]
 8008932:	e040      	b.n	80089b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b08      	cmp	r3, #8
 8008938:	d11b      	bne.n	8008972 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800894a:	f000 fb17 	bl	8008f7c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 020c 	bic.w	r2, r2, #12
 800895c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69d9      	ldr	r1, [r3, #28]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	61da      	str	r2, [r3, #28]
 8008970:	e021      	b.n	80089b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b0c      	cmp	r3, #12
 8008976:	d11c      	bne.n	80089b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008988:	f000 fb34 	bl	8008ff4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800899a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69d9      	ldr	r1, [r3, #28]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	021a      	lsls	r2, r3, #8
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	61da      	str	r2, [r3, #28]
 80089b0:	e001      	b.n	80089b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d101      	bne.n	80089e4 <HAL_TIM_ConfigClockSource+0x1c>
 80089e0:	2302      	movs	r3, #2
 80089e2:	e0f6      	b.n	8008bd2 <HAL_TIM_ConfigClockSource+0x20a>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a6f      	ldr	r2, [pc, #444]	@ (8008bdc <HAL_TIM_ConfigClockSource+0x214>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	f000 80c1 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a24:	4a6d      	ldr	r2, [pc, #436]	@ (8008bdc <HAL_TIM_ConfigClockSource+0x214>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	f200 80c6 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a2c:	4a6c      	ldr	r2, [pc, #432]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x218>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	f000 80b9 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a34:	4a6a      	ldr	r2, [pc, #424]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x218>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f200 80be 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a3c:	4a69      	ldr	r2, [pc, #420]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f000 80b1 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a44:	4a67      	ldr	r2, [pc, #412]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	f200 80b6 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a4c:	4a66      	ldr	r2, [pc, #408]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x220>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	f000 80a9 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a54:	4a64      	ldr	r2, [pc, #400]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x220>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f200 80ae 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a5c:	4a63      	ldr	r2, [pc, #396]	@ (8008bec <HAL_TIM_ConfigClockSource+0x224>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	f000 80a1 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a64:	4a61      	ldr	r2, [pc, #388]	@ (8008bec <HAL_TIM_ConfigClockSource+0x224>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f200 80a6 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a6c:	4a60      	ldr	r2, [pc, #384]	@ (8008bf0 <HAL_TIM_ConfigClockSource+0x228>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f000 8099 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a74:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf0 <HAL_TIM_ConfigClockSource+0x228>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f200 809e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a80:	f000 8091 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a88:	f200 8096 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a90:	f000 8089 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a98:	f200 808e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa0:	d03e      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x158>
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	f200 8087 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aae:	f000 8086 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1f6>
 8008ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab6:	d87f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ab8:	2b70      	cmp	r3, #112	@ 0x70
 8008aba:	d01a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x12a>
 8008abc:	2b70      	cmp	r3, #112	@ 0x70
 8008abe:	d87b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ac0:	2b60      	cmp	r3, #96	@ 0x60
 8008ac2:	d050      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x19e>
 8008ac4:	2b60      	cmp	r3, #96	@ 0x60
 8008ac6:	d877      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ac8:	2b50      	cmp	r3, #80	@ 0x50
 8008aca:	d03c      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x17e>
 8008acc:	2b50      	cmp	r3, #80	@ 0x50
 8008ace:	d873      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ad0:	2b40      	cmp	r3, #64	@ 0x40
 8008ad2:	d058      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x1be>
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d86f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ad8:	2b30      	cmp	r3, #48	@ 0x30
 8008ada:	d064      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008adc:	2b30      	cmp	r3, #48	@ 0x30
 8008ade:	d86b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d060      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d867      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05c      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d05a      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1de>
 8008af0:	e062      	b.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b02:	f000 fad1 	bl	80090a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	609a      	str	r2, [r3, #8]
      break;
 8008b1e:	e04f      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b30:	f000 faba 	bl	80090a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b42:	609a      	str	r2, [r3, #8]
      break;
 8008b44:	e03c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	461a      	mov	r2, r3
 8008b54:	f000 f976 	bl	8008e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2150      	movs	r1, #80	@ 0x50
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fa85 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008b64:	e02c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b72:	461a      	mov	r2, r3
 8008b74:	f000 f9d2 	bl	8008f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2160      	movs	r1, #96	@ 0x60
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fa75 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008b84:	e01c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 f956 	bl	8008e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2140      	movs	r1, #64	@ 0x40
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fa65 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008ba4:	e00c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f000 fa5c 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008bb6:	e003      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e000      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	00100070 	.word	0x00100070
 8008be0:	00100060 	.word	0x00100060
 8008be4:	00100050 	.word	0x00100050
 8008be8:	00100040 	.word	0x00100040
 8008bec:	00100030 	.word	0x00100030
 8008bf0:	00100020 	.word	0x00100020

08008bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a4c      	ldr	r2, [pc, #304]	@ (8008d38 <TIM_Base_SetConfig+0x144>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d017      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c12:	d013      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a49      	ldr	r2, [pc, #292]	@ (8008d3c <TIM_Base_SetConfig+0x148>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00f      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a48      	ldr	r2, [pc, #288]	@ (8008d40 <TIM_Base_SetConfig+0x14c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00b      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a47      	ldr	r2, [pc, #284]	@ (8008d44 <TIM_Base_SetConfig+0x150>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a46      	ldr	r2, [pc, #280]	@ (8008d48 <TIM_Base_SetConfig+0x154>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0x48>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a45      	ldr	r2, [pc, #276]	@ (8008d4c <TIM_Base_SetConfig+0x158>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d108      	bne.n	8008c4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a39      	ldr	r2, [pc, #228]	@ (8008d38 <TIM_Base_SetConfig+0x144>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d023      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5c:	d01f      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a36      	ldr	r2, [pc, #216]	@ (8008d3c <TIM_Base_SetConfig+0x148>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01b      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a35      	ldr	r2, [pc, #212]	@ (8008d40 <TIM_Base_SetConfig+0x14c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d017      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a34      	ldr	r2, [pc, #208]	@ (8008d44 <TIM_Base_SetConfig+0x150>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d013      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a33      	ldr	r2, [pc, #204]	@ (8008d48 <TIM_Base_SetConfig+0x154>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00f      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a33      	ldr	r2, [pc, #204]	@ (8008d50 <TIM_Base_SetConfig+0x15c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00b      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a32      	ldr	r2, [pc, #200]	@ (8008d54 <TIM_Base_SetConfig+0x160>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d007      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a31      	ldr	r2, [pc, #196]	@ (8008d58 <TIM_Base_SetConfig+0x164>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d003      	beq.n	8008c9e <TIM_Base_SetConfig+0xaa>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2c      	ldr	r2, [pc, #176]	@ (8008d4c <TIM_Base_SetConfig+0x158>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d108      	bne.n	8008cb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a18      	ldr	r2, [pc, #96]	@ (8008d38 <TIM_Base_SetConfig+0x144>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d013      	beq.n	8008d04 <TIM_Base_SetConfig+0x110>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1a      	ldr	r2, [pc, #104]	@ (8008d48 <TIM_Base_SetConfig+0x154>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00f      	beq.n	8008d04 <TIM_Base_SetConfig+0x110>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d50 <TIM_Base_SetConfig+0x15c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <TIM_Base_SetConfig+0x110>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a19      	ldr	r2, [pc, #100]	@ (8008d54 <TIM_Base_SetConfig+0x160>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <TIM_Base_SetConfig+0x110>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a18      	ldr	r2, [pc, #96]	@ (8008d58 <TIM_Base_SetConfig+0x164>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_Base_SetConfig+0x110>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a13      	ldr	r2, [pc, #76]	@ (8008d4c <TIM_Base_SetConfig+0x158>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d103      	bne.n	8008d0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d105      	bne.n	8008d2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f023 0201 	bic.w	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	611a      	str	r2, [r3, #16]
  }
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40013400 	.word	0x40013400
 8008d4c:	40015000 	.word	0x40015000
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 0201 	bic.w	r2, r3, #1
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a28      	ldr	r2, [pc, #160]	@ (8008e28 <TIM_TI1_SetConfig+0xcc>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01b      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d90:	d017      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4a25      	ldr	r2, [pc, #148]	@ (8008e2c <TIM_TI1_SetConfig+0xd0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4a24      	ldr	r2, [pc, #144]	@ (8008e30 <TIM_TI1_SetConfig+0xd4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00f      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a23      	ldr	r2, [pc, #140]	@ (8008e34 <TIM_TI1_SetConfig+0xd8>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4a22      	ldr	r2, [pc, #136]	@ (8008e38 <TIM_TI1_SetConfig+0xdc>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a21      	ldr	r2, [pc, #132]	@ (8008e3c <TIM_TI1_SetConfig+0xe0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_TI1_SetConfig+0x66>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4a20      	ldr	r2, [pc, #128]	@ (8008e40 <TIM_TI1_SetConfig+0xe4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d101      	bne.n	8008dc6 <TIM_TI1_SetConfig+0x6a>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <TIM_TI1_SetConfig+0x6c>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d008      	beq.n	8008dde <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e003      	b.n	8008de6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f023 030a 	bic.w	r3, r3, #10
 8008e00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f003 030a 	and.w	r3, r3, #10
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40012c00 	.word	0x40012c00
 8008e2c:	40000400 	.word	0x40000400
 8008e30:	40000800 	.word	0x40000800
 8008e34:	40000c00 	.word	0x40000c00
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40015000 	.word	0x40015000

08008e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	f023 030a 	bic.w	r3, r3, #10
 8008e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	621a      	str	r2, [r3, #32]
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b087      	sub	sp, #28
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f023 0210 	bic.w	r2, r3, #16
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	031b      	lsls	r3, r3, #12
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	621a      	str	r2, [r3, #32]
}
 8008f10:	bf00      	nop
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	f023 0210 	bic.w	r2, r3, #16
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	031b      	lsls	r3, r3, #12
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	621a      	str	r2, [r3, #32]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	621a      	str	r2, [r3, #32]
}
 8008fe8:	bf00      	nop
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009020:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009032:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	031b      	lsls	r3, r3, #12
 8009038:	b29b      	uxth	r3, r3
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009046:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	031b      	lsls	r3, r3, #12
 800904c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	bf00      	nop
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	f043 0307 	orr.w	r3, r3, #7
 8009094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	609a      	str	r2, [r3, #8]
}
 800909c:	bf00      	nop
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	021a      	lsls	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	609a      	str	r2, [r3, #8]
}
 80090dc:	bf00      	nop
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e074      	b.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a34      	ldr	r2, [pc, #208]	@ (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a33      	ldr	r2, [pc, #204]	@ (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d004      	beq.n	800913e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a31      	ldr	r2, [pc, #196]	@ (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d108      	bne.n	8009150 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a21      	ldr	r2, [pc, #132]	@ (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d022      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009180:	d01d      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a1f      	ldr	r2, [pc, #124]	@ (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d018      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1c      	ldr	r2, [pc, #112]	@ (800920c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d00e      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a15      	ldr	r2, [pc, #84]	@ (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d009      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a18      	ldr	r2, [pc, #96]	@ (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d004      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a11      	ldr	r2, [pc, #68]	@ (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d10c      	bne.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00
 80091fc:	40013400 	.word	0x40013400
 8009200:	40015000 	.word	0x40015000
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40000c00 	.word	0x40000c00
 8009210:	40014000 	.word	0x40014000

08009214 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_TIMEx_TISelection+0x1e>
 800922e:	2302      	movs	r3, #2
 8009230:	e073      	b.n	800931a <HAL_TIMEx_TISelection+0x106>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b0c      	cmp	r3, #12
 800923e:	d864      	bhi.n	800930a <HAL_TIMEx_TISelection+0xf6>
 8009240:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <HAL_TIMEx_TISelection+0x34>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	0800927d 	.word	0x0800927d
 800924c:	0800930b 	.word	0x0800930b
 8009250:	0800930b 	.word	0x0800930b
 8009254:	0800930b 	.word	0x0800930b
 8009258:	080092c9 	.word	0x080092c9
 800925c:	0800930b 	.word	0x0800930b
 8009260:	0800930b 	.word	0x0800930b
 8009264:	0800930b 	.word	0x0800930b
 8009268:	080092df 	.word	0x080092df
 800926c:	0800930b 	.word	0x0800930b
 8009270:	0800930b 	.word	0x0800930b
 8009274:	0800930b 	.word	0x0800930b
 8009278:	080092f5 	.word	0x080092f5
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009282:	f023 010f 	bic.w	r1, r3, #15
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	430a      	orrs	r2, r1
 800928e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a24      	ldr	r2, [pc, #144]	@ (8009328 <HAL_TIMEx_TISelection+0x114>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_TIMEx_TISelection+0x90>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a23      	ldr	r2, [pc, #140]	@ (800932c <HAL_TIMEx_TISelection+0x118>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0201 	orr.w	r2, r2, #1
 80092b2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 80092b4:	e02c      	b.n	8009310 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80092c6:	e023      	b.n	8009310 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ce:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	430a      	orrs	r2, r1
 80092da:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80092dc:	e018      	b.n	8009310 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092e4:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80092f2:	e00d      	b.n	8009310 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092fa:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	430a      	orrs	r2, r1
 8009306:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009308:	e002      	b.n	8009310 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40014400 	.word	0x40014400
 800932c:	40014800 	.word	0x40014800

08009330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e042      	b.n	80093c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7f9 fb2d 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2224      	movs	r2, #36	@ 0x24
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fe8e 	bl	800a09c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fb8f 	bl	8009aa4 <UART_SetConfig>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e01b      	b.n	80093c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800939e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0201 	orr.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 ff0d 	bl	800a1e0 <UART_CheckIdleState>
 80093c6:	4603      	mov	r3, r0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b0ba      	sub	sp, #232	@ 0xe8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80093fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80093fe:	4013      	ands	r3, r2
 8009400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11b      	bne.n	8009444 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d015      	beq.n	8009444 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d009      	beq.n	8009444 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 8300 	beq.w	8009a3a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
      }
      return;
 8009442:	e2fa      	b.n	8009a3a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8123 	beq.w	8009694 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800944e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009452:	4b8d      	ldr	r3, [pc, #564]	@ (8009688 <HAL_UART_IRQHandler+0x2b8>)
 8009454:	4013      	ands	r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800945a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800945e:	4b8b      	ldr	r3, [pc, #556]	@ (800968c <HAL_UART_IRQHandler+0x2bc>)
 8009460:	4013      	ands	r3, r2
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8116 	beq.w	8009694 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d011      	beq.n	8009498 <HAL_UART_IRQHandler+0xc8>
 8009474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800948e:	f043 0201 	orr.w	r2, r3, #1
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d011      	beq.n	80094c8 <HAL_UART_IRQHandler+0xf8>
 80094a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2202      	movs	r2, #2
 80094b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	f043 0204 	orr.w	r2, r3, #4
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d011      	beq.n	80094f8 <HAL_UART_IRQHandler+0x128>
 80094d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00b      	beq.n	80094f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2204      	movs	r2, #4
 80094e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ee:	f043 0202 	orr.w	r2, r3, #2
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d017      	beq.n	8009534 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d105      	bne.n	800951c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009510:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009514:	4b5c      	ldr	r3, [pc, #368]	@ (8009688 <HAL_UART_IRQHandler+0x2b8>)
 8009516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2208      	movs	r2, #8
 8009522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952a:	f043 0208 	orr.w	r2, r3, #8
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800953c:	2b00      	cmp	r3, #0
 800953e:	d012      	beq.n	8009566 <HAL_UART_IRQHandler+0x196>
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009544:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00c      	beq.n	8009566 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8266 	beq.w	8009a3e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d013      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800957e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d105      	bne.n	8009596 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800958a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800958e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ba:	2b40      	cmp	r3, #64	@ 0x40
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d054      	beq.n	8009674 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f807 	bl	800a5de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095da:	2b40      	cmp	r3, #64	@ 0x40
 80095dc:	d146      	bne.n	800966c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800960a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800960e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1d9      	bne.n	80095de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009630:	2b00      	cmp	r3, #0
 8009632:	d017      	beq.n	8009664 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963a:	4a15      	ldr	r2, [pc, #84]	@ (8009690 <HAL_UART_IRQHandler+0x2c0>)
 800963c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009644:	4618      	mov	r0, r3
 8009646:	f7fc ff57 	bl	80064f8 <HAL_DMA_Abort_IT>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d019      	beq.n	8009684 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800965e:	4610      	mov	r0, r2
 8009660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009662:	e00f      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa13 	bl	8009a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966a:	e00b      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fa0f 	bl	8009a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009672:	e007      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa0b 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009682:	e1dc      	b.n	8009a3e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009684:	bf00      	nop
    return;
 8009686:	e1da      	b.n	8009a3e <HAL_UART_IRQHandler+0x66e>
 8009688:	10000001 	.word	0x10000001
 800968c:	04000120 	.word	0x04000120
 8009690:	0800a895 	.word	0x0800a895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009698:	2b01      	cmp	r3, #1
 800969a:	f040 8170 	bne.w	800997e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8169 	beq.w	800997e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8162 	beq.w	800997e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2210      	movs	r2, #16
 80096c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	f040 80d8 	bne.w	8009882 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80af 	beq.w	8009848 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096f4:	429a      	cmp	r2, r3
 80096f6:	f080 80a7 	bcs.w	8009848 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 8087 	bne.w	8009826 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800972c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009746:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800974e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800975a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1da      	bne.n	8009718 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009786:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800978a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800978e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e1      	bne.n	8009762 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3308      	adds	r3, #8
 80097be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e3      	bne.n	800979e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f4:	f023 0310 	bic.w	r3, r3, #16
 80097f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009808:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800980c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	4618      	mov	r0, r3
 8009822:	f7fc fe10 	bl	8006446 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7f9 fb23 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009846:	e0fc      	b.n	8009a42 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800984e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009852:	429a      	cmp	r2, r3
 8009854:	f040 80f5 	bne.w	8009a42 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b20      	cmp	r3, #32
 8009868:	f040 80eb 	bne.w	8009a42 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7f9 fb06 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
      return;
 8009880:	e0df      	b.n	8009a42 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800988e:	b29b      	uxth	r3, r3
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 80d1 	beq.w	8009a46 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80098a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80cc 	beq.w	8009a46 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e4      	bne.n	80098ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3308      	adds	r3, #8
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	623b      	str	r3, [r7, #32]
   return(result);
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800990c:	633a      	str	r2, [r7, #48]	@ 0x30
 800990e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e1      	bne.n	80098e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	60fb      	str	r3, [r7, #12]
   return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f023 0310 	bic.w	r3, r3, #16
 8009948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	69b9      	ldr	r1, [r7, #24]
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	617b      	str	r3, [r7, #20]
   return(result);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7f9 fa88 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800997c:	e063      	b.n	8009a46 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <HAL_UART_IRQHandler+0x5d8>
 800998a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800998e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800999e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 ffb8 	bl	800a916 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099a6:	e051      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d014      	beq.n	80099de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d03a      	beq.n	8009a4a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
    }
    return;
 80099dc:	e035      	b.n	8009a4a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_UART_IRQHandler+0x62e>
 80099ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 ff62 	bl	800a8c0 <UART_EndTransmit_IT>
    return;
 80099fc:	e026      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <HAL_UART_IRQHandler+0x64e>
 8009a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 ff91 	bl	800a93e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a1c:	e016      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d010      	beq.n	8009a4c <HAL_UART_IRQHandler+0x67c>
 8009a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	da0c      	bge.n	8009a4c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 ff79 	bl	800a92a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a38:	e008      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a3a:	bf00      	nop
 8009a3c:	e006      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
    return;
 8009a3e:	bf00      	nop
 8009a40:	e004      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
    return;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	37e8      	adds	r7, #232	@ 0xe8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009aa8:	b08c      	sub	sp, #48	@ 0x30
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	431a      	orrs	r2, r3
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4baa      	ldr	r3, [pc, #680]	@ (8009d7c <UART_SetConfig+0x2d8>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	6812      	ldr	r2, [r2, #0]
 8009ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009adc:	430b      	orrs	r3, r1
 8009ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a9f      	ldr	r2, [pc, #636]	@ (8009d80 <UART_SetConfig+0x2dc>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d004      	beq.n	8009b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009b1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b24:	430b      	orrs	r3, r1
 8009b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2e:	f023 010f 	bic.w	r1, r3, #15
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a90      	ldr	r2, [pc, #576]	@ (8009d84 <UART_SetConfig+0x2e0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d125      	bne.n	8009b94 <UART_SetConfig+0xf0>
 8009b48:	4b8f      	ldr	r3, [pc, #572]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d81a      	bhi.n	8009b8c <UART_SetConfig+0xe8>
 8009b56:	a201      	add	r2, pc, #4	@ (adr r2, 8009b5c <UART_SetConfig+0xb8>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b6d 	.word	0x08009b6d
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e116      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009b74:	2302      	movs	r3, #2
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	e112      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b82:	e10e      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8a:	e10a      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b92:	e106      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a7c      	ldr	r2, [pc, #496]	@ (8009d8c <UART_SetConfig+0x2e8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d138      	bne.n	8009c10 <UART_SetConfig+0x16c>
 8009b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba4:	f003 030c 	and.w	r3, r3, #12
 8009ba8:	2b0c      	cmp	r3, #12
 8009baa:	d82d      	bhi.n	8009c08 <UART_SetConfig+0x164>
 8009bac:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb4 <UART_SetConfig+0x110>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009be9 	.word	0x08009be9
 8009bb8:	08009c09 	.word	0x08009c09
 8009bbc:	08009c09 	.word	0x08009c09
 8009bc0:	08009c09 	.word	0x08009c09
 8009bc4:	08009bf9 	.word	0x08009bf9
 8009bc8:	08009c09 	.word	0x08009c09
 8009bcc:	08009c09 	.word	0x08009c09
 8009bd0:	08009c09 	.word	0x08009c09
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	08009c09 	.word	0x08009c09
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009c09 	.word	0x08009c09
 8009be4:	08009c01 	.word	0x08009c01
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bee:	e0d8      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bf6:	e0d4      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfe:	e0d0      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c00:	2308      	movs	r3, #8
 8009c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c06:	e0cc      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0e:	e0c8      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a5e      	ldr	r2, [pc, #376]	@ (8009d90 <UART_SetConfig+0x2ec>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d125      	bne.n	8009c66 <UART_SetConfig+0x1c2>
 8009c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c24:	2b30      	cmp	r3, #48	@ 0x30
 8009c26:	d016      	beq.n	8009c56 <UART_SetConfig+0x1b2>
 8009c28:	2b30      	cmp	r3, #48	@ 0x30
 8009c2a:	d818      	bhi.n	8009c5e <UART_SetConfig+0x1ba>
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d00a      	beq.n	8009c46 <UART_SetConfig+0x1a2>
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	d814      	bhi.n	8009c5e <UART_SetConfig+0x1ba>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <UART_SetConfig+0x19a>
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d008      	beq.n	8009c4e <UART_SetConfig+0x1aa>
 8009c3c:	e00f      	b.n	8009c5e <UART_SetConfig+0x1ba>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c44:	e0ad      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c46:	2302      	movs	r3, #2
 8009c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c4c:	e0a9      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c4e:	2304      	movs	r3, #4
 8009c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c54:	e0a5      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c56:	2308      	movs	r3, #8
 8009c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c5c:	e0a1      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c5e:	2310      	movs	r3, #16
 8009c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c64:	e09d      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8009d94 <UART_SetConfig+0x2f0>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d125      	bne.n	8009cbc <UART_SetConfig+0x218>
 8009c70:	4b45      	ldr	r3, [pc, #276]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c7c:	d016      	beq.n	8009cac <UART_SetConfig+0x208>
 8009c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c80:	d818      	bhi.n	8009cb4 <UART_SetConfig+0x210>
 8009c82:	2b80      	cmp	r3, #128	@ 0x80
 8009c84:	d00a      	beq.n	8009c9c <UART_SetConfig+0x1f8>
 8009c86:	2b80      	cmp	r3, #128	@ 0x80
 8009c88:	d814      	bhi.n	8009cb4 <UART_SetConfig+0x210>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <UART_SetConfig+0x1f0>
 8009c8e:	2b40      	cmp	r3, #64	@ 0x40
 8009c90:	d008      	beq.n	8009ca4 <UART_SetConfig+0x200>
 8009c92:	e00f      	b.n	8009cb4 <UART_SetConfig+0x210>
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c9a:	e082      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ca2:	e07e      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009caa:	e07a      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009cac:	2308      	movs	r3, #8
 8009cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cb2:	e076      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cba:	e072      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a35      	ldr	r2, [pc, #212]	@ (8009d98 <UART_SetConfig+0x2f4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d12a      	bne.n	8009d1c <UART_SetConfig+0x278>
 8009cc6:	4b30      	ldr	r3, [pc, #192]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd4:	d01a      	beq.n	8009d0c <UART_SetConfig+0x268>
 8009cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cda:	d81b      	bhi.n	8009d14 <UART_SetConfig+0x270>
 8009cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ce0:	d00c      	beq.n	8009cfc <UART_SetConfig+0x258>
 8009ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ce6:	d815      	bhi.n	8009d14 <UART_SetConfig+0x270>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <UART_SetConfig+0x250>
 8009cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cf0:	d008      	beq.n	8009d04 <UART_SetConfig+0x260>
 8009cf2:	e00f      	b.n	8009d14 <UART_SetConfig+0x270>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	e052      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d02:	e04e      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0a:	e04a      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d12:	e046      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d1a:	e042      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a17      	ldr	r2, [pc, #92]	@ (8009d80 <UART_SetConfig+0x2dc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d13a      	bne.n	8009d9c <UART_SetConfig+0x2f8>
 8009d26:	4b18      	ldr	r3, [pc, #96]	@ (8009d88 <UART_SetConfig+0x2e4>)
 8009d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d34:	d01a      	beq.n	8009d6c <UART_SetConfig+0x2c8>
 8009d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d3a:	d81b      	bhi.n	8009d74 <UART_SetConfig+0x2d0>
 8009d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d40:	d00c      	beq.n	8009d5c <UART_SetConfig+0x2b8>
 8009d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d46:	d815      	bhi.n	8009d74 <UART_SetConfig+0x2d0>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <UART_SetConfig+0x2b0>
 8009d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d50:	d008      	beq.n	8009d64 <UART_SetConfig+0x2c0>
 8009d52:	e00f      	b.n	8009d74 <UART_SetConfig+0x2d0>
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5a:	e022      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d62:	e01e      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d64:	2304      	movs	r3, #4
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6a:	e01a      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d72:	e016      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d74:	2310      	movs	r3, #16
 8009d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d7a:	e012      	b.n	8009da2 <UART_SetConfig+0x2fe>
 8009d7c:	cfff69f3 	.word	0xcfff69f3
 8009d80:	40008000 	.word	0x40008000
 8009d84:	40013800 	.word	0x40013800
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	40004400 	.word	0x40004400
 8009d90:	40004800 	.word	0x40004800
 8009d94:	40004c00 	.word	0x40004c00
 8009d98:	40005000 	.word	0x40005000
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4aae      	ldr	r2, [pc, #696]	@ (800a060 <UART_SetConfig+0x5bc>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	f040 8097 	bne.w	8009edc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d823      	bhi.n	8009dfe <UART_SetConfig+0x35a>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x318>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009de1 	.word	0x08009de1
 8009dc0:	08009dff 	.word	0x08009dff
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009dff 	.word	0x08009dff
 8009dcc:	08009def 	.word	0x08009def
 8009dd0:	08009dff 	.word	0x08009dff
 8009dd4:	08009dff 	.word	0x08009dff
 8009dd8:	08009dff 	.word	0x08009dff
 8009ddc:	08009df7 	.word	0x08009df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009de0:	f7fd fdc2 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8009de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009de6:	e010      	b.n	8009e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009de8:	4b9e      	ldr	r3, [pc, #632]	@ (800a064 <UART_SetConfig+0x5c0>)
 8009dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dec:	e00d      	b.n	8009e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dee:	f7fd fd4d 	bl	800788c <HAL_RCC_GetSysClockFreq>
 8009df2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009df4:	e009      	b.n	8009e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dfc:	e005      	b.n	8009e0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8130 	beq.w	800a072 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e16:	4a94      	ldr	r2, [pc, #592]	@ (800a068 <UART_SetConfig+0x5c4>)
 8009e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	4413      	add	r3, r2
 8009e30:	69ba      	ldr	r2, [r7, #24]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d305      	bcc.n	8009e42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d903      	bls.n	8009e4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e48:	e113      	b.n	800a072 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60bb      	str	r3, [r7, #8]
 8009e50:	60fa      	str	r2, [r7, #12]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e56:	4a84      	ldr	r2, [pc, #528]	@ (800a068 <UART_SetConfig+0x5c4>)
 8009e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2200      	movs	r2, #0
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e6c:	f7f6 fe1a 	bl	8000aa4 <__aeabi_uldivmod>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4610      	mov	r0, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	020b      	lsls	r3, r1, #8
 8009e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e86:	0202      	lsls	r2, r0, #8
 8009e88:	6979      	ldr	r1, [r7, #20]
 8009e8a:	6849      	ldr	r1, [r1, #4]
 8009e8c:	0849      	lsrs	r1, r1, #1
 8009e8e:	2000      	movs	r0, #0
 8009e90:	460c      	mov	r4, r1
 8009e92:	4605      	mov	r5, r0
 8009e94:	eb12 0804 	adds.w	r8, r2, r4
 8009e98:	eb43 0905 	adc.w	r9, r3, r5
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	469a      	mov	sl, r3
 8009ea4:	4693      	mov	fp, r2
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	465b      	mov	r3, fp
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fdf9 	bl	8000aa4 <__aeabi_uldivmod>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ec0:	d308      	bcc.n	8009ed4 <UART_SetConfig+0x430>
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ec8:	d204      	bcs.n	8009ed4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6a3a      	ldr	r2, [r7, #32]
 8009ed0:	60da      	str	r2, [r3, #12]
 8009ed2:	e0ce      	b.n	800a072 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009eda:	e0ca      	b.n	800a072 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee4:	d166      	bne.n	8009fb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d827      	bhi.n	8009f3e <UART_SetConfig+0x49a>
 8009eee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <UART_SetConfig+0x450>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	08009f3f 	.word	0x08009f3f
 8009f04:	08009f2f 	.word	0x08009f2f
 8009f08:	08009f3f 	.word	0x08009f3f
 8009f0c:	08009f3f 	.word	0x08009f3f
 8009f10:	08009f3f 	.word	0x08009f3f
 8009f14:	08009f37 	.word	0x08009f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f18:	f7fd fd26 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8009f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f1e:	e014      	b.n	8009f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f20:	f7fd fd38 	bl	8007994 <HAL_RCC_GetPCLK2Freq>
 8009f24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f26:	e010      	b.n	8009f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f28:	4b4e      	ldr	r3, [pc, #312]	@ (800a064 <UART_SetConfig+0x5c0>)
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f2c:	e00d      	b.n	8009f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f2e:	f7fd fcad 	bl	800788c <HAL_RCC_GetSysClockFreq>
 8009f32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f34:	e009      	b.n	8009f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f3c:	e005      	b.n	8009f4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 8090 	beq.w	800a072 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f56:	4a44      	ldr	r2, [pc, #272]	@ (800a068 <UART_SetConfig+0x5c4>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f64:	005a      	lsls	r2, r3, #1
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	441a      	add	r2, r3
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	d916      	bls.n	8009fac <UART_SetConfig+0x508>
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f84:	d212      	bcs.n	8009fac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f023 030f 	bic.w	r3, r3, #15
 8009f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	8bfb      	ldrh	r3, [r7, #30]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	8bfa      	ldrh	r2, [r7, #30]
 8009fa8:	60da      	str	r2, [r3, #12]
 8009faa:	e062      	b.n	800a072 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fb2:	e05e      	b.n	800a072 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d828      	bhi.n	800a00e <UART_SetConfig+0x56a>
 8009fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc4 <UART_SetConfig+0x520>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	08009ff1 	.word	0x08009ff1
 8009fcc:	08009ff9 	.word	0x08009ff9
 8009fd0:	0800a00f 	.word	0x0800a00f
 8009fd4:	08009fff 	.word	0x08009fff
 8009fd8:	0800a00f 	.word	0x0800a00f
 8009fdc:	0800a00f 	.word	0x0800a00f
 8009fe0:	0800a00f 	.word	0x0800a00f
 8009fe4:	0800a007 	.word	0x0800a007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fe8:	f7fd fcbe 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8009fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fee:	e014      	b.n	800a01a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ff0:	f7fd fcd0 	bl	8007994 <HAL_RCC_GetPCLK2Freq>
 8009ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ff6:	e010      	b.n	800a01a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ff8:	4b1a      	ldr	r3, [pc, #104]	@ (800a064 <UART_SetConfig+0x5c0>)
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ffc:	e00d      	b.n	800a01a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ffe:	f7fd fc45 	bl	800788c <HAL_RCC_GetSysClockFreq>
 800a002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a004:	e009      	b.n	800a01a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a00c:	e005      	b.n	800a01a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a018:	bf00      	nop
    }

    if (pclk != 0U)
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d028      	beq.n	800a072 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a024:	4a10      	ldr	r2, [pc, #64]	@ (800a068 <UART_SetConfig+0x5c4>)
 800a026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a02a:	461a      	mov	r2, r3
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	085b      	lsrs	r3, r3, #1
 800a038:	441a      	add	r2, r3
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d910      	bls.n	800a06c <UART_SetConfig+0x5c8>
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a050:	d20c      	bcs.n	800a06c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	b29a      	uxth	r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60da      	str	r2, [r3, #12]
 800a05c:	e009      	b.n	800a072 <UART_SetConfig+0x5ce>
 800a05e:	bf00      	nop
 800a060:	40008000 	.word	0x40008000
 800a064:	00f42400 	.word	0x00f42400
 800a068:	0800c280 	.word	0x0800c280
      }
      else
      {
        ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2201      	movs	r2, #1
 800a076:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2200      	movs	r2, #0
 800a086:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a08e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a092:	4618      	mov	r0, r3
 800a094:	3730      	adds	r7, #48	@ 0x30
 800a096:	46bd      	mov	sp, r7
 800a098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a09c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a8:	f003 0308 	and.w	r3, r3, #8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00a      	beq.n	800a0c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00a      	beq.n	800a10a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00a      	beq.n	800a14e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01a      	beq.n	800a1b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a19a:	d10a      	bne.n	800a1b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	605a      	str	r2, [r3, #4]
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b098      	sub	sp, #96	@ 0x60
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1f0:	f7f9 fafa 	bl	80037e8 <HAL_GetTick>
 800a1f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0308 	and.w	r3, r3, #8
 800a200:	2b08      	cmp	r3, #8
 800a202:	d12f      	bne.n	800a264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a20c:	2200      	movs	r2, #0
 800a20e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f88e 	bl	800a334 <UART_WaitOnFlagUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d022      	beq.n	800a264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a232:	653b      	str	r3, [r7, #80]	@ 0x50
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a23c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a23e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a24a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e6      	bne.n	800a21e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e063      	b.n	800a32c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d149      	bne.n	800a306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a27a:	2200      	movs	r2, #0
 800a27c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f857 	bl	800a334 <UART_WaitOnFlagUntilTimeout>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d03c      	beq.n	800a306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	623b      	str	r3, [r7, #32]
   return(result);
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e6      	bne.n	800a28c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	e853 3f00 	ldrex	r3, [r3]
 800a2cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f023 0301 	bic.w	r3, r3, #1
 800a2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2de:	61fa      	str	r2, [r7, #28]
 800a2e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e2:	69b9      	ldr	r1, [r7, #24]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	e841 2300 	strex	r3, r2, [r1]
 800a2ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1e5      	bne.n	800a2be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	e012      	b.n	800a32c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2220      	movs	r2, #32
 800a30a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3758      	adds	r7, #88	@ 0x58
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	4613      	mov	r3, r2
 800a342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a344:	e04f      	b.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34c:	d04b      	beq.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a34e:	f7f9 fa4b 	bl	80037e8 <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d302      	bcc.n	800a364 <UART_WaitOnFlagUntilTimeout+0x30>
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e04e      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0304 	and.w	r3, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	d037      	beq.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b80      	cmp	r3, #128	@ 0x80
 800a37a:	d034      	beq.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b40      	cmp	r3, #64	@ 0x40
 800a380:	d031      	beq.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d110      	bne.n	800a3b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2208      	movs	r2, #8
 800a396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f920 	bl	800a5de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e029      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3c0:	d111      	bne.n	800a3e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f906 	bl	800a5de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e00f      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69da      	ldr	r2, [r3, #28]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	bf0c      	ite	eq
 800a3f6:	2301      	moveq	r3, #1
 800a3f8:	2300      	movne	r3, #0
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	429a      	cmp	r2, r3
 800a402:	d0a0      	beq.n	800a346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b096      	sub	sp, #88	@ 0x58
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	88fa      	ldrh	r2, [r7, #6]
 800a428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2222      	movs	r2, #34	@ 0x22
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02d      	beq.n	800a4a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a44c:	4a40      	ldr	r2, [pc, #256]	@ (800a550 <UART_Start_Receive_DMA+0x140>)
 800a44e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a456:	4a3f      	ldr	r2, [pc, #252]	@ (800a554 <UART_Start_Receive_DMA+0x144>)
 800a458:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a460:	4a3d      	ldr	r2, [pc, #244]	@ (800a558 <UART_Start_Receive_DMA+0x148>)
 800a462:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a46a:	2200      	movs	r2, #0
 800a46c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3324      	adds	r3, #36	@ 0x24
 800a47a:	4619      	mov	r1, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a480:	461a      	mov	r2, r3
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	f7fb ff64 	bl	8006350 <HAL_DMA_Start_IT>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2210      	movs	r2, #16
 800a492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2220      	movs	r2, #32
 800a49a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e051      	b.n	800a546 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d018      	beq.n	800a4dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4be:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a4ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800a4fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e5      	bne.n	800a4dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	613b      	str	r3, [r7, #16]
   return(result);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3308      	adds	r3, #8
 800a52e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a530:	623a      	str	r2, [r7, #32]
 800a532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	6a3a      	ldr	r2, [r7, #32]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e5      	bne.n	800a510 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3758      	adds	r7, #88	@ 0x58
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	0800a6ab 	.word	0x0800a6ab
 800a554:	0800a7d7 	.word	0x0800a7d7
 800a558:	0800a815 	.word	0x0800a815

0800a55c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b08f      	sub	sp, #60	@ 0x3c
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	61fb      	str	r3, [r7, #28]
   return(result);
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a578:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a584:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e6      	bne.n	800a564 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a5ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b6:	61ba      	str	r2, [r7, #24]
 800a5b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6979      	ldr	r1, [r7, #20]
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e5      	bne.n	800a596 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a5d2:	bf00      	nop
 800a5d4:	373c      	adds	r7, #60	@ 0x3c
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b095      	sub	sp, #84	@ 0x54
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a604:	643b      	str	r3, [r7, #64]	@ 0x40
 800a606:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a60a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3308      	adds	r3, #8
 800a61e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	61fb      	str	r3, [r7, #28]
   return(result);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3308      	adds	r3, #8
 800a63a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a63c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e3      	bne.n	800a618 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a654:	2b01      	cmp	r3, #1
 800a656:	d118      	bne.n	800a68a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	60bb      	str	r3, [r7, #8]
   return(result);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f023 0310 	bic.w	r3, r3, #16
 800a66c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	6979      	ldr	r1, [r7, #20]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	613b      	str	r3, [r7, #16]
   return(result);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e6      	bne.n	800a658 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a69e:	bf00      	nop
 800a6a0:	3754      	adds	r7, #84	@ 0x54
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b09c      	sub	sp, #112	@ 0x70
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d171      	bne.n	800a7aa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a6c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6d6:	e853 3f00 	ldrex	r3, [r3]
 800a6da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a6dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6f4:	e841 2300 	strex	r3, r2, [r1]
 800a6f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1e6      	bne.n	800a6ce <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3308      	adds	r3, #8
 800a706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a712:	f023 0301 	bic.w	r3, r3, #1
 800a716:	667b      	str	r3, [r7, #100]	@ 0x64
 800a718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3308      	adds	r3, #8
 800a71e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a720:	647a      	str	r2, [r7, #68]	@ 0x44
 800a722:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e5      	bne.n	800a700 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3308      	adds	r3, #8
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	e853 3f00 	ldrex	r3, [r3]
 800a742:	623b      	str	r3, [r7, #32]
   return(result);
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a74a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a74c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a754:	633a      	str	r2, [r7, #48]	@ 0x30
 800a756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e5      	bne.n	800a734 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a76a:	2220      	movs	r2, #32
 800a76c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a774:	2b01      	cmp	r3, #1
 800a776:	d118      	bne.n	800a7aa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	e853 3f00 	ldrex	r3, [r3]
 800a784:	60fb      	str	r3, [r7, #12]
   return(result);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 0310 	bic.w	r3, r3, #16
 800a78c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	69b9      	ldr	r1, [r7, #24]
 800a79c:	69fa      	ldr	r2, [r7, #28]
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e6      	bne.n	800a778 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d107      	bne.n	800a7c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7c2:	f7f8 fb63 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7c6:	e002      	b.n	800a7ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a7c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7ca:	f7ff f94d 	bl	8009a68 <HAL_UART_RxCpltCallback>
}
 800a7ce:	bf00      	nop
 800a7d0:	3770      	adds	r7, #112	@ 0x70
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d109      	bne.n	800a806 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7f8 fb44 	bl	8002e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a804:	e002      	b.n	800a80c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff f938 	bl	8009a7c <HAL_UART_RxHalfCpltCallback>
}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a820:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a828:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a830:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a83c:	2b80      	cmp	r3, #128	@ 0x80
 800a83e:	d109      	bne.n	800a854 <UART_DMAError+0x40>
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b21      	cmp	r3, #33	@ 0x21
 800a844:	d106      	bne.n	800a854 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	f7ff fe84 	bl	800a55c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a85e:	2b40      	cmp	r3, #64	@ 0x40
 800a860:	d109      	bne.n	800a876 <UART_DMAError+0x62>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b22      	cmp	r3, #34	@ 0x22
 800a866:	d106      	bne.n	800a876 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a870:	6978      	ldr	r0, [r7, #20]
 800a872:	f7ff feb4 	bl	800a5de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87c:	f043 0210 	orr.w	r2, r3, #16
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a886:	6978      	ldr	r0, [r7, #20]
 800a888:	f7ff f902 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a88c:	bf00      	nop
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff f8ec 	bl	8009a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	61bb      	str	r3, [r7, #24]
 800a8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6979      	ldr	r1, [r7, #20]
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e6      	bne.n	800a8c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff f8a3 	bl	8009a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a90e:	bf00      	nop
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_UARTEx_DisableFifoMode+0x16>
 800a964:	2302      	movs	r3, #2
 800a966:	e027      	b.n	800a9b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2224      	movs	r2, #36	@ 0x24
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0201 	bic.w	r2, r2, #1
 800a98e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a996:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e02d      	b.n	800aa38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2224      	movs	r2, #36	@ 0x24
 800a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0201 	bic.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f8a3 	bl	800ab64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e02d      	b.n	800aab4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2224      	movs	r2, #36	@ 0x24
 800aa64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f865 	bl	800ab64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08c      	sub	sp, #48	@ 0x30
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	d142      	bne.n	800ab5a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e03b      	b.n	800ab5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2201      	movs	r2, #1
 800aae8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aaf0:	88fb      	ldrh	r3, [r7, #6]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fc8a 	bl	800a410 <UART_Start_Receive_DMA>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ab02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d124      	bne.n	800ab54 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d11d      	bne.n	800ab4e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2210      	movs	r2, #16
 800ab18:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	617b      	str	r3, [r7, #20]
   return(result);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f043 0310 	orr.w	r3, r3, #16
 800ab2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab3a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6a39      	ldr	r1, [r7, #32]
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e6      	bne.n	800ab1a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ab4c:	e002      	b.n	800ab54 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ab54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab58:	e000      	b.n	800ab5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ab5a:	2302      	movs	r3, #2
  }
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3730      	adds	r7, #48	@ 0x30
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d108      	bne.n	800ab86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab84:	e031      	b.n	800abea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab86:	2308      	movs	r3, #8
 800ab88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab8a:	2308      	movs	r3, #8
 800ab8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	0e5b      	lsrs	r3, r3, #25
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	0f5b      	lsrs	r3, r3, #29
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	7b3a      	ldrb	r2, [r7, #12]
 800abb2:	4911      	ldr	r1, [pc, #68]	@ (800abf8 <UARTEx_SetNbDataToProcess+0x94>)
 800abb4:	5c8a      	ldrb	r2, [r1, r2]
 800abb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abba:	7b3a      	ldrb	r2, [r7, #12]
 800abbc:	490f      	ldr	r1, [pc, #60]	@ (800abfc <UARTEx_SetNbDataToProcess+0x98>)
 800abbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	7b7a      	ldrb	r2, [r7, #13]
 800abd0:	4909      	ldr	r1, [pc, #36]	@ (800abf8 <UARTEx_SetNbDataToProcess+0x94>)
 800abd2:	5c8a      	ldrb	r2, [r1, r2]
 800abd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abd8:	7b7a      	ldrb	r2, [r7, #13]
 800abda:	4908      	ldr	r1, [pc, #32]	@ (800abfc <UARTEx_SetNbDataToProcess+0x98>)
 800abdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abde:	fb93 f3f2 	sdiv	r3, r3, r2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	0800c298 	.word	0x0800c298
 800abfc:	0800c2a0 	.word	0x0800c2a0

0800ac00 <arm_rfft_1024_fast_init_f32>:
 800ac00:	b190      	cbz	r0, 800ac28 <arm_rfft_1024_fast_init_f32+0x28>
 800ac02:	b430      	push	{r4, r5}
 800ac04:	490a      	ldr	r1, [pc, #40]	@ (800ac30 <arm_rfft_1024_fast_init_f32+0x30>)
 800ac06:	4a0b      	ldr	r2, [pc, #44]	@ (800ac34 <arm_rfft_1024_fast_init_f32+0x34>)
 800ac08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac0c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac10:	8003      	strh	r3, [r0, #0]
 800ac12:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800ac16:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800ac1a:	4b07      	ldr	r3, [pc, #28]	@ (800ac38 <arm_rfft_1024_fast_init_f32+0x38>)
 800ac1c:	8205      	strh	r5, [r0, #16]
 800ac1e:	8184      	strh	r4, [r0, #12]
 800ac20:	6143      	str	r3, [r0, #20]
 800ac22:	bc30      	pop	{r4, r5}
 800ac24:	2000      	movs	r0, #0
 800ac26:	4770      	bx	lr
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	0800c2a8 	.word	0x0800c2a8
 800ac34:	0800ce2c 	.word	0x0800ce2c
 800ac38:	0800de2c 	.word	0x0800de2c

0800ac3c <stage_rfft_f32>:
 800ac3c:	b410      	push	{r4}
 800ac3e:	edd1 7a00 	vldr	s15, [r1]
 800ac42:	ed91 7a01 	vldr	s14, [r1, #4]
 800ac46:	8804      	ldrh	r4, [r0, #0]
 800ac48:	6940      	ldr	r0, [r0, #20]
 800ac4a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ac4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ac52:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ac56:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac5e:	3c01      	subs	r4, #1
 800ac60:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ac64:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac68:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ac6c:	ed82 7a00 	vstr	s14, [r2]
 800ac70:	edc2 7a01 	vstr	s15, [r2, #4]
 800ac74:	3010      	adds	r0, #16
 800ac76:	3210      	adds	r2, #16
 800ac78:	3b08      	subs	r3, #8
 800ac7a:	3110      	adds	r1, #16
 800ac7c:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ac80:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac84:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ac88:	edd3 4a03 	vldr	s9, [r3, #12]
 800ac8c:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ac90:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ac94:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ac98:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ac9c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800aca0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800aca4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800aca8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800acac:	ee37 7a23 	vadd.f32	s14, s14, s7
 800acb0:	ee66 6a85 	vmul.f32	s13, s13, s10
 800acb4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800acb8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800acbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800acc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acc4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800acc8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800accc:	3c01      	subs	r4, #1
 800acce:	ed02 7a02 	vstr	s14, [r2, #-8]
 800acd2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800acd6:	f1a3 0308 	sub.w	r3, r3, #8
 800acda:	f101 0108 	add.w	r1, r1, #8
 800acde:	f100 0008 	add.w	r0, r0, #8
 800ace2:	f102 0208 	add.w	r2, r2, #8
 800ace6:	d1c9      	bne.n	800ac7c <stage_rfft_f32+0x40>
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop

0800acf0 <merge_rfft_f32>:
 800acf0:	b410      	push	{r4}
 800acf2:	edd1 7a00 	vldr	s15, [r1]
 800acf6:	edd1 6a01 	vldr	s13, [r1, #4]
 800acfa:	8804      	ldrh	r4, [r0, #0]
 800acfc:	6940      	ldr	r0, [r0, #20]
 800acfe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad06:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ad0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ad0e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad12:	3c01      	subs	r4, #1
 800ad14:	ed82 7a00 	vstr	s14, [r2]
 800ad18:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad1c:	b3dc      	cbz	r4, 800ad96 <merge_rfft_f32+0xa6>
 800ad1e:	00e3      	lsls	r3, r4, #3
 800ad20:	3b08      	subs	r3, #8
 800ad22:	440b      	add	r3, r1
 800ad24:	3010      	adds	r0, #16
 800ad26:	3210      	adds	r2, #16
 800ad28:	3110      	adds	r1, #16
 800ad2a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ad2e:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad32:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ad36:	edd3 4a03 	vldr	s9, [r3, #12]
 800ad3a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad3e:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ad42:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ad46:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ad4a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ad4e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ad52:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ad56:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ad5a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ad5e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ad62:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ad66:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ad6a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ad6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad72:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ad76:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ad80:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ad84:	f1a3 0308 	sub.w	r3, r3, #8
 800ad88:	f101 0108 	add.w	r1, r1, #8
 800ad8c:	f100 0008 	add.w	r0, r0, #8
 800ad90:	f102 0208 	add.w	r2, r2, #8
 800ad94:	d1c9      	bne.n	800ad2a <merge_rfft_f32+0x3a>
 800ad96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <arm_rfft_fast_f32>:
 800ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	8a05      	ldrh	r5, [r0, #16]
 800ada2:	086d      	lsrs	r5, r5, #1
 800ada4:	8005      	strh	r5, [r0, #0]
 800ada6:	4604      	mov	r4, r0
 800ada8:	4616      	mov	r6, r2
 800adaa:	461d      	mov	r5, r3
 800adac:	b14b      	cbz	r3, 800adc2 <arm_rfft_fast_f32+0x26>
 800adae:	f7ff ff9f 	bl	800acf0 <merge_rfft_f32>
 800adb2:	462a      	mov	r2, r5
 800adb4:	4631      	mov	r1, r6
 800adb6:	4620      	mov	r0, r4
 800adb8:	2301      	movs	r3, #1
 800adba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adbe:	f000 bb33 	b.w	800b428 <arm_cfft_f32>
 800adc2:	460f      	mov	r7, r1
 800adc4:	461a      	mov	r2, r3
 800adc6:	2301      	movs	r3, #1
 800adc8:	f000 fb2e 	bl	800b428 <arm_cfft_f32>
 800adcc:	4632      	mov	r2, r6
 800adce:	4639      	mov	r1, r7
 800add0:	4620      	mov	r0, r4
 800add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	f7ff bf31 	b.w	800ac3c <stage_rfft_f32>
 800adda:	bf00      	nop

0800addc <arm_cfft_radix8by2_f32>:
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	ed2d 8b08 	vpush	{d8-d11}
 800ade4:	4607      	mov	r7, r0
 800ade6:	4608      	mov	r0, r1
 800ade8:	f8b7 c000 	ldrh.w	ip, [r7]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800adf2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800adf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800adfa:	f000 80b0 	beq.w	800af5e <arm_cfft_radix8by2_f32+0x182>
 800adfe:	008c      	lsls	r4, r1, #2
 800ae00:	3410      	adds	r4, #16
 800ae02:	f100 0310 	add.w	r3, r0, #16
 800ae06:	1906      	adds	r6, r0, r4
 800ae08:	3210      	adds	r2, #16
 800ae0a:	4444      	add	r4, r8
 800ae0c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ae10:	f108 0510 	add.w	r5, r8, #16
 800ae14:	ed15 2a04 	vldr	s4, [r5, #-16]
 800ae18:	ed55 2a03 	vldr	s5, [r5, #-12]
 800ae1c:	ed54 4a04 	vldr	s9, [r4, #-16]
 800ae20:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ae24:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ae28:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ae2c:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ae30:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ae34:	ed55 0a01 	vldr	s1, [r5, #-4]
 800ae38:	ed56 6a04 	vldr	s13, [r6, #-16]
 800ae3c:	ed16 3a03 	vldr	s6, [r6, #-12]
 800ae40:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ae44:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ae48:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ae4c:	ed16 1a02 	vldr	s2, [r6, #-8]
 800ae50:	ed56 1a01 	vldr	s3, [r6, #-4]
 800ae54:	ee73 ba82 	vadd.f32	s23, s7, s4
 800ae58:	ee37 ba22 	vadd.f32	s22, s14, s5
 800ae5c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800ae60:	ee33 9a04 	vadd.f32	s18, s6, s8
 800ae64:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800ae68:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ae6c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ae70:	ee71 8a06 	vadd.f32	s17, s2, s12
 800ae74:	ed43 ba04 	vstr	s23, [r3, #-16]
 800ae78:	ed03 ba03 	vstr	s22, [r3, #-12]
 800ae7c:	ed43 aa02 	vstr	s21, [r3, #-8]
 800ae80:	ed03 aa01 	vstr	s20, [r3, #-4]
 800ae84:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ae88:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ae8c:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ae90:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ae94:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ae98:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ae9c:	ee34 4a43 	vsub.f32	s8, s8, s6
 800aea0:	ed52 6a03 	vldr	s13, [r2, #-12]
 800aea4:	ed12 3a04 	vldr	s6, [r2, #-16]
 800aea8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800aeac:	ee27 8a26 	vmul.f32	s16, s14, s13
 800aeb0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800aeb4:	ee23 2a83 	vmul.f32	s4, s7, s6
 800aeb8:	ee64 4a83 	vmul.f32	s9, s9, s6
 800aebc:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800aec0:	ee27 7a03 	vmul.f32	s14, s14, s6
 800aec4:	ee64 6a26 	vmul.f32	s13, s8, s13
 800aec8:	ee24 4a03 	vmul.f32	s8, s8, s6
 800aecc:	ee37 7a63 	vsub.f32	s14, s14, s7
 800aed0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aed4:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800aed8:	ee32 3a08 	vadd.f32	s6, s4, s16
 800aedc:	ed05 7a03 	vstr	s14, [r5, #-12]
 800aee0:	ed05 3a04 	vstr	s6, [r5, #-16]
 800aee4:	ed04 4a04 	vstr	s8, [r4, #-16]
 800aee8:	ed44 6a03 	vstr	s13, [r4, #-12]
 800aeec:	ed12 7a01 	vldr	s14, [r2, #-4]
 800aef0:	ee76 6a41 	vsub.f32	s13, s12, s2
 800aef4:	ee35 5a40 	vsub.f32	s10, s10, s0
 800aef8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800aefc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800af00:	ed52 5a02 	vldr	s11, [r2, #-8]
 800af04:	ee67 3a87 	vmul.f32	s7, s15, s14
 800af08:	ee66 4a87 	vmul.f32	s9, s13, s14
 800af0c:	ee25 4a25 	vmul.f32	s8, s10, s11
 800af10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800af14:	ee25 5a07 	vmul.f32	s10, s10, s14
 800af18:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800af1c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800af20:	ee26 6a25 	vmul.f32	s12, s12, s11
 800af24:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800af28:	ee74 5a23 	vadd.f32	s11, s8, s7
 800af2c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800af30:	ee37 7a26 	vadd.f32	s14, s14, s13
 800af34:	3310      	adds	r3, #16
 800af36:	4563      	cmp	r3, ip
 800af38:	ed45 5a02 	vstr	s11, [r5, #-8]
 800af3c:	f106 0610 	add.w	r6, r6, #16
 800af40:	ed45 7a01 	vstr	s15, [r5, #-4]
 800af44:	f102 0210 	add.w	r2, r2, #16
 800af48:	ed04 6a02 	vstr	s12, [r4, #-8]
 800af4c:	ed04 7a01 	vstr	s14, [r4, #-4]
 800af50:	f105 0510 	add.w	r5, r5, #16
 800af54:	f104 0410 	add.w	r4, r4, #16
 800af58:	f47f af5c 	bne.w	800ae14 <arm_cfft_radix8by2_f32+0x38>
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	b28c      	uxth	r4, r1
 800af60:	4621      	mov	r1, r4
 800af62:	2302      	movs	r3, #2
 800af64:	f000 fc66 	bl	800b834 <arm_radix8_butterfly_f32>
 800af68:	ecbd 8b08 	vpop	{d8-d11}
 800af6c:	4621      	mov	r1, r4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	4640      	mov	r0, r8
 800af72:	2302      	movs	r3, #2
 800af74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af78:	f000 bc5c 	b.w	800b834 <arm_radix8_butterfly_f32>

0800af7c <arm_cfft_radix8by4_f32>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	ed2d 8b0a 	vpush	{d8-d12}
 800af84:	b08d      	sub	sp, #52	@ 0x34
 800af86:	460d      	mov	r5, r1
 800af88:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af8a:	8801      	ldrh	r1, [r0, #0]
 800af8c:	6842      	ldr	r2, [r0, #4]
 800af8e:	900a      	str	r0, [sp, #40]	@ 0x28
 800af90:	0849      	lsrs	r1, r1, #1
 800af92:	008b      	lsls	r3, r1, #2
 800af94:	18ee      	adds	r6, r5, r3
 800af96:	18f0      	adds	r0, r6, r3
 800af98:	edd0 5a00 	vldr	s11, [r0]
 800af9c:	edd5 7a00 	vldr	s15, [r5]
 800afa0:	ed96 7a00 	vldr	s14, [r6]
 800afa4:	edd0 3a01 	vldr	s7, [r0, #4]
 800afa8:	ed96 4a01 	vldr	s8, [r6, #4]
 800afac:	ed95 5a01 	vldr	s10, [r5, #4]
 800afb0:	9008      	str	r0, [sp, #32]
 800afb2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800afb6:	18c7      	adds	r7, r0, r3
 800afb8:	edd7 4a00 	vldr	s9, [r7]
 800afbc:	ed97 3a01 	vldr	s6, [r7, #4]
 800afc0:	9701      	str	r7, [sp, #4]
 800afc2:	ee77 6a06 	vadd.f32	s13, s14, s12
 800afc6:	462c      	mov	r4, r5
 800afc8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800afcc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800afd0:	ee16 ca90 	vmov	ip, s13
 800afd4:	f844 cb08 	str.w	ip, [r4], #8
 800afd8:	ee75 6a23 	vadd.f32	s13, s10, s7
 800afdc:	edd6 5a01 	vldr	s11, [r6, #4]
 800afe0:	edd7 2a01 	vldr	s5, [r7, #4]
 800afe4:	9404      	str	r4, [sp, #16]
 800afe6:	ee35 5a63 	vsub.f32	s10, s10, s7
 800afea:	ee74 3a27 	vadd.f32	s7, s8, s15
 800afee:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aff2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aff6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800affa:	0849      	lsrs	r1, r1, #1
 800affc:	f102 0e08 	add.w	lr, r2, #8
 800b000:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b004:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b008:	9109      	str	r1, [sp, #36]	@ 0x24
 800b00a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b00e:	f1a1 0902 	sub.w	r9, r1, #2
 800b012:	f8cd e00c 	str.w	lr, [sp, #12]
 800b016:	4631      	mov	r1, r6
 800b018:	ee13 ea90 	vmov	lr, s7
 800b01c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b020:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b024:	4604      	mov	r4, r0
 800b026:	edc5 5a01 	vstr	s11, [r5, #4]
 800b02a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b02e:	f841 eb08 	str.w	lr, [r1], #8
 800b032:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b036:	ee16 ea10 	vmov	lr, s12
 800b03a:	ed86 5a01 	vstr	s10, [r6, #4]
 800b03e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b042:	f844 eb08 	str.w	lr, [r4], #8
 800b046:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b04a:	edc0 6a01 	vstr	s13, [r0, #4]
 800b04e:	9405      	str	r4, [sp, #20]
 800b050:	4604      	mov	r4, r0
 800b052:	ee17 0a90 	vmov	r0, s15
 800b056:	9106      	str	r1, [sp, #24]
 800b058:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b05c:	f102 0110 	add.w	r1, r2, #16
 800b060:	46bc      	mov	ip, r7
 800b062:	9100      	str	r1, [sp, #0]
 800b064:	f847 0b08 	str.w	r0, [r7], #8
 800b068:	f102 0118 	add.w	r1, r2, #24
 800b06c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b070:	9102      	str	r1, [sp, #8]
 800b072:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b076:	9007      	str	r0, [sp, #28]
 800b078:	f000 8134 	beq.w	800b2e4 <arm_cfft_radix8by4_f32+0x368>
 800b07c:	f102 0920 	add.w	r9, r2, #32
 800b080:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800b084:	9a01      	ldr	r2, [sp, #4]
 800b086:	f8dd a000 	ldr.w	sl, [sp]
 800b08a:	3b0c      	subs	r3, #12
 800b08c:	4683      	mov	fp, r0
 800b08e:	4463      	add	r3, ip
 800b090:	f105 0e10 	add.w	lr, r5, #16
 800b094:	f1a4 010c 	sub.w	r1, r4, #12
 800b098:	f104 0510 	add.w	r5, r4, #16
 800b09c:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b0a0:	f1a2 040c 	sub.w	r4, r2, #12
 800b0a4:	f106 0010 	add.w	r0, r6, #16
 800b0a8:	3210      	adds	r2, #16
 800b0aa:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b0ae:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b0b2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b0b6:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b0ba:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b0be:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b0c2:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b0c6:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b0ca:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b0ce:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b0d2:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b0d6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b0da:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b0de:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b0e2:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b0e6:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b0ea:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b0ee:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b0f2:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b0f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b0fa:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b0fe:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b102:	ed94 7a02 	vldr	s14, [r4, #8]
 800b106:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b10a:	ed91 ba02 	vldr	s22, [r1, #8]
 800b10e:	edd3 9a02 	vldr	s19, [r3, #8]
 800b112:	edd4 2a01 	vldr	s5, [r4, #4]
 800b116:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b11a:	ed93 5a01 	vldr	s10, [r3, #4]
 800b11e:	edd1 0a01 	vldr	s1, [r1, #4]
 800b122:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b126:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b12a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b12e:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b132:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b136:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b13a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b13e:	ed91 7a01 	vldr	s14, [r1, #4]
 800b142:	edd3 8a01 	vldr	s17, [r3, #4]
 800b146:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b14a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b14e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b152:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b156:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b15a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b15e:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b162:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b166:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b16a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b16e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b172:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b176:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b17a:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b17e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b182:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b186:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b18a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b18e:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b192:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b196:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b19a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b19e:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b1a2:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b1a6:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b1aa:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b1ae:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b1b2:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b1b6:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b1ba:	edc1 8a01 	vstr	s17, [r1, #4]
 800b1be:	ed81 aa02 	vstr	s20, [r1, #8]
 800b1c2:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b1c6:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b1ca:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b1ce:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b1d2:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b1d6:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b1da:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b1de:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b1e2:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b1e6:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b1ea:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b1ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b1f2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b1f6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b1fa:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b1fe:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b202:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b206:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b20a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b20e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b212:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b216:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b21a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b21e:	ed84 7a01 	vstr	s14, [r4, #4]
 800b222:	ed84 4a02 	vstr	s8, [r4, #8]
 800b226:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b22a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b22e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b232:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b236:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b23a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b23e:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b242:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b246:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b24a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b24e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b252:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b256:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b25a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b25e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b262:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b266:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b26a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b26e:	f1bb 0b01 	subs.w	fp, fp, #1
 800b272:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b276:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b27a:	f10e 0e08 	add.w	lr, lr, #8
 800b27e:	ed83 3a02 	vstr	s6, [r3, #8]
 800b282:	ed83 7a01 	vstr	s14, [r3, #4]
 800b286:	f1ac 0c08 	sub.w	ip, ip, #8
 800b28a:	f10a 0a08 	add.w	sl, sl, #8
 800b28e:	f100 0008 	add.w	r0, r0, #8
 800b292:	f1a1 0108 	sub.w	r1, r1, #8
 800b296:	f109 0910 	add.w	r9, r9, #16
 800b29a:	f105 0508 	add.w	r5, r5, #8
 800b29e:	f1a4 0408 	sub.w	r4, r4, #8
 800b2a2:	f108 0818 	add.w	r8, r8, #24
 800b2a6:	f102 0208 	add.w	r2, r2, #8
 800b2aa:	f1a3 0308 	sub.w	r3, r3, #8
 800b2ae:	f47f aefc 	bne.w	800b0aa <arm_cfft_radix8by4_f32+0x12e>
 800b2b2:	9907      	ldr	r1, [sp, #28]
 800b2b4:	9800      	ldr	r0, [sp, #0]
 800b2b6:	00cb      	lsls	r3, r1, #3
 800b2b8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b2bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b2c0:	9100      	str	r1, [sp, #0]
 800b2c2:	9904      	ldr	r1, [sp, #16]
 800b2c4:	4419      	add	r1, r3
 800b2c6:	9104      	str	r1, [sp, #16]
 800b2c8:	9903      	ldr	r1, [sp, #12]
 800b2ca:	4419      	add	r1, r3
 800b2cc:	9103      	str	r1, [sp, #12]
 800b2ce:	9906      	ldr	r1, [sp, #24]
 800b2d0:	4419      	add	r1, r3
 800b2d2:	9106      	str	r1, [sp, #24]
 800b2d4:	9905      	ldr	r1, [sp, #20]
 800b2d6:	441f      	add	r7, r3
 800b2d8:	4419      	add	r1, r3
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	9105      	str	r1, [sp, #20]
 800b2de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2e2:	9302      	str	r3, [sp, #8]
 800b2e4:	9904      	ldr	r1, [sp, #16]
 800b2e6:	9805      	ldr	r0, [sp, #20]
 800b2e8:	ed91 4a00 	vldr	s8, [r1]
 800b2ec:	edd0 6a00 	vldr	s13, [r0]
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	ed97 3a00 	vldr	s6, [r7]
 800b2f6:	edd3 7a00 	vldr	s15, [r3]
 800b2fa:	edd0 4a01 	vldr	s9, [r0, #4]
 800b2fe:	edd1 3a01 	vldr	s7, [r1, #4]
 800b302:	ed97 2a01 	vldr	s4, [r7, #4]
 800b306:	ed93 7a01 	vldr	s14, [r3, #4]
 800b30a:	9a03      	ldr	r2, [sp, #12]
 800b30c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b310:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b314:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b318:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b31c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b320:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b324:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b328:	ed81 5a00 	vstr	s10, [r1]
 800b32c:	ed93 5a01 	vldr	s10, [r3, #4]
 800b330:	edd7 4a01 	vldr	s9, [r7, #4]
 800b334:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b338:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b33c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b340:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b344:	ed81 5a01 	vstr	s10, [r1, #4]
 800b348:	edd2 1a00 	vldr	s3, [r2]
 800b34c:	edd2 2a01 	vldr	s5, [r2, #4]
 800b350:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b354:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b358:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b35c:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b360:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b364:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b368:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b36c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b370:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b374:	edc3 2a00 	vstr	s5, [r3]
 800b378:	ed83 5a01 	vstr	s10, [r3, #4]
 800b37c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b380:	9b00      	ldr	r3, [sp, #0]
 800b382:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b386:	ed93 4a01 	vldr	s8, [r3, #4]
 800b38a:	ed93 5a00 	vldr	s10, [r3]
 800b38e:	9b02      	ldr	r3, [sp, #8]
 800b390:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b394:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b398:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b39c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b3a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b3a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b3a8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b3ac:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b3b0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b3b4:	ed80 6a01 	vstr	s12, [r0, #4]
 800b3b8:	edc0 5a00 	vstr	s11, [r0]
 800b3bc:	edd3 5a01 	vldr	s11, [r3, #4]
 800b3c0:	edd3 6a00 	vldr	s13, [r3]
 800b3c4:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b3c8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b3cc:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b3d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b3d4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b3d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b3dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b3e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b3e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800b3e8:	edc7 7a00 	vstr	s15, [r7]
 800b3ec:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	686a      	ldr	r2, [r5, #4]
 800b3f4:	2304      	movs	r3, #4
 800b3f6:	f000 fa1d 	bl	800b834 <arm_radix8_butterfly_f32>
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	686a      	ldr	r2, [r5, #4]
 800b400:	2304      	movs	r3, #4
 800b402:	f000 fa17 	bl	800b834 <arm_radix8_butterfly_f32>
 800b406:	9808      	ldr	r0, [sp, #32]
 800b408:	686a      	ldr	r2, [r5, #4]
 800b40a:	4621      	mov	r1, r4
 800b40c:	2304      	movs	r3, #4
 800b40e:	f000 fa11 	bl	800b834 <arm_radix8_butterfly_f32>
 800b412:	686a      	ldr	r2, [r5, #4]
 800b414:	9801      	ldr	r0, [sp, #4]
 800b416:	4621      	mov	r1, r4
 800b418:	2304      	movs	r3, #4
 800b41a:	b00d      	add	sp, #52	@ 0x34
 800b41c:	ecbd 8b0a 	vpop	{d8-d12}
 800b420:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	f000 ba06 	b.w	800b834 <arm_radix8_butterfly_f32>

0800b428 <arm_cfft_f32>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	2a01      	cmp	r2, #1
 800b42e:	4606      	mov	r6, r0
 800b430:	4617      	mov	r7, r2
 800b432:	460c      	mov	r4, r1
 800b434:	4698      	mov	r8, r3
 800b436:	8805      	ldrh	r5, [r0, #0]
 800b438:	d056      	beq.n	800b4e8 <arm_cfft_f32+0xc0>
 800b43a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b43e:	d063      	beq.n	800b508 <arm_cfft_f32+0xe0>
 800b440:	d916      	bls.n	800b470 <arm_cfft_f32+0x48>
 800b442:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b446:	d01a      	beq.n	800b47e <arm_cfft_f32+0x56>
 800b448:	d947      	bls.n	800b4da <arm_cfft_f32+0xb2>
 800b44a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b44e:	d05b      	beq.n	800b508 <arm_cfft_f32+0xe0>
 800b450:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b454:	d105      	bne.n	800b462 <arm_cfft_f32+0x3a>
 800b456:	2301      	movs	r3, #1
 800b458:	6872      	ldr	r2, [r6, #4]
 800b45a:	4629      	mov	r1, r5
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 f9e9 	bl	800b834 <arm_radix8_butterfly_f32>
 800b462:	f1b8 0f00 	cmp.w	r8, #0
 800b466:	d111      	bne.n	800b48c <arm_cfft_f32+0x64>
 800b468:	2f01      	cmp	r7, #1
 800b46a:	d016      	beq.n	800b49a <arm_cfft_f32+0x72>
 800b46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b470:	2d20      	cmp	r5, #32
 800b472:	d049      	beq.n	800b508 <arm_cfft_f32+0xe0>
 800b474:	d935      	bls.n	800b4e2 <arm_cfft_f32+0xba>
 800b476:	2d40      	cmp	r5, #64	@ 0x40
 800b478:	d0ed      	beq.n	800b456 <arm_cfft_f32+0x2e>
 800b47a:	2d80      	cmp	r5, #128	@ 0x80
 800b47c:	d1f1      	bne.n	800b462 <arm_cfft_f32+0x3a>
 800b47e:	4621      	mov	r1, r4
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff fcab 	bl	800addc <arm_cfft_radix8by2_f32>
 800b486:	f1b8 0f00 	cmp.w	r8, #0
 800b48a:	d0ed      	beq.n	800b468 <arm_cfft_f32+0x40>
 800b48c:	68b2      	ldr	r2, [r6, #8]
 800b48e:	89b1      	ldrh	r1, [r6, #12]
 800b490:	4620      	mov	r0, r4
 800b492:	f000 f841 	bl	800b518 <arm_bitreversal_32>
 800b496:	2f01      	cmp	r7, #1
 800b498:	d1e8      	bne.n	800b46c <arm_cfft_f32+0x44>
 800b49a:	ee07 5a90 	vmov	s15, r5
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b4aa:	2d00      	cmp	r5, #0
 800b4ac:	d0de      	beq.n	800b46c <arm_cfft_f32+0x44>
 800b4ae:	f104 0108 	add.w	r1, r4, #8
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	429d      	cmp	r5, r3
 800b4b8:	f101 0108 	add.w	r1, r1, #8
 800b4bc:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b4c0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b4c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b4c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b4cc:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b4d0:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b4d4:	d1ee      	bne.n	800b4b4 <arm_cfft_f32+0x8c>
 800b4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4da:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b4de:	d0ba      	beq.n	800b456 <arm_cfft_f32+0x2e>
 800b4e0:	e7bf      	b.n	800b462 <arm_cfft_f32+0x3a>
 800b4e2:	2d10      	cmp	r5, #16
 800b4e4:	d0cb      	beq.n	800b47e <arm_cfft_f32+0x56>
 800b4e6:	e7bc      	b.n	800b462 <arm_cfft_f32+0x3a>
 800b4e8:	b19d      	cbz	r5, 800b512 <arm_cfft_f32+0xea>
 800b4ea:	f101 030c 	add.w	r3, r1, #12
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b4f4:	3201      	adds	r2, #1
 800b4f6:	eef1 7a67 	vneg.f32	s15, s15
 800b4fa:	4295      	cmp	r5, r2
 800b4fc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b500:	f103 0308 	add.w	r3, r3, #8
 800b504:	d1f4      	bne.n	800b4f0 <arm_cfft_f32+0xc8>
 800b506:	e798      	b.n	800b43a <arm_cfft_f32+0x12>
 800b508:	4621      	mov	r1, r4
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff fd36 	bl	800af7c <arm_cfft_radix8by4_f32>
 800b510:	e7a7      	b.n	800b462 <arm_cfft_f32+0x3a>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0aa      	beq.n	800b46c <arm_cfft_f32+0x44>
 800b516:	e7b9      	b.n	800b48c <arm_cfft_f32+0x64>

0800b518 <arm_bitreversal_32>:
 800b518:	b1e9      	cbz	r1, 800b556 <arm_bitreversal_32+0x3e>
 800b51a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51c:	2500      	movs	r5, #0
 800b51e:	f102 0e02 	add.w	lr, r2, #2
 800b522:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b526:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b52a:	08a4      	lsrs	r4, r4, #2
 800b52c:	089b      	lsrs	r3, r3, #2
 800b52e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b532:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b536:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b53a:	00a6      	lsls	r6, r4, #2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b542:	3304      	adds	r3, #4
 800b544:	1d34      	adds	r4, r6, #4
 800b546:	3502      	adds	r5, #2
 800b548:	58c6      	ldr	r6, [r0, r3]
 800b54a:	5907      	ldr	r7, [r0, r4]
 800b54c:	50c7      	str	r7, [r0, r3]
 800b54e:	428d      	cmp	r5, r1
 800b550:	5106      	str	r6, [r0, r4]
 800b552:	d3e6      	bcc.n	800b522 <arm_bitreversal_32+0xa>
 800b554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b556:	4770      	bx	lr

0800b558 <arm_cmplx_mag_f32>:
 800b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55c:	ed2d 8b02 	vpush	{d8}
 800b560:	0897      	lsrs	r7, r2, #2
 800b562:	b084      	sub	sp, #16
 800b564:	d077      	beq.n	800b656 <arm_cmplx_mag_f32+0xfe>
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	f100 0420 	add.w	r4, r0, #32
 800b56e:	f101 0510 	add.w	r5, r1, #16
 800b572:	463e      	mov	r6, r7
 800b574:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b578:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b57c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b580:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b584:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b588:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b590:	f2c0 80c5 	blt.w	800b71e <arm_cmplx_mag_f32+0x1c6>
 800b594:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b5a0:	f100 80cb 	bmi.w	800b73a <arm_cmplx_mag_f32+0x1e2>
 800b5a4:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b5a8:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b5ac:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b5b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b5b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b5b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c4:	f2c0 80a8 	blt.w	800b718 <arm_cmplx_mag_f32+0x1c0>
 800b5c8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b5d4:	f100 80a8 	bmi.w	800b728 <arm_cmplx_mag_f32+0x1d0>
 800b5d8:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b5dc:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b5e0:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b5e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b5e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b5ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f8:	f2c0 808b 	blt.w	800b712 <arm_cmplx_mag_f32+0x1ba>
 800b5fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b604:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b608:	f100 80a9 	bmi.w	800b75e <arm_cmplx_mag_f32+0x206>
 800b60c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b610:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b614:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b618:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b61c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b620:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b624:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62c:	db6e      	blt.n	800b70c <arm_cmplx_mag_f32+0x1b4>
 800b62e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b636:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b63a:	f100 8087 	bmi.w	800b74c <arm_cmplx_mag_f32+0x1f4>
 800b63e:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b642:	3e01      	subs	r6, #1
 800b644:	f104 0420 	add.w	r4, r4, #32
 800b648:	f105 0510 	add.w	r5, r5, #16
 800b64c:	d192      	bne.n	800b574 <arm_cmplx_mag_f32+0x1c>
 800b64e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b652:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b656:	f012 0203 	ands.w	r2, r2, #3
 800b65a:	d052      	beq.n	800b702 <arm_cmplx_mag_f32+0x1aa>
 800b65c:	ed90 0a00 	vldr	s0, [r0]
 800b660:	edd0 7a01 	vldr	s15, [r0, #4]
 800b664:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b668:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b66c:	2300      	movs	r3, #0
 800b66e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b672:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67a:	bfb8      	it	lt
 800b67c:	600b      	strlt	r3, [r1, #0]
 800b67e:	db08      	blt.n	800b692 <arm_cmplx_mag_f32+0x13a>
 800b680:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b68c:	d479      	bmi.n	800b782 <arm_cmplx_mag_f32+0x22a>
 800b68e:	ed81 8a00 	vstr	s16, [r1]
 800b692:	3a01      	subs	r2, #1
 800b694:	d035      	beq.n	800b702 <arm_cmplx_mag_f32+0x1aa>
 800b696:	ed90 0a02 	vldr	s0, [r0, #8]
 800b69a:	edd0 7a03 	vldr	s15, [r0, #12]
 800b69e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b6a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b6ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b4:	bfb8      	it	lt
 800b6b6:	604b      	strlt	r3, [r1, #4]
 800b6b8:	db08      	blt.n	800b6cc <arm_cmplx_mag_f32+0x174>
 800b6ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b6c6:	d453      	bmi.n	800b770 <arm_cmplx_mag_f32+0x218>
 800b6c8:	ed81 8a01 	vstr	s16, [r1, #4]
 800b6cc:	2a01      	cmp	r2, #1
 800b6ce:	d018      	beq.n	800b702 <arm_cmplx_mag_f32+0x1aa>
 800b6d0:	ed90 0a04 	vldr	s0, [r0, #16]
 800b6d4:	edd0 7a05 	vldr	s15, [r0, #20]
 800b6d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b6dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b6e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	db19      	blt.n	800b724 <arm_cmplx_mag_f32+0x1cc>
 800b6f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b6fc:	d44a      	bmi.n	800b794 <arm_cmplx_mag_f32+0x23c>
 800b6fe:	ed81 8a02 	vstr	s16, [r1, #8]
 800b702:	b004      	add	sp, #16
 800b704:	ecbd 8b02 	vpop	{d8}
 800b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70c:	f845 8c04 	str.w	r8, [r5, #-4]
 800b710:	e797      	b.n	800b642 <arm_cmplx_mag_f32+0xea>
 800b712:	f845 8c08 	str.w	r8, [r5, #-8]
 800b716:	e77b      	b.n	800b610 <arm_cmplx_mag_f32+0xb8>
 800b718:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b71c:	e75e      	b.n	800b5dc <arm_cmplx_mag_f32+0x84>
 800b71e:	f845 8c10 	str.w	r8, [r5, #-16]
 800b722:	e741      	b.n	800b5a8 <arm_cmplx_mag_f32+0x50>
 800b724:	608b      	str	r3, [r1, #8]
 800b726:	e7ec      	b.n	800b702 <arm_cmplx_mag_f32+0x1aa>
 800b728:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b72c:	9001      	str	r0, [sp, #4]
 800b72e:	f000 fbc3 	bl	800beb8 <sqrtf>
 800b732:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b736:	9801      	ldr	r0, [sp, #4]
 800b738:	e74e      	b.n	800b5d8 <arm_cmplx_mag_f32+0x80>
 800b73a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b73e:	9001      	str	r0, [sp, #4]
 800b740:	f000 fbba 	bl	800beb8 <sqrtf>
 800b744:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b748:	9801      	ldr	r0, [sp, #4]
 800b74a:	e72b      	b.n	800b5a4 <arm_cmplx_mag_f32+0x4c>
 800b74c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b750:	9001      	str	r0, [sp, #4]
 800b752:	f000 fbb1 	bl	800beb8 <sqrtf>
 800b756:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b75a:	9801      	ldr	r0, [sp, #4]
 800b75c:	e76f      	b.n	800b63e <arm_cmplx_mag_f32+0xe6>
 800b75e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b762:	9001      	str	r0, [sp, #4]
 800b764:	f000 fba8 	bl	800beb8 <sqrtf>
 800b768:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b76c:	9801      	ldr	r0, [sp, #4]
 800b76e:	e74d      	b.n	800b60c <arm_cmplx_mag_f32+0xb4>
 800b770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b774:	9201      	str	r2, [sp, #4]
 800b776:	f000 fb9f 	bl	800beb8 <sqrtf>
 800b77a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b77e:	9903      	ldr	r1, [sp, #12]
 800b780:	e7a2      	b.n	800b6c8 <arm_cmplx_mag_f32+0x170>
 800b782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b786:	9201      	str	r2, [sp, #4]
 800b788:	f000 fb96 	bl	800beb8 <sqrtf>
 800b78c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b790:	9903      	ldr	r1, [sp, #12]
 800b792:	e77c      	b.n	800b68e <arm_cmplx_mag_f32+0x136>
 800b794:	9101      	str	r1, [sp, #4]
 800b796:	f000 fb8f 	bl	800beb8 <sqrtf>
 800b79a:	9901      	ldr	r1, [sp, #4]
 800b79c:	e7af      	b.n	800b6fe <arm_cmplx_mag_f32+0x1a6>
 800b79e:	bf00      	nop

0800b7a0 <arm_cos_f32>:
 800b7a0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b828 <arm_cos_f32+0x88>
 800b7a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b7a8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b7ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b7b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b7bc:	d504      	bpl.n	800b7c8 <arm_cos_f32+0x28>
 800b7be:	ee17 3a90 	vmov	r3, s15
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	ee07 3a90 	vmov	s15, r3
 800b7c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7cc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800b82c <arm_cos_f32+0x8c>
 800b7d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b7d8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b7dc:	ee17 3a90 	vmov	r3, s15
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7e6:	d21a      	bcs.n	800b81e <arm_cos_f32+0x7e>
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	1c59      	adds	r1, r3, #1
 800b7f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7f6:	4a0e      	ldr	r2, [pc, #56]	@ (800b830 <arm_cos_f32+0x90>)
 800b7f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b7fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b800:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b804:	ed93 7a00 	vldr	s14, [r3]
 800b808:	edd2 6a00 	vldr	s13, [r2]
 800b80c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b810:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b814:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b818:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b81c:	4770      	bx	lr
 800b81e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b822:	2101      	movs	r1, #1
 800b824:	2300      	movs	r3, #0
 800b826:	e7e6      	b.n	800b7f6 <arm_cos_f32+0x56>
 800b828:	3e22f983 	.word	0x3e22f983
 800b82c:	44000000 	.word	0x44000000
 800b830:	0800c628 	.word	0x0800c628

0800b834 <arm_radix8_butterfly_f32>:
 800b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b838:	ed2d 8b10 	vpush	{d8-d15}
 800b83c:	b095      	sub	sp, #84	@ 0x54
 800b83e:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b842:	4603      	mov	r3, r0
 800b844:	3304      	adds	r3, #4
 800b846:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800bb2c <arm_radix8_butterfly_f32+0x2f8>
 800b84a:	9012      	str	r0, [sp, #72]	@ 0x48
 800b84c:	468b      	mov	fp, r1
 800b84e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b850:	4689      	mov	r9, r1
 800b852:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b858:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b85a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b85e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b862:	eb03 0508 	add.w	r5, r3, r8
 800b866:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b86a:	eb05 040e 	add.w	r4, r5, lr
 800b86e:	0137      	lsls	r7, r6, #4
 800b870:	eba6 030a 	sub.w	r3, r6, sl
 800b874:	eb04 000e 	add.w	r0, r4, lr
 800b878:	44b2      	add	sl, r6
 800b87a:	1d3a      	adds	r2, r7, #4
 800b87c:	9702      	str	r7, [sp, #8]
 800b87e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b882:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b886:	ebae 0c06 	sub.w	ip, lr, r6
 800b88a:	9703      	str	r7, [sp, #12]
 800b88c:	eb03 0708 	add.w	r7, r3, r8
 800b890:	9701      	str	r7, [sp, #4]
 800b892:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b896:	9706      	str	r7, [sp, #24]
 800b898:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b89a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b89e:	f10e 0104 	add.w	r1, lr, #4
 800b8a2:	4439      	add	r1, r7
 800b8a4:	443a      	add	r2, r7
 800b8a6:	0137      	lsls	r7, r6, #4
 800b8a8:	00f6      	lsls	r6, r6, #3
 800b8aa:	9704      	str	r7, [sp, #16]
 800b8ac:	9605      	str	r6, [sp, #20]
 800b8ae:	9f01      	ldr	r7, [sp, #4]
 800b8b0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b8b2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	edd4 6a00 	vldr	s13, [r4]
 800b8be:	edd7 1a00 	vldr	s3, [r7]
 800b8c2:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b8c6:	edd5 5a00 	vldr	s11, [r5]
 800b8ca:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b8ce:	ed90 6a00 	vldr	s12, [r0]
 800b8d2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b8d6:	ed93 3a00 	vldr	s6, [r3]
 800b8da:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b8de:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b8e2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b8e6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b8ea:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b8ee:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b8f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8f6:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b8fa:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b8fe:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b902:	ed85 4a00 	vstr	s8, [r5]
 800b906:	edd1 6a00 	vldr	s13, [r1]
 800b90a:	ed94 9a01 	vldr	s18, [r4, #4]
 800b90e:	edd3 2a01 	vldr	s5, [r3, #4]
 800b912:	edd7 8a01 	vldr	s17, [r7, #4]
 800b916:	edd6 0a00 	vldr	s1, [r6]
 800b91a:	edd5 3a01 	vldr	s7, [r5, #4]
 800b91e:	ed90 8a01 	vldr	s16, [r0, #4]
 800b922:	ed92 7a00 	vldr	s14, [r2]
 800b926:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b92a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b92e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b932:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b936:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b93a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b93e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b942:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b946:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b94a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b94e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b952:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b956:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b95a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b95e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b962:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b966:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b96a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b96e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b972:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b976:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b97a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b97e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b982:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b986:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b98a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b98e:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b992:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b996:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b99a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b99e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b9a2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b9a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b9aa:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b9ae:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b9b2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b9b6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b9ba:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b9be:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b9c2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b9c6:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b9ca:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b9ce:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b9d2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b9d6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b9da:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b9de:	44dc      	add	ip, fp
 800b9e0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b9e4:	45e1      	cmp	r9, ip
 800b9e6:	ed86 8a00 	vstr	s16, [r6]
 800b9ea:	ed85 2a01 	vstr	s4, [r5, #4]
 800b9ee:	4456      	add	r6, sl
 800b9f0:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b9f4:	4455      	add	r5, sl
 800b9f6:	edc0 6a00 	vstr	s13, [r0]
 800b9fa:	ed82 1a00 	vstr	s2, [r2]
 800b9fe:	ed80 5a01 	vstr	s10, [r0, #4]
 800ba02:	4452      	add	r2, sl
 800ba04:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ba08:	4450      	add	r0, sl
 800ba0a:	edc7 2a00 	vstr	s5, [r7]
 800ba0e:	edc4 4a00 	vstr	s9, [r4]
 800ba12:	ed83 7a00 	vstr	s14, [r3]
 800ba16:	edc1 5a00 	vstr	s11, [r1]
 800ba1a:	edc7 3a01 	vstr	s7, [r7, #4]
 800ba1e:	4451      	add	r1, sl
 800ba20:	ed84 6a01 	vstr	s12, [r4, #4]
 800ba24:	4457      	add	r7, sl
 800ba26:	edc3 7a01 	vstr	s15, [r3, #4]
 800ba2a:	4454      	add	r4, sl
 800ba2c:	4453      	add	r3, sl
 800ba2e:	f63f af44 	bhi.w	800b8ba <arm_radix8_butterfly_f32+0x86>
 800ba32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba34:	2b07      	cmp	r3, #7
 800ba36:	f240 81b7 	bls.w	800bda8 <arm_radix8_butterfly_f32+0x574>
 800ba3a:	9b06      	ldr	r3, [sp, #24]
 800ba3c:	9903      	ldr	r1, [sp, #12]
 800ba3e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ba40:	9e05      	ldr	r6, [sp, #20]
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	f103 0c08 	add.w	ip, r3, #8
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	3108      	adds	r1, #8
 800ba4c:	f108 0808 	add.w	r8, r8, #8
 800ba50:	1841      	adds	r1, r0, r1
 800ba52:	3608      	adds	r6, #8
 800ba54:	330c      	adds	r3, #12
 800ba56:	4604      	mov	r4, r0
 800ba58:	4444      	add	r4, r8
 800ba5a:	18c3      	adds	r3, r0, r3
 800ba5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba5e:	1981      	adds	r1, r0, r6
 800ba60:	f10e 0e08 	add.w	lr, lr, #8
 800ba64:	3208      	adds	r2, #8
 800ba66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba68:	9107      	str	r1, [sp, #28]
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	9304      	str	r3, [sp, #16]
 800ba70:	f100 030c 	add.w	r3, r0, #12
 800ba74:	4474      	add	r4, lr
 800ba76:	f04f 0801 	mov.w	r8, #1
 800ba7a:	1882      	adds	r2, r0, r2
 800ba7c:	4461      	add	r1, ip
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	464b      	mov	r3, r9
 800ba82:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba84:	46c1      	mov	r9, r8
 800ba86:	9208      	str	r2, [sp, #32]
 800ba88:	46d8      	mov	r8, fp
 800ba8a:	9106      	str	r1, [sp, #24]
 800ba8c:	f04f 0e00 	mov.w	lr, #0
 800ba90:	469b      	mov	fp, r3
 800ba92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba96:	449e      	add	lr, r3
 800ba98:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800ba9c:	441a      	add	r2, r3
 800ba9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800baa0:	441a      	add	r2, r3
 800baa2:	18d4      	adds	r4, r2, r3
 800baa4:	18e5      	adds	r5, r4, r3
 800baa6:	18ee      	adds	r6, r5, r3
 800baa8:	18f7      	adds	r7, r6, r3
 800baaa:	eb07 0c03 	add.w	ip, r7, r3
 800baae:	920d      	str	r2, [sp, #52]	@ 0x34
 800bab0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800bab4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800bab8:	910c      	str	r1, [sp, #48]	@ 0x30
 800baba:	4419      	add	r1, r3
 800babc:	9103      	str	r1, [sp, #12]
 800babe:	4419      	add	r1, r3
 800bac0:	18ca      	adds	r2, r1, r3
 800bac2:	9202      	str	r2, [sp, #8]
 800bac4:	441a      	add	r2, r3
 800bac6:	18d0      	adds	r0, r2, r3
 800bac8:	ed92 ea01 	vldr	s28, [r2, #4]
 800bacc:	9a02      	ldr	r2, [sp, #8]
 800bace:	edd4 7a00 	vldr	s15, [r4]
 800bad2:	edd2 da01 	vldr	s27, [r2, #4]
 800bad6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bad8:	ed91 da01 	vldr	s26, [r1, #4]
 800badc:	ed92 ca01 	vldr	s24, [r2, #4]
 800bae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bae2:	9903      	ldr	r1, [sp, #12]
 800bae4:	edcd 7a03 	vstr	s15, [sp, #12]
 800bae8:	edd2 7a00 	vldr	s15, [r2]
 800baec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baee:	edcd 7a02 	vstr	s15, [sp, #8]
 800baf2:	edd2 7a00 	vldr	s15, [r2]
 800baf6:	edd0 ea01 	vldr	s29, [r0, #4]
 800bafa:	edd1 ca01 	vldr	s25, [r1, #4]
 800bafe:	eddc ba00 	vldr	s23, [ip]
 800bb02:	edd7 aa00 	vldr	s21, [r7]
 800bb06:	ed96 aa00 	vldr	s20, [r6]
 800bb0a:	edd5 9a00 	vldr	s19, [r5]
 800bb0e:	edcd 7a01 	vstr	s15, [sp, #4]
 800bb12:	4403      	add	r3, r0
 800bb14:	ed93 fa01 	vldr	s30, [r3, #4]
 800bb18:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800bb1c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800bb20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800bb28:	46cc      	mov	ip, r9
 800bb2a:	e001      	b.n	800bb30 <arm_radix8_butterfly_f32+0x2fc>
 800bb2c:	3f3504f3 	.word	0x3f3504f3
 800bb30:	ed91 6a00 	vldr	s12, [r1]
 800bb34:	ed93 5a00 	vldr	s10, [r3]
 800bb38:	edd0 fa00 	vldr	s31, [r0]
 800bb3c:	edd4 7a00 	vldr	s15, [r4]
 800bb40:	ed95 7a00 	vldr	s14, [r5]
 800bb44:	ed56 3a01 	vldr	s7, [r6, #-4]
 800bb48:	ed17 3a01 	vldr	s6, [r7, #-4]
 800bb4c:	ed92 2a00 	vldr	s4, [r2]
 800bb50:	ed96 0a00 	vldr	s0, [r6]
 800bb54:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bb58:	ee32 1a06 	vadd.f32	s2, s4, s12
 800bb5c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800bb60:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bb64:	ee78 1a04 	vadd.f32	s3, s16, s8
 800bb68:	ee71 6a24 	vadd.f32	s13, s2, s9
 800bb6c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800bb70:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800bb74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb78:	ed06 6a01 	vstr	s12, [r6, #-4]
 800bb7c:	edd4 8a01 	vldr	s17, [r4, #4]
 800bb80:	ed92 9a01 	vldr	s18, [r2, #4]
 800bb84:	edd7 0a00 	vldr	s1, [r7]
 800bb88:	edd1 2a01 	vldr	s5, [r1, #4]
 800bb8c:	ed95 7a01 	vldr	s14, [r5, #4]
 800bb90:	ed93 6a01 	vldr	s12, [r3, #4]
 800bb94:	edd0 5a01 	vldr	s11, [r0, #4]
 800bb98:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800bb9c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800bba0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800bba4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800bba8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800bbac:	ee38 7a87 	vadd.f32	s14, s17, s14
 800bbb0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800bbb4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800bbb8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800bbbc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800bbc0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800bbc4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800bbc8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800bbcc:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800bbd0:	ee32 1a08 	vadd.f32	s2, s4, s16
 800bbd4:	ee72 fa87 	vadd.f32	s31, s5, s14
 800bbd8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800bbdc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800bbe0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800bbe4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800bbe8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800bbec:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800bbf0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800bbf4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800bbf8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bbfc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800bc00:	ee74 0a22 	vadd.f32	s1, s8, s5
 800bc04:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bc08:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bc0c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bc10:	ee32 4a64 	vsub.f32	s8, s4, s9
 800bc14:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bc18:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bc1c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bc20:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800bc24:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bc28:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bc2c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bc30:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800bc34:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800bc38:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bc3c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bc40:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bc44:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bc48:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800bc4c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800bc50:	eddd 1a02 	vldr	s3, [sp, #8]
 800bc54:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bc58:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bc5c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bc60:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bc64:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bc68:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bc6c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bc70:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bc74:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bc78:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bc7c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bc80:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bc84:	ee22 7a07 	vmul.f32	s14, s4, s14
 800bc88:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bc8c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bc90:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bc94:	ee31 1a09 	vadd.f32	s2, s2, s18
 800bc98:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bc9c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bca0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bca4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bca8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bcac:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bcb0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bcb4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bcb8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bcbc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bcc0:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bcc4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bcc8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bccc:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bcd0:	eddd 5a03 	vldr	s11, [sp, #12]
 800bcd4:	edc6 fa00 	vstr	s31, [r6]
 800bcd8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bcdc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bce0:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bce4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bce8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bcec:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bcf0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bcf4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bcf8:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bcfc:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bd00:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bd04:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bd08:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bd0c:	44c4      	add	ip, r8
 800bd0e:	45e3      	cmp	fp, ip
 800bd10:	edc3 3a00 	vstr	s7, [r3]
 800bd14:	edc3 6a01 	vstr	s13, [r3, #4]
 800bd18:	4456      	add	r6, sl
 800bd1a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bd1e:	edc7 0a00 	vstr	s1, [r7]
 800bd22:	4453      	add	r3, sl
 800bd24:	ed80 2a00 	vstr	s4, [r0]
 800bd28:	edc0 2a01 	vstr	s5, [r0, #4]
 800bd2c:	4457      	add	r7, sl
 800bd2e:	edc2 1a00 	vstr	s3, [r2]
 800bd32:	ed82 7a01 	vstr	s14, [r2, #4]
 800bd36:	4450      	add	r0, sl
 800bd38:	ed85 8a00 	vstr	s16, [r5]
 800bd3c:	ed85 0a01 	vstr	s0, [r5, #4]
 800bd40:	4452      	add	r2, sl
 800bd42:	edc1 4a00 	vstr	s9, [r1]
 800bd46:	4455      	add	r5, sl
 800bd48:	ed81 3a01 	vstr	s6, [r1, #4]
 800bd4c:	edc4 8a00 	vstr	s17, [r4]
 800bd50:	ed84 6a01 	vstr	s12, [r4, #4]
 800bd54:	4451      	add	r1, sl
 800bd56:	4454      	add	r4, sl
 800bd58:	f63f aeea 	bhi.w	800bb30 <arm_radix8_butterfly_f32+0x2fc>
 800bd5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd5e:	3308      	adds	r3, #8
 800bd60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd64:	3308      	adds	r3, #8
 800bd66:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6e:	9b08      	ldr	r3, [sp, #32]
 800bd70:	3308      	adds	r3, #8
 800bd72:	9308      	str	r3, [sp, #32]
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	3308      	adds	r3, #8
 800bd78:	9307      	str	r3, [sp, #28]
 800bd7a:	9b06      	ldr	r3, [sp, #24]
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	9306      	str	r3, [sp, #24]
 800bd80:	9b05      	ldr	r3, [sp, #20]
 800bd82:	3308      	adds	r3, #8
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	9b04      	ldr	r3, [sp, #16]
 800bd88:	3308      	adds	r3, #8
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd8e:	f109 0901 	add.w	r9, r9, #1
 800bd92:	454b      	cmp	r3, r9
 800bd94:	f47f ae7d 	bne.w	800ba92 <arm_radix8_butterfly_f32+0x25e>
 800bd98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	46d9      	mov	r9, fp
 800bda0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bda2:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800bda6:	e554      	b.n	800b852 <arm_radix8_butterfly_f32+0x1e>
 800bda8:	b015      	add	sp, #84	@ 0x54
 800bdaa:	ecbd 8b10 	vpop	{d8-d15}
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	bf00      	nop

0800bdb4 <_ZdlPvj>:
 800bdb4:	f000 b875 	b.w	800bea2 <_ZdlPv>

0800bdb8 <_Znwj>:
 800bdb8:	2801      	cmp	r0, #1
 800bdba:	bf38      	it	cc
 800bdbc:	2001      	movcc	r0, #1
 800bdbe:	b510      	push	{r4, lr}
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 f8a0 	bl	800bf08 <malloc>
 800bdc8:	b100      	cbz	r0, 800bdcc <_Znwj+0x14>
 800bdca:	bd10      	pop	{r4, pc}
 800bdcc:	f000 f86c 	bl	800bea8 <_ZSt15get_new_handlerv>
 800bdd0:	b908      	cbnz	r0, 800bdd6 <_Znwj+0x1e>
 800bdd2:	f000 f892 	bl	800befa <abort>
 800bdd6:	4780      	blx	r0
 800bdd8:	e7f3      	b.n	800bdc2 <_Znwj+0xa>

0800bdda <_ZNSaIcEC1Ev>:
 800bdda:	4770      	bx	lr

0800bddc <_ZNSaIcED1Ev>:
 800bddc:	4770      	bx	lr

0800bdde <_ZSt17__throw_bad_allocv>:
 800bdde:	b508      	push	{r3, lr}
 800bde0:	f000 f88b 	bl	800befa <abort>

0800bde4 <_ZSt20__throw_length_errorPKc>:
 800bde4:	b508      	push	{r3, lr}
 800bde6:	f000 f888 	bl	800befa <abort>

0800bdea <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800bdea:	b10a      	cbz	r2, 800bdf0 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800bdec:	f000 b94a 	b.w	800c084 <memcmp>
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4770      	bx	lr

0800bdf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800bdf4:	6001      	str	r1, [r0, #0]
 800bdf6:	4770      	bx	lr

0800bdf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800bdf8:	6800      	ldr	r0, [r0, #0]
 800bdfa:	4770      	bx	lr

0800bdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800bdfc:	3008      	adds	r0, #8
 800bdfe:	4770      	bx	lr

0800be00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800be00:	6081      	str	r1, [r0, #8]
 800be02:	4770      	bx	lr

0800be04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800be04:	6803      	ldr	r3, [r0, #0]
 800be06:	6041      	str	r1, [r0, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	545a      	strb	r2, [r3, r1]
 800be0c:	4770      	bx	lr

0800be0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800be0e:	f850 3b08 	ldr.w	r3, [r0], #8
 800be12:	1a1b      	subs	r3, r3, r0
 800be14:	4258      	negs	r0, r3
 800be16:	4158      	adcs	r0, r3
 800be18:	4770      	bx	lr
	...

0800be1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800be1c:	b508      	push	{r3, lr}
 800be1e:	680b      	ldr	r3, [r1, #0]
 800be20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be24:	d302      	bcc.n	800be2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800be26:	480d      	ldr	r0, [pc, #52]	@ (800be5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800be28:	f7ff ffdc 	bl	800bde4 <_ZSt20__throw_length_errorPKc>
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d90b      	bls.n	800be48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800be30:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800be34:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800be38:	d206      	bcs.n	800be48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800be3a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800be3e:	bf2a      	itet	cs
 800be40:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800be44:	6008      	strcc	r0, [r1, #0]
 800be46:	600b      	strcs	r3, [r1, #0]
 800be48:	6808      	ldr	r0, [r1, #0]
 800be4a:	3001      	adds	r0, #1
 800be4c:	d501      	bpl.n	800be52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800be4e:	f7ff ffc6 	bl	800bdde <_ZSt17__throw_bad_allocv>
 800be52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be56:	f7ff bfaf 	b.w	800bdb8 <_Znwj>
 800be5a:	bf00      	nop
 800be5c:	0800ee2c 	.word	0x0800ee2c

0800be60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800be60:	b510      	push	{r4, lr}
 800be62:	4604      	mov	r4, r0
 800be64:	f7ff ffd3 	bl	800be0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800be68:	b920      	cbnz	r0, 800be74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be70:	f000 b817 	b.w	800bea2 <_ZdlPv>
 800be74:	bd10      	pop	{r4, pc}

0800be76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800be76:	b510      	push	{r4, lr}
 800be78:	4604      	mov	r4, r0
 800be7a:	f7ff fff1 	bl	800be60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800be7e:	4620      	mov	r0, r4
 800be80:	bd10      	pop	{r4, pc}

0800be82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800be82:	b538      	push	{r3, r4, r5, lr}
 800be84:	6845      	ldr	r5, [r0, #4]
 800be86:	684c      	ldr	r4, [r1, #4]
 800be88:	6800      	ldr	r0, [r0, #0]
 800be8a:	6809      	ldr	r1, [r1, #0]
 800be8c:	42a5      	cmp	r5, r4
 800be8e:	462a      	mov	r2, r5
 800be90:	bf28      	it	cs
 800be92:	4622      	movcs	r2, r4
 800be94:	f7ff ffa9 	bl	800bdea <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800be98:	b900      	cbnz	r0, 800be9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800be9a:	1b28      	subs	r0, r5, r4
 800be9c:	bd38      	pop	{r3, r4, r5, pc}

0800be9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800be9e:	6001      	str	r1, [r0, #0]
 800bea0:	4770      	bx	lr

0800bea2 <_ZdlPv>:
 800bea2:	f000 b839 	b.w	800bf18 <free>
	...

0800bea8 <_ZSt15get_new_handlerv>:
 800bea8:	4b02      	ldr	r3, [pc, #8]	@ (800beb4 <_ZSt15get_new_handlerv+0xc>)
 800beaa:	6818      	ldr	r0, [r3, #0]
 800beac:	f3bf 8f5b 	dmb	ish
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20001f18 	.word	0x20001f18

0800beb8 <sqrtf>:
 800beb8:	b508      	push	{r3, lr}
 800beba:	ed2d 8b02 	vpush	{d8}
 800bebe:	eeb0 8a40 	vmov.f32	s16, s0
 800bec2:	f000 f817 	bl	800bef4 <__ieee754_sqrtf>
 800bec6:	eeb4 8a48 	vcmp.f32	s16, s16
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	d60c      	bvs.n	800beea <sqrtf+0x32>
 800bed0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bef0 <sqrtf+0x38>
 800bed4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	d505      	bpl.n	800beea <sqrtf+0x32>
 800bede:	f000 f93d 	bl	800c15c <__errno>
 800bee2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bee6:	2321      	movs	r3, #33	@ 0x21
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	ecbd 8b02 	vpop	{d8}
 800beee:	bd08      	pop	{r3, pc}
 800bef0:	00000000 	.word	0x00000000

0800bef4 <__ieee754_sqrtf>:
 800bef4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bef8:	4770      	bx	lr

0800befa <abort>:
 800befa:	b508      	push	{r3, lr}
 800befc:	2006      	movs	r0, #6
 800befe:	f000 f901 	bl	800c104 <raise>
 800bf02:	2001      	movs	r0, #1
 800bf04:	f7f6 fe54 	bl	8002bb0 <_exit>

0800bf08 <malloc>:
 800bf08:	4b02      	ldr	r3, [pc, #8]	@ (800bf14 <malloc+0xc>)
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	6818      	ldr	r0, [r3, #0]
 800bf0e:	f000 b82d 	b.w	800bf6c <_malloc_r>
 800bf12:	bf00      	nop
 800bf14:	20000018 	.word	0x20000018

0800bf18 <free>:
 800bf18:	4b02      	ldr	r3, [pc, #8]	@ (800bf24 <free+0xc>)
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f000 b949 	b.w	800c1b4 <_free_r>
 800bf22:	bf00      	nop
 800bf24:	20000018 	.word	0x20000018

0800bf28 <sbrk_aligned>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	4e0f      	ldr	r6, [pc, #60]	@ (800bf68 <sbrk_aligned+0x40>)
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	6831      	ldr	r1, [r6, #0]
 800bf30:	4605      	mov	r5, r0
 800bf32:	b911      	cbnz	r1, 800bf3a <sbrk_aligned+0x12>
 800bf34:	f000 f902 	bl	800c13c <_sbrk_r>
 800bf38:	6030      	str	r0, [r6, #0]
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f000 f8fd 	bl	800c13c <_sbrk_r>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	d103      	bne.n	800bf4e <sbrk_aligned+0x26>
 800bf46:	f04f 34ff 	mov.w	r4, #4294967295
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
 800bf4e:	1cc4      	adds	r4, r0, #3
 800bf50:	f024 0403 	bic.w	r4, r4, #3
 800bf54:	42a0      	cmp	r0, r4
 800bf56:	d0f8      	beq.n	800bf4a <sbrk_aligned+0x22>
 800bf58:	1a21      	subs	r1, r4, r0
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f000 f8ee 	bl	800c13c <_sbrk_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	d1f2      	bne.n	800bf4a <sbrk_aligned+0x22>
 800bf64:	e7ef      	b.n	800bf46 <sbrk_aligned+0x1e>
 800bf66:	bf00      	nop
 800bf68:	20001f1c 	.word	0x20001f1c

0800bf6c <_malloc_r>:
 800bf6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf70:	1ccd      	adds	r5, r1, #3
 800bf72:	f025 0503 	bic.w	r5, r5, #3
 800bf76:	3508      	adds	r5, #8
 800bf78:	2d0c      	cmp	r5, #12
 800bf7a:	bf38      	it	cc
 800bf7c:	250c      	movcc	r5, #12
 800bf7e:	2d00      	cmp	r5, #0
 800bf80:	4606      	mov	r6, r0
 800bf82:	db01      	blt.n	800bf88 <_malloc_r+0x1c>
 800bf84:	42a9      	cmp	r1, r5
 800bf86:	d904      	bls.n	800bf92 <_malloc_r+0x26>
 800bf88:	230c      	movs	r3, #12
 800bf8a:	6033      	str	r3, [r6, #0]
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c068 <_malloc_r+0xfc>
 800bf96:	f000 f869 	bl	800c06c <__malloc_lock>
 800bf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9e:	461c      	mov	r4, r3
 800bfa0:	bb44      	cbnz	r4, 800bff4 <_malloc_r+0x88>
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7ff ffbf 	bl	800bf28 <sbrk_aligned>
 800bfaa:	1c43      	adds	r3, r0, #1
 800bfac:	4604      	mov	r4, r0
 800bfae:	d158      	bne.n	800c062 <_malloc_r+0xf6>
 800bfb0:	f8d8 4000 	ldr.w	r4, [r8]
 800bfb4:	4627      	mov	r7, r4
 800bfb6:	2f00      	cmp	r7, #0
 800bfb8:	d143      	bne.n	800c042 <_malloc_r+0xd6>
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d04b      	beq.n	800c056 <_malloc_r+0xea>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	eb04 0903 	add.w	r9, r4, r3
 800bfc8:	f000 f8b8 	bl	800c13c <_sbrk_r>
 800bfcc:	4581      	cmp	r9, r0
 800bfce:	d142      	bne.n	800c056 <_malloc_r+0xea>
 800bfd0:	6821      	ldr	r1, [r4, #0]
 800bfd2:	1a6d      	subs	r5, r5, r1
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ffa6 	bl	800bf28 <sbrk_aligned>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d03a      	beq.n	800c056 <_malloc_r+0xea>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	442b      	add	r3, r5
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	f8d8 3000 	ldr.w	r3, [r8]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	bb62      	cbnz	r2, 800c048 <_malloc_r+0xdc>
 800bfee:	f8c8 7000 	str.w	r7, [r8]
 800bff2:	e00f      	b.n	800c014 <_malloc_r+0xa8>
 800bff4:	6822      	ldr	r2, [r4, #0]
 800bff6:	1b52      	subs	r2, r2, r5
 800bff8:	d420      	bmi.n	800c03c <_malloc_r+0xd0>
 800bffa:	2a0b      	cmp	r2, #11
 800bffc:	d917      	bls.n	800c02e <_malloc_r+0xc2>
 800bffe:	1961      	adds	r1, r4, r5
 800c000:	42a3      	cmp	r3, r4
 800c002:	6025      	str	r5, [r4, #0]
 800c004:	bf18      	it	ne
 800c006:	6059      	strne	r1, [r3, #4]
 800c008:	6863      	ldr	r3, [r4, #4]
 800c00a:	bf08      	it	eq
 800c00c:	f8c8 1000 	streq.w	r1, [r8]
 800c010:	5162      	str	r2, [r4, r5]
 800c012:	604b      	str	r3, [r1, #4]
 800c014:	4630      	mov	r0, r6
 800c016:	f000 f82f 	bl	800c078 <__malloc_unlock>
 800c01a:	f104 000b 	add.w	r0, r4, #11
 800c01e:	1d23      	adds	r3, r4, #4
 800c020:	f020 0007 	bic.w	r0, r0, #7
 800c024:	1ac2      	subs	r2, r0, r3
 800c026:	bf1c      	itt	ne
 800c028:	1a1b      	subne	r3, r3, r0
 800c02a:	50a3      	strne	r3, [r4, r2]
 800c02c:	e7af      	b.n	800bf8e <_malloc_r+0x22>
 800c02e:	6862      	ldr	r2, [r4, #4]
 800c030:	42a3      	cmp	r3, r4
 800c032:	bf0c      	ite	eq
 800c034:	f8c8 2000 	streq.w	r2, [r8]
 800c038:	605a      	strne	r2, [r3, #4]
 800c03a:	e7eb      	b.n	800c014 <_malloc_r+0xa8>
 800c03c:	4623      	mov	r3, r4
 800c03e:	6864      	ldr	r4, [r4, #4]
 800c040:	e7ae      	b.n	800bfa0 <_malloc_r+0x34>
 800c042:	463c      	mov	r4, r7
 800c044:	687f      	ldr	r7, [r7, #4]
 800c046:	e7b6      	b.n	800bfb6 <_malloc_r+0x4a>
 800c048:	461a      	mov	r2, r3
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	42a3      	cmp	r3, r4
 800c04e:	d1fb      	bne.n	800c048 <_malloc_r+0xdc>
 800c050:	2300      	movs	r3, #0
 800c052:	6053      	str	r3, [r2, #4]
 800c054:	e7de      	b.n	800c014 <_malloc_r+0xa8>
 800c056:	230c      	movs	r3, #12
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	4630      	mov	r0, r6
 800c05c:	f000 f80c 	bl	800c078 <__malloc_unlock>
 800c060:	e794      	b.n	800bf8c <_malloc_r+0x20>
 800c062:	6005      	str	r5, [r0, #0]
 800c064:	e7d6      	b.n	800c014 <_malloc_r+0xa8>
 800c066:	bf00      	nop
 800c068:	20001f20 	.word	0x20001f20

0800c06c <__malloc_lock>:
 800c06c:	4801      	ldr	r0, [pc, #4]	@ (800c074 <__malloc_lock+0x8>)
 800c06e:	f000 b89f 	b.w	800c1b0 <__retarget_lock_acquire_recursive>
 800c072:	bf00      	nop
 800c074:	20002060 	.word	0x20002060

0800c078 <__malloc_unlock>:
 800c078:	4801      	ldr	r0, [pc, #4]	@ (800c080 <__malloc_unlock+0x8>)
 800c07a:	f000 b89a 	b.w	800c1b2 <__retarget_lock_release_recursive>
 800c07e:	bf00      	nop
 800c080:	20002060 	.word	0x20002060

0800c084 <memcmp>:
 800c084:	b510      	push	{r4, lr}
 800c086:	3901      	subs	r1, #1
 800c088:	4402      	add	r2, r0
 800c08a:	4290      	cmp	r0, r2
 800c08c:	d101      	bne.n	800c092 <memcmp+0xe>
 800c08e:	2000      	movs	r0, #0
 800c090:	e005      	b.n	800c09e <memcmp+0x1a>
 800c092:	7803      	ldrb	r3, [r0, #0]
 800c094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c098:	42a3      	cmp	r3, r4
 800c09a:	d001      	beq.n	800c0a0 <memcmp+0x1c>
 800c09c:	1b18      	subs	r0, r3, r4
 800c09e:	bd10      	pop	{r4, pc}
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	e7f2      	b.n	800c08a <memcmp+0x6>

0800c0a4 <memset>:
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d100      	bne.n	800c0ae <memset+0xa>
 800c0ac:	4770      	bx	lr
 800c0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c0b2:	e7f9      	b.n	800c0a8 <memset+0x4>

0800c0b4 <_raise_r>:
 800c0b4:	291f      	cmp	r1, #31
 800c0b6:	b538      	push	{r3, r4, r5, lr}
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	d904      	bls.n	800c0c8 <_raise_r+0x14>
 800c0be:	2316      	movs	r3, #22
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0ca:	b112      	cbz	r2, 800c0d2 <_raise_r+0x1e>
 800c0cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0d0:	b94b      	cbnz	r3, 800c0e6 <_raise_r+0x32>
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f830 	bl	800c138 <_getpid_r>
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4601      	mov	r1, r0
 800c0dc:	4628      	mov	r0, r5
 800c0de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e2:	f000 b817 	b.w	800c114 <_kill_r>
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d00a      	beq.n	800c100 <_raise_r+0x4c>
 800c0ea:	1c59      	adds	r1, r3, #1
 800c0ec:	d103      	bne.n	800c0f6 <_raise_r+0x42>
 800c0ee:	2316      	movs	r3, #22
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	e7e7      	b.n	800c0c6 <_raise_r+0x12>
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4798      	blx	r3
 800c100:	2000      	movs	r0, #0
 800c102:	e7e0      	b.n	800c0c6 <_raise_r+0x12>

0800c104 <raise>:
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <raise+0xc>)
 800c106:	4601      	mov	r1, r0
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7ff bfd3 	b.w	800c0b4 <_raise_r>
 800c10e:	bf00      	nop
 800c110:	20000018 	.word	0x20000018

0800c114 <_kill_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4d07      	ldr	r5, [pc, #28]	@ (800c134 <_kill_r+0x20>)
 800c118:	2300      	movs	r3, #0
 800c11a:	4604      	mov	r4, r0
 800c11c:	4608      	mov	r0, r1
 800c11e:	4611      	mov	r1, r2
 800c120:	602b      	str	r3, [r5, #0]
 800c122:	f7f6 fd35 	bl	8002b90 <_kill>
 800c126:	1c43      	adds	r3, r0, #1
 800c128:	d102      	bne.n	800c130 <_kill_r+0x1c>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	b103      	cbz	r3, 800c130 <_kill_r+0x1c>
 800c12e:	6023      	str	r3, [r4, #0]
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	bf00      	nop
 800c134:	2000205c 	.word	0x2000205c

0800c138 <_getpid_r>:
 800c138:	f7f6 bd22 	b.w	8002b80 <_getpid>

0800c13c <_sbrk_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	@ (800c158 <_sbrk_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f6 fd3e 	bl	8002bc8 <_sbrk>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_sbrk_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_sbrk_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	2000205c 	.word	0x2000205c

0800c15c <__errno>:
 800c15c:	4b01      	ldr	r3, [pc, #4]	@ (800c164 <__errno+0x8>)
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000018 	.word	0x20000018

0800c168 <__libc_init_array>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	4d0d      	ldr	r5, [pc, #52]	@ (800c1a0 <__libc_init_array+0x38>)
 800c16c:	4c0d      	ldr	r4, [pc, #52]	@ (800c1a4 <__libc_init_array+0x3c>)
 800c16e:	1b64      	subs	r4, r4, r5
 800c170:	10a4      	asrs	r4, r4, #2
 800c172:	2600      	movs	r6, #0
 800c174:	42a6      	cmp	r6, r4
 800c176:	d109      	bne.n	800c18c <__libc_init_array+0x24>
 800c178:	4d0b      	ldr	r5, [pc, #44]	@ (800c1a8 <__libc_init_array+0x40>)
 800c17a:	4c0c      	ldr	r4, [pc, #48]	@ (800c1ac <__libc_init_array+0x44>)
 800c17c:	f000 f864 	bl	800c248 <_init>
 800c180:	1b64      	subs	r4, r4, r5
 800c182:	10a4      	asrs	r4, r4, #2
 800c184:	2600      	movs	r6, #0
 800c186:	42a6      	cmp	r6, r4
 800c188:	d105      	bne.n	800c196 <__libc_init_array+0x2e>
 800c18a:	bd70      	pop	{r4, r5, r6, pc}
 800c18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c190:	4798      	blx	r3
 800c192:	3601      	adds	r6, #1
 800c194:	e7ee      	b.n	800c174 <__libc_init_array+0xc>
 800c196:	f855 3b04 	ldr.w	r3, [r5], #4
 800c19a:	4798      	blx	r3
 800c19c:	3601      	adds	r6, #1
 800c19e:	e7f2      	b.n	800c186 <__libc_init_array+0x1e>
 800c1a0:	0800ee4c 	.word	0x0800ee4c
 800c1a4:	0800ee4c 	.word	0x0800ee4c
 800c1a8:	0800ee4c 	.word	0x0800ee4c
 800c1ac:	0800ee54 	.word	0x0800ee54

0800c1b0 <__retarget_lock_acquire_recursive>:
 800c1b0:	4770      	bx	lr

0800c1b2 <__retarget_lock_release_recursive>:
 800c1b2:	4770      	bx	lr

0800c1b4 <_free_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	d041      	beq.n	800c240 <_free_r+0x8c>
 800c1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c0:	1f0c      	subs	r4, r1, #4
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bfb8      	it	lt
 800c1c6:	18e4      	addlt	r4, r4, r3
 800c1c8:	f7ff ff50 	bl	800c06c <__malloc_lock>
 800c1cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c244 <_free_r+0x90>)
 800c1ce:	6813      	ldr	r3, [r2, #0]
 800c1d0:	b933      	cbnz	r3, 800c1e0 <_free_r+0x2c>
 800c1d2:	6063      	str	r3, [r4, #4]
 800c1d4:	6014      	str	r4, [r2, #0]
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1dc:	f7ff bf4c 	b.w	800c078 <__malloc_unlock>
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d908      	bls.n	800c1f6 <_free_r+0x42>
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	1821      	adds	r1, r4, r0
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	bf01      	itttt	eq
 800c1ec:	6819      	ldreq	r1, [r3, #0]
 800c1ee:	685b      	ldreq	r3, [r3, #4]
 800c1f0:	1809      	addeq	r1, r1, r0
 800c1f2:	6021      	streq	r1, [r4, #0]
 800c1f4:	e7ed      	b.n	800c1d2 <_free_r+0x1e>
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	b10b      	cbz	r3, 800c200 <_free_r+0x4c>
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	d9fa      	bls.n	800c1f6 <_free_r+0x42>
 800c200:	6811      	ldr	r1, [r2, #0]
 800c202:	1850      	adds	r0, r2, r1
 800c204:	42a0      	cmp	r0, r4
 800c206:	d10b      	bne.n	800c220 <_free_r+0x6c>
 800c208:	6820      	ldr	r0, [r4, #0]
 800c20a:	4401      	add	r1, r0
 800c20c:	1850      	adds	r0, r2, r1
 800c20e:	4283      	cmp	r3, r0
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	d1e0      	bne.n	800c1d6 <_free_r+0x22>
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	6053      	str	r3, [r2, #4]
 800c21a:	4408      	add	r0, r1
 800c21c:	6010      	str	r0, [r2, #0]
 800c21e:	e7da      	b.n	800c1d6 <_free_r+0x22>
 800c220:	d902      	bls.n	800c228 <_free_r+0x74>
 800c222:	230c      	movs	r3, #12
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	e7d6      	b.n	800c1d6 <_free_r+0x22>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	1821      	adds	r1, r4, r0
 800c22c:	428b      	cmp	r3, r1
 800c22e:	bf04      	itt	eq
 800c230:	6819      	ldreq	r1, [r3, #0]
 800c232:	685b      	ldreq	r3, [r3, #4]
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	bf04      	itt	eq
 800c238:	1809      	addeq	r1, r1, r0
 800c23a:	6021      	streq	r1, [r4, #0]
 800c23c:	6054      	str	r4, [r2, #4]
 800c23e:	e7ca      	b.n	800c1d6 <_free_r+0x22>
 800c240:	bd38      	pop	{r3, r4, r5, pc}
 800c242:	bf00      	nop
 800c244:	20001f20 	.word	0x20001f20

0800c248 <_init>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	bf00      	nop
 800c24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24e:	bc08      	pop	{r3}
 800c250:	469e      	mov	lr, r3
 800c252:	4770      	bx	lr

0800c254 <_fini>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	bf00      	nop
 800c258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25a:	bc08      	pop	{r3}
 800c25c:	469e      	mov	lr, r3
 800c25e:	4770      	bx	lr
