
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  0800d5a0  0800d5a0  0000e5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010184  08010184  00012068  2**0
                  CONTENTS
  4 .ARM          00000008  08010184  08010184  00011184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801018c  0801018c  00012068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801018c  0801018c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010198  08010198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080101a0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c4  20000068  08010208  00012068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000212c  08010208  0001212c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 12 .debug_info   002ada1d  00000000  00000000  00012098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071eb  00000000  00000000  002bfab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000b678  00000000  00000000  002c6ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000089bd  00000000  00000000  002d2318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033962  00000000  00000000  002dacd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00056782  00000000  00000000  0030e637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00a8bfef  00000000  00000000  00364db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00df0da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00036c78  00000000  00000000  00df0e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00e27ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  00e27b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00e2b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d588 	.word	0x0800d588

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800d588 	.word	0x0800d588

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_frsub>:
 8000ae4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae8:	e002      	b.n	8000af0 <__addsf3>
 8000aea:	bf00      	nop

08000aec <__aeabi_fsub>:
 8000aec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af0 <__addsf3>:
 8000af0:	0042      	lsls	r2, r0, #1
 8000af2:	bf1f      	itttt	ne
 8000af4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af8:	ea92 0f03 	teqne	r2, r3
 8000afc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b04:	d06a      	beq.n	8000bdc <__addsf3+0xec>
 8000b06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b0e:	bfc1      	itttt	gt
 8000b10:	18d2      	addgt	r2, r2, r3
 8000b12:	4041      	eorgt	r1, r0
 8000b14:	4048      	eorgt	r0, r1
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	2b19      	cmp	r3, #25
 8000b1e:	bf88      	it	hi
 8000b20:	4770      	bxhi	lr
 8000b22:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b2e:	bf18      	it	ne
 8000b30:	4240      	negne	r0, r0
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b3a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4249      	negne	r1, r1
 8000b42:	ea92 0f03 	teq	r2, r3
 8000b46:	d03f      	beq.n	8000bc8 <__addsf3+0xd8>
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b50:	eb10 000c 	adds.w	r0, r0, ip
 8000b54:	f1c3 0320 	rsb	r3, r3, #32
 8000b58:	fa01 f103 	lsl.w	r1, r1, r3
 8000b5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__addsf3+0x78>
 8000b62:	4249      	negs	r1, r1
 8000b64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b68:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b6c:	d313      	bcc.n	8000b96 <__addsf3+0xa6>
 8000b6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b72:	d306      	bcc.n	8000b82 <__addsf3+0x92>
 8000b74:	0840      	lsrs	r0, r0, #1
 8000b76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7a:	f102 0201 	add.w	r2, r2, #1
 8000b7e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b80:	d251      	bcs.n	8000c26 <__addsf3+0x136>
 8000b82:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8a:	bf08      	it	eq
 8000b8c:	f020 0001 	biceq.w	r0, r0, #1
 8000b90:	ea40 0003 	orr.w	r0, r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	0049      	lsls	r1, r1, #1
 8000b98:	eb40 0000 	adc.w	r0, r0, r0
 8000b9c:	3a01      	subs	r2, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ba4:	d2ed      	bcs.n	8000b82 <__addsf3+0x92>
 8000ba6:	fab0 fc80 	clz	ip, r0
 8000baa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bae:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bb6:	bfaa      	itet	ge
 8000bb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bbc:	4252      	neglt	r2, r2
 8000bbe:	4318      	orrge	r0, r3
 8000bc0:	bfbc      	itt	lt
 8000bc2:	40d0      	lsrlt	r0, r2
 8000bc4:	4318      	orrlt	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	f092 0f00 	teq	r2, #0
 8000bcc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd0:	bf06      	itte	eq
 8000bd2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	3201      	addeq	r2, #1
 8000bd8:	3b01      	subne	r3, #1
 8000bda:	e7b5      	b.n	8000b48 <__addsf3+0x58>
 8000bdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be4:	bf18      	it	ne
 8000be6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bea:	d021      	beq.n	8000c30 <__addsf3+0x140>
 8000bec:	ea92 0f03 	teq	r2, r3
 8000bf0:	d004      	beq.n	8000bfc <__addsf3+0x10c>
 8000bf2:	f092 0f00 	teq	r2, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	4608      	moveq	r0, r1
 8000bfa:	4770      	bx	lr
 8000bfc:	ea90 0f01 	teq	r0, r1
 8000c00:	bf1c      	itt	ne
 8000c02:	2000      	movne	r0, #0
 8000c04:	4770      	bxne	lr
 8000c06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c0a:	d104      	bne.n	8000c16 <__addsf3+0x126>
 8000c0c:	0040      	lsls	r0, r0, #1
 8000c0e:	bf28      	it	cs
 8000c10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c14:	4770      	bx	lr
 8000c16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c1a:	bf3c      	itt	cc
 8000c1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c20:	4770      	bxcc	lr
 8000c22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	4770      	bx	lr
 8000c30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c34:	bf16      	itet	ne
 8000c36:	4608      	movne	r0, r1
 8000c38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c3c:	4601      	movne	r1, r0
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	bf06      	itte	eq
 8000c42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c46:	ea90 0f01 	teqeq	r0, r1
 8000c4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_ui2f>:
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e004      	b.n	8000c60 <__aeabi_i2f+0x8>
 8000c56:	bf00      	nop

08000c58 <__aeabi_i2f>:
 8000c58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c5c:	bf48      	it	mi
 8000c5e:	4240      	negmi	r0, r0
 8000c60:	ea5f 0c00 	movs.w	ip, r0
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	e01c      	b.n	8000cae <__aeabi_l2f+0x2a>

08000c74 <__aeabi_ul2f>:
 8000c74:	ea50 0201 	orrs.w	r2, r0, r1
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e00a      	b.n	8000c98 <__aeabi_l2f+0x14>
 8000c82:	bf00      	nop

08000c84 <__aeabi_l2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__aeabi_l2f+0x14>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	ea5f 0c01 	movs.w	ip, r1
 8000c9c:	bf02      	ittt	eq
 8000c9e:	4684      	moveq	ip, r0
 8000ca0:	4601      	moveq	r1, r0
 8000ca2:	2000      	moveq	r0, #0
 8000ca4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca8:	bf08      	it	eq
 8000caa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cb2:	fabc f28c 	clz	r2, ip
 8000cb6:	3a08      	subs	r2, #8
 8000cb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cbc:	db10      	blt.n	8000ce0 <__aeabi_l2f+0x5c>
 8000cbe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	f020 0001 	biceq.w	r0, r0, #1
 8000cde:	4770      	bx	lr
 8000ce0:	f102 0220 	add.w	r2, r2, #32
 8000ce4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_ldivmod>:
 8000d00:	b97b      	cbnz	r3, 8000d22 <__aeabi_ldivmod+0x22>
 8000d02:	b972      	cbnz	r2, 8000d22 <__aeabi_ldivmod+0x22>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	bfbe      	ittt	lt
 8000d08:	2000      	movlt	r0, #0
 8000d0a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d0e:	e006      	blt.n	8000d1e <__aeabi_ldivmod+0x1e>
 8000d10:	bf08      	it	eq
 8000d12:	2800      	cmpeq	r0, #0
 8000d14:	bf1c      	itt	ne
 8000d16:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1e:	f000 b9eb 	b.w	80010f8 <__aeabi_idiv0>
 8000d22:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d26:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	db09      	blt.n	8000d42 <__aeabi_ldivmod+0x42>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db1a      	blt.n	8000d68 <__aeabi_ldivmod+0x68>
 8000d32:	f000 f883 	bl	8000e3c <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4770      	bx	lr
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db1b      	blt.n	8000d84 <__aeabi_ldivmod+0x84>
 8000d4c:	f000 f876 	bl	8000e3c <__udivmoddi4>
 8000d50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d58:	b004      	add	sp, #16
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr
 8000d68:	4252      	negs	r2, r2
 8000d6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d6e:	f000 f865 	bl	8000e3c <__udivmoddi4>
 8000d72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d82:	4770      	bx	lr
 8000d84:	4252      	negs	r2, r2
 8000d86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d8a:	f000 f857 	bl	8000e3c <__udivmoddi4>
 8000d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d96:	b004      	add	sp, #16
 8000d98:	4252      	negs	r2, r2
 8000d9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_uldivmod>:
 8000da0:	b953      	cbnz	r3, 8000db8 <__aeabi_uldivmod+0x18>
 8000da2:	b94a      	cbnz	r2, 8000db8 <__aeabi_uldivmod+0x18>
 8000da4:	2900      	cmp	r1, #0
 8000da6:	bf08      	it	eq
 8000da8:	2800      	cmpeq	r0, #0
 8000daa:	bf1c      	itt	ne
 8000dac:	f04f 31ff 	movne.w	r1, #4294967295
 8000db0:	f04f 30ff 	movne.w	r0, #4294967295
 8000db4:	f000 b9a0 	b.w	80010f8 <__aeabi_idiv0>
 8000db8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc0:	f000 f83c 	bl	8000e3c <__udivmoddi4>
 8000dc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dcc:	b004      	add	sp, #16
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_d2lz>:
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	460d      	mov	r5, r1
 8000dda:	f000 f9ef 	bl	80011bc <__aeabi_dcmplt>
 8000dde:	b928      	cbnz	r0, 8000dec <__aeabi_d2lz+0x1c>
 8000de0:	4620      	mov	r0, r4
 8000de2:	4629      	mov	r1, r5
 8000de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000de8:	f000 b80a 	b.w	8000e00 <__aeabi_d2ulz>
 8000dec:	4620      	mov	r0, r4
 8000dee:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000df2:	f000 f805 	bl	8000e00 <__aeabi_d2ulz>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	bd38      	pop	{r3, r4, r5, pc}
 8000dfe:	bf00      	nop

08000e00 <__aeabi_d2ulz>:
 8000e00:	b5d0      	push	{r4, r6, r7, lr}
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__aeabi_d2ulz+0x34>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	4606      	mov	r6, r0
 8000e08:	460f      	mov	r7, r1
 8000e0a:	f7ff fbc1 	bl	8000590 <__aeabi_dmul>
 8000e0e:	f7ff fdf9 	bl	8000a04 <__aeabi_d2uiz>
 8000e12:	4604      	mov	r4, r0
 8000e14:	f7ff fb42 	bl	800049c <__aeabi_ui2d>
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <__aeabi_d2ulz+0x38>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f7ff fbb8 	bl	8000590 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4630      	mov	r0, r6
 8000e26:	4639      	mov	r1, r7
 8000e28:	f7ff f9fa 	bl	8000220 <__aeabi_dsub>
 8000e2c:	f7ff fdea 	bl	8000a04 <__aeabi_d2uiz>
 8000e30:	4621      	mov	r1, r4
 8000e32:	bdd0      	pop	{r4, r6, r7, pc}
 8000e34:	3df00000 	.word	0x3df00000
 8000e38:	41f00000 	.word	0x41f00000

08000e3c <__udivmoddi4>:
 8000e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e40:	9d08      	ldr	r5, [sp, #32]
 8000e42:	460c      	mov	r4, r1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d14e      	bne.n	8000ee6 <__udivmoddi4+0xaa>
 8000e48:	4694      	mov	ip, r2
 8000e4a:	458c      	cmp	ip, r1
 8000e4c:	4686      	mov	lr, r0
 8000e4e:	fab2 f282 	clz	r2, r2
 8000e52:	d962      	bls.n	8000f1a <__udivmoddi4+0xde>
 8000e54:	b14a      	cbz	r2, 8000e6a <__udivmoddi4+0x2e>
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	4319      	orrs	r1, r3
 8000e66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f f68c 	uxth.w	r6, ip
 8000e72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb04 f106 	mul.w	r1, r4, r6
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d90a      	bls.n	8000ea0 <__udivmoddi4+0x64>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e92:	f080 8112 	bcs.w	80010ba <__udivmoddi4+0x27e>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 810f 	bls.w	80010ba <__udivmoddi4+0x27e>
 8000e9c:	3c02      	subs	r4, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a59      	subs	r1, r3, r1
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000eae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb2:	fb00 f606 	mul.w	r6, r0, r6
 8000eb6:	429e      	cmp	r6, r3
 8000eb8:	d90a      	bls.n	8000ed0 <__udivmoddi4+0x94>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec2:	f080 80fc 	bcs.w	80010be <__udivmoddi4+0x282>
 8000ec6:	429e      	cmp	r6, r3
 8000ec8:	f240 80f9 	bls.w	80010be <__udivmoddi4+0x282>
 8000ecc:	4463      	add	r3, ip
 8000ece:	3802      	subs	r0, #2
 8000ed0:	1b9b      	subs	r3, r3, r6
 8000ed2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	b11d      	cbz	r5, 8000ee2 <__udivmoddi4+0xa6>
 8000eda:	40d3      	lsrs	r3, r2
 8000edc:	2200      	movs	r2, #0
 8000ede:	e9c5 3200 	strd	r3, r2, [r5]
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d905      	bls.n	8000ef6 <__udivmoddi4+0xba>
 8000eea:	b10d      	cbz	r5, 8000ef0 <__udivmoddi4+0xb4>
 8000eec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e7f5      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000ef6:	fab3 f183 	clz	r1, r3
 8000efa:	2900      	cmp	r1, #0
 8000efc:	d146      	bne.n	8000f8c <__udivmoddi4+0x150>
 8000efe:	42a3      	cmp	r3, r4
 8000f00:	d302      	bcc.n	8000f08 <__udivmoddi4+0xcc>
 8000f02:	4290      	cmp	r0, r2
 8000f04:	f0c0 80f0 	bcc.w	80010e8 <__udivmoddi4+0x2ac>
 8000f08:	1a86      	subs	r6, r0, r2
 8000f0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000f0e:	2001      	movs	r0, #1
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__udivmoddi4+0xa6>
 8000f14:	e9c5 6300 	strd	r6, r3, [r5]
 8000f18:	e7e3      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x204>
 8000f20:	eba1 040c 	sub.w	r4, r1, ip
 8000f24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f28:	fa1f f78c 	uxth.w	r7, ip
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f36:	fb08 4416 	mls	r4, r8, r6, r4
 8000f3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f3e:	fb07 f006 	mul.w	r0, r7, r6
 8000f42:	4298      	cmp	r0, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x11c>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x11a>
 8000f50:	4298      	cmp	r0, r3
 8000f52:	f200 80cd 	bhi.w	80010f0 <__udivmoddi4+0x2b4>
 8000f56:	4626      	mov	r6, r4
 8000f58:	1a1c      	subs	r4, r3, r0
 8000f5a:	fa1f f38e 	uxth.w	r3, lr
 8000f5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f62:	fb08 4410 	mls	r4, r8, r0, r4
 8000f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6a:	fb00 f707 	mul.w	r7, r0, r7
 8000f6e:	429f      	cmp	r7, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x148>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x146>
 8000f7c:	429f      	cmp	r7, r3
 8000f7e:	f200 80b0 	bhi.w	80010e2 <__udivmoddi4+0x2a6>
 8000f82:	4620      	mov	r0, r4
 8000f84:	1bdb      	subs	r3, r3, r7
 8000f86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f8a:	e7a5      	b.n	8000ed8 <__udivmoddi4+0x9c>
 8000f8c:	f1c1 0620 	rsb	r6, r1, #32
 8000f90:	408b      	lsls	r3, r1
 8000f92:	fa22 f706 	lsr.w	r7, r2, r6
 8000f96:	431f      	orrs	r7, r3
 8000f98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa0:	ea43 030c 	orr.w	r3, r3, ip
 8000fa4:	40f4      	lsrs	r4, r6
 8000fa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000faa:	0c38      	lsrs	r0, r7, #16
 8000fac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000fb4:	fa1f fc87 	uxth.w	ip, r7
 8000fb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000fbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fc4:	45a1      	cmp	r9, r4
 8000fc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fca:	d90a      	bls.n	8000fe2 <__udivmoddi4+0x1a6>
 8000fcc:	193c      	adds	r4, r7, r4
 8000fce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fd2:	f080 8084 	bcs.w	80010de <__udivmoddi4+0x2a2>
 8000fd6:	45a1      	cmp	r9, r4
 8000fd8:	f240 8081 	bls.w	80010de <__udivmoddi4+0x2a2>
 8000fdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe0:	443c      	add	r4, r7
 8000fe2:	eba4 0409 	sub.w	r4, r4, r9
 8000fe6:	fa1f f983 	uxth.w	r9, r3
 8000fea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ff2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ff6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ffa:	45a4      	cmp	ip, r4
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x1d2>
 8000ffe:	193c      	adds	r4, r7, r4
 8001000:	f103 30ff 	add.w	r0, r3, #4294967295
 8001004:	d267      	bcs.n	80010d6 <__udivmoddi4+0x29a>
 8001006:	45a4      	cmp	ip, r4
 8001008:	d965      	bls.n	80010d6 <__udivmoddi4+0x29a>
 800100a:	3b02      	subs	r3, #2
 800100c:	443c      	add	r4, r7
 800100e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001012:	fba0 9302 	umull	r9, r3, r0, r2
 8001016:	eba4 040c 	sub.w	r4, r4, ip
 800101a:	429c      	cmp	r4, r3
 800101c:	46ce      	mov	lr, r9
 800101e:	469c      	mov	ip, r3
 8001020:	d351      	bcc.n	80010c6 <__udivmoddi4+0x28a>
 8001022:	d04e      	beq.n	80010c2 <__udivmoddi4+0x286>
 8001024:	b155      	cbz	r5, 800103c <__udivmoddi4+0x200>
 8001026:	ebb8 030e 	subs.w	r3, r8, lr
 800102a:	eb64 040c 	sbc.w	r4, r4, ip
 800102e:	fa04 f606 	lsl.w	r6, r4, r6
 8001032:	40cb      	lsrs	r3, r1
 8001034:	431e      	orrs	r6, r3
 8001036:	40cc      	lsrs	r4, r1
 8001038:	e9c5 6400 	strd	r6, r4, [r5]
 800103c:	2100      	movs	r1, #0
 800103e:	e750      	b.n	8000ee2 <__udivmoddi4+0xa6>
 8001040:	f1c2 0320 	rsb	r3, r2, #32
 8001044:	fa20 f103 	lsr.w	r1, r0, r3
 8001048:	fa0c fc02 	lsl.w	ip, ip, r2
 800104c:	fa24 f303 	lsr.w	r3, r4, r3
 8001050:	4094      	lsls	r4, r2
 8001052:	430c      	orrs	r4, r1
 8001054:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001058:	fa00 fe02 	lsl.w	lr, r0, r2
 800105c:	fa1f f78c 	uxth.w	r7, ip
 8001060:	fbb3 f0f8 	udiv	r0, r3, r8
 8001064:	fb08 3110 	mls	r1, r8, r0, r3
 8001068:	0c23      	lsrs	r3, r4, #16
 800106a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800106e:	fb00 f107 	mul.w	r1, r0, r7
 8001072:	4299      	cmp	r1, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x24c>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 36ff 	add.w	r6, r0, #4294967295
 800107e:	d22c      	bcs.n	80010da <__udivmoddi4+0x29e>
 8001080:	4299      	cmp	r1, r3
 8001082:	d92a      	bls.n	80010da <__udivmoddi4+0x29e>
 8001084:	3802      	subs	r0, #2
 8001086:	4463      	add	r3, ip
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	b2a4      	uxth	r4, r4
 800108c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001090:	fb08 3311 	mls	r3, r8, r1, r3
 8001094:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001098:	fb01 f307 	mul.w	r3, r1, r7
 800109c:	42a3      	cmp	r3, r4
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x276>
 80010a0:	eb1c 0404 	adds.w	r4, ip, r4
 80010a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80010a8:	d213      	bcs.n	80010d2 <__udivmoddi4+0x296>
 80010aa:	42a3      	cmp	r3, r4
 80010ac:	d911      	bls.n	80010d2 <__udivmoddi4+0x296>
 80010ae:	3902      	subs	r1, #2
 80010b0:	4464      	add	r4, ip
 80010b2:	1ae4      	subs	r4, r4, r3
 80010b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010b8:	e739      	b.n	8000f2e <__udivmoddi4+0xf2>
 80010ba:	4604      	mov	r4, r0
 80010bc:	e6f0      	b.n	8000ea0 <__udivmoddi4+0x64>
 80010be:	4608      	mov	r0, r1
 80010c0:	e706      	b.n	8000ed0 <__udivmoddi4+0x94>
 80010c2:	45c8      	cmp	r8, r9
 80010c4:	d2ae      	bcs.n	8001024 <__udivmoddi4+0x1e8>
 80010c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ce:	3801      	subs	r0, #1
 80010d0:	e7a8      	b.n	8001024 <__udivmoddi4+0x1e8>
 80010d2:	4631      	mov	r1, r6
 80010d4:	e7ed      	b.n	80010b2 <__udivmoddi4+0x276>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e799      	b.n	800100e <__udivmoddi4+0x1d2>
 80010da:	4630      	mov	r0, r6
 80010dc:	e7d4      	b.n	8001088 <__udivmoddi4+0x24c>
 80010de:	46d6      	mov	lr, sl
 80010e0:	e77f      	b.n	8000fe2 <__udivmoddi4+0x1a6>
 80010e2:	4463      	add	r3, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e74d      	b.n	8000f84 <__udivmoddi4+0x148>
 80010e8:	4606      	mov	r6, r0
 80010ea:	4623      	mov	r3, r4
 80010ec:	4608      	mov	r0, r1
 80010ee:	e70f      	b.n	8000f10 <__udivmoddi4+0xd4>
 80010f0:	3e02      	subs	r6, #2
 80010f2:	4463      	add	r3, ip
 80010f4:	e730      	b.n	8000f58 <__udivmoddi4+0x11c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__gedf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpdf2+0x4>
 8001102:	bf00      	nop

08001104 <__ledf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpdf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpdf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800111c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001120:	bf18      	it	ne
 8001122:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001126:	d01b      	beq.n	8001160 <__cmpdf2+0x54>
 8001128:	b001      	add	sp, #4
 800112a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800112e:	bf0c      	ite	eq
 8001130:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001134:	ea91 0f03 	teqne	r1, r3
 8001138:	bf02      	ittt	eq
 800113a:	ea90 0f02 	teqeq	r0, r2
 800113e:	2000      	moveq	r0, #0
 8001140:	4770      	bxeq	lr
 8001142:	f110 0f00 	cmn.w	r0, #0
 8001146:	ea91 0f03 	teq	r1, r3
 800114a:	bf58      	it	pl
 800114c:	4299      	cmppl	r1, r3
 800114e:	bf08      	it	eq
 8001150:	4290      	cmpeq	r0, r2
 8001152:	bf2c      	ite	cs
 8001154:	17d8      	asrcs	r0, r3, #31
 8001156:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800115a:	f040 0001 	orr.w	r0, r0, #1
 800115e:	4770      	bx	lr
 8001160:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001168:	d102      	bne.n	8001170 <__cmpdf2+0x64>
 800116a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800116e:	d107      	bne.n	8001180 <__cmpdf2+0x74>
 8001170:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001178:	d1d6      	bne.n	8001128 <__cmpdf2+0x1c>
 800117a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800117e:	d0d3      	beq.n	8001128 <__cmpdf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cdrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4610      	mov	r0, r2
 800118c:	4662      	mov	r2, ip
 800118e:	468c      	mov	ip, r1
 8001190:	4619      	mov	r1, r3
 8001192:	4663      	mov	r3, ip
 8001194:	e000      	b.n	8001198 <__aeabi_cdcmpeq>
 8001196:	bf00      	nop

08001198 <__aeabi_cdcmpeq>:
 8001198:	b501      	push	{r0, lr}
 800119a:	f7ff ffb7 	bl	800110c <__cmpdf2>
 800119e:	2800      	cmp	r0, #0
 80011a0:	bf48      	it	mi
 80011a2:	f110 0f00 	cmnmi.w	r0, #0
 80011a6:	bd01      	pop	{r0, pc}

080011a8 <__aeabi_dcmpeq>:
 80011a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011ac:	f7ff fff4 	bl	8001198 <__aeabi_cdcmpeq>
 80011b0:	bf0c      	ite	eq
 80011b2:	2001      	moveq	r0, #1
 80011b4:	2000      	movne	r0, #0
 80011b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ba:	bf00      	nop

080011bc <__aeabi_dcmplt>:
 80011bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c0:	f7ff ffea 	bl	8001198 <__aeabi_cdcmpeq>
 80011c4:	bf34      	ite	cc
 80011c6:	2001      	movcc	r0, #1
 80011c8:	2000      	movcs	r0, #0
 80011ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ce:	bf00      	nop

080011d0 <__aeabi_dcmple>:
 80011d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d4:	f7ff ffe0 	bl	8001198 <__aeabi_cdcmpeq>
 80011d8:	bf94      	ite	ls
 80011da:	2001      	movls	r0, #1
 80011dc:	2000      	movhi	r0, #0
 80011de:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e2:	bf00      	nop

080011e4 <__aeabi_dcmpge>:
 80011e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e8:	f7ff ffce 	bl	8001188 <__aeabi_cdrcmple>
 80011ec:	bf94      	ite	ls
 80011ee:	2001      	movls	r0, #1
 80011f0:	2000      	movhi	r0, #0
 80011f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011f6:	bf00      	nop

080011f8 <__aeabi_dcmpgt>:
 80011f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011fc:	f7ff ffc4 	bl	8001188 <__aeabi_cdrcmple>
 8001200:	bf34      	ite	cc
 8001202:	2001      	movcc	r0, #1
 8001204:	2000      	movcs	r0, #0
 8001206:	f85d fb08 	ldr.w	pc, [sp], #8
 800120a:	bf00      	nop
 800120c:	0000      	movs	r0, r0
	...

08001210 <set_n_freq>:
#include "dds.h"


void set_n_freq(void (*send_9834)(uint16_t),void (*send_9833)(uint16_t),
		long long int freq, int n, int rad)
{
 8001210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001214:	b096      	sub	sp, #88	@ 0x58
 8001216:	af00      	add	r7, sp, #0
 8001218:	6178      	str	r0, [r7, #20]
 800121a:	6139      	str	r1, [r7, #16]
 800121c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	long long int temp_1 = (freq * 268435456 / 25000560);// - 6 - 3 * (freq / 1e4 - 2);
 8001220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	f04f 0100 	mov.w	r1, #0
 800122c:	0719      	lsls	r1, r3, #28
 800122e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001232:	0710      	lsls	r0, r2, #28
 8001234:	a39e      	add	r3, pc, #632	@ (adr r3, 80014b0 <set_n_freq+0x2a0>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff fd61 	bl	8000d00 <__aeabi_ldivmod>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	uint32_t fr = temp_1;
 8001246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t lsb = 0x4000;
 800124a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800124e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint16_t msb = 0x4000;
 8001252:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001256:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	int rad_t = rad - 8.2 * freq * n * 0.36 / 1000;
 800125a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800125c:	f7ff f92e 	bl	80004bc <__aeabi_i2d>
 8001260:	4682      	mov	sl, r0
 8001262:	468b      	mov	fp, r1
 8001264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001268:	f7ff f964 	bl	8000534 <__aeabi_l2d>
 800126c:	a392      	add	r3, pc, #584	@ (adr r3, 80014b8 <set_n_freq+0x2a8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff f98d 	bl	8000590 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 2300 	strd	r2, r3, [r7]
 800127e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001280:	f7ff f91c 	bl	80004bc <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128c:	f7ff f980 	bl	8000590 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	a389      	add	r3, pc, #548	@ (adr r3, 80014c0 <set_n_freq+0x2b0>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f977 	bl	8000590 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b7e      	ldr	r3, [pc, #504]	@ (80014a8 <set_n_freq+0x298>)
 80012b0:	f7ff fa98 	bl	80007e4 <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4650      	mov	r0, sl
 80012ba:	4659      	mov	r1, fp
 80012bc:	f7fe ffb0 	bl	8000220 <__aeabi_dsub>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fb74 	bl	80009b4 <__aeabi_d2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if(rad_t < 0) rad_t += 360;
 80012d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da03      	bge.n	80012de <set_n_freq+0xce>
 80012d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012d8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012dc:	653b      	str	r3, [r7, #80]	@ 0x50
    if(rad_t > 360) rad_t -= 360;
 80012de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012e0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80012e4:	dd03      	ble.n	80012ee <set_n_freq+0xde>
 80012e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012e8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
    uint16_t phase = rad_t * 512 / 45;
 80012ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4a6e      	ldr	r2, [pc, #440]	@ (80014ac <set_n_freq+0x29c>)
 80012f4:	fb82 1203 	smull	r1, r2, r2, r3
 80012f8:	441a      	add	r2, r3
 80012fa:	1152      	asrs	r2, r2, #5
 80012fc:	17db      	asrs	r3, r3, #31
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t ph_reg = 0xc001;
 8001302:	f24c 0301 	movw	r3, #49153	@ 0xc001
 8001306:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	for (int i = 0; i < 12; ++i)
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800130e:	e015      	b.n	800133c <set_n_freq+0x12c>
	{
	    if (phase & (1 << i)) {
 8001310:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001314:	fa42 f303 	asr.w	r3, r2, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00a      	beq.n	8001336 <set_n_freq+0x126>
	        ph_reg |= (1 << i);
 8001320:	2201      	movs	r2, #1
 8001322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	for (int i = 0; i < 12; ++i)
 8001336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001338:	3301      	adds	r3, #1
 800133a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800133c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800133e:	2b0b      	cmp	r3, #11
 8001340:	dde6      	ble.n	8001310 <set_n_freq+0x100>
	    }
	}
	for (int i = 0; i < 14; ++i)
 8001342:	2300      	movs	r3, #0
 8001344:	647b      	str	r3, [r7, #68]	@ 0x44
 8001346:	e02b      	b.n	80013a0 <set_n_freq+0x190>
	{
	    if (fr & (1 << i)) {
 8001348:	2201      	movs	r2, #1
 800134a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <set_n_freq+0x160>
	        lsb |= (1 << i);
 800135a:	2201      	movs	r2, #1
 800135c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	    }
	    if (fr & (1 << (i + 14))) {
 8001370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001372:	330e      	adds	r3, #14
 8001374:	2201      	movs	r2, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	461a      	mov	r2, r3
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <set_n_freq+0x18a>
	        msb |= (1 << i);
 8001384:	2201      	movs	r2, #1
 8001386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	for (int i = 0; i < 14; ++i)
 800139a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139c:	3301      	adds	r3, #1
 800139e:	647b      	str	r3, [r7, #68]	@ 0x44
 80013a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013a2:	2b0d      	cmp	r3, #13
 80013a4:	ddd0      	ble.n	8001348 <set_n_freq+0x138>
	    }
	}

	long long int temp_2 = n * temp_1;
 80013a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013a8:	17da      	asrs	r2, r3, #31
 80013aa:	4698      	mov	r8, r3
 80013ac:	4691      	mov	r9, r2
 80013ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b0:	fb08 f203 	mul.w	r2, r8, r3
 80013b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b6:	fb09 f303 	mul.w	r3, r9, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013be:	fba2 4508 	umull	r4, r5, r2, r8
 80013c2:	442b      	add	r3, r5
 80013c4:	461d      	mov	r5, r3
 80013c6:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80013ca:	e9c7 4508 	strd	r4, r5, [r7, #32]
	uint32_t fr_2 = temp_2;
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	61fb      	str	r3, [r7, #28]
	uint16_t lsb2 = 0x4000;
 80013d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	uint16_t msb2 = 0x4000;
 80013da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	for (int i = 0; i < 14; ++i) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013e6:	e02b      	b.n	8001440 <set_n_freq+0x230>
		if (fr_2 & (1 << i)) {
 80013e8:	2201      	movs	r2, #1
 80013ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <set_n_freq+0x200>
			lsb2 |= (1 << i);
 80013fa:	2201      	movs	r2, #1
 80013fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	b21a      	sxth	r2, r3
 8001404:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		}
		if (fr_2 & (1 << (i + 14))) {
 8001410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001412:	330e      	adds	r3, #14
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	461a      	mov	r2, r3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <set_n_freq+0x22a>
			msb2 |= (1 << i);
 8001424:	2201      	movs	r2, #1
 8001426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	for (int i = 0; i < 14; ++i) {
 800143a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800143c:	3301      	adds	r3, #1
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001442:	2b0d      	cmp	r3, #13
 8001444:	ddd0      	ble.n	80013e8 <set_n_freq+0x1d8>
		}
	}

	send_9834(0x2100);//send_data(0x2300);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 800144c:	4798      	blx	r3
	send_9834(lsb);//freq0
 800144e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4610      	mov	r0, r2
 8001456:	4798      	blx	r3
	send_9834(msb);
 8001458:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4610      	mov	r0, r2
 8001460:	4798      	blx	r3
	send_9834(0xc001);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f24c 0001 	movw	r0, #49153	@ 0xc001
 8001468:	4798      	blx	r3


	send_9833(0x2100);//send_data(0x2300);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001470:	4798      	blx	r3
	send_9833(lsb2);//freq0
 8001472:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4610      	mov	r0, r2
 800147a:	4798      	blx	r3
	send_9833(msb2);
 800147c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4610      	mov	r0, r2
 8001484:	4798      	blx	r3
	send_9833(ph_reg);
 8001486:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4610      	mov	r0, r2
 800148e:	4798      	blx	r3

	send_9833(0x2000);//send_data(0x0200);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001496:	4798      	blx	r3
    send_9834(0x0000);//sine wave;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2000      	movs	r0, #0
 800149c:	4798      	blx	r3

}
 800149e:	bf00      	nop
 80014a0:	3758      	adds	r7, #88	@ 0x58
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	b60b60b7 	.word	0xb60b60b7
 80014b0:	017d7a70 	.word	0x017d7a70
 80014b4:	00000000 	.word	0x00000000
 80014b8:	66666666 	.word	0x66666666
 80014bc:	40206666 	.word	0x40206666
 80014c0:	70a3d70a 	.word	0x70a3d70a
 80014c4:	3fd70a3d 	.word	0x3fd70a3d

080014c8 <set_freq>:

//0: sine    1:triangle    2:square /out:sqr
void set_freq(void (*send_data)(uint16_t), long long int freq, int c)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	e9c7 2300 	strd	r2, r3, [r7]
	//20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100
	//-6,-6,-9,

	//9833
	//
	long long int temp = (freq * 268435456 / 25000000) - 6 - 3 * (freq / 1e4 - 2);
 80014d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	0719      	lsls	r1, r3, #28
 80014e2:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80014e6:	0710      	lsls	r0, r2, #28
 80014e8:	a352      	add	r3, pc, #328	@ (adr r3, 8001634 <set_freq+0x16c>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff fc07 	bl	8000d00 <__aeabi_ldivmod>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	1f94      	subs	r4, r2, #6
 80014f8:	f143 35ff 	adc.w	r5, r3, #4294967295
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7ff f818 	bl	8000534 <__aeabi_l2d>
 8001504:	4604      	mov	r4, r0
 8001506:	460d      	mov	r5, r1
 8001508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800150c:	f7ff f812 	bl	8000534 <__aeabi_l2d>
 8001510:	a34a      	add	r3, pc, #296	@ (adr r3, 800163c <set_freq+0x174>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f965 	bl	80007e4 <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152a:	f7fe fe79 	bl	8000220 <__aeabi_dsub>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <set_freq+0x168>)
 800153c:	f7ff f828 	bl	8000590 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7fe fe6a 	bl	8000220 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fc3c 	bl	8000dd0 <__aeabi_d2lz>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t fr = temp;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 8001564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001568:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 800156a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800156e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	e029      	b.n	80015ca <set_freq+0x102>
	    // 对于lsb，直接取fr对应�?????
	    if (fr & (1 << i)) {
 8001576:	2201      	movs	r2, #1
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	461a      	mov	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <set_freq+0xd4>
	        lsb |= (1 << i);
 8001588:	2201      	movs	r2, #1
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	b21a      	sxth	r2, r3
 8001592:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	330e      	adds	r3, #14
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <set_freq+0xfc>
	        msb |= (1 << i);
 80015b0:	2201      	movs	r2, #1
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2b0d      	cmp	r3, #13
 80015ce:	ddd2      	ble.n	8001576 <set_freq+0xae>
	    }
	}
	send_data(0x2100);//send_data(0x2300);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80015d6:	4798      	blx	r3
	send_data(lsb);//freq0
 80015d8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4610      	mov	r0, r2
 80015de:	4798      	blx	r3
	send_data(msb);
 80015e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4610      	mov	r0, r2
 80015e6:	4798      	blx	r3
	send_data(0xc001);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f24c 0001 	movw	r0, #49153	@ 0xc001
 80015ee:	4798      	blx	r3
//	send_data(0x2100);
//	send_data(0x8000);//freq1
//	send_data(0x8432);
//  send_data(0x0028);
	switch(c)
 80015f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d011      	beq.n	800161a <set_freq+0x152>
 80015f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	dc12      	bgt.n	8001622 <set_freq+0x15a>
 80015fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <set_freq+0x142>
 8001602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001604:	2b01      	cmp	r3, #1
 8001606:	d004      	beq.n	8001612 <set_freq+0x14a>
		case 0:send_data(0x0000);break;//send_data(0x0200);
		case 1:send_data(0x0002);break;
		case 2:send_data(0x0028);break;
	}
	//send_data(0x2200);
}
 8001608:	e00b      	b.n	8001622 <set_freq+0x15a>
		case 0:send_data(0x0000);break;//send_data(0x0200);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2000      	movs	r0, #0
 800160e:	4798      	blx	r3
 8001610:	e007      	b.n	8001622 <set_freq+0x15a>
		case 1:send_data(0x0002);break;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2002      	movs	r0, #2
 8001616:	4798      	blx	r3
 8001618:	e003      	b.n	8001622 <set_freq+0x15a>
		case 2:send_data(0x0028);break;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2028      	movs	r0, #40	@ 0x28
 800161e:	4798      	blx	r3
 8001620:	bf00      	nop
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	40080000 	.word	0x40080000
 8001634:	017d7840 	.word	0x017d7840
	...
 8001640:	40c38800 	.word	0x40c38800

08001644 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	bf00      	nop
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f813 	bl	80016d2 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 80016ac:	4604      	mov	r4, r0
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f818 	bl	80016e8 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4621      	mov	r1, r4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f81b 	bl	80016fe <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 80016c8:	bf00      	nop
 80016ca:	4628      	mov	r0, r5
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}

080016d2 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>:
  FixedInt() {}
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>:
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>:
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_Z41__static_initialization_and_destruction_0ii>:
      }
  //Vector2f x = A.colPivHouseholderQr().solve(b);
      Vector3f x = A.householderQr().solve(b);
  auto mag =  x(0)* x(0) + x(1)*x(1);
  return mag;
}
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d11d      	bne.n	80017a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001772:	4293      	cmp	r3, r2
 8001774:	d118      	bne.n	80017a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001778:	f7ff ff6f 	bl	800165a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800177e:	f7ff ff77 	bl	8001670 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8001782:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001784:	f7ff ff7f 	bl	8001686 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8001788:	4621      	mov	r1, r4
 800178a:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800178c:	f7ff ff86 	bl	800169c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8001790:	4809      	ldr	r0, [pc, #36]	@ (80017b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001792:	f7ff ff57 	bl	8001644 <_ZN5Eigen8internal5all_tC1Ev>
 8001796:	4809      	ldr	r0, [pc, #36]	@ (80017bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001798:	f7ff ffbe 	bl	8001718 <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800179e:	f7ff ffc6 	bl	800172e <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>
 80017a2:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80017a4:	f7ff ffce 	bl	8001744 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	20000084 	.word	0x20000084
 80017b4:	2000008c 	.word	0x2000008c
 80017b8:	20000088 	.word	0x20000088
 80017bc:	20000090 	.word	0x20000090
 80017c0:	20000094 	.word	0x20000094
 80017c4:	20000098 	.word	0x20000098

080017c8 <_GLOBAL__sub_I_ic_fitting>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff ffc3 	bl	800175c <_Z41__static_initialization_and_destruction_0ii>
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d109      	bne.n	80017fc <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <HAL_ADC_ConvCpltCallback+0x30>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f003 fe8a 	bl	8005508 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <HAL_ADC_ConvCpltCallback+0x34>)
 80017f6:	f008 f963 	bl	8009ac0 <HAL_TIM_Base_Stop>
 80017fa:	e000      	b.n	80017fe <HAL_ADC_ConvCpltCallback+0x26>
		return;
 80017fc:	bf00      	nop
}
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000009c 	.word	0x2000009c
 8001808:	20001db4 	.word	0x20001db4
 800180c:	20000378 	.word	0x20000378

08001810 <send_ad9834>:

void send_ad9834(uint16_t cmd)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	//SPI3->CR1 |= 1<<1;
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f006 fb40 	bl	8007ea8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8001828:	1db9      	adds	r1, r7, #6
 800182a:	230a      	movs	r3, #10
 800182c:	2201      	movs	r2, #1
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <send_ad9834+0x3c>)
 8001830:	f007 fda5 	bl	800937e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f006 fb33 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000027c 	.word	0x2000027c

08001850 <send_ad9833>:
void send_ad9833(uint16_t cmd)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
	//SPI3->CR1 |= 1<<1;
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001864:	f006 fb20 	bl	8007ea8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8001868:	1db9      	adds	r1, r7, #6
 800186a:	230a      	movs	r3, #10
 800186c:	2201      	movs	r2, #1
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <send_ad9833+0x3c>)
 8001870:	f007 fd85 	bl	800937e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f006 fb13 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000027c 	.word	0x2000027c

08001890 <AFE_Offset_LDAC_Init>:
		return;
	set_freqset_freq(send_ad9833, freq_small, 0);
}

void AFE_Offset_LDAC_Init()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  uint16_t cmd=0x9000;
 8001896:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800189a:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a2:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <AFE_Offset_LDAC_Init+0x38>)
 80018a4:	f006 fb00 	bl	8007ea8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 80018a8:	1db9      	adds	r1, r7, #6
 80018aa:	230a      	movs	r3, #10
 80018ac:	2201      	movs	r2, #1
 80018ae:	4807      	ldr	r0, [pc, #28]	@ (80018cc <AFE_Offset_LDAC_Init+0x3c>)
 80018b0:	f007 fd65 	bl	800937e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <AFE_Offset_LDAC_Init+0x38>)
 80018bc:	f006 faf4 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	48000400 	.word	0x48000400
 80018cc:	2000027c 	.word	0x2000027c

080018d0 <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]

	if (gain_level<=0 || gain_level>6){
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d02d      	beq.n	800193c <AFE_Gain+0x6c>
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d82a      	bhi.n	800193c <AFE_Gain+0x6c>
        return;
    }
    else {
    uint8_t Gain_Levels[6]={
 80018e6:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <AFE_Gain+0x74>)
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f0:	6018      	str	r0, [r3, #0]
 80018f2:	3304      	adds	r3, #4
 80018f4:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	3318      	adds	r3, #24
 80018fc:	443b      	add	r3, r7
 80018fe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <AFE_Gain+0x78>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <AFE_Gain+0x78>)
 800190c:	701a      	strb	r2, [r3, #0]
    uint16_t state=gain_state;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <AFE_Gain+0x78>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <AFE_Gain+0x7c>)
 800191c:	f006 fac4 	bl	8007ea8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&state, 1, 10);
 8001920:	f107 010e 	add.w	r1, r7, #14
 8001924:	230a      	movs	r3, #10
 8001926:	2201      	movs	r2, #1
 8001928:	4809      	ldr	r0, [pc, #36]	@ (8001950 <AFE_Gain+0x80>)
 800192a:	f007 fd28 	bl	800937e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <AFE_Gain+0x7c>)
 8001936:	f006 fab7 	bl	8007ea8 <HAL_GPIO_WritePin>
 800193a:	e000      	b.n	800193e <AFE_Gain+0x6e>
        return;
 800193c:	bf00      	nop
    }
}
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800d5a0 	.word	0x0800d5a0
 8001948:	20000db2 	.word	0x20000db2
 800194c:	48000400 	.word	0x48000400
 8001950:	2000027c 	.word	0x2000027c

08001954 <AFE_Offset>:
/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4095, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level >= 4096) {
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001964:	d220      	bcs.n	80019a8 <AFE_Offset+0x54>
    return ;
  }
  else {
    uint16_t AFE_cmd=((DAC_AFE_OFF2*16+offset_level/256)<<8)+offset_level%256;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	3310      	adds	r3, #16
 800196e:	b29b      	uxth	r3, r3
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b29a      	uxth	r2, r3
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <AFE_Offset+0x5c>)
 8001988:	f006 fa8e 	bl	8007ea8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&AFE_cmd, 1, 10);
 800198c:	f107 010e 	add.w	r1, r7, #14
 8001990:	230a      	movs	r3, #10
 8001992:	2201      	movs	r2, #1
 8001994:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <AFE_Offset+0x60>)
 8001996:	f007 fcf2 	bl	800937e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <AFE_Offset+0x5c>)
 80019a2:	f006 fa81 	bl	8007ea8 <HAL_GPIO_WritePin>
 80019a6:	e000      	b.n	80019aa <AFE_Offset+0x56>
    return ;
 80019a8:	bf00      	nop
  }
}
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	48000400 	.word	0x48000400
 80019b4:	2000027c 	.word	0x2000027c

080019b8 <roundToNearest5>:

int roundToNearest5(int num)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <roundToNearest5+0x44>)
 80019c4:	fb83 1302 	smull	r1, r3, r3, r2
 80019c8:	1059      	asrs	r1, r3, #1
 80019ca:	17d3      	asrs	r3, r2, #31
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	dd05      	ble.n	80019ea <roundToNearest5+0x32>
        return num + (5 - remainder);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1c3 0205 	rsb	r2, r3, #5
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	e002      	b.n	80019f0 <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
    }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	66666667 	.word	0x66666667

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	f5ad 5d64 	sub.w	sp, sp, #14592	@ 0x3900
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0c:	f003 f80f 	bl	8004a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f001 f8f0 	bl	8002bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a14:	f001 fd18 	bl	8003448 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a18:	f001 fcd0 	bl	80033bc <MX_DMA_Init>
  MX_CRC_Init();
 8001a1c:	f001 f9da 	bl	8002dd4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001a20:	f001 fc80 	bl	8003324 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a24:	f001 f938 	bl	8002c98 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001a28:	f001 fab8 	bl	8002f9c <MX_SPI3_Init>
  MX_TIM6_Init();
 8001a2c:	f001 fbbc 	bl	80031a8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001a30:	f001 fa36 	bl	8002ea0 <MX_I2C1_Init>
  MX_DAC1_Init();
 8001a34:	f001 f9fa 	bl	8002e2c <MX_DAC1_Init>
  MX_COMP3_Init();
 8001a38:	f001 f9a6 	bl	8002d88 <MX_COMP3_Init>
  MX_TIM3_Init();
 8001a3c:	f001 fb66 	bl	800310c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a40:	f001 faea 	bl	8003018 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001a44:	f001 fbe6 	bl	8003214 <MX_TIM7_Init>
  MX_TIM15_Init();
 8001a48:	f001 fc1a 	bl	8003280 <MX_TIM15_Init>
  MX_SPI1_Init();
 8001a4c:	f001 fa68 	bl	8002f20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 8001a50:	2300      	movs	r3, #0
 8001a52:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001a56:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e03c      	b.n	8001ad8 <main+0xd8>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 8001a5e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a62:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001d3c <main+0x33c>
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f00b f830 	bl	800cae0 <arm_cos_f32>
 8001a80:	ee10 3a10 	vmov	r3, s0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd2b 	bl	80004e0 <__aeabi_f2d>
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4bac      	ldr	r3, [pc, #688]	@ (8001d40 <main+0x340>)
 8001a90:	f7fe fd7e 	bl	8000590 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	49a8      	ldr	r1, [pc, #672]	@ (8001d40 <main+0x340>)
 8001a9e:	f7fe fbbf 	bl	8000220 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7fe ffcb 	bl	8000a44 <__aeabi_d2f>
 8001aae:	4601      	mov	r1, r0
 8001ab0:	4aa4      	ldr	r2, [pc, #656]	@ (8001d44 <main+0x344>)
 8001ab2:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001ab6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < N; ++i)
 8001ac2:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001ac6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ad2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001adc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae6:	dbba      	blt.n	8001a5e <main+0x5e>
  }

	SPI3->CR1 &= ~(1<<1);
 8001ae8:	4b97      	ldr	r3, [pc, #604]	@ (8001d48 <main+0x348>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a96      	ldr	r2, [pc, #600]	@ (8001d48 <main+0x348>)
 8001aee:	f023 0302 	bic.w	r3, r3, #2
 8001af2:	6013      	str	r3, [r2, #0]
    //SPI3->CR2 &= ~(1<<11);
	AFE_Offset_LDAC_Init();
 8001af4:	f7ff fecc 	bl	8001890 <AFE_Offset_LDAC_Init>
	AFE_Gain(3);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f7ff fee9 	bl	80018d0 <AFE_Gain>
	AFE_Offset(256);
 8001afe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b02:	f7ff ff27 	bl	8001954 <AFE_Offset>
	SPI3->CR1 |= 1<<1;
 8001b06:	4b90      	ldr	r3, [pc, #576]	@ (8001d48 <main+0x348>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001d48 <main+0x348>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6013      	str	r3, [r2, #0]
	//SPI3->CR2 |= 1<<11;

	//setup();
  float fft_in[N] = {0};
 8001b12:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8001b16:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2100      	movs	r1, #0
 8001b22:	f00b fc5f 	bl	800d3e4 <memset>
  float fft_out[N] = {0};
 8001b26:	f507 53c8 	add.w	r3, r7, #6400	@ 0x1900
 8001b2a:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 8001b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b32:	461a      	mov	r2, r3
 8001b34:	2100      	movs	r1, #0
 8001b36:	f00b fc55 	bl	800d3e4 <memset>
  float deal_mag[N] = {0};
 8001b3a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001b3e:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 8001b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b46:	461a      	mov	r2, r3
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f00b fc4b 	bl	800d3e4 <memset>
  int counter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001b54:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001b58:	6013      	str	r3, [r2, #0]
  GPIO_PinState prev_1 = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001b60:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8001b64:	7013      	strb	r3, [r2, #0]
  GPIO_PinState prev_2 = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001b6c:	f102 0236 	add.w	r2, r2, #54	@ 0x36
 8001b70:	7013      	strb	r3, [r2, #0]
  long long int freq_test = 10000;
 8001b72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	f507 5162 	add.w	r1, r7, #14464	@ 0x3880
 8001b7e:	f101 0120 	add.w	r1, r1, #32
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(KR4_GPIO_Port,KR4_Pin,GPIO_PIN_SET);
	  GPIO_PinState curr_1 = HAL_GPIO_ReadPin(UI_SW0_GPIO_Port, UI_SW0_Pin);
 8001b86:	2104      	movs	r1, #4
 8001b88:	4870      	ldr	r0, [pc, #448]	@ (8001d4c <main+0x34c>)
 8001b8a:	f006 f975 	bl	8007e78 <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8001b94:	f102 021f 	add.w	r2, r2, #31
 8001b98:	7013      	strb	r3, [r2, #0]
	  GPIO_PinState curr_2 = HAL_GPIO_ReadPin(UI_SW3_GPIO_Port, UI_SW3_Pin);
 8001b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9e:	486c      	ldr	r0, [pc, #432]	@ (8001d50 <main+0x350>)
 8001ba0:	f006 f96a 	bl	8007e78 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8001baa:	f102 021e 	add.w	r2, r2, #30
 8001bae:	7013      	strb	r3, [r2, #0]
      if(curr_1 && !prev_1)
 8001bb0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8001bb4:	f103 031f 	add.w	r3, r3, #31
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8563 	beq.w	8002686 <main+0xc86>
 8001bc0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001bc4:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 855b 	bne.w	8002686 <main+0xc86>
      {
		  set_sm_freq(1e6 , &htim6);
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <main+0x354>)
 8001bd2:	4861      	ldr	r0, [pc, #388]	@ (8001d58 <main+0x358>)
 8001bd4:	f001 fd58 	bl	8003688 <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001bd8:	4b60      	ldr	r3, [pc, #384]	@ (8001d5c <main+0x35c>)
 8001bda:	4a5e      	ldr	r2, [pc, #376]	@ (8001d54 <main+0x354>)
 8001bdc:	f240 4101 	movw	r1, #1025	@ 0x401
 8001be0:	485f      	ldr	r0, [pc, #380]	@ (8001d60 <main+0x360>)
 8001be2:	f001 fd33 	bl	800364c <samp>
		  uint16_t temp_buffer[1025];
		  make_8to16(adc_buffer, 2050, temp_buffer);
 8001be6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001bea:	3b3c      	subs	r3, #60	@ 0x3c
 8001bec:	461a      	mov	r2, r3
 8001bee:	f640 0102 	movw	r1, #2050	@ 0x802
 8001bf2:	485b      	ldr	r0, [pc, #364]	@ (8001d60 <main+0x360>)
 8001bf4:	f001 fcf4 	bl	80035e0 <make_8to16>
		  int_to_float(temp_buffer + 1, fft_in);
 8001bf8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001bfc:	3a3c      	subs	r2, #60	@ 0x3c
 8001bfe:	3202      	adds	r2, #2
 8001c00:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f001 fd5c 	bl	80036c4 <int_to_float>
		  for (int i = 0; i < N; ++i)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001c12:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e030      	b.n	8001c7c <main+0x27c>
		  {
			  fft_in[i] *= window[i];
 8001c1a:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c24:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b80      	subs	r3, #128	@ 0x80
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	4a43      	ldr	r2, [pc, #268]	@ (8001d44 <main+0x344>)
 8001c36:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c3a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8001c50:	461a      	mov	r2, r3
 8001c52:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c56:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b80      	subs	r3, #128	@ 0x80
 8001c62:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8001c66:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c6a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001c76:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c80:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8a:	dbc6      	blt.n	8001c1a <main+0x21a>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 8001c8c:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8001c90:	f507 51c4 	add.w	r1, r7, #6272	@ 0x1880
 8001c94:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fd38 	bl	800370e <fft_transfer>

		  int freq_1 = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ca4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001ca8:	6013      	str	r3, [r2, #0]
		  int freq_2 = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001cb0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001cb4:	6013      	str	r3, [r2, #0]
		  int waveform_1 = 0;//waveform = 0: sine, waveform = 1: triangle
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001cbc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001cc0:	6013      	str	r3, [r2, #0]
		  int waveform_2 = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001cc8:	f102 0220 	add.w	r2, r2, #32
 8001ccc:	6013      	str	r3, [r2, #0]

		  float max = 0;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001cd6:	f102 021c 	add.w	r2, r2, #28
 8001cda:	6013      	str	r3, [r2, #0]
		  float sec = 0;
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ce4:	f102 0218 	add.w	r2, r2, #24
 8001ce8:	6013      	str	r3, [r2, #0]
		  /*set_freq_wave(deal_mag);*/
		  uint32_t big_mag[6] = {0};
 8001cea:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001cee:	f1a3 0298 	sub.w	r2, r3, #152	@ 0x98
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	6053      	str	r3, [r2, #4]
 8001cf8:	6093      	str	r3, [r2, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
 8001cfc:	6113      	str	r3, [r2, #16]
 8001cfe:	6153      	str	r3, [r2, #20]
		  int index[6] = {0};
 8001d00:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d04:	f1a3 02b0 	sub.w	r2, r3, #176	@ 0xb0
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	6053      	str	r3, [r2, #4]
 8001d0e:	6093      	str	r3, [r2, #8]
 8001d10:	60d3      	str	r3, [r2, #12]
 8001d12:	6113      	str	r3, [r2, #16]
 8001d14:	6153      	str	r3, [r2, #20]
		  int freq_counter = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001d1c:	f102 0214 	add.w	r2, r2, #20
 8001d20:	6013      	str	r3, [r2, #0]
		  uint8_t k = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001d28:	f102 0213 	add.w	r2, r2, #19
 8001d2c:	7013      	strb	r3, [r2, #0]
		  for(int i = 2; i < 512; ++i)
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001d34:	f102 020c 	add.w	r2, r2, #12
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e0b3      	b.n	8001ea4 <main+0x4a4>
 8001d3c:	3bc9422c 	.word	0x3bc9422c
 8001d40:	3fe00000 	.word	0x3fe00000
 8001d44:	20000db4 	.word	0x20000db4
 8001d48:	40003c00 	.word	0x40003c00
 8001d4c:	48000c00 	.word	0x48000c00
 8001d50:	48000800 	.word	0x48000800
 8001d54:	20000378 	.word	0x20000378
 8001d58:	000f4240 	.word	0x000f4240
 8001d5c:	2000009c 	.word	0x2000009c
 8001d60:	200005b0 	.word	0x200005b0
 8001d64:	45160000 	.word	0x45160000
		  {
			  if((deal_mag[i]) > 2400)
 8001d68:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d72:	f103 030c 	add.w	r3, r3, #12
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b80      	subs	r3, #128	@ 0x80
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001d64 <main+0x364>
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dd77      	ble.n	8001e80 <main+0x480>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 8001d90:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d94:	461a      	mov	r2, r3
 8001d96:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d9a:	f103 030c 	add.w	r3, r3, #12
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b80      	subs	r3, #128	@ 0x80
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001dae:	f103 030c 	add.w	r3, r3, #12
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001dba:	4619      	mov	r1, r3
 8001dbc:	0093      	lsls	r3, r2, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3b80      	subs	r3, #128	@ 0x80
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	dd57      	ble.n	8001e80 <main+0x480>
 8001dd0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001dda:	f103 030c 	add.w	r3, r3, #12
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b80      	subs	r3, #128	@ 0x80
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001dee:	f103 030c 	add.w	r3, r3, #12
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	0093      	lsls	r3, r2, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3b80      	subs	r3, #128	@ 0x80
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	dd37      	ble.n	8001e80 <main+0x480>
				  {
					  big_mag[k] = deal_mag[i];
 8001e10:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e14:	461a      	mov	r2, r3
 8001e16:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e1a:	f103 030c 	add.w	r3, r3, #12
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b80      	subs	r3, #128	@ 0x80
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e2e:	f103 0313 	add.w	r3, r3, #19
 8001e32:	7819      	ldrb	r1, [r3, #0]
 8001e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e38:	ee17 0a90 	vmov	r0, s15
 8001e3c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e40:	461a      	mov	r2, r3
 8001e42:	008b      	lsls	r3, r1, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	f843 0c98 	str.w	r0, [r3, #-152]
					  index[k] = i;
 8001e4a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e4e:	f103 0313 	add.w	r3, r3, #19
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e60:	f103 030c 	add.w	r3, r3, #12
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f842 3cb0 	str.w	r3, [r2, #-176]
					  k++;
 8001e6a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e6e:	f103 0313 	add.w	r3, r3, #19
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e7a:	f102 0213 	add.w	r2, r2, #19
 8001e7e:	7013      	strb	r3, [r2, #0]
				  }
			  }
			  if(k == 6) break;
 8001e80:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e84:	f103 0313 	add.w	r3, r3, #19
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d014      	beq.n	8001eb8 <main+0x4b8>
		  for(int i = 2; i < 512; ++i)
 8001e8e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001e92:	f103 030c 	add.w	r3, r3, #12
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e9e:	f102 020c 	add.w	r2, r2, #12
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001ea8:	f103 030c 	add.w	r3, r3, #12
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eb2:	f6ff af59 	blt.w	8001d68 <main+0x368>
 8001eb6:	e000      	b.n	8001eba <main+0x4ba>
			  if(k == 6) break;
 8001eb8:	bf00      	nop
		  }
		  for(int i = 0;i < 6; ++i)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ec0:	f102 0208 	add.w	r2, r2, #8
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e078      	b.n	8001fba <main+0x5ba>
		  {
			  index[i] = ((index[i] * 0.97656) / 5) * 5;
 8001ec8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001ed2:	f103 0308 	add.w	r3, r3, #8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe faeb 	bl	80004bc <__aeabi_i2d>
 8001ee6:	a3b1      	add	r3, pc, #708	@ (adr r3, 80021ac <main+0x7ac>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb50 	bl	8000590 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4baa      	ldr	r3, [pc, #680]	@ (80021a8 <main+0x7a8>)
 8001efe:	f7fe fc71 	bl	80007e4 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4ba6      	ldr	r3, [pc, #664]	@ (80021a8 <main+0x7a8>)
 8001f10:	f7fe fb3e 	bl	8000590 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fd4a 	bl	80009b4 <__aeabi_d2iz>
 8001f20:	4601      	mov	r1, r0
 8001f22:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f26:	461a      	mov	r2, r3
 8001f28:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f2c:	f103 0308 	add.w	r3, r3, #8
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	f843 1cb0 	str.w	r1, [r3, #-176]
			  index[i] = roundToNearest5(index[i]);
 8001f3a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f44:	f103 0308 	add.w	r3, r3, #8
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd30 	bl	80019b8 <roundToNearest5>
 8001f58:	4601      	mov	r1, r0
 8001f5a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f64:	f103 0308 	add.w	r3, r3, #8
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f843 1cb0 	str.w	r1, [r3, #-176]
			  if(index[i] > 0) freq_counter ++;
 8001f72:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f76:	461a      	mov	r2, r3
 8001f78:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f7c:	f103 0308 	add.w	r3, r3, #8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd0a      	ble.n	8001fa4 <main+0x5a4>
 8001f8e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f92:	f103 0314 	add.w	r3, r3, #20
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f9e:	f102 0214 	add.w	r2, r2, #20
 8001fa2:	6013      	str	r3, [r2, #0]
		  for(int i = 0;i < 6; ++i)
 8001fa4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fa8:	f103 0308 	add.w	r3, r3, #8
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001fb4:	f102 0208 	add.w	r2, r2, #8
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fbe:	f103 0308 	add.w	r3, r3, #8
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	f77f af7f 	ble.w	8001ec8 <main+0x4c8>
		  }

		  switch(freq_counter)
 8001fca:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fce:	f103 0314 	add.w	r3, r3, #20
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	f200 8327 	bhi.w	800262a <main+0xc2a>
 8001fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe4 <main+0x5e4>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	0800203b 	.word	0x0800203b
 8001fec:	080020f5 	.word	0x080020f5
 8001ff0:	080022a5 	.word	0x080022a5
 8001ff4:	0800247b 	.word	0x0800247b
 8001ff8:	0800247b 	.word	0x0800247b
		  {
			  case 1:
			  {
				  waveform_1 = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002002:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002006:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800200e:	f102 0220 	add.w	r2, r2, #32
 8002012:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 8002014:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002018:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800201c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002020:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002024:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 8002026:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800202a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800202e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002032:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002036:	6013      	str	r3, [r2, #0]
				  break;
 8002038:	e2f7      	b.n	800262a <main+0xc2a>
			  }
			  case 2 :
			  {
				  if(index[0] == 100 && index[1] ==300)
 800203a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800203e:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d125      	bne.n	8002092 <main+0x692>
 8002046:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800204a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800204e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002052:	d11e      	bne.n	8002092 <main+0x692>
				  {
					  waveform_1 = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800205a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800205e:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002066:	f102 0220 	add.w	r2, r2, #32
 800206a:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 800206c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002070:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002074:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002078:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800207c:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 800207e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002082:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002086:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800208a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800208e:	6013      	str	r3, [r2, #0]
					  break;
 8002090:	e2cb      	b.n	800262a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002098:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800209c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020a4:	f102 0220 	add.w	r2, r2, #32
 80020a8:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 80020aa:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020ae:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80020b2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020b6:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80020ba:	6013      	str	r3, [r2, #0]
				  if(big_mag[1] < 10000)
 80020bc:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020c0:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80020c4:	f242 730f 	movw	r3, #9999	@ 0x270f
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d809      	bhi.n	80020e0 <main+0x6e0>
				  {
					  freq_2 = index[0];
 80020cc:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020d0:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80020d4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020d8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80020dc:	6013      	str	r3, [r2, #0]
				  }
				  else
				  {
					  freq_2 = index[1];
				  }
				  break;
 80020de:	e2a4      	b.n	800262a <main+0xc2a>
					  freq_2 = index[1];
 80020e0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020e4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 80020e8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80020f0:	6013      	str	r3, [r2, #0]
				  break;
 80020f2:	e29a      	b.n	800262a <main+0xc2a>
			  }
			  case 3:
			  {
				  if(big_mag[1]>13000 && big_mag[1]<50000 && big_mag[1]>3000 && big_mag[1]<50000)
 80020f4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020f8:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80020fc:	f243 23c8 	movw	r3, #13000	@ 0x32c8
 8002100:	429a      	cmp	r2, r3
 8002102:	d936      	bls.n	8002172 <main+0x772>
 8002104:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002108:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800210c:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002110:	429a      	cmp	r2, r3
 8002112:	d82e      	bhi.n	8002172 <main+0x772>
 8002114:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002118:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800211c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002120:	429a      	cmp	r2, r3
 8002122:	d926      	bls.n	8002172 <main+0x772>
 8002124:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002128:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800212c:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002130:	429a      	cmp	r2, r3
 8002132:	d81e      	bhi.n	8002172 <main+0x772>
				  {
					  waveform_1 = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800213a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800213e:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002146:	f102 0220 	add.w	r2, r2, #32
 800214a:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 800214c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002150:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002154:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002158:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800215c:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 800215e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002162:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002166:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800216a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800216e:	6013      	str	r3, [r2, #0]
					  break;
 8002170:	e25b      	b.n	800262a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002178:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800217c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002184:	f102 0220 	add.w	r2, r2, #32
 8002188:	6013      	str	r3, [r2, #0]
				  freq_2 = 100;
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002190:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002194:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8002196:	2300      	movs	r3, #0
 8002198:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800219c:	f102 0204 	add.w	r2, r2, #4
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e077      	b.n	8002294 <main+0x894>
 80021a4:	f3af 8000 	nop.w
 80021a8:	40140000 	.word	0x40140000
 80021ac:	c1d29dc7 	.word	0xc1d29dc7
 80021b0:	3fef3ffa 	.word	0x3fef3ffa
				  {
					  if(big_mag[i] > max)
 80021b4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80021b8:	461a      	mov	r2, r3
 80021ba:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021be:	f103 0304 	add.w	r3, r3, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021d8:	f103 031c 	add.w	r3, r3, #28
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d526      	bpl.n	8002238 <main+0x838>
					  {
						  max = big_mag[i];
 80021ea:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80021ee:	461a      	mov	r2, r3
 80021f0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021f4:	f103 0304 	add.w	r3, r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800220e:	f103 031c 	add.w	r3, r3, #28
 8002212:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 8002216:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800221a:	461a      	mov	r2, r3
 800221c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002220:	f103 0304 	add.w	r3, r3, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800222e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002232:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002236:	6013      	str	r3, [r2, #0]
					  }
					  if(index[0] * 3 == index[1] && index[0] * 5 == index[2])
 8002238:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800223c:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	441a      	add	r2, r3
 8002246:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800224a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800224e:	429a      	cmp	r2, r3
 8002250:	d115      	bne.n	800227e <main+0x87e>
 8002252:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002256:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002264:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002268:	429a      	cmp	r2, r3
 800226a:	d108      	bne.n	800227e <main+0x87e>
					  {
						  freq_2 = index[0];
 800226c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002270:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002274:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002278:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800227c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800227e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002282:	f103 0304 	add.w	r3, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800228e:	f102 0204 	add.w	r2, r2, #4
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002298:	f103 0304 	add.w	r3, r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	dd88      	ble.n	80021b4 <main+0x7b4>
					  }
				  }
				  break;
 80022a2:	e1c2      	b.n	800262a <main+0xc2a>
			  }
			  case 4 :
			  {
				  if(index[0] * 3 == index[1] && index[0] * 5 == index[2] && 100 < index[3])
 80022a4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022a8:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	441a      	add	r2, r3
 80022b2:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022b6:	f853 3cac 	ldr.w	r3, [r3, #-172]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d131      	bne.n	8002322 <main+0x922>
 80022be:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022c2:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022d0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d124      	bne.n	8002322 <main+0x922>
 80022d8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022dc:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80022e0:	2b64      	cmp	r3, #100	@ 0x64
 80022e2:	dd1e      	ble.n	8002322 <main+0x922>
				  {
					  waveform_1 = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80022ea:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80022ee:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80022f6:	f102 0220 	add.w	r2, r2, #32
 80022fa:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 80022fc:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002300:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002304:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002308:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800230c:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 800230e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002312:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002316:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800231a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800231e:	6013      	str	r3, [r2, #0]
					  break;
 8002320:	e183      	b.n	800262a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002328:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800232c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002334:	f102 0220 	add.w	r2, r2, #32
 8002338:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800233a:	2300      	movs	r3, #0
 800233c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e093      	b.n	800246c <main+0xa6c>
				  {
					  if(big_mag[i] > sec)
 8002344:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002348:	461a      	mov	r2, r3
 800234a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002364:	f103 0318 	add.w	r3, r3, #24
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d573      	bpl.n	800245e <main+0xa5e>
					  {
						  if(big_mag[i] > max)
 8002376:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800237a:	461a      	mov	r2, r3
 800237c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002392:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002396:	f103 031c 	add.w	r3, r3, #28
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d537      	bpl.n	8002418 <main+0xa18>
						  {
							  sec = max;
 80023a8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023ac:	f103 031c 	add.w	r3, r3, #28
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80023b6:	f102 0218 	add.w	r2, r2, #24
 80023ba:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 80023bc:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023c0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80023ca:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80023ce:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 80023d0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80023d4:	461a      	mov	r2, r3
 80023d6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ec:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023f0:	f103 031c 	add.w	r3, r3, #28
 80023f4:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 80023f8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80023fc:	461a      	mov	r2, r3
 80023fe:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800240c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002410:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e022      	b.n	800245e <main+0xa5e>
						  }
						  else
						  {
							  sec = big_mag[i];
 8002418:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800241c:	461a      	mov	r2, r3
 800241e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002438:	f103 0318 	add.w	r3, r3, #24
 800243c:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8002440:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002454:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002458:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800245c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800245e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b05      	cmp	r3, #5
 8002474:	f77f af66 	ble.w	8002344 <main+0x944>
						  }
					  }
				  }
				  break;
 8002478:	e0d7      	b.n	800262a <main+0xc2a>
			  }
			  case 5 : case 6:
			  {
				  waveform_1 = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002480:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002484:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800248c:	f102 0220 	add.w	r2, r2, #32
 8002490:	6013      	str	r3, [r2, #0]
//				  {
//					  freq_1 = index[0];
//					  freq_2 = index[0];
//					  break;
//				  }
				  for(int i = 0;i < 6; ++i)
 8002492:	2300      	movs	r3, #0
 8002494:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002498:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e0a3      	b.n	80025e8 <main+0xbe8>
				  {
					  if(big_mag[i] > sec)
 80024a0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80024a4:	461a      	mov	r2, r3
 80024a6:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80024aa:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80024c4:	f103 0318 	add.w	r3, r3, #24
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d57d      	bpl.n	80025d2 <main+0xbd2>
					  {
						  if(big_mag[i] > max)
 80024d6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80024da:	461a      	mov	r2, r3
 80024dc:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80024e0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80024fa:	f103 031c 	add.w	r3, r3, #28
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	d53b      	bpl.n	8002584 <main+0xb84>
						  {
							  sec = max;
 800250c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002510:	f103 031c 	add.w	r3, r3, #28
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800251a:	f102 0218 	add.w	r2, r2, #24
 800251e:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 8002520:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002524:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800252e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002532:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8002534:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800253e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002554:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002558:	f103 031c 	add.w	r3, r3, #28
 800255c:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8002560:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002564:	461a      	mov	r2, r3
 8002566:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800256a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002578:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800257c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e026      	b.n	80025d2 <main+0xbd2>
						  }
						  else
						  {
							  sec = big_mag[i];
 8002584:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002588:	461a      	mov	r2, r3
 800258a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800258e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80025a8:	f103 0318 	add.w	r3, r3, #24
 80025ac:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 80025b0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80025b4:	461a      	mov	r2, r3
 80025b6:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025ba:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80025c8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80025cc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80025d0:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 80025d2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025d6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80025e2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025ec:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	f77f af54 	ble.w	80024a0 <main+0xaa0>
						  }
					  }
				  }
				  if(sec < 50000) freq_2 = freq_1;
 80025f8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80025fc:	f103 0318 	add.w	r3, r3, #24
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	ed9f 7ad4 	vldr	s14, [pc, #848]	@ 8002958 <main+0xf58>
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d400      	bmi.n	8002614 <main+0xc14>
				  break;
 8002612:	e009      	b.n	8002628 <main+0xc28>
				  if(sec < 50000) freq_2 = freq_1;
 8002614:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002618:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002622:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002626:	6013      	str	r3, [r2, #0]
				  break;
 8002628:	bf00      	nop
			  }
		  }
		  set_freq(send_ad9833, freq_1 * 1000, waveform_1);
 800262a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800262e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	17da      	asrs	r2, r3, #31
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002642:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002646:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002652:	48c2      	ldr	r0, [pc, #776]	@ (800295c <main+0xf5c>)
 8002654:	f7fe ff38 	bl	80014c8 <set_freq>
		  set_freq(send_ad9834, freq_2 * 1000, waveform_2);
 8002658:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800265c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	17da      	asrs	r2, r3, #31
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002670:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002674:	f103 0320 	add.w	r3, r3, #32
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002680:	48b7      	ldr	r0, [pc, #732]	@ (8002960 <main+0xf60>)
 8002682:	f7fe ff21 	bl	80014c8 <set_freq>
	  }
      prev_1 = curr_1;
 8002686:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800268a:	f103 031f 	add.w	r3, r3, #31
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002694:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8002698:	7013      	strb	r3, [r2, #0]

      if(curr_2 && !prev_2)
 800269a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800269e:	f103 031e 	add.w	r3, r3, #30
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 828f 	beq.w	8002bc8 <main+0x11c8>
 80026aa:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80026ae:	f103 0336 	add.w	r3, r3, #54	@ 0x36
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 8287 	bne.w	8002bc8 <main+0x11c8>
      {
          set_sm_freq(1e6 , &htim6);
 80026ba:	49aa      	ldr	r1, [pc, #680]	@ (8002964 <main+0xf64>)
 80026bc:	48aa      	ldr	r0, [pc, #680]	@ (8002968 <main+0xf68>)
 80026be:	f000 ffe3 	bl	8003688 <set_sm_freq>
          samp(adc_buffer, 1025, &htim6, &hadc1);
 80026c2:	4baa      	ldr	r3, [pc, #680]	@ (800296c <main+0xf6c>)
 80026c4:	4aa7      	ldr	r2, [pc, #668]	@ (8002964 <main+0xf64>)
 80026c6:	f240 4101 	movw	r1, #1025	@ 0x401
 80026ca:	48a9      	ldr	r0, [pc, #676]	@ (8002970 <main+0xf70>)
 80026cc:	f000 ffbe 	bl	800364c <samp>
          uint16_t temp_buffer[1025];
    	  make_8to16(adc_buffer, 2050, temp_buffer);
 80026d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80026d4:	3b3c      	subs	r3, #60	@ 0x3c
 80026d6:	461a      	mov	r2, r3
 80026d8:	f640 0102 	movw	r1, #2050	@ 0x802
 80026dc:	48a4      	ldr	r0, [pc, #656]	@ (8002970 <main+0xf70>)
 80026de:	f000 ff7f 	bl	80035e0 <make_8to16>
    	  int_to_float(temp_buffer + 1, fft_in);
 80026e2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80026e6:	3a3c      	subs	r2, #60	@ 0x3c
 80026e8:	3202      	adds	r2, #2
 80026ea:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f000 ffe7 	bl	80036c4 <int_to_float>
		  for (int i = 0; i < N; ++i)
 80026f6:	2300      	movs	r3, #0
 80026f8:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80026fc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e030      	b.n	8002766 <main+0xd66>
		  {
			  fft_in[i] *= window[i];
 8002704:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8002708:	461a      	mov	r2, r3
 800270a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800270e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b80      	subs	r3, #128	@ 0x80
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	4a95      	ldr	r2, [pc, #596]	@ (8002974 <main+0xf74>)
 8002720:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002724:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800273a:	461a      	mov	r2, r3
 800273c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002740:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b80      	subs	r3, #128	@ 0x80
 800274c:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8002750:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002754:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002760:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800276a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002774:	dbc6      	blt.n	8002704 <main+0xd04>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 8002776:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 800277a:	f507 51c4 	add.w	r1, r7, #6272	@ 0x1880
 800277e:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8002782:	4618      	mov	r0, r3
 8002784:	f000 ffc3 	bl	800370e <fft_transfer>

    	  long long int freq_small = 0;
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f507 5162 	add.w	r1, r7, #14464	@ 0x3880
 8002794:	f101 0110 	add.w	r1, r1, #16
 8002798:	e9c1 2300 	strd	r2, r3, [r1]
    	  int m = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80027a2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80027a6:	6013      	str	r3, [r2, #0]
    	  int target[2];
		  for(int i = 2; i < 512; ++i)
 80027a8:	2302      	movs	r3, #2
 80027aa:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80027ae:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e081      	b.n	80028ba <main+0xeba>
		  {
			  if((deal_mag[i]) > 40000)
 80027b6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80027ba:	461a      	mov	r2, r3
 80027bc:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80027c0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b80      	subs	r3, #128	@ 0x80
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002978 <main+0xf78>
 80027d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	dd5b      	ble.n	8002896 <main+0xe96>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 80027de:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80027e2:	461a      	mov	r2, r3
 80027e4:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80027e8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b80      	subs	r3, #128	@ 0x80
 80027f4:	ed93 7a00 	vldr	s14, [r3]
 80027f8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80027fc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002808:	4619      	mov	r1, r3
 800280a:	0093      	lsls	r3, r2, #2
 800280c:	440b      	add	r3, r1
 800280e:	3b80      	subs	r3, #128	@ 0x80
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	dd3b      	ble.n	8002896 <main+0xe96>
 800281e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002822:	461a      	mov	r2, r3
 8002824:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002828:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b80      	subs	r3, #128	@ 0x80
 8002834:	ed93 7a00 	vldr	s14, [r3]
 8002838:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800283c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002848:	4619      	mov	r1, r3
 800284a:	0093      	lsls	r3, r2, #2
 800284c:	440b      	add	r3, r1
 800284e:	3b80      	subs	r3, #128	@ 0x80
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	dd1b      	ble.n	8002896 <main+0xe96>
				  {
					  target[m] = i;
 800285e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002862:	4619      	mov	r1, r3
 8002864:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002868:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	440a      	add	r2, r1
 8002872:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002876:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f842 3cb8 	str.w	r3, [r2, #-184]
					  m++;
 8002880:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002884:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002890:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002894:	6013      	str	r3, [r2, #0]
				  }
			  }
			  if(m == 2) break;
 8002896:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800289a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d014      	beq.n	80028ce <main+0xece>
		  for(int i = 2; i < 512; ++i)
 80028a4:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80028a8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80028b4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80028be:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c8:	f6ff af75 	blt.w	80027b6 <main+0xdb6>
 80028cc:	e000      	b.n	80028d0 <main+0xed0>
			  if(m == 2) break;
 80028ce:	bf00      	nop
		  }
    	  int freq_about = target[0] * 0.9766;
 80028d0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80028d4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fdef 	bl	80004bc <__aeabi_i2d>
 80028de:	a31c      	add	r3, pc, #112	@ (adr r3, 8002950 <main+0xf50>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fe54 	bl	8000590 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fe f860 	bl	80009b4 <__aeabi_d2iz>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80028fa:	f102 020c 	add.w	r2, r2, #12
 80028fe:	6013      	str	r3, [r2, #0]
    	  freq_small = roundToNearest5(freq_about);
 8002900:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002904:	f103 030c 	add.w	r3, r3, #12
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f7ff f855 	bl	80019b8 <roundToNearest5>
 800290e:	4603      	mov	r3, r0
 8002910:	17da      	asrs	r2, r3, #31
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800291a:	f102 0210 	add.w	r2, r2, #16
 800291e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002922:	e9c2 3400 	strd	r3, r4, [r2]
          //get_LIA_freq(fft_in, freq_about, &freq_small);
		  int times;
		  float freq_big = freq_small;
 8002926:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800292a:	f103 0310 	add.w	r3, r3, #16
 800292e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002932:	f7fe f9a7 	bl	8000c84 <__aeabi_l2f>
 8002936:	4603      	mov	r3, r0
 8002938:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800293c:	f102 0208 	add.w	r2, r2, #8
 8002940:	6013      	str	r3, [r2, #0]
		  for(int i = 2; i < (512 / freq_small); ++i)
 8002942:	2302      	movs	r3, #2
 8002944:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002948:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e0c0      	b.n	8002ad2 <main+0x10d2>
 8002950:	a4a8c155 	.word	0xa4a8c155
 8002954:	3fef404e 	.word	0x3fef404e
 8002958:	47435000 	.word	0x47435000
 800295c:	08001851 	.word	0x08001851
 8002960:	08001811 	.word	0x08001811
 8002964:	20000378 	.word	0x20000378
 8002968:	000f4240 	.word	0x000f4240
 800296c:	2000009c 	.word	0x2000009c
 8002970:	200005b0 	.word	0x200005b0
 8002974:	20000db4 	.word	0x20000db4
 8002978:	471c4000 	.word	0x471c4000
		  {
			  float ntimes = i * freq_small * 1.024;
 800297c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002980:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	17da      	asrs	r2, r3, #31
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	61fa      	str	r2, [r7, #28]
 800298c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002990:	f103 0310 	add.w	r3, r3, #16
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800299a:	462a      	mov	r2, r5
 800299c:	fb02 f203 	mul.w	r2, r2, r3
 80029a0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80029a4:	f103 0314 	add.w	r3, r3, #20
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4621      	mov	r1, r4
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	441a      	add	r2, r3
 80029b2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80029b6:	f103 0310 	add.w	r3, r3, #16
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4621      	mov	r1, r4
 80029be:	fba3 1301 	umull	r1, r3, r3, r1
 80029c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c4:	460b      	mov	r3, r1
 80029c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ca:	18d3      	adds	r3, r2, r3
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80029d2:	f7fd fdaf 	bl	8000534 <__aeabi_l2d>
 80029d6:	a385      	add	r3, pc, #532	@ (adr r3, 8002bec <main+0x11ec>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd fdd8 	bl	8000590 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f82c 	bl	8000a44 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80029f2:	f102 0204 	add.w	r2, r2, #4
 80029f6:	6013      	str	r3, [r2, #0]
			  int ntime = ntimes;
 80029f8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80029fc:	f103 0304 	add.w	r3, r3, #4
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a08:	ee17 3a90 	vmov	r3, s15
 8002a0c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002a10:	6013      	str	r3, [r2, #0]
			  if(ntime > 512) break;
 8002a12:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a1c:	dc79      	bgt.n	8002b12 <main+0x1112>
			  if((deal_mag[ntime]) > 20000)
 8002a1e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002a22:	461a      	mov	r2, r3
 8002a24:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b80      	subs	r3, #128	@ 0x80
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002be0 <main+0x11e0>
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	dd3c      	ble.n	8002abc <main+0x10bc>
			  {
                  freq_big = freq_small * i;
 8002a42:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a46:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	17da      	asrs	r2, r3, #31
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	617a      	str	r2, [r7, #20]
 8002a52:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a56:	f103 0310 	add.w	r3, r3, #16
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a60:	462a      	mov	r2, r5
 8002a62:	fb02 f203 	mul.w	r2, r2, r3
 8002a66:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a6a:	f103 0314 	add.w	r3, r3, #20
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4621      	mov	r1, r4
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	441a      	add	r2, r3
 8002a78:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002a7c:	f103 0310 	add.w	r3, r3, #16
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4621      	mov	r1, r4
 8002a84:	fba3 1301 	umull	r1, r3, r3, r1
 8002a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	18d3      	adds	r3, r2, r3
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a98:	f7fe f8f4 	bl	8000c84 <__aeabi_l2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002aa2:	f102 0208 	add.w	r2, r2, #8
 8002aa6:	6013      	str	r3, [r2, #0]
                  times = i;
 8002aa8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002aac:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002ab6:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002aba:	6013      	str	r3, [r2, #0]
		  for(int i = 2; i < (512 / freq_small); ++i)
 8002abc:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002ac0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002acc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002ad6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	17da      	asrs	r2, r3, #31
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	60fa      	str	r2, [r7, #12]
 8002ae2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002ae6:	f103 0310 	add.w	r3, r3, #16
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	f7fe f903 	bl	8000d00 <__aeabi_ldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b02:	4621      	mov	r1, r4
 8002b04:	4291      	cmp	r1, r2
 8002b06:	4629      	mov	r1, r5
 8002b08:	eb71 0303 	sbcs.w	r3, r1, r3
 8002b0c:	f6ff af36 	blt.w	800297c <main+0xf7c>
 8002b10:	e000      	b.n	8002b14 <main+0x1114>
			  if(ntime > 512) break;
 8002b12:	bf00      	nop
			  }
		  }
		  counter += 5;
 8002b14:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002b18:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3305      	adds	r3, #5
 8002b20:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002b24:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002b28:	6013      	str	r3, [r2, #0]
		  if(counter == 180) counter = 0;
 8002b2a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002b2e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2bb4      	cmp	r3, #180	@ 0xb4
 8002b36:	d105      	bne.n	8002b44 <main+0x1144>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002b3e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002b42:	6013      	str	r3, [r2, #0]
          set_n_freq(send_ad9834, send_ad9833, freq_small * 1000, times, 90);
 8002b44:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002b48:	f103 0310 	add.w	r3, r3, #16
 8002b4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b50:	4622      	mov	r2, r4
 8002b52:	462b      	mov	r3, r5
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f04f 0100 	mov.w	r1, #0
 8002b5c:	0159      	lsls	r1, r3, #5
 8002b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b62:	0150      	lsls	r0, r2, #5
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	ebb2 0804 	subs.w	r8, r2, r4
 8002b6c:	eb63 0905 	sbc.w	r9, r3, r5
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002b7c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8002b80:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002b84:	4690      	mov	r8, r2
 8002b86:	4699      	mov	r9, r3
 8002b88:	eb18 0a04 	adds.w	sl, r8, r4
 8002b8c:	eb49 0b05 	adc.w	fp, r9, r5
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	469b      	mov	fp, r3
 8002ba8:	4650      	mov	r0, sl
 8002baa:	4659      	mov	r1, fp
 8002bac:	235a      	movs	r3, #90	@ 0x5a
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002bb4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <main+0x11e4>)
 8002bc2:	4809      	ldr	r0, [pc, #36]	@ (8002be8 <main+0x11e8>)
 8002bc4:	f7fe fb24 	bl	8001210 <set_n_freq>
      }
      prev_2 = curr_2;
 8002bc8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002bcc:	f103 031e 	add.w	r3, r3, #30
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002bd6:	f102 0236 	add.w	r2, r2, #54	@ 0x36
 8002bda:	7013      	strb	r3, [r2, #0]
  {
 8002bdc:	f7fe bfd3 	b.w	8001b86 <main+0x186>
 8002be0:	469c4000 	.word	0x469c4000
 8002be4:	08001851 	.word	0x08001851
 8002be8:	08001811 	.word	0x08001811
 8002bec:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bf0:	3ff0624d 	.word	0x3ff0624d

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	@ 0x50
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	f107 0318 	add.w	r3, r7, #24
 8002bfe:	2238      	movs	r2, #56	@ 0x38
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f00a fbee 	bl	800d3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c1a:	f005 fa8f 	bl	800813c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8002c30:	2305      	movs	r3, #5
 8002c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002c34:	233c      	movs	r3, #60	@ 0x3c
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c40:	2302      	movs	r3, #2
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 fb2b 	bl	80082a4 <HAL_RCC_OscConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002c54:	f000 fcbe 	bl	80035d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c58:	230f      	movs	r3, #15
 8002c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2104      	movs	r1, #4
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 fe29 	bl	80088c8 <HAL_RCC_ClockConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c7c:	f000 fcaa 	bl	80035d4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002c86:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c8a:	f005 ff59 	bl	8008b40 <HAL_RCC_MCOConfig>
}
 8002c8e:	bf00      	nop
 8002c90:	3750      	adds	r7, #80	@ 0x50
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	@ 0x30
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2220      	movs	r2, #32
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f00a fb97 	bl	800d3e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cb6:	4b32      	ldr	r3, [pc, #200]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cb8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002cbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cca:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cde:	2204      	movs	r2, #4
 8002ce0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ce2:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002cfc:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002cfe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d04:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d22:	4817      	ldr	r0, [pc, #92]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d24:	f002 f960 	bl	8004fe8 <HAL_ADC_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8002d2e:	f000 fc51 	bl	80035d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4810      	ldr	r0, [pc, #64]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d3e:	f003 fb05 	bl	800634c <HAL_ADCEx_MultiModeConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002d48:	f000 fc44 	bl	80035d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <MX_ADC1_Init+0xec>)
 8002d4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d50:	2306      	movs	r3, #6
 8002d52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d58:	237f      	movs	r3, #127	@ 0x7f
 8002d5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_ADC1_Init+0xe8>)
 8002d6a:	f002 fc43 	bl	80055f4 <HAL_ADC_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002d74:	f000 fc2e 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	3730      	adds	r7, #48	@ 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2000009c 	.word	0x2000009c
 8002d84:	04300002 	.word	0x04300002

08002d88 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002d8e:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <MX_COMP3_Init+0x48>)
 8002d90:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002d9a:	2250      	movs	r2, #80	@ 0x50
 8002d9c:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002da6:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002daa:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8002db8:	4804      	ldr	r0, [pc, #16]	@ (8002dcc <MX_COMP3_Init+0x44>)
 8002dba:	f003 fd1f 	bl	80067fc <HAL_COMP_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8002dc4:	f000 fc06 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000168 	.word	0x20000168
 8002dd0:	40010208 	.word	0x40010208

08002dd4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002dda:	4a13      	ldr	r2, [pc, #76]	@ (8002e28 <MX_CRC_Init+0x54>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002dec:	f241 0221 	movw	r2, #4129	@ 0x1021
 8002df0:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002df4:	2208      	movs	r2, #8
 8002df6:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e10:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <MX_CRC_Init+0x50>)
 8002e12:	f003 ff9d 	bl	8006d50 <HAL_CRC_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002e1c:	f000 fbda 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000018c 	.word	0x2000018c
 8002e28:	40023000 	.word	0x40023000

08002e2c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	@ 0x30
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e32:	463b      	mov	r3, r7
 8002e34:	2230      	movs	r2, #48	@ 0x30
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f00a fad3 	bl	800d3e4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002e3e:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <MX_DAC1_Init+0x6c>)
 8002e40:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <MX_DAC1_Init+0x70>)
 8002e42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002e44:	4814      	ldr	r0, [pc, #80]	@ (8002e98 <MX_DAC1_Init+0x6c>)
 8002e46:	f004 f989 	bl	800715c <HAL_DAC_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002e50:	f000 fbc0 	bl	80035d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002e54:	2302      	movs	r3, #2
 8002e56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4806      	ldr	r0, [pc, #24]	@ (8002e98 <MX_DAC1_Init+0x6c>)
 8002e80:	f004 f98e 	bl	80071a0 <HAL_DAC_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002e8a:	f000 fba3 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	@ 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200001b0 	.word	0x200001b0
 8002e9c:	50000800 	.word	0x50000800

08002ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f18 <MX_I2C1_Init+0x78>)
 8002ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002eac:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <MX_I2C1_Init+0x7c>)
 8002eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ebc:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eda:	480e      	ldr	r0, [pc, #56]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002edc:	f004 fffc 	bl	8007ed8 <HAL_I2C_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ee6:	f000 fb75 	bl	80035d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eea:	2100      	movs	r1, #0
 8002eec:	4809      	ldr	r0, [pc, #36]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002eee:	f005 f88e 	bl	800800e <HAL_I2CEx_ConfigAnalogFilter>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ef8:	f000 fb6c 	bl	80035d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002efc:	2100      	movs	r1, #0
 8002efe:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <MX_I2C1_Init+0x74>)
 8002f00:	f005 f8d0 	bl	80080a4 <HAL_I2CEx_ConfigDigitalFilter>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f0a:	f000 fb63 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200001c4 	.word	0x200001c4
 8002f18:	40005400 	.word	0x40005400
 8002f1c:	10e32879 	.word	0x10e32879

08002f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f26:	4a1c      	ldr	r2, [pc, #112]	@ (8002f98 <MX_SPI1_Init+0x78>)
 8002f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f32:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f38:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f56:	2220      	movs	r2, #32
 8002f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f6e:	2207      	movs	r2, #7
 8002f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f7e:	4805      	ldr	r0, [pc, #20]	@ (8002f94 <MX_SPI1_Init+0x74>)
 8002f80:	f006 f952 	bl	8009228 <HAL_SPI_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f8a:	f000 fb23 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000218 	.word	0x20000218
 8002f98:	40013000 	.word	0x40013000

08002f9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8003014 <MX_SPI3_Init+0x78>)
 8002fa4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002fac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fae:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002fb4:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fb6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002fba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fd2:	2218      	movs	r2, #24
 8002fd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002fea:	2207      	movs	r2, #7
 8002fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ffa:	4805      	ldr	r0, [pc, #20]	@ (8003010 <MX_SPI3_Init+0x74>)
 8002ffc:	f006 f914 	bl	8009228 <HAL_SPI_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003006:	f000 fae5 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000027c 	.word	0x2000027c
 8003014:	40003c00 	.word	0x40003c00

08003018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	@ 0x30
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0320 	add.w	r3, r7, #32
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <MX_TIM2_Init+0xf0>)
 8003046:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800304a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800304c:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <MX_TIM2_Init+0xf0>)
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003052:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <MX_TIM2_Init+0xf0>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003058:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <MX_TIM2_Init+0xf0>)
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003060:	4b29      	ldr	r3, [pc, #164]	@ (8003108 <MX_TIM2_Init+0xf0>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003066:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <MX_TIM2_Init+0xf0>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800306c:	4826      	ldr	r0, [pc, #152]	@ (8003108 <MX_TIM2_Init+0xf0>)
 800306e:	f006 fc5f 	bl	8009930 <HAL_TIM_Base_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003078:	f000 faac 	bl	80035d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003080:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003082:	f107 0320 	add.w	r3, r7, #32
 8003086:	4619      	mov	r1, r3
 8003088:	481f      	ldr	r0, [pc, #124]	@ (8003108 <MX_TIM2_Init+0xf0>)
 800308a:	f006 fe3d 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003094:	f000 fa9e 	bl	80035d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003098:	481b      	ldr	r0, [pc, #108]	@ (8003108 <MX_TIM2_Init+0xf0>)
 800309a:	f006 fd38 	bl	8009b0e <HAL_TIM_IC_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80030a4:	f000 fa96 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4619      	mov	r1, r3
 80030b6:	4814      	ldr	r0, [pc, #80]	@ (8003108 <MX_TIM2_Init+0xf0>)
 80030b8:	f007 f9b6 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80030c2:	f000 fa87 	bl	80035d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030ca:	2301      	movs	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	2200      	movs	r2, #0
 80030da:	4619      	mov	r1, r3
 80030dc:	480a      	ldr	r0, [pc, #40]	@ (8003108 <MX_TIM2_Init+0xf0>)
 80030de:	f006 fd77 	bl	8009bd0 <HAL_TIM_IC_ConfigChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80030e8:	f000 fa74 	bl	80035d4 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 80030ec:	2200      	movs	r2, #0
 80030ee:	2103      	movs	r1, #3
 80030f0:	4805      	ldr	r0, [pc, #20]	@ (8003108 <MX_TIM2_Init+0xf0>)
 80030f2:	f007 fa2f 	bl	800a554 <HAL_TIMEx_TISelection>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80030fc:	f000 fa6a 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003100:	bf00      	nop
 8003102:	3730      	adds	r7, #48	@ 0x30
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200002e0 	.word	0x200002e0

0800310c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800312a:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <MX_TIM3_Init+0x94>)
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <MX_TIM3_Init+0x98>)
 800312e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <MX_TIM3_Init+0x94>)
 8003132:	2200      	movs	r2, #0
 8003134:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <MX_TIM3_Init+0x94>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800313c:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <MX_TIM3_Init+0x94>)
 800313e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003142:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003144:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <MX_TIM3_Init+0x94>)
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <MX_TIM3_Init+0x94>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003150:	4813      	ldr	r0, [pc, #76]	@ (80031a0 <MX_TIM3_Init+0x94>)
 8003152:	f006 fbed 	bl	8009930 <HAL_TIM_Base_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800315c:	f000 fa3a 	bl	80035d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	4619      	mov	r1, r3
 800316c:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <MX_TIM3_Init+0x94>)
 800316e:	f006 fdcb 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003178:	f000 fa2c 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <MX_TIM3_Init+0x94>)
 800318a:	f007 f94d 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003194:	f000 fa1e 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	2000032c 	.word	0x2000032c
 80031a4:	40000400 	.word	0x40000400

080031a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <MX_TIM6_Init+0x64>)
 80031ba:	4a15      	ldr	r2, [pc, #84]	@ (8003210 <MX_TIM6_Init+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <MX_TIM6_Init+0x64>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c4:	4b11      	ldr	r3, [pc, #68]	@ (800320c <MX_TIM6_Init+0x64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <MX_TIM6_Init+0x64>)
 80031cc:	2295      	movs	r2, #149	@ 0x95
 80031ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d0:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <MX_TIM6_Init+0x64>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031d6:	480d      	ldr	r0, [pc, #52]	@ (800320c <MX_TIM6_Init+0x64>)
 80031d8:	f006 fbaa 	bl	8009930 <HAL_TIM_Base_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80031e2:	f000 f9f7 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031e6:	2320      	movs	r3, #32
 80031e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4806      	ldr	r0, [pc, #24]	@ (800320c <MX_TIM6_Init+0x64>)
 80031f4:	f007 f918 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80031fe:	f000 f9e9 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000378 	.word	0x20000378
 8003210:	40001000 	.word	0x40001000

08003214 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <MX_TIM7_Init+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <MX_TIM7_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800323c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003244:	480c      	ldr	r0, [pc, #48]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003246:	f006 fb73 	bl	8009930 <HAL_TIM_Base_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003250:	f000 f9c0 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	@ (8003278 <MX_TIM7_Init+0x64>)
 8003262:	f007 f8e1 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800326c:	f000 f9b2 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200003c4 	.word	0x200003c4
 800327c:	40001400 	.word	0x40001400

08003280 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003286:	f107 0310 	add.w	r3, r7, #16
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800329e:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <MX_TIM15_Init+0xa0>)
 80032a2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b8:	4b18      	ldr	r3, [pc, #96]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80032be:	4b17      	ldr	r3, [pc, #92]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80032ca:	4814      	ldr	r0, [pc, #80]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032cc:	f006 fb30 	bl	8009930 <HAL_TIM_Base_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80032d6:	f000 f97d 	bl	80035d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4619      	mov	r1, r3
 80032e6:	480d      	ldr	r0, [pc, #52]	@ (800331c <MX_TIM15_Init+0x9c>)
 80032e8:	f006 fd0e 	bl	8009d08 <HAL_TIM_ConfigClockSource>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80032f2:	f000 f96f 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032f6:	2320      	movs	r3, #32
 80032f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	4619      	mov	r1, r3
 8003302:	4806      	ldr	r0, [pc, #24]	@ (800331c <MX_TIM15_Init+0x9c>)
 8003304:	f007 f890 	bl	800a428 <HAL_TIMEx_MasterConfigSynchronization>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800330e:	f000 f961 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000410 	.word	0x20000410
 8003320:	40014000 	.word	0x40014000

08003324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003328:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 800332a:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <MX_USART2_UART_Init+0x94>)
 800332c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800332e:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003336:	4b1f      	ldr	r3, [pc, #124]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003342:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003348:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 800334a:	220c      	movs	r2, #12
 800334c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334e:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003354:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003360:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003366:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003368:	2200      	movs	r2, #0
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800336c:	4811      	ldr	r0, [pc, #68]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 800336e:	f007 f97f 	bl	800a670 <HAL_UART_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003378:	f000 f92c 	bl	80035d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800337c:	2100      	movs	r1, #0
 800337e:	480d      	ldr	r0, [pc, #52]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003380:	f008 fcc0 	bl	800bd04 <HAL_UARTEx_SetTxFifoThreshold>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800338a:	f000 f923 	bl	80035d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800338e:	2100      	movs	r1, #0
 8003390:	4808      	ldr	r0, [pc, #32]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 8003392:	f008 fcf5 	bl	800bd80 <HAL_UARTEx_SetRxFifoThreshold>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800339c:	f000 f91a 	bl	80035d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033a0:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <MX_USART2_UART_Init+0x90>)
 80033a2:	f008 fc76 	bl	800bc92 <HAL_UARTEx_DisableFifoMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80033ac:	f000 f912 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200004bc 	.word	0x200004bc
 80033b8:	40004400 	.word	0x40004400

080033bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <MX_DMA_Init+0x88>)
 80033c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003444 <MX_DMA_Init+0x88>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80033ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <MX_DMA_Init+0x88>)
 80033d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033da:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <MX_DMA_Init+0x88>)
 80033dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033de:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <MX_DMA_Init+0x88>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80033e6:	4b17      	ldr	r3, [pc, #92]	@ (8003444 <MX_DMA_Init+0x88>)
 80033e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033f2:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <MX_DMA_Init+0x88>)
 80033f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f6:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <MX_DMA_Init+0x88>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <MX_DMA_Init+0x88>)
 8003400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	200b      	movs	r0, #11
 8003410:	f003 fc69 	bl	8006ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003414:	200b      	movs	r0, #11
 8003416:	f003 fc80 	bl	8006d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	200c      	movs	r0, #12
 8003420:	f003 fc61 	bl	8006ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003424:	200c      	movs	r0, #12
 8003426:	f003 fc78 	bl	8006d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2063      	movs	r0, #99	@ 0x63
 8003430:	f003 fc59 	bl	8006ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8003434:	2063      	movs	r0, #99	@ 0x63
 8003436:	f003 fc70 	bl	8006d1a <HAL_NVIC_EnableIRQ>

}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000

08003448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800345e:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800346a:	4b56      	ldr	r3, [pc, #344]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003476:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 800347c:	f043 0320 	orr.w	r3, r3, #32
 8003480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003482:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	4b4d      	ldr	r3, [pc, #308]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	4a4c      	ldr	r2, [pc, #304]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800349a:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034aa:	4a46      	ldr	r2, [pc, #280]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b2:	4b44      	ldr	r3, [pc, #272]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	4a40      	ldr	r2, [pc, #256]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ca:	4b3e      	ldr	r3, [pc, #248]	@ (80035c4 <MX_GPIO_Init+0x17c>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, con_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80034d6:	2200      	movs	r2, #0
 80034d8:	f640 0101 	movw	r1, #2049	@ 0x801
 80034dc:	483a      	ldr	r0, [pc, #232]	@ (80035c8 <MX_GPIO_Init+0x180>)
 80034de:	f004 fce3 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_EN_Pin|AD9834_EN_Pin, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ec:	f004 fcdc 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034f6:	4835      	ldr	r0, [pc, #212]	@ (80035cc <MX_GPIO_Init+0x184>)
 80034f8:	f004 fcd6 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 80034fc:	2201      	movs	r2, #1
 80034fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003502:	4832      	ldr	r0, [pc, #200]	@ (80035cc <MX_GPIO_Init+0x184>)
 8003504:	f004 fcd0 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UI_SW3_Pin */
  GPIO_InitStruct.Pin = UI_SW3_Pin;
 8003508:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW3_GPIO_Port, &GPIO_InitStruct);
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4619      	mov	r1, r3
 800351c:	482a      	ldr	r0, [pc, #168]	@ (80035c8 <MX_GPIO_Init+0x180>)
 800351e:	f004 fb29 	bl	8007b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : con_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = con_Pin|LCD_DC_Pin;
 8003522:	f640 0301 	movw	r3, #2049	@ 0x801
 8003526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003528:	2301      	movs	r3, #1
 800352a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4619      	mov	r1, r3
 800353a:	4823      	ldr	r0, [pc, #140]	@ (80035c8 <MX_GPIO_Init+0x180>)
 800353c:	f004 fb1a 	bl	8007b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800354e:	2302      	movs	r3, #2
 8003550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003560:	f004 fb08 	bl	8007b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_EN_Pin AD9834_EN_Pin */
  GPIO_InitStruct.Pin = AD9833_EN_Pin|AD9834_EN_Pin;
 8003564:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003580:	f004 faf8 	bl	8007b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_SW0_Pin */
  GPIO_InitStruct.Pin = UI_SW0_Pin;
 8003584:	2304      	movs	r3, #4
 8003586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358c:	2301      	movs	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW0_GPIO_Port, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	480e      	ldr	r0, [pc, #56]	@ (80035d0 <MX_GPIO_Init+0x188>)
 8003598:	f004 faec 	bl	8007b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 800359c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4805      	ldr	r0, [pc, #20]	@ (80035cc <MX_GPIO_Init+0x184>)
 80035b6:	f004 fadd 	bl	8007b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	@ 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000400 	.word	0x48000400
 80035d0:	48000c00 	.word	0x48000c00

080035d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035dc:	bf00      	nop
 80035de:	e7fd      	b.n	80035dc <Error_Handler+0x8>

080035e0 <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
	int i = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01b      	beq.n	8003632 <make_8to16+0x52>
		return 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e01f      	b.n	800363e <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b21a      	sxth	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	3301      	adds	r3, #1
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	440b      	add	r3, r1
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b21b      	sxth	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b219      	sxth	r1, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	b28a      	uxth	r2, r1
 800362a:	801a      	strh	r2, [r3, #0]
		++i;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	085a      	lsrs	r2, r3, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	d8e0      	bhi.n	80035fe <make_8to16+0x1e>
	}
	return new_buffer;
 800363c:	687b      	ldr	r3, [r7, #4]
}
 800363e:	4618      	mov	r0, r3
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 f9c0 	bl	80099e0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f001 fe7b 	bl	8005360 <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <samp+0x38>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <samp+0x38>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d000      	beq.n	800367a <samp+0x2e>
 8003678:	e7fa      	b.n	8003670 <samp+0x24>
    		break;
 800367a:	bf00      	nop
    }
    return;
 800367c:	bf00      	nop
}
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20001db4 	.word	0x20001db4

08003688 <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 8003692:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <set_sm_freq+0x38>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
	if (set <38)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b25      	cmp	r3, #37	@ 0x25
 80036a4:	d801      	bhi.n	80036aa <set_sm_freq+0x22>
		set = 38;
 80036a6:	2326      	movs	r3, #38	@ 0x26
 80036a8:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e011      	b.n	80036f8 <int_to_float+0x34>
		fft_in[i] = buffer[i];
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	8819      	ldrh	r1, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	ee07 1a90 	vmov	s15, r1
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ee:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d1e9      	bne.n	80036d4 <int_to_float+0x10>
	}
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	@ 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f008 fc0e 	bl	800bf40 <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 8003724:	f107 0010 	add.w	r0, r7, #16
 8003728:	2300      	movs	r3, #0
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	f008 fcd5 	bl	800c0dc <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 8003732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	68b8      	ldr	r0, [r7, #8]
 800373a:	f009 f8ad 	bl	800c898 <arm_cmplx_mag_f32>
}
 800373e:	bf00      	nop
 8003740:	3728      	adds	r7, #40	@ 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <HAL_MspInit+0x44>)
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	4a0e      	ldr	r2, [pc, #56]	@ (800378c <HAL_MspInit+0x44>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6613      	str	r3, [r2, #96]	@ 0x60
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <HAL_MspInit+0x44>)
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_MspInit+0x44>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4a08      	ldr	r2, [pc, #32]	@ (800378c <HAL_MspInit+0x44>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_MspInit+0x44>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800377e:	f004 fd81 	bl	8008284 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b09e      	sub	sp, #120	@ 0x78
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	2254      	movs	r2, #84	@ 0x54
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f009 fe17 	bl	800d3e4 <memset>
  if(hadc->Instance==ADC1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037be:	d15f      	bne.n	8003880 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80037c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80037ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f005 fadb 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80037dc:	f7ff fefa 	bl	80035d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80037e0:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e4:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 80037e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ec:	4b26      	ldr	r3, [pc, #152]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f8:	4b23      	ldr	r3, [pc, #140]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	4a22      	ldr	r2, [pc, #136]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003804:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_ADC_MspInit+0xf8>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003810:	2301      	movs	r3, #1
 8003812:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003814:	2303      	movs	r3, #3
 8003816:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003826:	f004 f9a5 	bl	8007b74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 800382c:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <HAL_ADC_MspInit+0x100>)
 800382e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003830:	4b16      	ldr	r3, [pc, #88]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003832:	2205      	movs	r2, #5
 8003834:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003844:	2280      	movs	r2, #128	@ 0x80
 8003846:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003848:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 800384a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800384e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003856:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800385e:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003864:	4809      	ldr	r0, [pc, #36]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003866:	f003 fe53 	bl	8007510 <HAL_DMA_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003870:	f7ff feb0 	bl	80035d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
 800387a:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_ADC_MspInit+0xfc>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003880:	bf00      	nop
 8003882:	3778      	adds	r7, #120	@ 0x78
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	20000108 	.word	0x20000108
 8003890:	40020008 	.word	0x40020008

08003894 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003928 <HAL_COMP_MspInit+0x94>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d134      	bne.n	8003920 <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	4b17      	ldr	r3, [pc, #92]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038da:	4b14      	ldr	r3, [pc, #80]	@ (800392c <HAL_COMP_MspInit+0x98>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038e6:	2304      	movs	r3, #4
 80038e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 80038f6:	2303      	movs	r3, #3
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4619      	mov	r1, r3
 8003900:	480b      	ldr	r0, [pc, #44]	@ (8003930 <HAL_COMP_MspInit+0x9c>)
 8003902:	f004 f937 	bl	8007b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390a:	2303      	movs	r3, #3
 800390c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800391c:	f004 f92a 	bl	8007b74 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 8003920:	bf00      	nop
 8003922:	3728      	adds	r7, #40	@ 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40010208 	.word	0x40010208
 800392c:	40021000 	.word	0x40021000
 8003930:	48000800 	.word	0x48000800

08003934 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <HAL_CRC_MspInit+0x38>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10b      	bne.n	800395e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003946:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <HAL_CRC_MspInit+0x3c>)
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_CRC_MspInit+0x3c>)
 800394c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003950:	6493      	str	r3, [r2, #72]	@ 0x48
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <HAL_CRC_MspInit+0x3c>)
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023000 	.word	0x40023000
 8003970:	40021000 	.word	0x40021000

08003974 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <HAL_DAC_MspInit+0x38>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10b      	bne.n	800399e <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_DAC_MspInit+0x3c>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <HAL_DAC_MspInit+0x3c>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <HAL_DAC_MspInit+0x3c>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	50000800 	.word	0x50000800
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0a0      	sub	sp, #128	@ 0x80
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	2254      	movs	r2, #84	@ 0x54
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f009 fd05 	bl	800d3e4 <memset>
  if(hi2c->Instance==I2C1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2d      	ldr	r2, [pc, #180]	@ (8003a94 <HAL_I2C_MspInit+0xe0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d153      	bne.n	8003a8c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80039e4:	2340      	movs	r3, #64	@ 0x40
 80039e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039ec:	f107 0318 	add.w	r3, r7, #24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f005 f9cb 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80039fc:	f7ff fdea 	bl	80035d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a04:	4a24      	ldr	r2, [pc, #144]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a0c:	4b22      	ldr	r3, [pc, #136]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a18:	4b1f      	ldr	r3, [pc, #124]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a24:	4b1c      	ldr	r3, [pc, #112]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a36:	2312      	movs	r3, #18
 8003a38:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a42:	2304      	movs	r3, #4
 8003a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a50:	f004 f890 	bl	8007b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a58:	2312      	movs	r3, #18
 8003a5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a64:	2304      	movs	r3, #4
 8003a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	480b      	ldr	r0, [pc, #44]	@ (8003a9c <HAL_I2C_MspInit+0xe8>)
 8003a70:	f004 f880 	bl	8007b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	4a07      	ldr	r2, [pc, #28]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_I2C_MspInit+0xe4>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003a8c:	bf00      	nop
 8003a8e:	3780      	adds	r7, #128	@ 0x80
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40005400 	.word	0x40005400
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	48000400 	.word	0x48000400

08003aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b7c <HAL_SPI_MspInit+0xdc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d129      	bne.n	8003b16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003ac8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ace:	4b2c      	ldr	r3, [pc, #176]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	4a28      	ldr	r2, [pc, #160]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae6:	4b26      	ldr	r3, [pc, #152]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003af2:	23a0      	movs	r3, #160	@ 0xa0
 8003af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b02:	2305      	movs	r3, #5
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b10:	f004 f830 	bl	8007b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b14:	e02d      	b.n	8003b72 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_SPI_MspInit+0xe4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d128      	bne.n	8003b72 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b20:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b2c:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	4a10      	ldr	r2, [pc, #64]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b44:	4b0e      	ldr	r3, [pc, #56]	@ (8003b80 <HAL_SPI_MspInit+0xe0>)
 8003b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003b50:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b62:	2306      	movs	r3, #6
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4806      	ldr	r0, [pc, #24]	@ (8003b88 <HAL_SPI_MspInit+0xe8>)
 8003b6e:	f004 f801 	bl	8007b74 <HAL_GPIO_Init>
}
 8003b72:	bf00      	nop
 8003b74:	3730      	adds	r7, #48	@ 0x30
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40013000 	.word	0x40013000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40003c00 	.word	0x40003c00
 8003b88:	48000800 	.word	0x48000800

08003b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9c:	d138      	bne.n	8003c10 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	4a41      	ldr	r2, [pc, #260]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003baa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb0 <HAL_TIM_Base_MspInit+0x124>)
 8003bba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bbe:	2238      	movs	r2, #56	@ 0x38
 8003bc0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003bce:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bd4:	4b35      	ldr	r3, [pc, #212]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bda:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bdc:	4b33      	ldr	r3, [pc, #204]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003be2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003bea:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003bf2:	482e      	ldr	r0, [pc, #184]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003bf4:	f003 fc8c 	bl	8007510 <HAL_DMA_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8003bfe:	f7ff fce9 	bl	80035d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a29      	ldr	r2, [pc, #164]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <HAL_TIM_Base_MspInit+0x120>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003c0e:	e046      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <HAL_TIM_Base_MspInit+0x128>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10c      	bne.n	8003c34 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]
}
 8003c32:	e034      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM6)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb8 <HAL_TIM_Base_MspInit+0x12c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10c      	bne.n	8003c58 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	4a19      	ldr	r2, [pc, #100]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c44:	f043 0310 	orr.w	r3, r3, #16
 8003c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
}
 8003c56:	e022      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM7)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a17      	ldr	r2, [pc, #92]	@ (8003cbc <HAL_TIM_Base_MspInit+0x130>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c62:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	4a10      	ldr	r2, [pc, #64]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c68:	f043 0320 	orr.w	r3, r3, #32
 8003c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
}
 8003c7a:	e010      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x134>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10b      	bne.n	8003c9e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c90:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_TIM_Base_MspInit+0x11c>)
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	bf00      	nop
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	2000045c 	.word	0x2000045c
 8003cb0:	4002001c 	.word	0x4002001c
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40001000 	.word	0x40001000
 8003cbc:	40001400 	.word	0x40001400
 8003cc0:	40014000 	.word	0x40014000

08003cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b09e      	sub	sp, #120	@ 0x78
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2254      	movs	r2, #84	@ 0x54
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f009 fb7d 	bl	800d3e4 <memset>
  if(huart->Instance==USART2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a37      	ldr	r2, [pc, #220]	@ (8003dcc <HAL_UART_MspInit+0x108>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d167      	bne.n	8003dc4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 f843 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d0c:	f7ff fc62 	bl	80035d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d10:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d14:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	4a28      	ldr	r2, [pc, #160]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d34:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <HAL_UART_MspInit+0x10c>)
 8003d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003d40:	2318      	movs	r3, #24
 8003d42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d50:	2307      	movs	r3, #7
 8003d52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481e      	ldr	r0, [pc, #120]	@ (8003dd4 <HAL_UART_MspInit+0x110>)
 8003d5c:	f003 ff0a 	bl	8007b74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d62:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <HAL_UART_MspInit+0x118>)
 8003d64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d68:	221a      	movs	r2, #26
 8003d6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d72:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d78:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d7a:	2280      	movs	r2, #128	@ 0x80
 8003d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d7e:	4b16      	ldr	r3, [pc, #88]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d84:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d96:	4810      	ldr	r0, [pc, #64]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003d98:	f003 fbba 	bl	8007510 <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003da2:	f7ff fc17 	bl	80035d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003dae:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <HAL_UART_MspInit+0x114>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8003db4:	2200      	movs	r2, #0
 8003db6:	210e      	movs	r1, #14
 8003db8:	2026      	movs	r0, #38	@ 0x26
 8003dba:	f002 ff94 	bl	8006ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003dbe:	2026      	movs	r0, #38	@ 0x26
 8003dc0:	f002 ffab 	bl	8006d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003dc4:	bf00      	nop
 8003dc6:	3778      	adds	r7, #120	@ 0x78
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40004400 	.word	0x40004400
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	48000400 	.word	0x48000400
 8003dd8:	20000550 	.word	0x20000550
 8003ddc:	40020494 	.word	0x40020494

08003de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <NMI_Handler+0x4>

08003de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dec:	bf00      	nop
 8003dee:	e7fd      	b.n	8003dec <HardFault_Handler+0x4>

08003df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <MemManage_Handler+0x4>

08003df8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <BusFault_Handler+0x4>

08003e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <UsageFault_Handler+0x4>

08003e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e36:	f000 fe4d 	bl	8004ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e44:	4802      	ldr	r0, [pc, #8]	@ (8003e50 <DMA1_Channel1_IRQHandler+0x10>)
 8003e46:	f003 fd46 	bl	80078d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000108 	.word	0x20000108

08003e54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003e58:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <DMA1_Channel2_IRQHandler+0x10>)
 8003e5a:	f003 fd3c 	bl	80078d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000045c 	.word	0x2000045c

08003e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <USART2_IRQHandler+0x10>)
 8003e6e:	f006 fc4f 	bl	800a710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200004bc 	.word	0x200004bc

08003e7c <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e80:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <DMA2_Channel8_IRQHandler+0x10>)
 8003e82:	f003 fd28 	bl	80078d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000550 	.word	0x20000550

08003e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return 1;
 8003e94:	2301      	movs	r3, #1
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_kill>:

int _kill(int pid, int sig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eaa:	f009 faf7 	bl	800d49c <__errno>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2216      	movs	r2, #22
 8003eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_exit>:

void _exit (int status)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffe7 	bl	8003ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <_exit+0x12>
	...

08003ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee0:	4a14      	ldr	r2, [pc, #80]	@ (8003f34 <_sbrk+0x5c>)
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <_sbrk+0x60>)
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eec:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <_sbrk+0x64>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <_sbrk+0x64>)
 8003ef6:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <_sbrk+0x68>)
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <_sbrk+0x64>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d207      	bcs.n	8003f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f08:	f009 fac8 	bl	800d49c <__errno>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	220c      	movs	r2, #12
 8003f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e009      	b.n	8003f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f18:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <_sbrk+0x64>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	4a05      	ldr	r2, [pc, #20]	@ (8003f3c <_sbrk+0x64>)
 8003f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20020000 	.word	0x20020000
 8003f38:	00000400 	.word	0x00000400
 8003f3c:	20001db8 	.word	0x20001db8
 8003f40:	20002130 	.word	0x20002130

08003f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <SystemInit+0x20>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	4a05      	ldr	r2, [pc, #20]	@ (8003f64 <SystemInit+0x20>)
 8003f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	701a      	strb	r2, [r3, #0]
      }
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f805 	bl	8003fa4 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	611a      	str	r2, [r3, #16]
    }
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f940 	bl	800425e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f91e 	bl	8004234 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ffeb 	bl	8003fe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b090      	sub	sp, #64	@ 0x40
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b07      	cmp	r3, #7
 800402e:	dc02      	bgt.n	8004036 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e0aa      	b.n	800418c <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b55      	cmp	r3, #85	@ 0x55
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <_ZL12uart_managerPhS_+0x36>
    return -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e09c      	b.n	800418c <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2ba5      	cmp	r3, #165	@ 0xa5
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <_ZL12uart_managerPhS_+0x52>
    return -1;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	e08e      	b.n	800418c <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004084:	4413      	add	r3, r2
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	3302      	adds	r3, #2
 8004090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004092:	429a      	cmp	r2, r3
 8004094:	dc02      	bgt.n	800409c <_ZL12uart_managerPhS_+0x80>
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	2b01      	cmp	r3, #1
 800409a:	dc02      	bgt.n	80040a2 <_ZL12uart_managerPhS_+0x86>
    return -1;
 800409c:	f04f 33ff 	mov.w	r3, #4294967295
 80040a0:	e074      	b.n	800418c <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	3301      	adds	r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	440b      	add	r3, r1
 80040ba:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	461a      	mov	r2, r3
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4834      	ldr	r0, [pc, #208]	@ (8004194 <_ZL12uart_managerPhS_+0x178>)
 80040c4:	f002 fea8 	bl	8006e18 <HAL_CRC_Calculate>
 80040c8:	4603      	mov	r3, r0
 80040ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 80040cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d002      	beq.n	80040da <_ZL12uart_managerPhS_+0xbe>
    return -1;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	e058      	b.n	800418c <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	603b      	str	r3, [r7, #0]
  auto p = begin;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 80040e6:	e006      	b.n	80040f6 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80040ee:	d007      	beq.n	8004100 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 80040f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f2:	3301      	adds	r3, #1
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d1f4      	bne.n	80040e8 <_ZL12uart_managerPhS_+0xcc>
 80040fe:	e000      	b.n	8004102 <_ZL12uart_managerPhS_+0xe6>
      break;
 8004100:	bf00      	nop
  }

  if (p != end)
 8004102:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d03e      	beq.n	8004188 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 800410a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800410e:	4618      	mov	r0, r3
 8004110:	f009 f803 	bl	800d11a <_ZNSaIcEC1Ev>
 8004114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004118:	f107 0010 	add.w	r0, r7, #16
 800411c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	f000 f8be 	bl	80042a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8004124:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004128:	4618      	mov	r0, r3
 800412a:	f008 fff7 	bl	800d11c <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 800412e:	f107 0310 	add.w	r3, r7, #16
 8004132:	4619      	mov	r1, r3
 8004134:	4818      	ldr	r0, [pc, #96]	@ (8004198 <_ZL12uart_managerPhS_+0x17c>)
 8004136:	f000 f8d8 	bl	80042ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 800413a:	4603      	mov	r3, r0
 800413c:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 800413e:	4816      	ldr	r0, [pc, #88]	@ (8004198 <_ZL12uart_managerPhS_+0x17c>)
 8004140:	f000 f8e2 	bl	8004308 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8004144:	4603      	mov	r3, r0
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004148:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f8e5 	bl	8004322 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 800415e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004160:	3301      	adds	r3, #1
 8004162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f8ee 	bl	800434a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 800416e:	4603      	mov	r3, r0
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004176:	1a8a      	subs	r2, r1, r2
 8004178:	4611      	mov	r1, r2
 800417a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800417c:	4798      	blx	r3
    }
  }
 800417e:	f107 0310 	add.w	r3, r7, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f009 f817 	bl	800d1b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	3306      	adds	r3, #6
}
 800418c:	4618      	mov	r0, r3
 800418e:	3740      	adds	r7, #64	@ 0x40
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	2000018c 	.word	0x2000018c
 8004198:	20001fc4 	.word	0x20001fc4

0800419c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 80041a8:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <HAL_UARTEx_RxEventCallback+0x58>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d11b      	bne.n	80041ea <HAL_UARTEx_RxEventCallback+0x4e>
    return;
  auto end = rx_buf + Size;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	4a10      	ldr	r2, [pc, #64]	@ (80041f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80041b6:	4413      	add	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 80041ba:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e00b      	b.n	80041d8 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 80041c0:	6939      	ldr	r1, [r7, #16]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff ff2a 	bl	800401c <_ZL12uart_managerPhS_>
 80041c8:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db08      	blt.n	80041e2 <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d3ef      	bcc.n	80041c0 <HAL_UARTEx_RxEventCallback+0x24>
 80041e0:	e000      	b.n	80041e4 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 80041e2:	bf00      	nop
  }

  uart_receive_start();
 80041e4:	f000 f80a 	bl	80041fc <_ZL18uart_receive_startv>
 80041e8:	e000      	b.n	80041ec <HAL_UARTEx_RxEventCallback+0x50>
    return;
 80041ea:	bf00      	nop
}
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000008 	.word	0x20000008
 80041f8:	20001dbc 	.word	0x20001dbc

080041fc <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <_ZL18uart_receive_startv+0x2c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8004208:	4908      	ldr	r1, [pc, #32]	@ (800422c <_ZL18uart_receive_startv+0x30>)
 800420a:	4618      	mov	r0, r3
 800420c:	f007 fdf6 	bl	800bdfc <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8004210:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <_ZL18uart_receive_startv+0x34>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <_ZL18uart_receive_startv+0x34>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000008 	.word	0x20000008
 800422c:	20001dbc 	.word	0x20001dbc
 8004230:	2000000c 	.word	0x2000000c

08004234 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f892 	bl	8004366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f89a 	bl	800437e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fe99 	bl	8003f86 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f894 	bl	8004394 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8b3 	bl	80043ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8004284:	4603      	mov	r3, r0
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f88e 	bl	80043aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fe9d 	bl	8003fd0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 80042ae:	68fc      	ldr	r4, [r7, #12]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f008 ff43 	bl	800d13c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	4619      	mov	r1, r3
 80042bc:	4620      	mov	r0, r4
 80042be:	f008 ff8e 	bl	800d1de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 80042c8:	68bc      	ldr	r4, [r7, #8]
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f8ba 	bl	8004448 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80042d4:	462b      	mov	r3, r5
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4621      	mov	r1, r4
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f8e0 	bl	80044a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bdb0      	pop	{r4, r5, r7, pc}

080042ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f917 	bl	800452c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 80042fe:	4603      	mov	r3, r0
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f946 	bl	80045a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8004318:	4603      	mov	r3, r0
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f935 	bl	80045c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f937 	bl	80045e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
      { }
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80043b4:	e011      	b.n	80043da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f000 f91e 	bl	80045f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80043bc:	4603      	mov	r3, r0
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fff2 	bl	80043aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f922 	bl	8004610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80043cc:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f929 	bl	8004628 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ea      	bne.n	80043b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f929 	bl	800464a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f000 f912 	bl	8004662 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800443e:	4603      	mov	r3, r0
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004450:	bf00      	nop
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f008 fe85 	bl	800d1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	f000 f8f5 	bl	80046a0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80044b6:	4603      	mov	r3, r0
 80044b8:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d911      	bls.n	80044e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80044c0:	f107 0318 	add.w	r3, r7, #24
 80044c4:	2200      	movs	r2, #0
 80044c6:	4619      	mov	r1, r3
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f008 fe47 	bl	800d15c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4619      	mov	r1, r3
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f008 fe2e 	bl	800d134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	4619      	mov	r1, r3
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f008 fe2f 	bl	800d140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80044e2:	e005      	b.n	80044f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80044e8:	69f8      	ldr	r0, [r7, #28]
 80044ea:	f008 fe27 	bl	800d13c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80044ee:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffb1 	bl	800445e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f008 fe1b 	bl	800d138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004502:	4603      	mov	r3, r0
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f8dd 	bl	80046c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4619      	mov	r1, r3
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f008 fe14 	bl	800d144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ffab 	bl	800447c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ff57 	bl	80043ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800453c:	4604      	mov	r4, r0
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8e1 	bl	8004706 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8004544:	4602      	mov	r2, r0
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4621      	mov	r1, r4
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8e7 	bl	800471e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8004550:	4603      	mov	r3, r0
 8004552:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f825 	bl	80045a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800455a:	4603      	mov	r3, r0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	f107 020c 	add.w	r2, r7, #12
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff4a 	bl	8004402 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 800456e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004574:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004576:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f901 	bl	8004780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff ff50 	bl	800442a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f807 	bl	80045a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8004596:	4603      	mov	r3, r0
 8004598:	e000      	b.n	800459c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 800459a:	68bb      	ldr	r3, [r7, #8]
    }
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd90      	pop	{r4, r7, pc}

080045a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f863 	bl	8004682 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3310      	adds	r3, #16
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f8e0 	bl	8004798 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80045d8:	4603      	mov	r3, r0
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8bb 	bl	80047b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8cc 	bl	80047da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f008 fda7 	bl	800d1c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8004674:	4603      	mov	r3, r0
 8004676:	0fdb      	lsrs	r3, r3, #31
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80046aa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff feca 	bl	8004448 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80046b4:	462a      	mov	r2, r5
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 f8b3 	bl	8004824 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80046be:	4603      	mov	r3, r0
    }
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}

080046c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80046d4:	e00e      	b.n	80046f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	75fb      	strb	r3, [r7, #23]
 80046dc:	f107 0317 	add.w	r3, r7, #23
 80046e0:	4619      	mov	r1, r3
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fc40 	bl	8003f68 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1ec      	bne.n	80046d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3304      	adds	r3, #4
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800471e:	b590      	push	{r4, r7, lr}
 8004720:	b087      	sub	sp, #28
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800472c:	e01a      	b.n	8004764 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800472e:	68fc      	ldr	r4, [r7, #12]
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f000 f864 	bl	80047fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8004736:	4603      	mov	r3, r0
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff fe74 	bl	800442a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004742:	4603      	mov	r3, r0
 8004744:	f083 0301 	eor.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	68b8      	ldr	r0, [r7, #8]
 8004754:	f7ff ff5c 	bl	8004610 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004758:	60b8      	str	r0, [r7, #8]
 800475a:	e003      	b.n	8004764 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 800475c:	68b8      	ldr	r0, [r7, #8]
 800475e:	f7ff ff4b 	bl	80045f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004762:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e1      	bne.n	800472e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff86 	bl	8004682 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8004776:	697b      	ldr	r3, [r7, #20]
    }
 8004778:	4618      	mov	r0, r3
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd90      	pop	{r4, r7, pc}

08004780 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f838 	bl	80047fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800478e:	4603      	mov	r3, r0
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f84e 	bl	8004842 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f84c 	bl	8004858 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80047c0:	4604      	mov	r4, r0
 80047c2:	6838      	ldr	r0, [r7, #0]
 80047c4:	f7ff feff 	bl	80045c6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 f84e 	bl	800486e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}

080047da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f837 	bl	8004858 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2201      	movs	r2, #1
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f849 	bl	8004888 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f84d 	bl	80048a6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800480c:	4602      	mov	r2, r0
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f854 	bl	80048c2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 800481a:	4603      	mov	r3, r0
      }
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
    }
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f83a 	bl	80048f4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f837 	bl	800490c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3310      	adds	r3, #16
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f83c 	bl	8004930 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80048b8:	4603      	mov	r3, r0
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f008 fc66 	bl	800d1b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	f7ff ffeb 	bl	80048da <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	222c      	movs	r2, #44	@ 0x2c
 800491c:	fb02 f303 	mul.w	r3, r2, r3
 8004920:	4619      	mov	r1, r3
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f008 fbe6 	bl	800d0f4 <_ZdlPvj>
      }
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f805 	bl	8004948 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 800493e:	4603      	mov	r3, r0
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fc84 	bl	8004276 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800498e:	4293      	cmp	r3, r2
 8004990:	d102      	bne.n	8004998 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 8004992:	4809      	ldr	r0, [pc, #36]	@ (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004994:	f7ff fb35 	bl	8004002 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d102      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 80049a8:	4803      	ldr	r0, [pc, #12]	@ (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80049aa:	f7ff ffd8 	bl	800495e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20001fc4 	.word	0x20001fc4

080049bc <_GLOBAL__sub_I_huart_reg>:
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
 80049c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7ff ffd7 	bl	8004978 <_Z41__static_initialization_and_destruction_0ii>
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_GLOBAL__sub_D_huart_reg>:
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80049d4:	2000      	movs	r0, #0
 80049d6:	f7ff ffcf 	bl	8004978 <_Z41__static_initialization_and_destruction_0ii>
 80049da:	bd80      	pop	{r7, pc}

080049dc <Reset_Handler>:
 80049dc:	480d      	ldr	r0, [pc, #52]	@ (8004a14 <LoopForever+0x2>)
 80049de:	4685      	mov	sp, r0
 80049e0:	f7ff fab0 	bl	8003f44 <SystemInit>
 80049e4:	480c      	ldr	r0, [pc, #48]	@ (8004a18 <LoopForever+0x6>)
 80049e6:	490d      	ldr	r1, [pc, #52]	@ (8004a1c <LoopForever+0xa>)
 80049e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a20 <LoopForever+0xe>)
 80049ea:	2300      	movs	r3, #0
 80049ec:	e002      	b.n	80049f4 <LoopCopyDataInit>

080049ee <CopyDataInit>:
 80049ee:	58d4      	ldr	r4, [r2, r3]
 80049f0:	50c4      	str	r4, [r0, r3]
 80049f2:	3304      	adds	r3, #4

080049f4 <LoopCopyDataInit>:
 80049f4:	18c4      	adds	r4, r0, r3
 80049f6:	428c      	cmp	r4, r1
 80049f8:	d3f9      	bcc.n	80049ee <CopyDataInit>
 80049fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <LoopForever+0x12>)
 80049fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004a28 <LoopForever+0x16>)
 80049fe:	2300      	movs	r3, #0
 8004a00:	e001      	b.n	8004a06 <LoopFillZerobss>

08004a02 <FillZerobss>:
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	3204      	adds	r2, #4

08004a06 <LoopFillZerobss>:
 8004a06:	42a2      	cmp	r2, r4
 8004a08:	d3fb      	bcc.n	8004a02 <FillZerobss>
 8004a0a:	f008 fd4d 	bl	800d4a8 <__libc_init_array>
 8004a0e:	f7fc fff7 	bl	8001a00 <main>

08004a12 <LoopForever>:
 8004a12:	e7fe      	b.n	8004a12 <LoopForever>
 8004a14:	20020000 	.word	0x20020000
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	20000068 	.word	0x20000068
 8004a20:	080101a0 	.word	0x080101a0
 8004a24:	20000068 	.word	0x20000068
 8004a28:	2000212c 	.word	0x2000212c

08004a2c <ADC1_2_IRQHandler>:
 8004a2c:	e7fe      	b.n	8004a2c <ADC1_2_IRQHandler>

08004a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a38:	2003      	movs	r0, #3
 8004a3a:	f002 f949 	bl	8006cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a3e:	200f      	movs	r0, #15
 8004a40:	f000 f80e 	bl	8004a60 <HAL_InitTick>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	e001      	b.n	8004a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a50:	f7fe fe7a 	bl	8003748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a54:	79fb      	ldrb	r3, [r7, #7]

}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a6c:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <HAL_InitTick+0x68>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d022      	beq.n	8004aba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a74:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <HAL_InitTick+0x6c>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <HAL_InitTick+0x68>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f002 f954 	bl	8006d36 <HAL_SYSTICK_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10f      	bne.n	8004ab4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d809      	bhi.n	8004aae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	f002 f920 	bl	8006ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad0 <HAL_InitTick+0x70>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e007      	b.n	8004abe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	e004      	b.n	8004abe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e001      	b.n	8004abe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000014 	.word	0x20000014
 8004acc:	20000004 	.word	0x20000004
 8004ad0:	20000010 	.word	0x20000010

08004ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <HAL_IncTick+0x1c>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_IncTick+0x20>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <HAL_IncTick+0x1c>)
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20001fdc 	.word	0x20001fdc
 8004af4:	20000014 	.word	0x20000014

08004af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTick;
 8004afc:	4b03      	ldr	r3, [pc, #12]	@ (8004b0c <HAL_GetTick+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20001fdc 	.word	0x20001fdc

08004b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3360      	adds	r3, #96	@ 0x60
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <LL_ADC_SetOffset+0x44>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	03fff000 	.word	0x03fff000

08004bc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3360      	adds	r3, #96	@ 0x60
 8004bce:	461a      	mov	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3360      	adds	r3, #96	@ 0x60
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3360      	adds	r3, #96	@ 0x60
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3360      	adds	r3, #96	@ 0x60
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	615a      	str	r2, [r3, #20]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3330      	adds	r3, #48	@ 0x30
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	4413      	add	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	211f      	movs	r1, #31
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0e9b      	lsrs	r3, r3, #26
 8004d12:	f003 011f 	and.w	r1, r3, #31
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3314      	adds	r3, #20
 8004d42:	461a      	mov	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	0e5b      	lsrs	r3, r3, #25
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0d1b      	lsrs	r3, r3, #20
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2107      	movs	r1, #7
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	401a      	ands	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	431a      	orrs	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d7c:	bf00      	nop
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0318 	and.w	r3, r3, #24
 8004daa:	4908      	ldr	r1, [pc, #32]	@ (8004dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dac:	40d9      	lsrs	r1, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	400b      	ands	r3, r1
 8004db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	0007ffff 	.word	0x0007ffff

08004dd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004dfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6093      	str	r3, [r2, #8]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e24:	d101      	bne.n	8004e2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e74:	d101      	bne.n	8004e7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <LL_ADC_IsEnabled+0x18>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <LL_ADC_IsEnabled+0x1a>
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d101      	bne.n	8004f16 <LL_ADC_IsDisableOngoing+0x18>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_ADC_IsDisableOngoing+0x1a>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f38:	f043 0204 	orr.w	r2, r3, #4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d101      	bne.n	8004f8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004faa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d101      	bne.n	8004fda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b089      	sub	sp, #36	@ 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1a9      	b.n	8005356 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fe fbbd 	bl	8003790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fef1 	bl	8004e10 <LL_ADC_IsDeepPowerDownEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fed7 	bl	8004dec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ff0c 	bl	8004e60 <LL_ADC_IsInternalRegulatorEnabled>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fef0 	bl	8004e38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005058:	4b9c      	ldr	r3, [pc, #624]	@ (80052cc <HAL_ADC_Init+0x2e4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	099b      	lsrs	r3, r3, #6
 800505e:	4a9c      	ldr	r2, [pc, #624]	@ (80052d0 <HAL_ADC_Init+0x2e8>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	099b      	lsrs	r3, r3, #6
 8005066:	3301      	adds	r3, #1
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800506c:	e002      	b.n	8005074 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b01      	subs	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f9      	bne.n	800506e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff feee 	bl	8004e60 <LL_ADC_IsInternalRegulatorEnabled>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508e:	f043 0210 	orr.w	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509a:	f043 0201 	orr.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff ff62 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 80050b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 8142 	bne.w	8005344 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 813e 	bne.w	8005344 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80050d0:	f043 0202 	orr.w	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fefb 	bl	8004ed8 <LL_ADC_IsEnabled>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d141      	bne.n	800516c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f0:	d004      	beq.n	80050fc <HAL_ADC_Init+0x114>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a77      	ldr	r2, [pc, #476]	@ (80052d4 <HAL_ADC_Init+0x2ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10f      	bne.n	800511c <HAL_ADC_Init+0x134>
 80050fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005100:	f7ff feea 	bl	8004ed8 <LL_ADC_IsEnabled>
 8005104:	4604      	mov	r4, r0
 8005106:	4873      	ldr	r0, [pc, #460]	@ (80052d4 <HAL_ADC_Init+0x2ec>)
 8005108:	f7ff fee6 	bl	8004ed8 <LL_ADC_IsEnabled>
 800510c:	4603      	mov	r3, r0
 800510e:	4323      	orrs	r3, r4
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e012      	b.n	8005142 <HAL_ADC_Init+0x15a>
 800511c:	486e      	ldr	r0, [pc, #440]	@ (80052d8 <HAL_ADC_Init+0x2f0>)
 800511e:	f7ff fedb 	bl	8004ed8 <LL_ADC_IsEnabled>
 8005122:	4604      	mov	r4, r0
 8005124:	486d      	ldr	r0, [pc, #436]	@ (80052dc <HAL_ADC_Init+0x2f4>)
 8005126:	f7ff fed7 	bl	8004ed8 <LL_ADC_IsEnabled>
 800512a:	4603      	mov	r3, r0
 800512c:	431c      	orrs	r4, r3
 800512e:	486c      	ldr	r0, [pc, #432]	@ (80052e0 <HAL_ADC_Init+0x2f8>)
 8005130:	f7ff fed2 	bl	8004ed8 <LL_ADC_IsEnabled>
 8005134:	4603      	mov	r3, r0
 8005136:	4323      	orrs	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800514e:	d004      	beq.n	800515a <HAL_ADC_Init+0x172>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a5f      	ldr	r2, [pc, #380]	@ (80052d4 <HAL_ADC_Init+0x2ec>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d101      	bne.n	800515e <HAL_ADC_Init+0x176>
 800515a:	4a62      	ldr	r2, [pc, #392]	@ (80052e4 <HAL_ADC_Init+0x2fc>)
 800515c:	e000      	b.n	8005160 <HAL_ADC_Init+0x178>
 800515e:	4a62      	ldr	r2, [pc, #392]	@ (80052e8 <HAL_ADC_Init+0x300>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f7ff fcd2 	bl	8004b10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7f5b      	ldrb	r3, [r3, #29]
 8005170:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005176:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800517c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005182:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800518a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005196:	2b01      	cmp	r3, #1
 8005198:	d106      	bne.n	80051a8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	045b      	lsls	r3, r3, #17
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4b48      	ldr	r3, [pc, #288]	@ (80052ec <HAL_ADC_Init+0x304>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	69b9      	ldr	r1, [r7, #24]
 80051d4:	430b      	orrs	r3, r1
 80051d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fee5 	bl	8004fc2 <LL_ADC_INJ_IsConversionOngoing>
 80051f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d17f      	bne.n	8005300 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d17c      	bne.n	8005300 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800520a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005212:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005222:	f023 0302 	bic.w	r3, r3, #2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	430b      	orrs	r3, r1
 800522e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005246:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005250:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6911      	ldr	r1, [r2, #16]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	430b      	orrs	r3, r1
 8005262:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005266:	e013      	b.n	8005290 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005276:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800528c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005296:	2b01      	cmp	r3, #1
 8005298:	d12a      	bne.n	80052f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052b0:	4311      	orrs	r1, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80052b6:	4311      	orrs	r1, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052bc:	430a      	orrs	r2, r1
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	611a      	str	r2, [r3, #16]
 80052ca:	e019      	b.n	8005300 <HAL_ADC_Init+0x318>
 80052cc:	20000004 	.word	0x20000004
 80052d0:	053e2d63 	.word	0x053e2d63
 80052d4:	50000100 	.word	0x50000100
 80052d8:	50000400 	.word	0x50000400
 80052dc:	50000500 	.word	0x50000500
 80052e0:	50000600 	.word	0x50000600
 80052e4:	50000300 	.word	0x50000300
 80052e8:	50000700 	.word	0x50000700
 80052ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10c      	bne.n	8005322 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f023 010f 	bic.w	r1, r3, #15
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	1e5a      	subs	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005320:	e007      	b.n	8005332 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 020f 	bic.w	r2, r2, #15
 8005330:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	f043 0201 	orr.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005342:	e007      	b.n	8005354 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	f043 0210 	orr.w	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005354:	7ffb      	ldrb	r3, [r7, #31]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3724      	adds	r7, #36	@ 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop

08005360 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005374:	d004      	beq.n	8005380 <HAL_ADC_Start_DMA+0x20>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5a      	ldr	r2, [pc, #360]	@ (80054e4 <HAL_ADC_Start_DMA+0x184>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_ADC_Start_DMA+0x24>
 8005380:	4b59      	ldr	r3, [pc, #356]	@ (80054e8 <HAL_ADC_Start_DMA+0x188>)
 8005382:	e000      	b.n	8005386 <HAL_ADC_Start_DMA+0x26>
 8005384:	4b59      	ldr	r3, [pc, #356]	@ (80054ec <HAL_ADC_Start_DMA+0x18c>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fd22 	bl	8004dd0 <LL_ADC_GetMultimode>
 800538c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fdee 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 809b 	bne.w	80054d6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_Start_DMA+0x4e>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e096      	b.n	80054dc <HAL_ADC_Start_DMA+0x17c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a4d      	ldr	r2, [pc, #308]	@ (80054f0 <HAL_ADC_Start_DMA+0x190>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d008      	beq.n	80053d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d002      	beq.n	80053d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	d17a      	bne.n	80054c8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fe0a 	bl	8005fec <ADC_Enable>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d16d      	bne.n	80054be <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	@ (80054e4 <HAL_ADC_Start_DMA+0x184>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_ADC_Start_DMA+0xb4>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3b      	ldr	r2, [pc, #236]	@ (80054f4 <HAL_ADC_Start_DMA+0x194>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d002      	beq.n	8005410 <HAL_ADC_Start_DMA+0xb0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	e003      	b.n	8005418 <HAL_ADC_Start_DMA+0xb8>
 8005410:	4b39      	ldr	r3, [pc, #228]	@ (80054f8 <HAL_ADC_Start_DMA+0x198>)
 8005412:	e001      	b.n	8005418 <HAL_ADC_Start_DMA+0xb8>
 8005414:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	4293      	cmp	r3, r2
 800541e:	d002      	beq.n	8005426 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d105      	bne.n	8005432 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	f023 0206 	bic.w	r2, r3, #6
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	661a      	str	r2, [r3, #96]	@ 0x60
 800544a:	e002      	b.n	8005452 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	4a29      	ldr	r2, [pc, #164]	@ (80054fc <HAL_ADC_Start_DMA+0x19c>)
 8005458:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545e:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <HAL_ADC_Start_DMA+0x1a0>)
 8005460:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_ADC_Start_DMA+0x1a4>)
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	221c      	movs	r2, #28
 8005470:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0210 	orr.w	r2, r2, #16
 8005488:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3340      	adds	r3, #64	@ 0x40
 80054a4:	4619      	mov	r1, r3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f002 f8d9 	bl	8007660 <HAL_DMA_Start_IT>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fd34 	bl	8004f24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80054bc:	e00d      	b.n	80054da <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80054c6:	e008      	b.n	80054da <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80054d4:	e001      	b.n	80054da <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
 80054d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	50000100 	.word	0x50000100
 80054e8:	50000300 	.word	0x50000300
 80054ec:	50000700 	.word	0x50000700
 80054f0:	50000600 	.word	0x50000600
 80054f4:	50000500 	.word	0x50000500
 80054f8:	50000400 	.word	0x50000400
 80054fc:	080061d7 	.word	0x080061d7
 8005500:	080062af 	.word	0x080062af
 8005504:	080062cb 	.word	0x080062cb

08005508 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_ADC_Stop_DMA+0x16>
 800551a:	2302      	movs	r3, #2
 800551c:	e051      	b.n	80055c2 <HAL_ADC_Stop_DMA+0xba>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005526:	2103      	movs	r1, #3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fca3 	bl	8005e74 <ADC_ConversionStop>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d13f      	bne.n	80055b8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d10f      	bne.n	8005576 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	4618      	mov	r0, r3
 800555c:	f002 f8fb 	bl	8007756 <HAL_DMA_Abort>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0210 	bic.w	r2, r2, #16
 8005584:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d105      	bne.n	8005598 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fdc3 	bl	8006118 <ADC_Disable>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	e002      	b.n	800559e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fdbd 	bl	8006118 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b0b6      	sub	sp, #216	@ 0xd8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x24>
 8005612:	2302      	movs	r3, #2
 8005614:	f000 bc13 	b.w	8005e3e <HAL_ADC_ConfigChannel+0x84a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fca5 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	f040 83f3 	bne.w	8005e18 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7ff fb4b 	bl	8004cda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fc93 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 800564e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fcb3 	bl	8004fc2 <LL_ADC_INJ_IsConversionOngoing>
 800565c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 81d9 	bne.w	8005a1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800566a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 81d4 	bne.w	8005a1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800567c:	d10f      	bne.n	800569e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	4619      	mov	r1, r3
 800568a:	f7ff fb52 	bl	8004d32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff faf9 	bl	8004c8e <LL_ADC_SetSamplingTimeCommonConfig>
 800569c:	e00e      	b.n	80056bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7ff fb41 	bl	8004d32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fae9 	bl	8004c8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d022      	beq.n	8005724 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6919      	ldr	r1, [r3, #16]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056ee:	f7ff fa43 	bl	8004b78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6919      	ldr	r1, [r3, #16]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7ff fa8f 	bl	8004c22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005710:	2b01      	cmp	r3, #1
 8005712:	d102      	bne.n	800571a <HAL_ADC_ConfigChannel+0x126>
 8005714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005718:	e000      	b.n	800571c <HAL_ADC_ConfigChannel+0x128>
 800571a:	2300      	movs	r3, #0
 800571c:	461a      	mov	r2, r3
 800571e:	f7ff fa9b 	bl	8004c58 <LL_ADC_SetOffsetSaturation>
 8005722:	e17b      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fa48 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 8005730:	4603      	mov	r3, r0
 8005732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x15c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fa3d 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 8005746:	4603      	mov	r3, r0
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	f003 021f 	and.w	r2, r3, #31
 800574e:	e01e      	b.n	800578e <HAL_ADC_ConfigChannel+0x19a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fa32 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 800575c:	4603      	mov	r3, r0
 800575e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800576e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800577e:	2320      	movs	r3, #32
 8005780:	e004      	b.n	800578c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005786:	fab3 f383 	clz	r3, r3
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <HAL_ADC_ConfigChannel+0x1b2>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	0e9b      	lsrs	r3, r3, #26
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	e018      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x1e4>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80057ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80057c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80057ca:	2320      	movs	r3, #32
 80057cc:	e004      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80057ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057d8:	429a      	cmp	r2, r3
 80057da:	d106      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fa01 	bl	8004bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff f9e5 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x222>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff f9da 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 800580c:	4603      	mov	r3, r0
 800580e:	0e9b      	lsrs	r3, r3, #26
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	e01e      	b.n	8005854 <HAL_ADC_ConfigChannel+0x260>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2101      	movs	r1, #1
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff f9cf 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 8005822:	4603      	mov	r3, r0
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800583c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005844:	2320      	movs	r3, #32
 8005846:	e004      	b.n	8005852 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_ADC_ConfigChannel+0x278>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0e9b      	lsrs	r3, r3, #26
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	e018      	b.n	800589e <HAL_ADC_ConfigChannel+0x2aa>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005880:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005890:	2320      	movs	r3, #32
 8005892:	e004      	b.n	800589e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800589e:	429a      	cmp	r2, r3
 80058a0:	d106      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2101      	movs	r1, #1
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f99e 	bl	8004bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2102      	movs	r1, #2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f982 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 80058bc:	4603      	mov	r3, r0
 80058be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x2e8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff f977 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 80058d2:	4603      	mov	r3, r0
 80058d4:	0e9b      	lsrs	r3, r3, #26
 80058d6:	f003 021f 	and.w	r2, r3, #31
 80058da:	e01e      	b.n	800591a <HAL_ADC_ConfigChannel+0x326>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff f96c 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80058fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005902:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800590a:	2320      	movs	r3, #32
 800590c:	e004      	b.n	8005918 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800590e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005912:	fab3 f383 	clz	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x33e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	0e9b      	lsrs	r3, r3, #26
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	e016      	b.n	8005960 <HAL_ADC_ConfigChannel+0x36c>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800594a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005952:	2320      	movs	r3, #32
 8005954:	e004      	b.n	8005960 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005956:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800595a:	fab3 f383 	clz	r3, r3
 800595e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f93d 	bl	8004bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2103      	movs	r1, #3
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff f921 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_ADC_ConfigChannel+0x3aa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2103      	movs	r1, #3
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff f916 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 8005994:	4603      	mov	r3, r0
 8005996:	0e9b      	lsrs	r3, r3, #26
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	e017      	b.n	80059ce <HAL_ADC_ConfigChannel+0x3da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2103      	movs	r1, #3
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f90b 	bl	8004bc0 <LL_ADC_GetOffsetChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80059b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80059ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80059c0:	2320      	movs	r3, #32
 80059c2:	e003      	b.n	80059cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80059c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <HAL_ADC_ConfigChannel+0x3f2>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	0e9b      	lsrs	r3, r3, #26
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	e011      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x416>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80059f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80059f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80059fe:	2320      	movs	r3, #32
 8005a00:	e003      	b.n	8005a0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a04:	fab3 f383 	clz	r3, r3
 8005a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d106      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2103      	movs	r1, #3
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff f8e8 	bl	8004bec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fa59 	bl	8004ed8 <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 813d 	bne.w	8005ca8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7ff f9a4 	bl	8004d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4aa2      	ldr	r2, [pc, #648]	@ (8005cd0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f040 812e 	bne.w	8005ca8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x480>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	0e9b      	lsrs	r3, r3, #26
 8005a62:	3301      	adds	r3, #1
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	bf94      	ite	ls
 8005a6c:	2301      	movls	r3, #1
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	e019      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x4b4>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	e003      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a92:	fab3 f383 	clz	r3, r3
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	bf94      	ite	ls
 8005aa2:	2301      	movls	r3, #1
 8005aa4:	2300      	movhi	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d079      	beq.n	8005ba0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <HAL_ADC_ConfigChannel+0x4d4>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	3301      	adds	r3, #1
 8005ac0:	069b      	lsls	r3, r3, #26
 8005ac2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ac6:	e015      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x500>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad0:	fa93 f3a3 	rbit	r3, r3
 8005ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	e003      	b.n	8005aec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae6:	fab3 f383 	clz	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	069b      	lsls	r3, r3, #26
 8005af0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x520>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0e9b      	lsrs	r3, r3, #26
 8005b06:	3301      	adds	r3, #1
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	e017      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x550>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	e003      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2101      	movs	r1, #1
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	ea42 0103 	orr.w	r1, r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x576>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	0e9b      	lsrs	r3, r3, #26
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f003 021f 	and.w	r2, r3, #31
 8005b60:	4613      	mov	r3, r2
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	4413      	add	r3, r2
 8005b66:	051b      	lsls	r3, r3, #20
 8005b68:	e018      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x5a8>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	fa93 f3a3 	rbit	r3, r3
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005b82:	2320      	movs	r3, #32
 8005b84:	e003      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	fab3 f383 	clz	r3, r3
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	e07e      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_ADC_ConfigChannel+0x5c8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	0e9b      	lsrs	r3, r3, #26
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	069b      	lsls	r3, r3, #26
 8005bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bba:	e015      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x5f4>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	fa93 f3a3 	rbit	r3, r3
 8005bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	e003      	b.n	8005be0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	fab3 f383 	clz	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3301      	adds	r3, #1
 8005be2:	069b      	lsls	r3, r3, #26
 8005be4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x614>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	0e9b      	lsrs	r3, r3, #26
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f303 	lsl.w	r3, r1, r3
 8005c06:	e017      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x644>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	fa93 f3a3 	rbit	r3, r3
 8005c14:	61fb      	str	r3, [r7, #28]
  return result;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005c20:	2320      	movs	r3, #32
 8005c22:	e003      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	fab3 f383 	clz	r3, r3
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2101      	movs	r1, #1
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x670>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0e9b      	lsrs	r3, r3, #26
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f003 021f 	and.w	r2, r3, #31
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	3b1e      	subs	r3, #30
 8005c5c:	051b      	lsls	r3, r3, #20
 8005c5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c62:	e01b      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x6a8>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	fa93 f3a3 	rbit	r3, r3
 8005c70:	613b      	str	r3, [r7, #16]
  return result;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	e003      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f003 021f 	and.w	r2, r3, #31
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	3b1e      	subs	r3, #30
 8005c96:	051b      	lsls	r3, r3, #20
 8005c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7ff f845 	bl	8004d32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <HAL_ADC_ConfigChannel+0x6e0>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80be 	beq.w	8005e32 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cbe:	d004      	beq.n	8005cca <HAL_ADC_ConfigChannel+0x6d6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a04      	ldr	r2, [pc, #16]	@ (8005cd8 <HAL_ADC_ConfigChannel+0x6e4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x6ec>
 8005cca:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <HAL_ADC_ConfigChannel+0x6e8>)
 8005ccc:	e009      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x6ee>
 8005cce:	bf00      	nop
 8005cd0:	407f0000 	.word	0x407f0000
 8005cd4:	80080000 	.word	0x80080000
 8005cd8:	50000100 	.word	0x50000100
 8005cdc:	50000300 	.word	0x50000300
 8005ce0:	4b59      	ldr	r3, [pc, #356]	@ (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe ff3a 	bl	8004b5c <LL_ADC_GetCommonPathInternalCh>
 8005ce8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a56      	ldr	r2, [pc, #344]	@ (8005e4c <HAL_ADC_ConfigChannel+0x858>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x70c>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a55      	ldr	r2, [pc, #340]	@ (8005e50 <HAL_ADC_ConfigChannel+0x85c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d13a      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d134      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d14:	d005      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x72e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8005e54 <HAL_ADC_ConfigChannel+0x860>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	f040 8085 	bne.w	8005e2c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d2a:	d004      	beq.n	8005d36 <HAL_ADC_ConfigChannel+0x742>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a49      	ldr	r2, [pc, #292]	@ (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x746>
 8005d36:	4a49      	ldr	r2, [pc, #292]	@ (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005d38:	e000      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x748>
 8005d3a:	4a43      	ldr	r2, [pc, #268]	@ (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7fe fef5 	bl	8004b36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d4c:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <HAL_ADC_ConfigChannel+0x86c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	099b      	lsrs	r3, r3, #6
 8005d52:	4a44      	ldr	r2, [pc, #272]	@ (8005e64 <HAL_ADC_ConfigChannel+0x870>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d66:	e002      	b.n	8005d6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f9      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d74:	e05a      	b.n	8005e2c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e68 <HAL_ADC_ConfigChannel+0x874>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d125      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11f      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a31      	ldr	r2, [pc, #196]	@ (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d104      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x7ac>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a34      	ldr	r2, [pc, #208]	@ (8005e6c <HAL_ADC_ConfigChannel+0x878>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d047      	beq.n	8005e30 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005da8:	d004      	beq.n	8005db4 <HAL_ADC_ConfigChannel+0x7c0>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	@ (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d101      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x7c4>
 8005db4:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005db6:	e000      	b.n	8005dba <HAL_ADC_ConfigChannel+0x7c6>
 8005db8:	4a23      	ldr	r2, [pc, #140]	@ (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe feb6 	bl	8004b36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dca:	e031      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a27      	ldr	r2, [pc, #156]	@ (8005e70 <HAL_ADC_ConfigChannel+0x87c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d12d      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d127      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005df4:	d004      	beq.n	8005e00 <HAL_ADC_ConfigChannel+0x80c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <HAL_ADC_ConfigChannel+0x864>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d101      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x810>
 8005e00:	4a16      	ldr	r2, [pc, #88]	@ (8005e5c <HAL_ADC_ConfigChannel+0x868>)
 8005e02:	e000      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x812>
 8005e04:	4a10      	ldr	r2, [pc, #64]	@ (8005e48 <HAL_ADC_ConfigChannel+0x854>)
 8005e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f7fe fe90 	bl	8004b36 <LL_ADC_SetCommonPathInternalCh>
 8005e16:	e00c      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005e2a:	e002      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e2c:	bf00      	nop
 8005e2e:	e000      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	37d8      	adds	r7, #216	@ 0xd8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	50000700 	.word	0x50000700
 8005e4c:	c3210000 	.word	0xc3210000
 8005e50:	90c00010 	.word	0x90c00010
 8005e54:	50000600 	.word	0x50000600
 8005e58:	50000100 	.word	0x50000100
 8005e5c:	50000300 	.word	0x50000300
 8005e60:	20000004 	.word	0x20000004
 8005e64:	053e2d63 	.word	0x053e2d63
 8005e68:	c7520000 	.word	0xc7520000
 8005e6c:	50000500 	.word	0x50000500
 8005e70:	cb840000 	.word	0xcb840000

08005e74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff f872 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 8005e90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff f893 	bl	8004fc2 <LL_ADC_INJ_IsConversionOngoing>
 8005e9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8098 	beq.w	8005fdc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02a      	beq.n	8005f10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7f5b      	ldrb	r3, [r3, #29]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d126      	bne.n	8005f10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7f1b      	ldrb	r3, [r3, #28]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d122      	bne.n	8005f10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ece:	e014      	b.n	8005efa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4a45      	ldr	r2, [pc, #276]	@ (8005fe8 <ADC_ConversionStop+0x174>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d90d      	bls.n	8005ef4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005edc:	f043 0210 	orr.w	r2, r3, #16
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e074      	b.n	8005fde <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d1e3      	bne.n	8005ed0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2240      	movs	r2, #64	@ 0x40
 8005f0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d014      	beq.n	8005f40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f82a 	bl	8004f74 <LL_ADC_REG_IsConversionOngoing>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fe ffe7 	bl	8004efe <LL_ADC_IsDisableOngoing>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f806 	bl	8004f4c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d014      	beq.n	8005f70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff f839 	bl	8004fc2 <LL_ADC_INJ_IsConversionOngoing>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe ffcf 	bl	8004efe <LL_ADC_IsDisableOngoing>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f815 	bl	8004f9a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d005      	beq.n	8005f82 <ADC_ConversionStop+0x10e>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d105      	bne.n	8005f88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005f7c:	230c      	movs	r3, #12
 8005f7e:	617b      	str	r3, [r7, #20]
        break;
 8005f80:	e005      	b.n	8005f8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005f82:	2308      	movs	r3, #8
 8005f84:	617b      	str	r3, [r7, #20]
        break;
 8005f86:	e002      	b.n	8005f8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005f88:	2304      	movs	r3, #4
 8005f8a:	617b      	str	r3, [r7, #20]
        break;
 8005f8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005f8e:	f7fe fdb3 	bl	8004af8 <HAL_GetTick>
 8005f92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f94:	e01b      	b.n	8005fce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f96:	f7fe fdaf 	bl	8004af8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d914      	bls.n	8005fce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb6:	f043 0210 	orr.w	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e007      	b.n	8005fde <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1dc      	bne.n	8005f96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	a33fffff 	.word	0xa33fffff

08005fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe ff6b 	bl	8004ed8 <LL_ADC_IsEnabled>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d176      	bne.n	80060f6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	4b3c      	ldr	r3, [pc, #240]	@ (8006100 <ADC_Enable+0x114>)
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601a:	f043 0210 	orr.w	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006026:	f043 0201 	orr.w	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e062      	b.n	80060f8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe ff26 	bl	8004e88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006044:	d004      	beq.n	8006050 <ADC_Enable+0x64>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <ADC_Enable+0x118>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <ADC_Enable+0x68>
 8006050:	4b2d      	ldr	r3, [pc, #180]	@ (8006108 <ADC_Enable+0x11c>)
 8006052:	e000      	b.n	8006056 <ADC_Enable+0x6a>
 8006054:	4b2d      	ldr	r3, [pc, #180]	@ (800610c <ADC_Enable+0x120>)
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fd80 	bl	8004b5c <LL_ADC_GetCommonPathInternalCh>
 800605c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800605e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006066:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <ADC_Enable+0x124>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	4a29      	ldr	r2, [pc, #164]	@ (8006114 <ADC_Enable+0x128>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	099b      	lsrs	r3, r3, #6
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006080:	e002      	b.n	8006088 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3b01      	subs	r3, #1
 8006086:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f9      	bne.n	8006082 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800608e:	f7fe fd33 	bl	8004af8 <HAL_GetTick>
 8006092:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006094:	e028      	b.n	80060e8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe ff1c 	bl	8004ed8 <LL_ADC_IsEnabled>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe feec 	bl	8004e88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060b0:	f7fe fd22 	bl	8004af8 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d914      	bls.n	80060e8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d00d      	beq.n	80060e8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	f043 0210 	orr.w	r2, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e007      	b.n	80060f8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d1cf      	bne.n	8006096 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	8000003f 	.word	0x8000003f
 8006104:	50000100 	.word	0x50000100
 8006108:	50000300 	.word	0x50000300
 800610c:	50000700 	.word	0x50000700
 8006110:	20000004 	.word	0x20000004
 8006114:	053e2d63 	.word	0x053e2d63

08006118 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe feea 	bl	8004efe <LL_ADC_IsDisableOngoing>
 800612a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fed1 	bl	8004ed8 <LL_ADC_IsEnabled>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d047      	beq.n	80061cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d144      	bne.n	80061cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030d 	and.w	r3, r3, #13
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10c      	bne.n	800616a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe feab 	bl	8004eb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2203      	movs	r2, #3
 8006160:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006162:	f7fe fcc9 	bl	8004af8 <HAL_GetTick>
 8006166:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006168:	e029      	b.n	80061be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616e:	f043 0210 	orr.w	r2, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617a:	f043 0201 	orr.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e023      	b.n	80061ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006186:	f7fe fcb7 	bl	8004af8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d914      	bls.n	80061be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a6:	f043 0210 	orr.w	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e007      	b.n	80061ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1dc      	bne.n	8006186 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d14b      	bne.n	8006288 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d021      	beq.n	800624e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fd50 	bl	8004cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d032      	beq.n	8006280 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d12b      	bne.n	8006280 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11f      	bne.n	8006280 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800624c:	e018      	b.n	8006280 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d111      	bne.n	8006280 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006278:	f043 0201 	orr.w	r2, r3, #1
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7fb faa9 	bl	80017d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006286:	e00e      	b.n	80062a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff f9a2 	bl	80055de <HAL_ADC_ErrorCallback>
}
 800629a:	e004      	b.n	80062a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff f984 	bl	80055ca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e8:	f043 0204 	orr.w	r2, r3, #4
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff f974 	bl	80055de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <LL_ADC_IsEnabled>:
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <LL_ADC_IsEnabled+0x18>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <LL_ADC_IsEnabled+0x1a>
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <LL_ADC_REG_IsConversionOngoing>:
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d101      	bne.n	800633c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006338:	2301      	movs	r3, #1
 800633a:	e000      	b.n	800633e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b0a1      	sub	sp, #132	@ 0x84
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006366:	2302      	movs	r3, #2
 8006368:	e0e7      	b.n	800653a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006372:	2300      	movs	r3, #0
 8006374:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006376:	2300      	movs	r3, #0
 8006378:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006382:	d102      	bne.n	800638a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006384:	4b6f      	ldr	r3, [pc, #444]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	e009      	b.n	800639e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a6e      	ldr	r2, [pc, #440]	@ (8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d102      	bne.n	800639a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006394:	4b6d      	ldr	r3, [pc, #436]	@ (800654c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	e001      	b.n	800639e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0be      	b.n	800653a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ffb0 	bl	8006324 <LL_ADC_REG_IsConversionOngoing>
 80063c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ffaa 	bl	8006324 <LL_ADC_REG_IsConversionOngoing>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 80a0 	bne.w	8006518 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80063d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 809c 	bne.w	8006518 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063e8:	d004      	beq.n	80063f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a55      	ldr	r2, [pc, #340]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d101      	bne.n	80063f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80063f4:	4b56      	ldr	r3, [pc, #344]	@ (8006550 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80063f6:	e000      	b.n	80063fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80063f8:	4b56      	ldr	r3, [pc, #344]	@ (8006554 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80063fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d04b      	beq.n	800649c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6859      	ldr	r1, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006416:	035b      	lsls	r3, r3, #13
 8006418:	430b      	orrs	r3, r1
 800641a:	431a      	orrs	r2, r3
 800641c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800641e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006428:	d004      	beq.n	8006434 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a45      	ldr	r2, [pc, #276]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10f      	bne.n	8006454 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006434:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006438:	f7ff ff61 	bl	80062fe <LL_ADC_IsEnabled>
 800643c:	4604      	mov	r4, r0
 800643e:	4841      	ldr	r0, [pc, #260]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006440:	f7ff ff5d 	bl	80062fe <LL_ADC_IsEnabled>
 8006444:	4603      	mov	r3, r0
 8006446:	4323      	orrs	r3, r4
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf0c      	ite	eq
 800644c:	2301      	moveq	r3, #1
 800644e:	2300      	movne	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	e012      	b.n	800647a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006454:	483c      	ldr	r0, [pc, #240]	@ (8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006456:	f7ff ff52 	bl	80062fe <LL_ADC_IsEnabled>
 800645a:	4604      	mov	r4, r0
 800645c:	483b      	ldr	r0, [pc, #236]	@ (800654c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800645e:	f7ff ff4e 	bl	80062fe <LL_ADC_IsEnabled>
 8006462:	4603      	mov	r3, r0
 8006464:	431c      	orrs	r4, r3
 8006466:	483c      	ldr	r0, [pc, #240]	@ (8006558 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006468:	f7ff ff49 	bl	80062fe <LL_ADC_IsEnabled>
 800646c:	4603      	mov	r3, r0
 800646e:	4323      	orrs	r3, r4
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d056      	beq.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800647e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006486:	f023 030f 	bic.w	r3, r3, #15
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	6811      	ldr	r1, [r2, #0]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	6892      	ldr	r2, [r2, #8]
 8006492:	430a      	orrs	r2, r1
 8006494:	431a      	orrs	r2, r3
 8006496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006498:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800649a:	e047      	b.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800649c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064b0:	d004      	beq.n	80064bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a23      	ldr	r2, [pc, #140]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10f      	bne.n	80064dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80064bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80064c0:	f7ff ff1d 	bl	80062fe <LL_ADC_IsEnabled>
 80064c4:	4604      	mov	r4, r0
 80064c6:	481f      	ldr	r0, [pc, #124]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064c8:	f7ff ff19 	bl	80062fe <LL_ADC_IsEnabled>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4323      	orrs	r3, r4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e012      	b.n	8006502 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80064dc:	481a      	ldr	r0, [pc, #104]	@ (8006548 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80064de:	f7ff ff0e 	bl	80062fe <LL_ADC_IsEnabled>
 80064e2:	4604      	mov	r4, r0
 80064e4:	4819      	ldr	r0, [pc, #100]	@ (800654c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80064e6:	f7ff ff0a 	bl	80062fe <LL_ADC_IsEnabled>
 80064ea:	4603      	mov	r3, r0
 80064ec:	431c      	orrs	r4, r3
 80064ee:	481a      	ldr	r0, [pc, #104]	@ (8006558 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80064f0:	f7ff ff05 	bl	80062fe <LL_ADC_IsEnabled>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4323      	orrs	r3, r4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d012      	beq.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006514:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006516:	e009      	b.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800652a:	e000      	b.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800652c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006536:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800653a:	4618      	mov	r0, r3
 800653c:	3784      	adds	r7, #132	@ 0x84
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	bf00      	nop
 8006544:	50000100 	.word	0x50000100
 8006548:	50000400 	.word	0x50000400
 800654c:	50000500 	.word	0x50000500
 8006550:	50000300 	.word	0x50000300
 8006554:	50000700 	.word	0x50000700
 8006558:	50000600 	.word	0x50000600

0800655c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <LL_EXTI_EnableIT_0_31+0x20>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4904      	ldr	r1, [pc, #16]	@ (800657c <LL_EXTI_EnableIT_0_31+0x20>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40010400 	.word	0x40010400

08006580 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006588:	4b05      	ldr	r3, [pc, #20]	@ (80065a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	4904      	ldr	r1, [pc, #16]	@ (80065a0 <LL_EXTI_EnableIT_32_63+0x20>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	620b      	str	r3, [r1, #32]
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40010400 	.word	0x40010400

080065a4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80065ac:	4b06      	ldr	r3, [pc, #24]	@ (80065c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	4904      	ldr	r1, [pc, #16]	@ (80065c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010400 	.word	0x40010400

080065cc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	43db      	mvns	r3, r3
 80065dc:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <LL_EXTI_DisableIT_32_63+0x24>)
 80065de:	4013      	ands	r3, r2
 80065e0:	620b      	str	r3, [r1, #32]
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40010400 	.word	0x40010400

080065f4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80065fc:	4b05      	ldr	r3, [pc, #20]	@ (8006614 <LL_EXTI_EnableEvent_0_31+0x20>)
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	4904      	ldr	r1, [pc, #16]	@ (8006614 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]

}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40010400 	.word	0x40010400

08006618 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006624:	4904      	ldr	r1, [pc, #16]	@ (8006638 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4313      	orrs	r3, r2
 800662a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40010400 	.word	0x40010400

0800663c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006644:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	43db      	mvns	r3, r3
 800664c:	4904      	ldr	r1, [pc, #16]	@ (8006660 <LL_EXTI_DisableEvent_0_31+0x24>)
 800664e:	4013      	ands	r3, r2
 8006650:	604b      	str	r3, [r1, #4]
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010400 	.word	0x40010400

08006664 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800666c:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <LL_EXTI_DisableEvent_32_63+0x24>)
 800666e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	43db      	mvns	r3, r3
 8006674:	4904      	ldr	r1, [pc, #16]	@ (8006688 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006676:	4013      	ands	r3, r2
 8006678:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010400 	.word	0x40010400

0800668c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	4904      	ldr	r1, [pc, #16]	@ (80066ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4313      	orrs	r3, r2
 800669e:	608b      	str	r3, [r1, #8]

}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40010400 	.word	0x40010400

080066b0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80066ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066bc:	4904      	ldr	r1, [pc, #16]	@ (80066d0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40010400 	.word	0x40010400

080066d4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	4904      	ldr	r1, [pc, #16]	@ (80066f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]

}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010400 	.word	0x40010400

080066fc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	43db      	mvns	r3, r3
 800670c:	4904      	ldr	r1, [pc, #16]	@ (8006720 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800670e:	4013      	ands	r3, r2
 8006710:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010400 	.word	0x40010400

08006724 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800672c:	4b05      	ldr	r3, [pc, #20]	@ (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	4904      	ldr	r1, [pc, #16]	@ (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	60cb      	str	r3, [r1, #12]
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010400 	.word	0x40010400

08006748 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006750:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006754:	4904      	ldr	r1, [pc, #16]	@ (8006768 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4313      	orrs	r3, r2
 800675a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40010400 	.word	0x40010400

0800676c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	43db      	mvns	r3, r3
 800677c:	4904      	ldr	r1, [pc, #16]	@ (8006790 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800677e:	4013      	ands	r3, r2
 8006780:	60cb      	str	r3, [r1, #12]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40010400 	.word	0x40010400

08006794 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800679e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	43db      	mvns	r3, r3
 80067a4:	4904      	ldr	r1, [pc, #16]	@ (80067b8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010400 	.word	0x40010400

080067bc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80067c4:	4a04      	ldr	r2, [pc, #16]	@ (80067d8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6153      	str	r3, [r2, #20]
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010400 	.word	0x40010400

080067dc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80067e4:	4a04      	ldr	r2, [pc, #16]	@ (80067f8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e181      	b.n	8006b1c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006826:	d102      	bne.n	800682e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e176      	b.n	8006b1c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7f5b      	ldrb	r3, [r3, #29]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d108      	bne.n	800684a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fd f825 	bl	8003894 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006854:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b90      	ldr	r3, [pc, #576]	@ (8006abc <HAL_COMP_Init+0x2c0>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	430b      	orrs	r3, r1
 8006886:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_COMP_Init+0xc8>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d113      	bne.n	80068c4 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800689c:	4b88      	ldr	r3, [pc, #544]	@ (8006ac0 <HAL_COMP_Init+0x2c4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	099b      	lsrs	r3, r3, #6
 80068a2:	4a88      	ldr	r2, [pc, #544]	@ (8006ac4 <HAL_COMP_Init+0x2c8>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	099b      	lsrs	r3, r3, #6
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80068b6:	e002      	b.n	80068be <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f9      	bne.n	80068b8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac8 <HAL_COMP_Init+0x2cc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d028      	beq.n	8006920 <HAL_COMP_Init+0x124>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006acc <HAL_COMP_Init+0x2d0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d020      	beq.n	800691a <HAL_COMP_Init+0x11e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad0 <HAL_COMP_Init+0x2d4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_COMP_Init+0x118>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7b      	ldr	r2, [pc, #492]	@ (8006ad4 <HAL_COMP_Init+0x2d8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d010      	beq.n	800690e <HAL_COMP_Init+0x112>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a79      	ldr	r2, [pc, #484]	@ (8006ad8 <HAL_COMP_Init+0x2dc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d008      	beq.n	8006908 <HAL_COMP_Init+0x10c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a78      	ldr	r2, [pc, #480]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d101      	bne.n	8006904 <HAL_COMP_Init+0x108>
 8006900:	2301      	movs	r3, #1
 8006902:	e00f      	b.n	8006924 <HAL_COMP_Init+0x128>
 8006904:	2302      	movs	r3, #2
 8006906:	e00d      	b.n	8006924 <HAL_COMP_Init+0x128>
 8006908:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800690c:	e00a      	b.n	8006924 <HAL_COMP_Init+0x128>
 800690e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006912:	e007      	b.n	8006924 <HAL_COMP_Init+0x128>
 8006914:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006918:	e004      	b.n	8006924 <HAL_COMP_Init+0x128>
 800691a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800691e:	e001      	b.n	8006924 <HAL_COMP_Init+0x128>
 8006920:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006924:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80b6 	beq.w	8006aa0 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d011      	beq.n	8006964 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a65      	ldr	r2, [pc, #404]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_COMP_Init+0x158>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a64      	ldr	r2, [pc, #400]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d103      	bne.n	800695c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006954:	6938      	ldr	r0, [r7, #16]
 8006956:	f7ff feab 	bl	80066b0 <LL_EXTI_EnableRisingTrig_32_63>
 800695a:	e014      	b.n	8006986 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f7ff fe95 	bl	800668c <LL_EXTI_EnableRisingTrig_0_31>
 8006962:	e010      	b.n	8006986 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a5c      	ldr	r2, [pc, #368]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_COMP_Init+0x17c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5b      	ldr	r2, [pc, #364]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d103      	bne.n	8006980 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006978:	6938      	ldr	r0, [r7, #16]
 800697a:	f7ff febf 	bl	80066fc <LL_EXTI_DisableRisingTrig_32_63>
 800697e:	e002      	b.n	8006986 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006980:	6938      	ldr	r0, [r7, #16]
 8006982:	f7ff fea7 	bl	80066d4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d011      	beq.n	80069b6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a51      	ldr	r2, [pc, #324]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_COMP_Init+0x1aa>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a4f      	ldr	r2, [pc, #316]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d103      	bne.n	80069ae <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f7ff fece 	bl	8006748 <LL_EXTI_EnableFallingTrig_32_63>
 80069ac:	e014      	b.n	80069d8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f7ff feb8 	bl	8006724 <LL_EXTI_EnableFallingTrig_0_31>
 80069b4:	e010      	b.n	80069d8 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a48      	ldr	r2, [pc, #288]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_COMP_Init+0x1ce>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a46      	ldr	r2, [pc, #280]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d103      	bne.n	80069d2 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80069ca:	6938      	ldr	r0, [r7, #16]
 80069cc:	f7ff fee2 	bl	8006794 <LL_EXTI_DisableFallingTrig_32_63>
 80069d0:	e002      	b.n	80069d8 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80069d2:	6938      	ldr	r0, [r7, #16]
 80069d4:	f7ff feca 	bl	800676c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3f      	ldr	r2, [pc, #252]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_COMP_Init+0x1f0>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3e      	ldr	r2, [pc, #248]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d103      	bne.n	80069f4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80069ec:	6938      	ldr	r0, [r7, #16]
 80069ee:	f7ff fef5 	bl	80067dc <LL_EXTI_ClearFlag_32_63>
 80069f2:	e002      	b.n	80069fa <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80069f4:	6938      	ldr	r0, [r7, #16]
 80069f6:	f7ff fee1 	bl	80067bc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d011      	beq.n	8006a2a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a34      	ldr	r2, [pc, #208]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_COMP_Init+0x21e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a32      	ldr	r2, [pc, #200]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d103      	bne.n	8006a22 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f7ff fdfc 	bl	8006618 <LL_EXTI_EnableEvent_32_63>
 8006a20:	e014      	b.n	8006a4c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006a22:	6938      	ldr	r0, [r7, #16]
 8006a24:	f7ff fde6 	bl	80065f4 <LL_EXTI_EnableEvent_0_31>
 8006a28:	e010      	b.n	8006a4c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_COMP_Init+0x242>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a29      	ldr	r2, [pc, #164]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d103      	bne.n	8006a46 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7ff fe10 	bl	8006664 <LL_EXTI_DisableEvent_32_63>
 8006a44:	e002      	b.n	8006a4c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f7ff fdf8 	bl	800663c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d011      	beq.n	8006a7c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_COMP_Init+0x270>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d103      	bne.n	8006a74 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006a6c:	6938      	ldr	r0, [r7, #16]
 8006a6e:	f7ff fd87 	bl	8006580 <LL_EXTI_EnableIT_32_63>
 8006a72:	e04b      	b.n	8006b0c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006a74:	6938      	ldr	r0, [r7, #16]
 8006a76:	f7ff fd71 	bl	800655c <LL_EXTI_EnableIT_0_31>
 8006a7a:	e047      	b.n	8006b0c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a16      	ldr	r2, [pc, #88]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_COMP_Init+0x294>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d103      	bne.n	8006a98 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f7ff fd9b 	bl	80065cc <LL_EXTI_DisableIT_32_63>
 8006a96:	e039      	b.n	8006b0c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006a98:	6938      	ldr	r0, [r7, #16]
 8006a9a:	f7ff fd83 	bl	80065a4 <LL_EXTI_DisableIT_0_31>
 8006a9e:	e035      	b.n	8006b0c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8006adc <HAL_COMP_Init+0x2e0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_COMP_Init+0x2b8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae0 <HAL_COMP_Init+0x2e4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d117      	bne.n	8006ae4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f7ff fdd5 	bl	8006664 <LL_EXTI_DisableEvent_32_63>
 8006aba:	e016      	b.n	8006aea <HAL_COMP_Init+0x2ee>
 8006abc:	ff007e0f 	.word	0xff007e0f
 8006ac0:	20000004 	.word	0x20000004
 8006ac4:	053e2d63 	.word	0x053e2d63
 8006ac8:	40010200 	.word	0x40010200
 8006acc:	40010204 	.word	0x40010204
 8006ad0:	40010208 	.word	0x40010208
 8006ad4:	4001020c 	.word	0x4001020c
 8006ad8:	40010210 	.word	0x40010210
 8006adc:	40010214 	.word	0x40010214
 8006ae0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006ae4:	6938      	ldr	r0, [r7, #16]
 8006ae6:	f7ff fda9 	bl	800663c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a0e      	ldr	r2, [pc, #56]	@ (8006b28 <HAL_COMP_Init+0x32c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_COMP_Init+0x302>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a0c      	ldr	r2, [pc, #48]	@ (8006b2c <HAL_COMP_Init+0x330>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d103      	bne.n	8006b06 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006afe:	6938      	ldr	r0, [r7, #16]
 8006b00:	f7ff fd64 	bl	80065cc <LL_EXTI_DisableIT_32_63>
 8006b04:	e002      	b.n	8006b0c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006b06:	6938      	ldr	r0, [r7, #16]
 8006b08:	f7ff fd4c 	bl	80065a4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7f5b      	ldrb	r3, [r3, #29]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40010214 	.word	0x40010214
 8006b2c:	40010218 	.word	0x40010218

08006b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b40:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <__NVIC_SetPriorityGrouping+0x44>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b62:	4a04      	ldr	r2, [pc, #16]	@ (8006b74 <__NVIC_SetPriorityGrouping+0x44>)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	60d3      	str	r3, [r2, #12]
}
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	e000ed00 	.word	0xe000ed00

08006b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b7c:	4b04      	ldr	r3, [pc, #16]	@ (8006b90 <__NVIC_GetPriorityGrouping+0x18>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	0a1b      	lsrs	r3, r3, #8
 8006b82:	f003 0307 	and.w	r3, r3, #7
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	e000ed00 	.word	0xe000ed00

08006b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	db0b      	blt.n	8006bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	f003 021f 	and.w	r2, r3, #31
 8006bac:	4907      	ldr	r1, [pc, #28]	@ (8006bcc <__NVIC_EnableIRQ+0x38>)
 8006bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8006bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000e100 	.word	0xe000e100

08006bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db0a      	blt.n	8006bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	490c      	ldr	r1, [pc, #48]	@ (8006c1c <__NVIC_SetPriority+0x4c>)
 8006bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bee:	0112      	lsls	r2, r2, #4
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bf8:	e00a      	b.n	8006c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4908      	ldr	r1, [pc, #32]	@ (8006c20 <__NVIC_SetPriority+0x50>)
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	3b04      	subs	r3, #4
 8006c08:	0112      	lsls	r2, r2, #4
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	761a      	strb	r2, [r3, #24]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	e000e100 	.word	0xe000e100
 8006c20:	e000ed00 	.word	0xe000ed00

08006c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b089      	sub	sp, #36	@ 0x24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f1c3 0307 	rsb	r3, r3, #7
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	bf28      	it	cs
 8006c42:	2304      	movcs	r3, #4
 8006c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d902      	bls.n	8006c54 <NVIC_EncodePriority+0x30>
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	3b03      	subs	r3, #3
 8006c52:	e000      	b.n	8006c56 <NVIC_EncodePriority+0x32>
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43da      	mvns	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	401a      	ands	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	43d9      	mvns	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c7c:	4313      	orrs	r3, r2
         );
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3724      	adds	r7, #36	@ 0x24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c9c:	d301      	bcc.n	8006ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e00f      	b.n	8006cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ccc <SysTick_Config+0x40>)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006caa:	210f      	movs	r1, #15
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	f7ff ff8e 	bl	8006bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <SysTick_Config+0x40>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cba:	4b04      	ldr	r3, [pc, #16]	@ (8006ccc <SysTick_Config+0x40>)
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	e000e010 	.word	0xe000e010

08006cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ff29 	bl	8006b30 <__NVIC_SetPriorityGrouping>
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b086      	sub	sp, #24
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	4603      	mov	r3, r0
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cf4:	f7ff ff40 	bl	8006b78 <__NVIC_GetPriorityGrouping>
 8006cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f7ff ff90 	bl	8006c24 <NVIC_EncodePriority>
 8006d04:	4602      	mov	r2, r0
 8006d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff ff5f 	bl	8006bd0 <__NVIC_SetPriority>
}
 8006d12:	bf00      	nop
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	4603      	mov	r3, r0
 8006d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ff33 	bl	8006b94 <__NVIC_EnableIRQ>
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff ffa4 	bl	8006c8c <SysTick_Config>
 8006d44:	4603      	mov	r3, r0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e054      	b.n	8006e0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7f5b      	ldrb	r3, [r3, #29]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fc fdde 	bl	8003934 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	791b      	ldrb	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a22      	ldr	r2, [pc, #136]	@ (8006e14 <HAL_CRC_Init+0xc4>)
 8006d8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0218 	bic.w	r2, r2, #24
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	e00c      	b.n	8006dba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6899      	ldr	r1, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f948 	bl	8007040 <HAL_CRCEx_Polynomial_Set>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e028      	b.n	8006e0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	795b      	ldrb	r3, [r3, #5]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	611a      	str	r2, [r3, #16]
 8006dcc:	e004      	b.n	8006dd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6912      	ldr	r2, [r2, #16]
 8006dd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699a      	ldr	r2, [r3, #24]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	04c11db7 	.word	0x04c11db7

08006e18 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d006      	beq.n	8006e54 <HAL_CRC_Calculate+0x3c>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d829      	bhi.n	8006e9e <HAL_CRC_Calculate+0x86>
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d019      	beq.n	8006e82 <HAL_CRC_Calculate+0x6a>
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d01e      	beq.n	8006e90 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006e52:	e024      	b.n	8006e9e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e00a      	b.n	8006e70 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d3f0      	bcc.n	8006e5a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]
      break;
 8006e80:	e00e      	b.n	8006ea0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f812 	bl	8006eb0 <CRC_Handle_8>
 8006e8c:	6138      	str	r0, [r7, #16]
      break;
 8006e8e:	e007      	b.n	8006ea0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f899 	bl	8006fcc <CRC_Handle_16>
 8006e9a:	6138      	str	r0, [r7, #16]
      break;
 8006e9c:	e000      	b.n	8006ea0 <HAL_CRC_Calculate+0x88>
      break;
 8006e9e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006ea6:	693b      	ldr	r3, [r7, #16]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	@ 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e023      	b.n	8006f0a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4413      	add	r3, r2
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	440b      	add	r3, r1
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006edc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006eec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	3303      	adds	r3, #3
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	440b      	add	r3, r1
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006f00:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	089b      	lsrs	r3, r3, #2
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d3d6      	bcc.n	8006ec2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d04d      	beq.n	8006fba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	4413      	add	r3, r2
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d116      	bne.n	8006f70 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	b21a      	sxth	r2, r3
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	3301      	adds	r3, #1
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	440b      	add	r3, r1
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b21b      	sxth	r3, r3
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b21b      	sxth	r3, r3
 8006f62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	8b7a      	ldrh	r2, [r7, #26]
 8006f6e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d11f      	bne.n	8006fba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	b21a      	sxth	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	440b      	add	r3, r1
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b21b      	sxth	r3, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	b21b      	sxth	r3, r3
 8006f9a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	8b7a      	ldrh	r2, [r7, #26]
 8006fa6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	3302      	adds	r3, #2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3724      	adds	r7, #36	@ 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e013      	b.n	8007006 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	041a      	lsls	r2, r3, #16
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	3302      	adds	r3, #2
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	440b      	add	r3, r1
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	3301      	adds	r3, #1
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	085b      	lsrs	r3, r3, #1
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	429a      	cmp	r2, r3
 800700e:	d3e6      	bcc.n	8006fde <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4413      	add	r3, r2
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007050:	231f      	movs	r3, #31
 8007052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
 8007062:	e063      	b.n	800712c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007064:	bf00      	nop
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1e5a      	subs	r2, r3, #1
 800706a:	613a      	str	r2, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <HAL_CRCEx_Polynomial_Set+0x44>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b18      	cmp	r3, #24
 8007088:	d846      	bhi.n	8007118 <HAL_CRCEx_Polynomial_Set+0xd8>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <HAL_CRCEx_Polynomial_Set+0x50>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	0800711f 	.word	0x0800711f
 8007094:	08007119 	.word	0x08007119
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007119 	.word	0x08007119
 80070ac:	08007119 	.word	0x08007119
 80070b0:	0800710d 	.word	0x0800710d
 80070b4:	08007119 	.word	0x08007119
 80070b8:	08007119 	.word	0x08007119
 80070bc:	08007119 	.word	0x08007119
 80070c0:	08007119 	.word	0x08007119
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007119 	.word	0x08007119
 80070cc:	08007119 	.word	0x08007119
 80070d0:	08007101 	.word	0x08007101
 80070d4:	08007119 	.word	0x08007119
 80070d8:	08007119 	.word	0x08007119
 80070dc:	08007119 	.word	0x08007119
 80070e0:	08007119 	.word	0x08007119
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007119 	.word	0x08007119
 80070ec:	08007119 	.word	0x08007119
 80070f0:	080070f5 	.word	0x080070f5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d913      	bls.n	8007122 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80070fe:	e010      	b.n	8007122 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b07      	cmp	r3, #7
 8007104:	d90f      	bls.n	8007126 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800710a:	e00c      	b.n	8007126 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b0f      	cmp	r3, #15
 8007110:	d90b      	bls.n	800712a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007116:	e008      	b.n	800712a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	75fb      	strb	r3, [r7, #23]
        break;
 800711c:	e006      	b.n	800712c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800711e:	bf00      	nop
 8007120:	e004      	b.n	800712c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800712a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f023 0118 	bic.w	r1, r3, #24
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	430a      	orrs	r2, r1
 800714c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800714e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e014      	b.n	8007198 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	791b      	ldrb	r3, [r3, #4]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fc fbf8 	bl	8003974 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	@ 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_DAC_ConfigChannel+0x1c>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e19e      	b.n	80074fe <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	795b      	ldrb	r3, [r3, #5]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_DAC_ConfigChannel+0x2c>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e198      	b.n	80074fe <HAL_DAC_ConfigChannel+0x35e>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2202      	movs	r2, #2
 80071d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d17a      	bne.n	80072d6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80071e0:	f7fd fc8a 	bl	8004af8 <HAL_GetTick>
 80071e4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d13d      	bne.n	8007268 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80071ec:	e018      	b.n	8007220 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80071ee:	f7fd fc83 	bl	8004af8 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d911      	bls.n	8007220 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f043 0208 	orr.w	r2, r3, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2203      	movs	r2, #3
 800721a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e16e      	b.n	80074fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1df      	bne.n	80071ee <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007236:	641a      	str	r2, [r3, #64]	@ 0x40
 8007238:	e020      	b.n	800727c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800723a:	f7fd fc5d 	bl	8004af8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d90f      	bls.n	8007268 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	2b00      	cmp	r3, #0
 8007250:	da0a      	bge.n	8007268 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f043 0208 	orr.w	r2, r3, #8
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2203      	movs	r2, #3
 8007262:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e14a      	b.n	80074fe <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726e:	2b00      	cmp	r3, #0
 8007270:	dbe3      	blt.n	800723a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800728c:	fa01 f303 	lsl.w	r3, r1, r3
 8007290:	43db      	mvns	r3, r3
 8007292:	ea02 0103 	and.w	r1, r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	409a      	lsls	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	21ff      	movs	r1, #255	@ 0xff
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	43db      	mvns	r3, r3
 80072be:	ea02 0103 	and.w	r1, r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	409a      	lsls	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d11d      	bne.n	800731a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	221f      	movs	r2, #31
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	43db      	mvns	r3, r3
 80072f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f6:	4013      	ands	r3, r2
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730e:	4313      	orrs	r3, r2
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007318:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2207      	movs	r2, #7
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	43db      	mvns	r3, r3
 8007330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007332:	4013      	ands	r3, r2
 8007334:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d102      	bne.n	8007344 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
 8007342:	e00f      	b.n	8007364 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d102      	bne.n	8007352 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800734c:	2301      	movs	r3, #1
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	e008      	b.n	8007364 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800735a:	2301      	movs	r3, #1
 800735c:	623b      	str	r3, [r7, #32]
 800735e:	e001      	b.n	8007364 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007360:	2300      	movs	r3, #0
 8007362:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	43db      	mvns	r3, r3
 8007384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007386:	4013      	ands	r3, r2
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d102      	bne.n	8007398 <HAL_DAC_ConfigChannel+0x1f8>
 8007392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007396:	e000      	b.n	800739a <HAL_DAC_ConfigChannel+0x1fa>
 8007398:	2300      	movs	r3, #0
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43db      	mvns	r3, r3
 80073b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b2:	4013      	ands	r3, r2
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	795b      	ldrb	r3, [r3, #5]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d102      	bne.n	80073c4 <HAL_DAC_ConfigChannel+0x224>
 80073be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073c2:	e000      	b.n	80073c6 <HAL_DAC_ConfigChannel+0x226>
 80073c4:	2300      	movs	r3, #0
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d114      	bne.n	8007406 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80073dc:	f001 fc58 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 80073e0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4a48      	ldr	r2, [pc, #288]	@ (8007508 <HAL_DAC_ConfigChannel+0x368>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d904      	bls.n	80073f4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f2:	e00f      	b.n	8007414 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4a45      	ldr	r2, [pc, #276]	@ (800750c <HAL_DAC_ConfigChannel+0x36c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d90a      	bls.n	8007412 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	e006      	b.n	8007414 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740c:	4313      	orrs	r3, r2
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007410:	e000      	b.n	8007414 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007412:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007422:	4313      	orrs	r3, r2
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43da      	mvns	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	400a      	ands	r2, r1
 800744a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43db      	mvns	r3, r3
 8007464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007466:	4013      	ands	r3, r2
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747e:	4313      	orrs	r3, r2
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007488:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	22c0      	movs	r2, #192	@ 0xc0
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	43da      	mvns	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	400a      	ands	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	089b      	lsrs	r3, r3, #2
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80074d4:	fa01 f303 	lsl.w	r3, r1, r3
 80074d8:	43db      	mvns	r3, r3
 80074da:	ea02 0103 	and.w	r1, r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	409a      	lsls	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80074fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3728      	adds	r7, #40	@ 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	09896800 	.word	0x09896800
 800750c:	04c4b400 	.word	0x04c4b400

08007510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e08d      	b.n	800763e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	4b47      	ldr	r3, [pc, #284]	@ (8007648 <HAL_DMA_Init+0x138>)
 800752a:	429a      	cmp	r2, r3
 800752c:	d80f      	bhi.n	800754e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	4b45      	ldr	r3, [pc, #276]	@ (800764c <HAL_DMA_Init+0x13c>)
 8007536:	4413      	add	r3, r2
 8007538:	4a45      	ldr	r2, [pc, #276]	@ (8007650 <HAL_DMA_Init+0x140>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	009a      	lsls	r2, r3, #2
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a42      	ldr	r2, [pc, #264]	@ (8007654 <HAL_DMA_Init+0x144>)
 800754a:	641a      	str	r2, [r3, #64]	@ 0x40
 800754c:	e00e      	b.n	800756c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	4b40      	ldr	r3, [pc, #256]	@ (8007658 <HAL_DMA_Init+0x148>)
 8007556:	4413      	add	r3, r2
 8007558:	4a3d      	ldr	r2, [pc, #244]	@ (8007650 <HAL_DMA_Init+0x140>)
 800755a:	fba2 2303 	umull	r2, r3, r2, r3
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	009a      	lsls	r2, r3, #2
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a3c      	ldr	r2, [pc, #240]	@ (800765c <HAL_DMA_Init+0x14c>)
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800759c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa76 	bl	8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075cc:	d102      	bne.n	80075d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d010      	beq.n	8007614 <HAL_DMA_Init+0x104>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d80c      	bhi.n	8007614 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa96 	bl	8007b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	e008      	b.n	8007626 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40020407 	.word	0x40020407
 800764c:	bffdfff8 	.word	0xbffdfff8
 8007650:	cccccccd 	.word	0xcccccccd
 8007654:	40020000 	.word	0x40020000
 8007658:	bffdfbf8 	.word	0xbffdfbf8
 800765c:	40020400 	.word	0x40020400

08007660 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_DMA_Start_IT+0x20>
 800767c:	2302      	movs	r3, #2
 800767e:	e066      	b.n	800774e <HAL_DMA_Start_IT+0xee>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d155      	bne.n	8007740 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f9bb 	bl	8007a34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 020e 	orr.w	r2, r2, #14
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e00f      	b.n	80076f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0204 	bic.w	r2, r2, #4
 80076e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 020a 	orr.w	r2, r2, #10
 80076f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007714:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800772c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0201 	orr.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e005      	b.n	800774c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007748:	2302      	movs	r3, #2
 800774a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d005      	beq.n	800777a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2204      	movs	r2, #4
 8007772:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	e037      	b.n	80077ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 020e 	bic.w	r2, r2, #14
 8007788:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007794:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007798:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ae:	f003 021f 	and.w	r2, r3, #31
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2101      	movs	r1, #1
 80077b8:	fa01 f202 	lsl.w	r2, r1, r2
 80077bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80077c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00c      	beq.n	80077ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80077e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d00d      	beq.n	800783c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2204      	movs	r2, #4
 8007824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	73fb      	strb	r3, [r7, #15]
 800783a:	e047      	b.n	80078cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 020e 	bic.w	r2, r2, #14
 800784a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0201 	bic.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800786a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007870:	f003 021f 	and.w	r2, r3, #31
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f202 	lsl.w	r2, r1, r2
 800787e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007888:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00c      	beq.n	80078ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80078aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
    }
  }
  return status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2204      	movs	r2, #4
 80078f8:	409a      	lsls	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d026      	beq.n	8007950 <HAL_DMA_IRQHandler+0x7a>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d021      	beq.n	8007950 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d107      	bne.n	800792a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0204 	bic.w	r2, r2, #4
 8007928:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792e:	f003 021f 	and.w	r2, r3, #31
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007936:	2104      	movs	r1, #4
 8007938:	fa01 f202 	lsl.w	r2, r1, r2
 800793c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	d071      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800794e:	e06c      	b.n	8007a2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2202      	movs	r2, #2
 800795a:	409a      	lsls	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02e      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d029      	beq.n	80079c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 020a 	bic.w	r2, r2, #10
 800798a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007998:	f003 021f 	and.w	r2, r3, #31
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	2102      	movs	r1, #2
 80079a2:	fa01 f202 	lsl.w	r2, r1, r2
 80079a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d038      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80079c0:	e033      	b.n	8007a2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2208      	movs	r2, #8
 80079cc:	409a      	lsls	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02a      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f003 0308 	and.w	r3, r3, #8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d025      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 020e 	bic.w	r2, r2, #14
 80079ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f4:	f003 021f 	and.w	r2, r3, #31
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	2101      	movs	r1, #1
 80079fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007a02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
}
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a62:	f003 021f 	and.w	r2, r3, #31
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b10      	cmp	r3, #16
 8007a80:	d108      	bne.n	8007a94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007a92:	e007      	b.n	8007aa4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b16      	ldr	r3, [pc, #88]	@ (8007b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007ac4:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e001      	b.n	8007ace <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007aca:	4b15      	ldr	r3, [pc, #84]	@ (8007b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007acc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	3b08      	subs	r3, #8
 8007ada:	4a12      	ldr	r2, [pc, #72]	@ (8007b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	089b      	lsrs	r3, r3, #2
 8007aea:	009a      	lsls	r2, r3, #2
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a0b      	ldr	r2, [pc, #44]	@ (8007b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007afa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 031f 	and.w	r3, r3, #31
 8007b02:	2201      	movs	r2, #1
 8007b04:	409a      	lsls	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40020407 	.word	0x40020407
 8007b1c:	40020800 	.word	0x40020800
 8007b20:	40020820 	.word	0x40020820
 8007b24:	cccccccd 	.word	0xcccccccd
 8007b28:	40020880 	.word	0x40020880

08007b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a08      	ldr	r2, [pc, #32]	@ (8007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007b4e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2201      	movs	r2, #1
 8007b5a:	409a      	lsls	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	1000823f 	.word	0x1000823f
 8007b70:	40020940 	.word	0x40020940

08007b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b82:	e15a      	b.n	8007e3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b90:	4013      	ands	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 814c 	beq.w	8007e34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d005      	beq.n	8007bb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d130      	bne.n	8007c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bea:	2201      	movs	r2, #1
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 0201 	and.w	r2, r3, #1
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d017      	beq.n	8007c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	43db      	mvns	r3, r3
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4013      	ands	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d123      	bne.n	8007ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	08da      	lsrs	r2, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3208      	adds	r2, #8
 8007c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	220f      	movs	r2, #15
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	08da      	lsrs	r2, r3, #3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3208      	adds	r2, #8
 8007ca0:	6939      	ldr	r1, [r7, #16]
 8007ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f003 0203 	and.w	r2, r3, #3
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a6 	beq.w	8007e34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8007e58 <HAL_GPIO_Init+0x2e4>)
 8007cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cec:	4a5a      	ldr	r2, [pc, #360]	@ (8007e58 <HAL_GPIO_Init+0x2e4>)
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8007cf4:	4b58      	ldr	r3, [pc, #352]	@ (8007e58 <HAL_GPIO_Init+0x2e4>)
 8007cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	60bb      	str	r3, [r7, #8]
 8007cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d00:	4a56      	ldr	r2, [pc, #344]	@ (8007e5c <HAL_GPIO_Init+0x2e8>)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	089b      	lsrs	r3, r3, #2
 8007d06:	3302      	adds	r3, #2
 8007d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	220f      	movs	r2, #15
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4013      	ands	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007d2a:	d01f      	beq.n	8007d6c <HAL_GPIO_Init+0x1f8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8007e60 <HAL_GPIO_Init+0x2ec>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d019      	beq.n	8007d68 <HAL_GPIO_Init+0x1f4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a4b      	ldr	r2, [pc, #300]	@ (8007e64 <HAL_GPIO_Init+0x2f0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d013      	beq.n	8007d64 <HAL_GPIO_Init+0x1f0>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <HAL_GPIO_Init+0x2f4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00d      	beq.n	8007d60 <HAL_GPIO_Init+0x1ec>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a49      	ldr	r2, [pc, #292]	@ (8007e6c <HAL_GPIO_Init+0x2f8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <HAL_GPIO_Init+0x1e8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a48      	ldr	r2, [pc, #288]	@ (8007e70 <HAL_GPIO_Init+0x2fc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d101      	bne.n	8007d58 <HAL_GPIO_Init+0x1e4>
 8007d54:	2305      	movs	r3, #5
 8007d56:	e00a      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d58:	2306      	movs	r3, #6
 8007d5a:	e008      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	e006      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d60:	2303      	movs	r3, #3
 8007d62:	e004      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e002      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <HAL_GPIO_Init+0x1fa>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	f002 0203 	and.w	r2, r2, #3
 8007d74:	0092      	lsls	r2, r2, #2
 8007d76:	4093      	lsls	r3, r2
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d7e:	4937      	ldr	r1, [pc, #220]	@ (8007e5c <HAL_GPIO_Init+0x2e8>)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	3302      	adds	r3, #2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d8c:	4b39      	ldr	r3, [pc, #228]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007db0:	4a30      	ldr	r2, [pc, #192]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007db6:	4b2f      	ldr	r3, [pc, #188]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	43db      	mvns	r3, r3
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007dda:	4a26      	ldr	r2, [pc, #152]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007de0:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4013      	ands	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e04:	4a1b      	ldr	r2, [pc, #108]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4013      	ands	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e2e:	4a11      	ldr	r2, [pc, #68]	@ (8007e74 <HAL_GPIO_Init+0x300>)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	3301      	adds	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	fa22 f303 	lsr.w	r3, r2, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f ae9d 	bne.w	8007b84 <HAL_GPIO_Init+0x10>
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	48000400 	.word	0x48000400
 8007e64:	48000800 	.word	0x48000800
 8007e68:	48000c00 	.word	0x48000c00
 8007e6c:	48001000 	.word	0x48001000
 8007e70:	48001400 	.word	0x48001400
 8007e74:	40010400 	.word	0x40010400

08007e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	887b      	ldrh	r3, [r7, #2]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
 8007e94:	e001      	b.n	8007e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007eb8:	787b      	ldrb	r3, [r7, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ebe:	887a      	ldrh	r2, [r7, #2]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ec4:	e002      	b.n	8007ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ec6:	887a      	ldrh	r2, [r7, #2]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e08d      	b.n	8008006 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fb fd58 	bl	80039b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	@ 0x24
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007f28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f4e:	609a      	str	r2, [r3, #8]
 8007f50:	e006      	b.n	8007f60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007f5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d108      	bne.n	8007f7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f76:	605a      	str	r2, [r3, #4]
 8007f78:	e007      	b.n	8007f8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1a      	ldr	r2, [r3, #32]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b20      	cmp	r3, #32
 8008022:	d138      	bne.n	8008096 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800802e:	2302      	movs	r3, #2
 8008030:	e032      	b.n	8008098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2224      	movs	r2, #36	@ 0x24
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008060:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6819      	ldr	r1, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d139      	bne.n	800812e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e033      	b.n	8008130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2224      	movs	r2, #36	@ 0x24
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0201 	bic.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0201 	orr.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e000      	b.n	8008130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
  }
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d141      	bne.n	80081ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800814a:	4b4b      	ldr	r3, [pc, #300]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008156:	d131      	bne.n	80081bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008158:	4b47      	ldr	r3, [pc, #284]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815e:	4a46      	ldr	r2, [pc, #280]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008168:	4b43      	ldr	r3, [pc, #268]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008170:	4a41      	ldr	r2, [pc, #260]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008176:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008178:	4b40      	ldr	r3, [pc, #256]	@ (800827c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2232      	movs	r2, #50	@ 0x32
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	4a3f      	ldr	r2, [pc, #252]	@ (8008280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	0c9b      	lsrs	r3, r3, #18
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800818e:	e002      	b.n	8008196 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3b01      	subs	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008196:	4b38      	ldr	r3, [pc, #224]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a2:	d102      	bne.n	80081aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f2      	bne.n	8008190 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081aa:	4b33      	ldr	r3, [pc, #204]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b6:	d158      	bne.n	800826a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e057      	b.n	800826c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c2:	4a2d      	ldr	r2, [pc, #180]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80081cc:	e04d      	b.n	800826a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d4:	d141      	bne.n	800825a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081d6:	4b28      	ldr	r3, [pc, #160]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e2:	d131      	bne.n	8008248 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081e4:	4b24      	ldr	r3, [pc, #144]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ea:	4a23      	ldr	r2, [pc, #140]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081f4:	4b20      	ldr	r3, [pc, #128]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80081fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008204:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2232      	movs	r2, #50	@ 0x32
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	4a1c      	ldr	r2, [pc, #112]	@ (8008280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	0c9b      	lsrs	r3, r3, #18
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800821a:	e002      	b.n	8008222 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3b01      	subs	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008222:	4b15      	ldr	r3, [pc, #84]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800822a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822e:	d102      	bne.n	8008236 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f2      	bne.n	800821c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008236:	4b10      	ldr	r3, [pc, #64]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800823e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008242:	d112      	bne.n	800826a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e011      	b.n	800826c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008248:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824e:	4a0a      	ldr	r2, [pc, #40]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008258:	e007      	b.n	800826a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800825a:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008262:	4a05      	ldr	r2, [pc, #20]	@ (8008278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008268:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	40007000 	.word	0x40007000
 800827c:	20000004 	.word	0x20000004
 8008280:	431bde83 	.word	0x431bde83

08008284 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008288:	4b05      	ldr	r3, [pc, #20]	@ (80082a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4a04      	ldr	r2, [pc, #16]	@ (80082a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800828e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008292:	6093      	str	r3, [r2, #8]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40007000 	.word	0x40007000

080082a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e2fe      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d075      	beq.n	80083ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082c2:	4b97      	ldr	r3, [pc, #604]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 030c 	and.w	r3, r3, #12
 80082ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082cc:	4b94      	ldr	r3, [pc, #592]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b0c      	cmp	r3, #12
 80082da:	d102      	bne.n	80082e2 <HAL_RCC_OscConfig+0x3e>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d002      	beq.n	80082e8 <HAL_RCC_OscConfig+0x44>
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d10b      	bne.n	8008300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	4b8d      	ldr	r3, [pc, #564]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <HAL_RCC_OscConfig+0x108>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d157      	bne.n	80083ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e2d9      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008308:	d106      	bne.n	8008318 <HAL_RCC_OscConfig+0x74>
 800830a:	4b85      	ldr	r3, [pc, #532]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a84      	ldr	r2, [pc, #528]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e01d      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008320:	d10c      	bne.n	800833c <HAL_RCC_OscConfig+0x98>
 8008322:	4b7f      	ldr	r3, [pc, #508]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a7e      	ldr	r2, [pc, #504]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b7c      	ldr	r3, [pc, #496]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a7b      	ldr	r2, [pc, #492]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e00b      	b.n	8008354 <HAL_RCC_OscConfig+0xb0>
 800833c:	4b78      	ldr	r3, [pc, #480]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a77      	ldr	r2, [pc, #476]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b75      	ldr	r3, [pc, #468]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a74      	ldr	r2, [pc, #464]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800834e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fc fbcc 	bl	8004af8 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008364:	f7fc fbc8 	bl	8004af8 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	@ 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e29e      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008376:	4b6a      	ldr	r3, [pc, #424]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0xc0>
 8008382:	e014      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008384:	f7fc fbb8 	bl	8004af8 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7fc fbb4 	bl	8004af8 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	@ 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e28a      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800839e:	4b60      	ldr	r3, [pc, #384]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f0      	bne.n	800838c <HAL_RCC_OscConfig+0xe8>
 80083aa:	e000      	b.n	80083ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d075      	beq.n	80084a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ba:	4b59      	ldr	r3, [pc, #356]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 030c 	and.w	r3, r3, #12
 80083c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083c4:	4b56      	ldr	r3, [pc, #344]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d102      	bne.n	80083da <HAL_RCC_OscConfig+0x136>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d002      	beq.n	80083e0 <HAL_RCC_OscConfig+0x13c>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d11f      	bne.n	8008420 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e0:	4b4f      	ldr	r3, [pc, #316]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_RCC_OscConfig+0x154>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e25d      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f8:	4b49      	ldr	r3, [pc, #292]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	4946      	ldr	r1, [pc, #280]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008408:	4313      	orrs	r3, r2
 800840a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800840c:	4b45      	ldr	r3, [pc, #276]	@ (8008524 <HAL_RCC_OscConfig+0x280>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f7fc fb25 	bl	8004a60 <HAL_InitTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d043      	beq.n	80084a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e249      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d023      	beq.n	8008470 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008428:	4b3d      	ldr	r3, [pc, #244]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a3c      	ldr	r2, [pc, #240]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800842e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7fc fb60 	bl	8004af8 <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800843c:	f7fc fb5c 	bl	8004af8 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e232      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800844e:	4b34      	ldr	r3, [pc, #208]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800845a:	4b31      	ldr	r3, [pc, #196]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	061b      	lsls	r3, r3, #24
 8008468:	492d      	ldr	r1, [pc, #180]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	604b      	str	r3, [r1, #4]
 800846e:	e01a      	b.n	80084a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008470:	4b2b      	ldr	r3, [pc, #172]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2a      	ldr	r2, [pc, #168]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008476:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800847a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fc fb3c 	bl	8004af8 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008484:	f7fc fb38 	bl	8004af8 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e20e      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008496:	4b22      	ldr	r3, [pc, #136]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x1e0>
 80084a2:	e000      	b.n	80084a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d041      	beq.n	8008536 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ba:	4b19      	ldr	r3, [pc, #100]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084c0:	4a17      	ldr	r2, [pc, #92]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084c2:	f043 0301 	orr.w	r3, r3, #1
 80084c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fc fb15 	bl	8004af8 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d2:	f7fc fb11 	bl	8004af8 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e1e7      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ef      	beq.n	80084d2 <HAL_RCC_OscConfig+0x22e>
 80084f2:	e020      	b.n	8008536 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084fa:	4a09      	ldr	r2, [pc, #36]	@ (8008520 <HAL_RCC_OscConfig+0x27c>)
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008504:	f7fc faf8 	bl	8004af8 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800850a:	e00d      	b.n	8008528 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800850c:	f7fc faf4 	bl	8004af8 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d906      	bls.n	8008528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e1ca      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
 800851e:	bf00      	nop
 8008520:	40021000 	.word	0x40021000
 8008524:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008528:	4b8c      	ldr	r3, [pc, #560]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800852a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1ea      	bne.n	800850c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80a6 	beq.w	8008690 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008544:	2300      	movs	r3, #0
 8008546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008548:	4b84      	ldr	r3, [pc, #528]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800854a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_RCC_OscConfig+0x2b4>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x2b6>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00d      	beq.n	800857a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800855e:	4b7f      	ldr	r3, [pc, #508]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008562:	4a7e      	ldr	r2, [pc, #504]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008568:	6593      	str	r3, [r2, #88]	@ 0x58
 800856a:	4b7c      	ldr	r3, [pc, #496]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800856e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008576:	2301      	movs	r3, #1
 8008578:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800857a:	4b79      	ldr	r3, [pc, #484]	@ (8008760 <HAL_RCC_OscConfig+0x4bc>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008582:	2b00      	cmp	r3, #0
 8008584:	d118      	bne.n	80085b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008586:	4b76      	ldr	r3, [pc, #472]	@ (8008760 <HAL_RCC_OscConfig+0x4bc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a75      	ldr	r2, [pc, #468]	@ (8008760 <HAL_RCC_OscConfig+0x4bc>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008592:	f7fc fab1 	bl	8004af8 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800859a:	f7fc faad 	bl	8004af8 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e183      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085ac:	4b6c      	ldr	r3, [pc, #432]	@ (8008760 <HAL_RCC_OscConfig+0x4bc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f0      	beq.n	800859a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d108      	bne.n	80085d2 <HAL_RCC_OscConfig+0x32e>
 80085c0:	4b66      	ldr	r3, [pc, #408]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c6:	4a65      	ldr	r2, [pc, #404]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085c8:	f043 0301 	orr.w	r3, r3, #1
 80085cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085d0:	e024      	b.n	800861c <HAL_RCC_OscConfig+0x378>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d110      	bne.n	80085fc <HAL_RCC_OscConfig+0x358>
 80085da:	4b60      	ldr	r3, [pc, #384]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e0:	4a5e      	ldr	r2, [pc, #376]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085e2:	f043 0304 	orr.w	r3, r3, #4
 80085e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085ea:	4b5c      	ldr	r3, [pc, #368]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f0:	4a5a      	ldr	r2, [pc, #360]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085fa:	e00f      	b.n	800861c <HAL_RCC_OscConfig+0x378>
 80085fc:	4b57      	ldr	r3, [pc, #348]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008602:	4a56      	ldr	r2, [pc, #344]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800860c:	4b53      	ldr	r3, [pc, #332]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008612:	4a52      	ldr	r2, [pc, #328]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008614:	f023 0304 	bic.w	r3, r3, #4
 8008618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d016      	beq.n	8008652 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fc fa68 	bl	8004af8 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800862a:	e00a      	b.n	8008642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f7fc fa64 	bl	8004af8 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e138      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008642:	4b46      	ldr	r3, [pc, #280]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0ed      	beq.n	800862c <HAL_RCC_OscConfig+0x388>
 8008650:	e015      	b.n	800867e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008652:	f7fc fa51 	bl	8004af8 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008658:	e00a      	b.n	8008670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800865a:	f7fc fa4d 	bl	8004af8 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008668:	4293      	cmp	r3, r2
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e121      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008670:	4b3a      	ldr	r3, [pc, #232]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1ed      	bne.n	800865a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800867e:	7ffb      	ldrb	r3, [r7, #31]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d105      	bne.n	8008690 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008684:	4b35      	ldr	r3, [pc, #212]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008688:	4a34      	ldr	r2, [pc, #208]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800868a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800868e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d03c      	beq.n	8008716 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01c      	beq.n	80086de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086a4:	4b2d      	ldr	r3, [pc, #180]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086aa:	4a2c      	ldr	r2, [pc, #176]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b4:	f7fc fa20 	bl	8004af8 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086bc:	f7fc fa1c 	bl	8004af8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e0f2      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086ce:	4b23      	ldr	r3, [pc, #140]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ef      	beq.n	80086bc <HAL_RCC_OscConfig+0x418>
 80086dc:	e01b      	b.n	8008716 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086de:	4b1f      	ldr	r3, [pc, #124]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086e4:	4a1d      	ldr	r2, [pc, #116]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ee:	f7fc fa03 	bl	8004af8 <HAL_GetTick>
 80086f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086f4:	e008      	b.n	8008708 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086f6:	f7fc f9ff 	bl	8004af8 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0d5      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008708:	4b14      	ldr	r3, [pc, #80]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800870a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ef      	bne.n	80086f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80c9 	beq.w	80088b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008720:	4b0e      	ldr	r3, [pc, #56]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 030c 	and.w	r3, r3, #12
 8008728:	2b0c      	cmp	r3, #12
 800872a:	f000 8083 	beq.w	8008834 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d15e      	bne.n	80087f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008736:	4b09      	ldr	r3, [pc, #36]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a08      	ldr	r2, [pc, #32]	@ (800875c <HAL_RCC_OscConfig+0x4b8>)
 800873c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008742:	f7fc f9d9 	bl	8004af8 <HAL_GetTick>
 8008746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008748:	e00c      	b.n	8008764 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800874a:	f7fc f9d5 	bl	8004af8 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	2b02      	cmp	r3, #2
 8008756:	d905      	bls.n	8008764 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e0ab      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
 800875c:	40021000 	.word	0x40021000
 8008760:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008764:	4b55      	ldr	r3, [pc, #340]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1ec      	bne.n	800874a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008770:	4b52      	ldr	r3, [pc, #328]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	4b52      	ldr	r3, [pc, #328]	@ (80088c0 <HAL_RCC_OscConfig+0x61c>)
 8008776:	4013      	ands	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6a11      	ldr	r1, [r2, #32]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008780:	3a01      	subs	r2, #1
 8008782:	0112      	lsls	r2, r2, #4
 8008784:	4311      	orrs	r1, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800878a:	0212      	lsls	r2, r2, #8
 800878c:	4311      	orrs	r1, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008792:	0852      	lsrs	r2, r2, #1
 8008794:	3a01      	subs	r2, #1
 8008796:	0552      	lsls	r2, r2, #21
 8008798:	4311      	orrs	r1, r2
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800879e:	0852      	lsrs	r2, r2, #1
 80087a0:	3a01      	subs	r2, #1
 80087a2:	0652      	lsls	r2, r2, #25
 80087a4:	4311      	orrs	r1, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087aa:	06d2      	lsls	r2, r2, #27
 80087ac:	430a      	orrs	r2, r1
 80087ae:	4943      	ldr	r1, [pc, #268]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b4:	4b41      	ldr	r3, [pc, #260]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a40      	ldr	r2, [pc, #256]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087c0:	4b3e      	ldr	r3, [pc, #248]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4a3d      	ldr	r2, [pc, #244]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087cc:	f7fc f994 	bl	8004af8 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fc f990 	bl	8004af8 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e066      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e6:	4b35      	ldr	r3, [pc, #212]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x530>
 80087f2:	e05e      	b.n	80088b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f4:	4b31      	ldr	r3, [pc, #196]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a30      	ldr	r2, [pc, #192]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fc f97a 	bl	8004af8 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008808:	f7fc f976 	bl	8004af8 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e04c      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800881a:	4b28      	ldr	r3, [pc, #160]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008826:	4b25      	ldr	r3, [pc, #148]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	4924      	ldr	r1, [pc, #144]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 800882c:	4b25      	ldr	r3, [pc, #148]	@ (80088c4 <HAL_RCC_OscConfig+0x620>)
 800882e:	4013      	ands	r3, r2
 8008830:	60cb      	str	r3, [r1, #12]
 8008832:	e03e      	b.n	80088b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e039      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008840:	4b1e      	ldr	r3, [pc, #120]	@ (80088bc <HAL_RCC_OscConfig+0x618>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f003 0203 	and.w	r2, r3, #3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	429a      	cmp	r2, r3
 8008852:	d12c      	bne.n	80088ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885e:	3b01      	subs	r3, #1
 8008860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	429a      	cmp	r2, r3
 8008864:	d123      	bne.n	80088ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d11b      	bne.n	80088ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008882:	429a      	cmp	r2, r3
 8008884:	d113      	bne.n	80088ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	3b01      	subs	r3, #1
 8008894:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d109      	bne.n	80088ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	3b01      	subs	r3, #1
 80088a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d001      	beq.n	80088b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40021000 	.word	0x40021000
 80088c0:	019f800c 	.word	0x019f800c
 80088c4:	feeefffc 	.word	0xfeeefffc

080088c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e11e      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088e0:	4b91      	ldr	r3, [pc, #580]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d910      	bls.n	8008910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ee:	4b8e      	ldr	r3, [pc, #568]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 020f 	bic.w	r2, r3, #15
 80088f6:	498c      	ldr	r1, [pc, #560]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088fe:	4b8a      	ldr	r3, [pc, #552]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d001      	beq.n	8008910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e106      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d073      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d129      	bne.n	8008978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008924:	4b81      	ldr	r3, [pc, #516]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e0f4      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008934:	f000 f9e4 	bl	8008d00 <RCC_GetSysClockFreqFromPLLSource>
 8008938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4a7c      	ldr	r2, [pc, #496]	@ (8008b30 <HAL_RCC_ClockConfig+0x268>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d93f      	bls.n	80089c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008942:	4b7a      	ldr	r3, [pc, #488]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008956:	2b00      	cmp	r3, #0
 8008958:	d033      	beq.n	80089c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800895e:	2b00      	cmp	r3, #0
 8008960:	d12f      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008962:	4b72      	ldr	r3, [pc, #456]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800896a:	4a70      	ldr	r2, [pc, #448]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 800896c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008972:	2380      	movs	r3, #128	@ 0x80
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e024      	b.n	80089c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d107      	bne.n	8008990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008980:	4b6a      	ldr	r3, [pc, #424]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d109      	bne.n	80089a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0c6      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008990:	4b66      	ldr	r3, [pc, #408]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e0be      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80089a0:	f000 f914 	bl	8008bcc <HAL_RCC_GetSysClockFreq>
 80089a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	4a61      	ldr	r2, [pc, #388]	@ (8008b30 <HAL_RCC_ClockConfig+0x268>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d909      	bls.n	80089c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089ae:	4b5f      	ldr	r3, [pc, #380]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089b6:	4a5d      	ldr	r2, [pc, #372]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 80089b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80089be:	2380      	movs	r3, #128	@ 0x80
 80089c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089c2:	4b5a      	ldr	r3, [pc, #360]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f023 0203 	bic.w	r2, r3, #3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4957      	ldr	r1, [pc, #348]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d4:	f7fc f890 	bl	8004af8 <HAL_GetTick>
 80089d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089da:	e00a      	b.n	80089f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089dc:	f7fc f88c 	bl	8004af8 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e095      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f2:	4b4e      	ldr	r3, [pc, #312]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 020c 	and.w	r2, r3, #12
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1eb      	bne.n	80089dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a1c:	4b43      	ldr	r3, [pc, #268]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	4a42      	ldr	r2, [pc, #264]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008a34:	4b3d      	ldr	r3, [pc, #244]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a44:	4b39      	ldr	r3, [pc, #228]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	4936      	ldr	r1, [pc, #216]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	608b      	str	r3, [r1, #8]
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b80      	cmp	r3, #128	@ 0x80
 8008a5c:	d105      	bne.n	8008a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a5e:	4b33      	ldr	r3, [pc, #204]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	4a32      	ldr	r2, [pc, #200]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008a64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d21d      	bcs.n	8008ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a78:	4b2b      	ldr	r3, [pc, #172]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f023 020f 	bic.w	r2, r3, #15
 8008a80:	4929      	ldr	r1, [pc, #164]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a88:	f7fc f836 	bl	8004af8 <HAL_GetTick>
 8008a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a8e:	e00a      	b.n	8008aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a90:	f7fc f832 	bl	8004af8 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e03b      	b.n	8008b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa6:	4b20      	ldr	r3, [pc, #128]	@ (8008b28 <HAL_RCC_ClockConfig+0x260>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d1ed      	bne.n	8008a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d008      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	4917      	ldr	r1, [pc, #92]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ade:	4b13      	ldr	r3, [pc, #76]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	490f      	ldr	r1, [pc, #60]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008af2:	f000 f86b 	bl	8008bcc <HAL_RCC_GetSysClockFreq>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b0c      	ldr	r3, [pc, #48]	@ (8008b2c <HAL_RCC_ClockConfig+0x264>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	091b      	lsrs	r3, r3, #4
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	490c      	ldr	r1, [pc, #48]	@ (8008b34 <HAL_RCC_ClockConfig+0x26c>)
 8008b04:	5ccb      	ldrb	r3, [r1, r3]
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b38 <HAL_RCC_ClockConfig+0x270>)
 8008b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <HAL_RCC_ClockConfig+0x274>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fb ffa2 	bl	8004a60 <HAL_InitTick>
 8008b1c:	4603      	mov	r3, r0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	40022000 	.word	0x40022000
 8008b2c:	40021000 	.word	0x40021000
 8008b30:	04c4b400 	.word	0x04c4b400
 8008b34:	0800d5a8 	.word	0x0800d5a8
 8008b38:	20000004 	.word	0x20000004
 8008b3c:	20000010 	.word	0x20000010

08008b40 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08c      	sub	sp, #48	@ 0x30
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b50:	2303      	movs	r3, #3
 8008b52:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8008b6c:	029b      	lsls	r3, r3, #10
 8008b6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	f003 030f 	and.w	r3, r3, #15
 8008b78:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008b7a:	4b13      	ldr	r3, [pc, #76]	@ (8008bc8 <HAL_RCC_MCOConfig+0x88>)
 8008b7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b7e:	2101      	movs	r1, #1
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	fa01 f303 	lsl.w	r3, r1, r3
 8008b86:	4910      	ldr	r1, [pc, #64]	@ (8008bc8 <HAL_RCC_MCOConfig+0x88>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	0d1b      	lsrs	r3, r3, #20
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba2:	f7fe ffe7 	bl	8007b74 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <HAL_RCC_MCOConfig+0x88>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	4903      	ldr	r1, [pc, #12]	@ (8008bc8 <HAL_RCC_MCOConfig+0x88>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	608b      	str	r3, [r1, #8]
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	3730      	adds	r7, #48	@ 0x30
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	40021000 	.word	0x40021000

08008bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 030c 	and.w	r3, r3, #12
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d102      	bne.n	8008be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008bde:	4b2a      	ldr	r3, [pc, #168]	@ (8008c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e047      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008be4:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f003 030c 	and.w	r3, r3, #12
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d102      	bne.n	8008bf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bf0:	4b26      	ldr	r3, [pc, #152]	@ (8008c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	e03e      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008bf6:	4b23      	ldr	r3, [pc, #140]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 030c 	and.w	r3, r3, #12
 8008bfe:	2b0c      	cmp	r3, #12
 8008c00:	d136      	bne.n	8008c70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c02:	4b20      	ldr	r3, [pc, #128]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	091b      	lsrs	r3, r3, #4
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	3301      	adds	r3, #1
 8008c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d10c      	bne.n	8008c3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c20:	4a1a      	ldr	r2, [pc, #104]	@ (8008c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c28:	4a16      	ldr	r2, [pc, #88]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c2a:	68d2      	ldr	r2, [r2, #12]
 8008c2c:	0a12      	lsrs	r2, r2, #8
 8008c2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	617b      	str	r3, [r7, #20]
      break;
 8008c38:	e00c      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c3a:	4a13      	ldr	r2, [pc, #76]	@ (8008c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	4a10      	ldr	r2, [pc, #64]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c44:	68d2      	ldr	r2, [r2, #12]
 8008c46:	0a12      	lsrs	r2, r2, #8
 8008c48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c4c:	fb02 f303 	mul.w	r3, r2, r3
 8008c50:	617b      	str	r3, [r7, #20]
      break;
 8008c52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c54:	4b0b      	ldr	r3, [pc, #44]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	0e5b      	lsrs	r3, r3, #25
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	3301      	adds	r3, #1
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	e001      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c74:	693b      	ldr	r3, [r7, #16]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40021000 	.word	0x40021000
 8008c88:	00f42400 	.word	0x00f42400
 8008c8c:	017d7840 	.word	0x017d7840

08008c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c94:	4b03      	ldr	r3, [pc, #12]	@ (8008ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c96:	681b      	ldr	r3, [r3, #0]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20000004 	.word	0x20000004

08008ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008cac:	f7ff fff0 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	4904      	ldr	r1, [pc, #16]	@ (8008cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cbe:	5ccb      	ldrb	r3, [r1, r3]
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	0800d5b8 	.word	0x0800d5b8

08008cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cd8:	f7ff ffda 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	0adb      	lsrs	r3, r3, #11
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	4904      	ldr	r1, [pc, #16]	@ (8008cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40021000 	.word	0x40021000
 8008cfc:	0800d5b8 	.word	0x0800d5b8

08008d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d06:	4b1e      	ldr	r3, [pc, #120]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d10:	4b1b      	ldr	r3, [pc, #108]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	091b      	lsrs	r3, r3, #4
 8008d16:	f003 030f 	and.w	r3, r3, #15
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d10c      	bne.n	8008d3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d24:	4a17      	ldr	r2, [pc, #92]	@ (8008d84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2c:	4a14      	ldr	r2, [pc, #80]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d2e:	68d2      	ldr	r2, [r2, #12]
 8008d30:	0a12      	lsrs	r2, r2, #8
 8008d32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	617b      	str	r3, [r7, #20]
    break;
 8008d3c:	e00c      	b.n	8008d58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d3e:	4a12      	ldr	r2, [pc, #72]	@ (8008d88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d46:	4a0e      	ldr	r2, [pc, #56]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d48:	68d2      	ldr	r2, [r2, #12]
 8008d4a:	0a12      	lsrs	r2, r2, #8
 8008d4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	617b      	str	r3, [r7, #20]
    break;
 8008d56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d58:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	0e5b      	lsrs	r3, r3, #25
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	3301      	adds	r3, #1
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008d72:	687b      	ldr	r3, [r7, #4]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	40021000 	.word	0x40021000
 8008d84:	017d7840 	.word	0x017d7840
 8008d88:	00f42400 	.word	0x00f42400

08008d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d94:	2300      	movs	r3, #0
 8008d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d98:	2300      	movs	r3, #0
 8008d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8098 	beq.w	8008eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008daa:	2300      	movs	r3, #0
 8008dac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dae:	4b43      	ldr	r3, [pc, #268]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10d      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dba:	4b40      	ldr	r3, [pc, #256]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a39      	ldr	r2, [pc, #228]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008de2:	f7fb fe89 	bl	8004af8 <HAL_GetTick>
 8008de6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008de8:	e009      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dea:	f7fb fe85 	bl	8004af8 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d902      	bls.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8008dfc:	e005      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dfe:	4b30      	ldr	r3, [pc, #192]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0ef      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e0a:	7cfb      	ldrb	r3, [r7, #19]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d159      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e10:	4b2a      	ldr	r3, [pc, #168]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01e      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d019      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e2c:	4b23      	ldr	r3, [pc, #140]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e38:	4b20      	ldr	r3, [pc, #128]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e48:	4b1c      	ldr	r3, [pc, #112]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e58:	4a18      	ldr	r2, [pc, #96]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6a:	f7fb fe45 	bl	8004af8 <HAL_GetTick>
 8008e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e70:	e00b      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e72:	f7fb fe41 	bl	8004af8 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d902      	bls.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	74fb      	strb	r3, [r7, #19]
            break;
 8008e88:	e006      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0ec      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e98:	7cfb      	ldrb	r3, [r7, #19]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e9e:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eac:	4903      	ldr	r1, [pc, #12]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008eb6:	7cfb      	ldrb	r3, [r7, #19]
 8008eb8:	74bb      	strb	r3, [r7, #18]
 8008eba:	e005      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	7cfb      	ldrb	r3, [r7, #19]
 8008ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ec8:	7c7b      	ldrb	r3, [r7, #17]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d105      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ece:	4ba7      	ldr	r3, [pc, #668]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed2:	4aa6      	ldr	r2, [pc, #664]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ee6:	4ba1      	ldr	r3, [pc, #644]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eec:	f023 0203 	bic.w	r2, r3, #3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	499d      	ldr	r1, [pc, #628]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f08:	4b98      	ldr	r3, [pc, #608]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f0e:	f023 020c 	bic.w	r2, r3, #12
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	4995      	ldr	r1, [pc, #596]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0304 	and.w	r3, r3, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f2a:	4b90      	ldr	r3, [pc, #576]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	498c      	ldr	r1, [pc, #560]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f4c:	4b87      	ldr	r3, [pc, #540]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	4984      	ldr	r1, [pc, #528]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	497b      	ldr	r1, [pc, #492]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f90:	4b76      	ldr	r3, [pc, #472]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	4973      	ldr	r1, [pc, #460]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	496a      	ldr	r1, [pc, #424]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fd4:	4b65      	ldr	r3, [pc, #404]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	4962      	ldr	r1, [pc, #392]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	4959      	ldr	r1, [pc, #356]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009018:	4b54      	ldr	r3, [pc, #336]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800901a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800901e:	f023 0203 	bic.w	r2, r3, #3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009026:	4951      	ldr	r1, [pc, #324]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009028:	4313      	orrs	r3, r2
 800902a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800903a:	4b4c      	ldr	r3, [pc, #304]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800903c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009040:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009048:	4948      	ldr	r1, [pc, #288]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009058:	2b00      	cmp	r3, #0
 800905a:	d015      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800905c:	4b43      	ldr	r3, [pc, #268]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800905e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009062:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	4940      	ldr	r1, [pc, #256]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800907a:	d105      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800907c:	4b3b      	ldr	r3, [pc, #236]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	4a3a      	ldr	r2, [pc, #232]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009086:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009090:	2b00      	cmp	r3, #0
 8009092:	d015      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009094:	4b35      	ldr	r3, [pc, #212]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800909a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a2:	4932      	ldr	r1, [pc, #200]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090b2:	d105      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090b4:	4b2d      	ldr	r3, [pc, #180]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4a2c      	ldr	r2, [pc, #176]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090be:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d015      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090cc:	4b27      	ldr	r3, [pc, #156]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090da:	4924      	ldr	r1, [pc, #144]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ea:	d105      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090ec:	4b1f      	ldr	r3, [pc, #124]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	4a1e      	ldr	r2, [pc, #120]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d015      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009104:	4b19      	ldr	r3, [pc, #100]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800910a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009112:	4916      	ldr	r1, [pc, #88]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009114:	4313      	orrs	r3, r2
 8009116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009122:	d105      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009124:	4b11      	ldr	r3, [pc, #68]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	4a10      	ldr	r2, [pc, #64]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800912a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800912e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d019      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800913c:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	4908      	ldr	r1, [pc, #32]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800914c:	4313      	orrs	r3, r2
 800914e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800915a:	d109      	bne.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800915c:	4b03      	ldr	r3, [pc, #12]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	4a02      	ldr	r2, [pc, #8]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009166:	60d3      	str	r3, [r2, #12]
 8009168:	e002      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800916a:	bf00      	nop
 800916c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d015      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800917c:	4b29      	ldr	r3, [pc, #164]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009182:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	4926      	ldr	r1, [pc, #152]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800918c:	4313      	orrs	r3, r2
 800918e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800919a:	d105      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800919c:	4b21      	ldr	r3, [pc, #132]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	4a20      	ldr	r2, [pc, #128]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d015      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80091b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091c2:	4918      	ldr	r1, [pc, #96]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d2:	d105      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091d4:	4b13      	ldr	r3, [pc, #76]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4a12      	ldr	r2, [pc, #72]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d015      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fa:	490a      	ldr	r1, [pc, #40]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800920a:	d105      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800920c:	4b05      	ldr	r3, [pc, #20]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	4a04      	ldr	r2, [pc, #16]	@ (8009224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009216:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009218:	7cbb      	ldrb	r3, [r7, #18]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40021000 	.word	0x40021000

08009228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e09d      	b.n	8009376 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d108      	bne.n	8009254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800924a:	d009      	beq.n	8009260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	61da      	str	r2, [r3, #28]
 8009252:	e005      	b.n	8009260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fa fc10 	bl	8003aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092a0:	d902      	bls.n	80092a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	e002      	b.n	80092ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80092b6:	d007      	beq.n	80092c8 <HAL_SPI_Init+0xa0>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092c0:	d002      	beq.n	80092c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800930a:	ea42 0103 	orr.w	r1, r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	0c1b      	lsrs	r3, r3, #16
 8009324:	f003 0204 	and.w	r2, r3, #4
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009344:	ea42 0103 	orr.w	r1, r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009364:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b088      	sub	sp, #32
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	603b      	str	r3, [r7, #0]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_SPI_Transmit+0x22>
 800939c:	2302      	movs	r3, #2
 800939e:	e15f      	b.n	8009660 <HAL_SPI_Transmit+0x2e2>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a8:	f7fb fba6 	bl	8004af8 <HAL_GetTick>
 80093ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093ae:	88fb      	ldrh	r3, [r7, #6]
 80093b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d002      	beq.n	80093c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093be:	2302      	movs	r3, #2
 80093c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093c2:	e148      	b.n	8009656 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <HAL_SPI_Transmit+0x52>
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093d4:	e13f      	b.n	8009656 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2203      	movs	r2, #3
 80093da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	88fa      	ldrh	r2, [r7, #6]
 80093ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	88fa      	ldrh	r2, [r7, #6]
 80093f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009420:	d10f      	bne.n	8009442 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800944c:	2b40      	cmp	r3, #64	@ 0x40
 800944e:	d007      	beq.n	8009460 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800945e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009468:	d94f      	bls.n	800950a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <HAL_SPI_Transmit+0xfa>
 8009472:	8afb      	ldrh	r3, [r7, #22]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d142      	bne.n	80094fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947c:	881a      	ldrh	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009488:	1c9a      	adds	r2, r3, #2
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800949c:	e02f      	b.n	80094fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d112      	bne.n	80094d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b0:	881a      	ldrh	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	1c9a      	adds	r2, r3, #2
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094d0:	e015      	b.n	80094fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d2:	f7fb fb11 	bl	8004af8 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d803      	bhi.n	80094ea <HAL_SPI_Transmit+0x16c>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d102      	bne.n	80094f0 <HAL_SPI_Transmit+0x172>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d106      	bne.n	80094fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80094fc:	e0ab      	b.n	8009656 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009502:	b29b      	uxth	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1ca      	bne.n	800949e <HAL_SPI_Transmit+0x120>
 8009508:	e080      	b.n	800960c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_SPI_Transmit+0x19a>
 8009512:	8afb      	ldrh	r3, [r7, #22]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d174      	bne.n	8009602 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	d912      	bls.n	8009548 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009526:	881a      	ldrh	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009532:	1c9a      	adds	r2, r3, #2
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b02      	subs	r3, #2
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009546:	e05c      	b.n	8009602 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	330c      	adds	r3, #12
 8009552:	7812      	ldrb	r2, [r2, #0]
 8009554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009564:	b29b      	uxth	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800956e:	e048      	b.n	8009602 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b02      	cmp	r3, #2
 800957c:	d12b      	bne.n	80095d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d912      	bls.n	80095ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958c:	881a      	ldrh	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009598:	1c9a      	adds	r2, r3, #2
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	3b02      	subs	r3, #2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095ac:	e029      	b.n	8009602 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095d4:	e015      	b.n	8009602 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095d6:	f7fb fa8f 	bl	8004af8 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d803      	bhi.n	80095ee <HAL_SPI_Transmit+0x270>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d102      	bne.n	80095f4 <HAL_SPI_Transmit+0x276>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009600:	e029      	b.n	8009656 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1b1      	bne.n	8009570 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 f947 	bl	80098a4 <SPI_EndRxTxTransaction>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800962a:	2300      	movs	r3, #0
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	613b      	str	r3, [r7, #16]
 800963e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e003      	b.n	8009656 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800965e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3720      	adds	r7, #32
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009678:	f7fb fa3e 	bl	8004af8 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4413      	add	r3, r2
 8009686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009688:	f7fb fa36 	bl	8004af8 <HAL_GetTick>
 800968c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800968e:	4b39      	ldr	r3, [pc, #228]	@ (8009774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	015b      	lsls	r3, r3, #5
 8009694:	0d1b      	lsrs	r3, r3, #20
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	fb02 f303 	mul.w	r3, r2, r3
 800969c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800969e:	e054      	b.n	800974a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a6:	d050      	beq.n	800974a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096a8:	f7fb fa26 	bl	8004af8 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d902      	bls.n	80096be <SPI_WaitFlagStateUntilTimeout+0x56>
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d13d      	bne.n	800973a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096d6:	d111      	bne.n	80096fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096e0:	d004      	beq.n	80096ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ea:	d107      	bne.n	80096fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009704:	d10f      	bne.n	8009726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e017      	b.n	800976a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3b01      	subs	r3, #1
 8009748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4013      	ands	r3, r2
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	bf0c      	ite	eq
 800975a:	2301      	moveq	r3, #1
 800975c:	2300      	movne	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	429a      	cmp	r2, r3
 8009766:	d19b      	bne.n	80096a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000004 	.word	0x20000004

08009778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	@ 0x28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800978a:	f7fb f9b5 	bl	8004af8 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	4413      	add	r3, r2
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800979a:	f7fb f9ad 	bl	8004af8 <HAL_GetTick>
 800979e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	330c      	adds	r3, #12
 80097a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80097a8:	4b3d      	ldr	r3, [pc, #244]	@ (80098a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	00da      	lsls	r2, r3, #3
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	0d1b      	lsrs	r3, r3, #20
 80097b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ba:	fb02 f303 	mul.w	r3, r2, r3
 80097be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80097c0:	e060      	b.n	8009884 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80097c8:	d107      	bne.n	80097da <SPI_WaitFifoStateUntilTimeout+0x62>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e0:	d050      	beq.n	8009884 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097e2:	f7fb f989 	bl	8004af8 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d902      	bls.n	80097f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d13d      	bne.n	8009874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009810:	d111      	bne.n	8009836 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800981a:	d004      	beq.n	8009826 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009824:	d107      	bne.n	8009836 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800983e:	d10f      	bne.n	8009860 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800985e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e010      	b.n	8009896 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	3b01      	subs	r3, #1
 8009882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4013      	ands	r3, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	429a      	cmp	r2, r3
 8009892:	d196      	bne.n	80097c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3728      	adds	r7, #40	@ 0x28
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000004 	.word	0x20000004

080098a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff ff5b 	bl	8009778 <SPI_WaitFifoStateUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098cc:	f043 0220 	orr.w	r2, r3, #32
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e027      	b.n	8009928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	2180      	movs	r1, #128	@ 0x80
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff fec0 	bl	8009668 <SPI_WaitFlagStateUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f2:	f043 0220 	orr.w	r2, r3, #32
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e014      	b.n	8009928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2200      	movs	r2, #0
 8009906:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff ff34 	bl	8009778 <SPI_WaitFifoStateUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e000      	b.n	8009928 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e049      	b.n	80099d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fa f918 	bl	8003b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fae0 	bl	8009f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d001      	beq.n	80099f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e04c      	b.n	8009a92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a26      	ldr	r2, [pc, #152]	@ (8009aa0 <HAL_TIM_Base_Start+0xc0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d022      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a12:	d01d      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a22      	ldr	r2, [pc, #136]	@ (8009aa4 <HAL_TIM_Base_Start+0xc4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d018      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a21      	ldr	r2, [pc, #132]	@ (8009aa8 <HAL_TIM_Base_Start+0xc8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d013      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009aac <HAL_TIM_Base_Start+0xcc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00e      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab0 <HAL_TIM_Base_Start+0xd0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d009      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab4 <HAL_TIM_Base_Start+0xd4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d004      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab8 <HAL_TIM_Base_Start+0xd8>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d115      	bne.n	8009a7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	4b19      	ldr	r3, [pc, #100]	@ (8009abc <HAL_TIM_Base_Start+0xdc>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b06      	cmp	r3, #6
 8009a60:	d015      	beq.n	8009a8e <HAL_TIM_Base_Start+0xae>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a68:	d011      	beq.n	8009a8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0201 	orr.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7a:	e008      	b.n	8009a8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e000      	b.n	8009a90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	40012c00 	.word	0x40012c00
 8009aa4:	40000400 	.word	0x40000400
 8009aa8:	40000800 	.word	0x40000800
 8009aac:	40000c00 	.word	0x40000c00
 8009ab0:	40013400 	.word	0x40013400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40015000 	.word	0x40015000
 8009abc:	00010007 	.word	0x00010007

08009ac0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10f      	bne.n	8009af8 <HAL_TIM_Base_Stop+0x38>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d107      	bne.n	8009af8 <HAL_TIM_Base_Stop+0x38>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0201 	bic.w	r2, r2, #1
 8009af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e049      	b.n	8009bb4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d106      	bne.n	8009b3a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f841 	bl	8009bbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f000 f9f1 	bl	8009f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_TIM_IC_ConfigChannel+0x1e>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e088      	b.n	8009d00 <HAL_TIM_IC_ConfigChannel+0x130>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11b      	bne.n	8009c34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009c0c:	f000 fa46 	bl	800a09c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 020c 	bic.w	r2, r2, #12
 8009c1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6999      	ldr	r1, [r3, #24]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	619a      	str	r2, [r3, #24]
 8009c32:	e060      	b.n	8009cf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d11c      	bne.n	8009c74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009c4a:	f000 faca 	bl	800a1e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699a      	ldr	r2, [r3, #24]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009c5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6999      	ldr	r1, [r3, #24]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	021a      	lsls	r2, r3, #8
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	619a      	str	r2, [r3, #24]
 8009c72:	e040      	b.n	8009cf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d11b      	bne.n	8009cb2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009c8a:	f000 fb17 	bl	800a2bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 020c 	bic.w	r2, r2, #12
 8009c9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	69d9      	ldr	r1, [r3, #28]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	61da      	str	r2, [r3, #28]
 8009cb0:	e021      	b.n	8009cf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b0c      	cmp	r3, #12
 8009cb6:	d11c      	bne.n	8009cf2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009cc8:	f000 fb34 	bl	800a334 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69da      	ldr	r2, [r3, #28]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009cda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	69d9      	ldr	r1, [r3, #28]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	021a      	lsls	r2, r3, #8
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	61da      	str	r2, [r3, #28]
 8009cf0:	e001      	b.n	8009cf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_TIM_ConfigClockSource+0x1c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e0f6      	b.n	8009f12 <HAL_TIM_ConfigClockSource+0x20a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009d42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a6f      	ldr	r2, [pc, #444]	@ (8009f1c <HAL_TIM_ConfigClockSource+0x214>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	f000 80c1 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009d64:	4a6d      	ldr	r2, [pc, #436]	@ (8009f1c <HAL_TIM_ConfigClockSource+0x214>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	f200 80c6 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d6c:	4a6c      	ldr	r2, [pc, #432]	@ (8009f20 <HAL_TIM_ConfigClockSource+0x218>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	f000 80b9 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009d74:	4a6a      	ldr	r2, [pc, #424]	@ (8009f20 <HAL_TIM_ConfigClockSource+0x218>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	f200 80be 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d7c:	4a69      	ldr	r2, [pc, #420]	@ (8009f24 <HAL_TIM_ConfigClockSource+0x21c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	f000 80b1 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009d84:	4a67      	ldr	r2, [pc, #412]	@ (8009f24 <HAL_TIM_ConfigClockSource+0x21c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	f200 80b6 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d8c:	4a66      	ldr	r2, [pc, #408]	@ (8009f28 <HAL_TIM_ConfigClockSource+0x220>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	f000 80a9 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009d94:	4a64      	ldr	r2, [pc, #400]	@ (8009f28 <HAL_TIM_ConfigClockSource+0x220>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	f200 80ae 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d9c:	4a63      	ldr	r2, [pc, #396]	@ (8009f2c <HAL_TIM_ConfigClockSource+0x224>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	f000 80a1 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009da4:	4a61      	ldr	r2, [pc, #388]	@ (8009f2c <HAL_TIM_ConfigClockSource+0x224>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	f200 80a6 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009dac:	4a60      	ldr	r2, [pc, #384]	@ (8009f30 <HAL_TIM_ConfigClockSource+0x228>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	f000 8099 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009db4:	4a5e      	ldr	r2, [pc, #376]	@ (8009f30 <HAL_TIM_ConfigClockSource+0x228>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	f200 809e 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009dbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dc0:	f000 8091 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009dc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dc8:	f200 8096 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd0:	f000 8089 	beq.w	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd8:	f200 808e 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de0:	d03e      	beq.n	8009e60 <HAL_TIM_ConfigClockSource+0x158>
 8009de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de6:	f200 8087 	bhi.w	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dee:	f000 8086 	beq.w	8009efe <HAL_TIM_ConfigClockSource+0x1f6>
 8009df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009df6:	d87f      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009df8:	2b70      	cmp	r3, #112	@ 0x70
 8009dfa:	d01a      	beq.n	8009e32 <HAL_TIM_ConfigClockSource+0x12a>
 8009dfc:	2b70      	cmp	r3, #112	@ 0x70
 8009dfe:	d87b      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e00:	2b60      	cmp	r3, #96	@ 0x60
 8009e02:	d050      	beq.n	8009ea6 <HAL_TIM_ConfigClockSource+0x19e>
 8009e04:	2b60      	cmp	r3, #96	@ 0x60
 8009e06:	d877      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e08:	2b50      	cmp	r3, #80	@ 0x50
 8009e0a:	d03c      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x17e>
 8009e0c:	2b50      	cmp	r3, #80	@ 0x50
 8009e0e:	d873      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e10:	2b40      	cmp	r3, #64	@ 0x40
 8009e12:	d058      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x1be>
 8009e14:	2b40      	cmp	r3, #64	@ 0x40
 8009e16:	d86f      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e18:	2b30      	cmp	r3, #48	@ 0x30
 8009e1a:	d064      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009e1c:	2b30      	cmp	r3, #48	@ 0x30
 8009e1e:	d86b      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d060      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d867      	bhi.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d05c      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009e2c:	2b10      	cmp	r3, #16
 8009e2e:	d05a      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0x1de>
 8009e30:	e062      	b.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e42:	f000 fad1 	bl	800a3e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	609a      	str	r2, [r3, #8]
      break;
 8009e5e:	e04f      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e70:	f000 faba 	bl	800a3e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e82:	609a      	str	r2, [r3, #8]
      break;
 8009e84:	e03c      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e92:	461a      	mov	r2, r3
 8009e94:	f000 f976 	bl	800a184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2150      	movs	r1, #80	@ 0x50
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fa85 	bl	800a3ae <TIM_ITRx_SetConfig>
      break;
 8009ea4:	e02c      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f000 f9d2 	bl	800a25c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2160      	movs	r1, #96	@ 0x60
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 fa75 	bl	800a3ae <TIM_ITRx_SetConfig>
      break;
 8009ec4:	e01c      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f000 f956 	bl	800a184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2140      	movs	r1, #64	@ 0x40
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 fa65 	bl	800a3ae <TIM_ITRx_SetConfig>
      break;
 8009ee4:	e00c      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f000 fa5c 	bl	800a3ae <TIM_ITRx_SetConfig>
      break;
 8009ef6:	e003      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]
      break;
 8009efc:	e000      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	00100070 	.word	0x00100070
 8009f20:	00100060 	.word	0x00100060
 8009f24:	00100050 	.word	0x00100050
 8009f28:	00100040 	.word	0x00100040
 8009f2c:	00100030 	.word	0x00100030
 8009f30:	00100020 	.word	0x00100020

08009f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a4c      	ldr	r2, [pc, #304]	@ (800a078 <TIM_Base_SetConfig+0x144>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d017      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f52:	d013      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a49      	ldr	r2, [pc, #292]	@ (800a07c <TIM_Base_SetConfig+0x148>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00f      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a48      	ldr	r2, [pc, #288]	@ (800a080 <TIM_Base_SetConfig+0x14c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d00b      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a47      	ldr	r2, [pc, #284]	@ (800a084 <TIM_Base_SetConfig+0x150>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d007      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a46      	ldr	r2, [pc, #280]	@ (800a088 <TIM_Base_SetConfig+0x154>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d003      	beq.n	8009f7c <TIM_Base_SetConfig+0x48>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a45      	ldr	r2, [pc, #276]	@ (800a08c <TIM_Base_SetConfig+0x158>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d108      	bne.n	8009f8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a39      	ldr	r2, [pc, #228]	@ (800a078 <TIM_Base_SetConfig+0x144>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d023      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f9c:	d01f      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a36      	ldr	r2, [pc, #216]	@ (800a07c <TIM_Base_SetConfig+0x148>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01b      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a35      	ldr	r2, [pc, #212]	@ (800a080 <TIM_Base_SetConfig+0x14c>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d017      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a34      	ldr	r2, [pc, #208]	@ (800a084 <TIM_Base_SetConfig+0x150>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d013      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a33      	ldr	r2, [pc, #204]	@ (800a088 <TIM_Base_SetConfig+0x154>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00f      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a33      	ldr	r2, [pc, #204]	@ (800a090 <TIM_Base_SetConfig+0x15c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00b      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a32      	ldr	r2, [pc, #200]	@ (800a094 <TIM_Base_SetConfig+0x160>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d007      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a31      	ldr	r2, [pc, #196]	@ (800a098 <TIM_Base_SetConfig+0x164>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d003      	beq.n	8009fde <TIM_Base_SetConfig+0xaa>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800a08c <TIM_Base_SetConfig+0x158>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d108      	bne.n	8009ff0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a18      	ldr	r2, [pc, #96]	@ (800a078 <TIM_Base_SetConfig+0x144>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <TIM_Base_SetConfig+0x110>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a1a      	ldr	r2, [pc, #104]	@ (800a088 <TIM_Base_SetConfig+0x154>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00f      	beq.n	800a044 <TIM_Base_SetConfig+0x110>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1a      	ldr	r2, [pc, #104]	@ (800a090 <TIM_Base_SetConfig+0x15c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00b      	beq.n	800a044 <TIM_Base_SetConfig+0x110>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a19      	ldr	r2, [pc, #100]	@ (800a094 <TIM_Base_SetConfig+0x160>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d007      	beq.n	800a044 <TIM_Base_SetConfig+0x110>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a18      	ldr	r2, [pc, #96]	@ (800a098 <TIM_Base_SetConfig+0x164>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d003      	beq.n	800a044 <TIM_Base_SetConfig+0x110>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a13      	ldr	r2, [pc, #76]	@ (800a08c <TIM_Base_SetConfig+0x158>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d103      	bne.n	800a04c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d105      	bne.n	800a06a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f023 0201 	bic.w	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	611a      	str	r2, [r3, #16]
  }
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	40012c00 	.word	0x40012c00
 800a07c:	40000400 	.word	0x40000400
 800a080:	40000800 	.word	0x40000800
 800a084:	40000c00 	.word	0x40000c00
 800a088:	40013400 	.word	0x40013400
 800a08c:	40015000 	.word	0x40015000
 800a090:	40014000 	.word	0x40014000
 800a094:	40014400 	.word	0x40014400
 800a098:	40014800 	.word	0x40014800

0800a09c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	f023 0201 	bic.w	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a28      	ldr	r2, [pc, #160]	@ (800a168 <TIM_TI1_SetConfig+0xcc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d01b      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0d0:	d017      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4a25      	ldr	r2, [pc, #148]	@ (800a16c <TIM_TI1_SetConfig+0xd0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d013      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4a24      	ldr	r2, [pc, #144]	@ (800a170 <TIM_TI1_SetConfig+0xd4>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00f      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4a23      	ldr	r2, [pc, #140]	@ (800a174 <TIM_TI1_SetConfig+0xd8>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00b      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4a22      	ldr	r2, [pc, #136]	@ (800a178 <TIM_TI1_SetConfig+0xdc>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d007      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a21      	ldr	r2, [pc, #132]	@ (800a17c <TIM_TI1_SetConfig+0xe0>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d003      	beq.n	800a102 <TIM_TI1_SetConfig+0x66>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a20      	ldr	r2, [pc, #128]	@ (800a180 <TIM_TI1_SetConfig+0xe4>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d101      	bne.n	800a106 <TIM_TI1_SetConfig+0x6a>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <TIM_TI1_SetConfig+0x6c>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d008      	beq.n	800a11e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4313      	orrs	r3, r2
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e003      	b.n	800a126 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a12c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	b2db      	uxtb	r3, r3
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	4313      	orrs	r3, r2
 800a138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f023 030a 	bic.w	r3, r3, #10
 800a140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f003 030a 	and.w	r3, r3, #10
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	40000400 	.word	0x40000400
 800a170:	40000800 	.word	0x40000800
 800a174:	40000c00 	.word	0x40000c00
 800a178:	40013400 	.word	0x40013400
 800a17c:	40014000 	.word	0x40014000
 800a180:	40015000 	.word	0x40015000

0800a184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	f023 0201 	bic.w	r2, r3, #1
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	011b      	lsls	r3, r3, #4
 800a1b4:	693a      	ldr	r2, [r7, #16]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f023 030a 	bic.w	r3, r3, #10
 800a1c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	621a      	str	r2, [r3, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b087      	sub	sp, #28
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f023 0210 	bic.w	r2, r3, #16
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	031b      	lsls	r3, r3, #12
 800a226:	b29b      	uxth	r3, r3
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a234:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	621a      	str	r2, [r3, #32]
}
 800a250:	bf00      	nop
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f023 0210 	bic.w	r2, r3, #16
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	031b      	lsls	r3, r3, #12
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a298:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	621a      	str	r2, [r3, #32]
}
 800a2b0:	bf00      	nop
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	011b      	lsls	r3, r3, #4
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a30c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4313      	orrs	r3, r2
 800a31a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	621a      	str	r2, [r3, #32]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a360:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a372:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	031b      	lsls	r3, r3, #12
 800a378:	b29b      	uxth	r3, r3
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a386:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	031b      	lsls	r3, r3, #12
 800a38c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	621a      	str	r2, [r3, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	371c      	adds	r7, #28
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a3c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	f043 0307 	orr.w	r3, r3, #7
 800a3d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	609a      	str	r2, [r3, #8]
}
 800a3dc:	bf00      	nop
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	021a      	lsls	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4313      	orrs	r3, r2
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	609a      	str	r2, [r3, #8]
}
 800a41c:	bf00      	nop
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e074      	b.n	800a52a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a34      	ldr	r2, [pc, #208]	@ (800a538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a33      	ldr	r2, [pc, #204]	@ (800a53c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d004      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a31      	ldr	r2, [pc, #196]	@ (800a540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d108      	bne.n	800a490 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a49a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a21      	ldr	r2, [pc, #132]	@ (800a538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d022      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4c0:	d01d      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a544 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d018      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a548 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d013      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a1c      	ldr	r2, [pc, #112]	@ (800a54c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00e      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a15      	ldr	r2, [pc, #84]	@ (800a53c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d009      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a18      	ldr	r2, [pc, #96]	@ (800a550 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d004      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a11      	ldr	r2, [pc, #68]	@ (800a540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d10c      	bne.n	800a518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	40012c00 	.word	0x40012c00
 800a53c:	40013400 	.word	0x40013400
 800a540:	40015000 	.word	0x40015000
 800a544:	40000400 	.word	0x40000400
 800a548:	40000800 	.word	0x40000800
 800a54c:	40000c00 	.word	0x40000c00
 800a550:	40014000 	.word	0x40014000

0800a554 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_TIMEx_TISelection+0x1e>
 800a56e:	2302      	movs	r3, #2
 800a570:	e073      	b.n	800a65a <HAL_TIMEx_TISelection+0x106>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b0c      	cmp	r3, #12
 800a57e:	d864      	bhi.n	800a64a <HAL_TIMEx_TISelection+0xf6>
 800a580:	a201      	add	r2, pc, #4	@ (adr r2, 800a588 <HAL_TIMEx_TISelection+0x34>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a5bd 	.word	0x0800a5bd
 800a58c:	0800a64b 	.word	0x0800a64b
 800a590:	0800a64b 	.word	0x0800a64b
 800a594:	0800a64b 	.word	0x0800a64b
 800a598:	0800a609 	.word	0x0800a609
 800a59c:	0800a64b 	.word	0x0800a64b
 800a5a0:	0800a64b 	.word	0x0800a64b
 800a5a4:	0800a64b 	.word	0x0800a64b
 800a5a8:	0800a61f 	.word	0x0800a61f
 800a5ac:	0800a64b 	.word	0x0800a64b
 800a5b0:	0800a64b 	.word	0x0800a64b
 800a5b4:	0800a64b 	.word	0x0800a64b
 800a5b8:	0800a635 	.word	0x0800a635
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5c2:	f023 010f 	bic.w	r1, r3, #15
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a24      	ldr	r2, [pc, #144]	@ (800a668 <HAL_TIMEx_TISelection+0x114>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d004      	beq.n	800a5e4 <HAL_TIMEx_TISelection+0x90>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a23      	ldr	r2, [pc, #140]	@ (800a66c <HAL_TIMEx_TISelection+0x118>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d108      	bne.n	800a5f6 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800a5f4:	e02c      	b.n	800a650 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0201 	bic.w	r2, r2, #1
 800a604:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a606:	e023      	b.n	800a650 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a60e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	430a      	orrs	r2, r1
 800a61a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a61c:	e018      	b.n	800a650 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a624:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	430a      	orrs	r2, r1
 800a630:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a632:	e00d      	b.n	800a650 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a63a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	430a      	orrs	r2, r1
 800a646:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a648:	e002      	b.n	800a650 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]
      break;
 800a64e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40014400 	.word	0x40014400
 800a66c:	40014800 	.word	0x40014800

0800a670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e042      	b.n	800a708 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7f9 fb15 	bl	8003cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2224      	movs	r2, #36	@ 0x24
 800a69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0201 	bic.w	r2, r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fe8e 	bl	800b3dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fb8f 	bl	800ade4 <UART_SetConfig>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d101      	bne.n	800a6d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e01b      	b.n	800a708 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 ff0d 	bl	800b520 <UART_CheckIdleState>
 800a706:	4603      	mov	r3, r0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b0ba      	sub	sp, #232	@ 0xe8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a73a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a73e:	4013      	ands	r3, r2
 800a740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11b      	bne.n	800a784 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d015      	beq.n	800a784 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d105      	bne.n	800a770 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8300 	beq.w	800ad7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	4798      	blx	r3
      }
      return;
 800a782:	e2fa      	b.n	800ad7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 8123 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a78e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a792:	4b8d      	ldr	r3, [pc, #564]	@ (800a9c8 <HAL_UART_IRQHandler+0x2b8>)
 800a794:	4013      	ands	r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a79a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a79e:	4b8b      	ldr	r3, [pc, #556]	@ (800a9cc <HAL_UART_IRQHandler+0x2bc>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8116 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d011      	beq.n	800a7d8 <HAL_UART_IRQHandler+0xc8>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ce:	f043 0201 	orr.w	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7dc:	f003 0302 	and.w	r3, r3, #2
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d011      	beq.n	800a808 <HAL_UART_IRQHandler+0xf8>
 800a7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d011      	beq.n	800a838 <HAL_UART_IRQHandler+0x128>
 800a814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00b      	beq.n	800a838 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2204      	movs	r2, #4
 800a826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82e:	f043 0202 	orr.w	r2, r3, #2
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d017      	beq.n	800a874 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d105      	bne.n	800a85c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a850:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a854:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c8 <HAL_UART_IRQHandler+0x2b8>)
 800a856:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a86a:	f043 0208 	orr.w	r2, r3, #8
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d012      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x196>
 800a880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00c      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89c:	f043 0220 	orr.w	r2, r3, #32
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8266 	beq.w	800ad7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8b6:	f003 0320 	and.w	r3, r3, #32
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d013      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fa:	2b40      	cmp	r3, #64	@ 0x40
 800a8fc:	d005      	beq.n	800a90a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a902:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a906:	2b00      	cmp	r3, #0
 800a908:	d054      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 f807 	bl	800b91e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a91a:	2b40      	cmp	r3, #64	@ 0x40
 800a91c:	d146      	bne.n	800a9ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3308      	adds	r3, #8
 800a924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a93c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3308      	adds	r3, #8
 800a946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a94a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a94e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1d9      	bne.n	800a91e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a970:	2b00      	cmp	r3, #0
 800a972:	d017      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a97a:	4a15      	ldr	r2, [pc, #84]	@ (800a9d0 <HAL_UART_IRQHandler+0x2c0>)
 800a97c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a984:	4618      	mov	r0, r3
 800a986:	f7fc ff3f 	bl	8007808 <HAL_DMA_Abort_IT>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d019      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	e00f      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa13 	bl	800add0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9aa:	e00b      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fa0f 	bl	800add0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b2:	e007      	b.n	800a9c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fa0b 	bl	800add0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a9c2:	e1dc      	b.n	800ad7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c4:	bf00      	nop
    return;
 800a9c6:	e1da      	b.n	800ad7e <HAL_UART_IRQHandler+0x66e>
 800a9c8:	10000001 	.word	0x10000001
 800a9cc:	04000120 	.word	0x04000120
 800a9d0:	0800bbd5 	.word	0x0800bbd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 8170 	bne.w	800acbe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e2:	f003 0310 	and.w	r3, r3, #16
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 8169 	beq.w	800acbe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8162 	beq.w	800acbe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2210      	movs	r2, #16
 800aa00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0c:	2b40      	cmp	r3, #64	@ 0x40
 800aa0e:	f040 80d8 	bne.w	800abc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80af 	beq.w	800ab88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa34:	429a      	cmp	r2, r3
 800aa36:	f080 80a7 	bcs.w	800ab88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 8087 	bne.w	800ab66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1da      	bne.n	800aa58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3308      	adds	r3, #8
 800aac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aac6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aaca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e1      	bne.n	800aaa2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aaee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3308      	adds	r3, #8
 800aafe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e3      	bne.n	800aade <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab34:	f023 0310 	bic.w	r3, r3, #16
 800ab38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e4      	bne.n	800ab24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fc fdf8 	bl	8007756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7f9 fb0b 	bl	800419c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab86:	e0fc      	b.n	800ad82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ab92:	429a      	cmp	r2, r3
 800ab94:	f040 80f5 	bne.w	800ad82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	f040 80eb 	bne.w	800ad82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f9 faee 	bl	800419c <HAL_UARTEx_RxEventCallback>
      return;
 800abc0:	e0df      	b.n	800ad82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abce:	b29b      	uxth	r3, r3
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80d1 	beq.w	800ad86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800abe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80cc 	beq.w	800ad86 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	e853 3f00 	ldrex	r3, [r3]
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e4      	bne.n	800abee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	623b      	str	r3, [r7, #32]
   return(result);
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ac4c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e1      	bne.n	800ac24 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f023 0310 	bic.w	r3, r3, #16
 800ac88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac96:	61fb      	str	r3, [r7, #28]
 800ac98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	69b9      	ldr	r1, [r7, #24]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	617b      	str	r3, [r7, #20]
   return(result);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e4      	bne.n	800ac74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7f9 fa70 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acbc:	e063      	b.n	800ad86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00e      	beq.n	800ace8 <HAL_UART_IRQHandler+0x5d8>
 800acca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d008      	beq.n	800ace8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800acde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 ffb8 	bl	800bc56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ace6:	e051      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ace8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d014      	beq.n	800ad1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d105      	bne.n	800ad0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d03a      	beq.n	800ad8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
    }
    return;
 800ad1c:	e035      	b.n	800ad8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <HAL_UART_IRQHandler+0x62e>
 800ad2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 ff62 	bl	800bc00 <UART_EndTransmit_IT>
    return;
 800ad3c:	e026      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_UART_IRQHandler+0x64e>
 800ad4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 ff91 	bl	800bc7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad5c:	e016      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d010      	beq.n	800ad8c <HAL_UART_IRQHandler+0x67c>
 800ad6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	da0c      	bge.n	800ad8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 ff79 	bl	800bc6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad78:	e008      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad7a:	bf00      	nop
 800ad7c:	e006      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ad7e:	bf00      	nop
 800ad80:	e004      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad82:	bf00      	nop
 800ad84:	e002      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
      return;
 800ad86:	bf00      	nop
 800ad88:	e000      	b.n	800ad8c <HAL_UART_IRQHandler+0x67c>
    return;
 800ad8a:	bf00      	nop
  }
}
 800ad8c:	37e8      	adds	r7, #232	@ 0xe8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop

0800ad94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ade4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ade8:	b08c      	sub	sp, #48	@ 0x30
 800adea:	af00      	add	r7, sp, #0
 800adec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4baa      	ldr	r3, [pc, #680]	@ (800b0bc <UART_SetConfig+0x2d8>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	6812      	ldr	r2, [r2, #0]
 800ae1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a9f      	ldr	r2, [pc, #636]	@ (800b0c0 <UART_SetConfig+0x2dc>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d004      	beq.n	800ae50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	6812      	ldr	r2, [r2, #0]
 800ae62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae64:	430b      	orrs	r3, r1
 800ae66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6e:	f023 010f 	bic.w	r1, r3, #15
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a90      	ldr	r2, [pc, #576]	@ (800b0c4 <UART_SetConfig+0x2e0>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d125      	bne.n	800aed4 <UART_SetConfig+0xf0>
 800ae88:	4b8f      	ldr	r3, [pc, #572]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d81a      	bhi.n	800aecc <UART_SetConfig+0xe8>
 800ae96:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <UART_SetConfig+0xb8>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	0800aeb5 	.word	0x0800aeb5
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	e116      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeba:	e112      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec2:	e10e      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	e10a      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aed2:	e106      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a7c      	ldr	r2, [pc, #496]	@ (800b0cc <UART_SetConfig+0x2e8>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d138      	bne.n	800af50 <UART_SetConfig+0x16c>
 800aede:	4b7a      	ldr	r3, [pc, #488]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee4:	f003 030c 	and.w	r3, r3, #12
 800aee8:	2b0c      	cmp	r3, #12
 800aeea:	d82d      	bhi.n	800af48 <UART_SetConfig+0x164>
 800aeec:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <UART_SetConfig+0x110>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800af29 	.word	0x0800af29
 800aef8:	0800af49 	.word	0x0800af49
 800aefc:	0800af49 	.word	0x0800af49
 800af00:	0800af49 	.word	0x0800af49
 800af04:	0800af39 	.word	0x0800af39
 800af08:	0800af49 	.word	0x0800af49
 800af0c:	0800af49 	.word	0x0800af49
 800af10:	0800af49 	.word	0x0800af49
 800af14:	0800af31 	.word	0x0800af31
 800af18:	0800af49 	.word	0x0800af49
 800af1c:	0800af49 	.word	0x0800af49
 800af20:	0800af49 	.word	0x0800af49
 800af24:	0800af41 	.word	0x0800af41
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2e:	e0d8      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af30:	2302      	movs	r3, #2
 800af32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af36:	e0d4      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af38:	2304      	movs	r3, #4
 800af3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3e:	e0d0      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af40:	2308      	movs	r3, #8
 800af42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af46:	e0cc      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af48:	2310      	movs	r3, #16
 800af4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af4e:	e0c8      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a5e      	ldr	r2, [pc, #376]	@ (800b0d0 <UART_SetConfig+0x2ec>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d125      	bne.n	800afa6 <UART_SetConfig+0x1c2>
 800af5a:	4b5b      	ldr	r3, [pc, #364]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af64:	2b30      	cmp	r3, #48	@ 0x30
 800af66:	d016      	beq.n	800af96 <UART_SetConfig+0x1b2>
 800af68:	2b30      	cmp	r3, #48	@ 0x30
 800af6a:	d818      	bhi.n	800af9e <UART_SetConfig+0x1ba>
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d00a      	beq.n	800af86 <UART_SetConfig+0x1a2>
 800af70:	2b20      	cmp	r3, #32
 800af72:	d814      	bhi.n	800af9e <UART_SetConfig+0x1ba>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <UART_SetConfig+0x19a>
 800af78:	2b10      	cmp	r3, #16
 800af7a:	d008      	beq.n	800af8e <UART_SetConfig+0x1aa>
 800af7c:	e00f      	b.n	800af9e <UART_SetConfig+0x1ba>
 800af7e:	2300      	movs	r3, #0
 800af80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af84:	e0ad      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af86:	2302      	movs	r3, #2
 800af88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8c:	e0a9      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af8e:	2304      	movs	r3, #4
 800af90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af94:	e0a5      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af96:	2308      	movs	r3, #8
 800af98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af9c:	e0a1      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800af9e:	2310      	movs	r3, #16
 800afa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa4:	e09d      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a4a      	ldr	r2, [pc, #296]	@ (800b0d4 <UART_SetConfig+0x2f0>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d125      	bne.n	800affc <UART_SetConfig+0x218>
 800afb0:	4b45      	ldr	r3, [pc, #276]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800afb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800afba:	2bc0      	cmp	r3, #192	@ 0xc0
 800afbc:	d016      	beq.n	800afec <UART_SetConfig+0x208>
 800afbe:	2bc0      	cmp	r3, #192	@ 0xc0
 800afc0:	d818      	bhi.n	800aff4 <UART_SetConfig+0x210>
 800afc2:	2b80      	cmp	r3, #128	@ 0x80
 800afc4:	d00a      	beq.n	800afdc <UART_SetConfig+0x1f8>
 800afc6:	2b80      	cmp	r3, #128	@ 0x80
 800afc8:	d814      	bhi.n	800aff4 <UART_SetConfig+0x210>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <UART_SetConfig+0x1f0>
 800afce:	2b40      	cmp	r3, #64	@ 0x40
 800afd0:	d008      	beq.n	800afe4 <UART_SetConfig+0x200>
 800afd2:	e00f      	b.n	800aff4 <UART_SetConfig+0x210>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afda:	e082      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800afdc:	2302      	movs	r3, #2
 800afde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe2:	e07e      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800afe4:	2304      	movs	r3, #4
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afea:	e07a      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800afec:	2308      	movs	r3, #8
 800afee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aff2:	e076      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800affa:	e072      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a35      	ldr	r2, [pc, #212]	@ (800b0d8 <UART_SetConfig+0x2f4>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d12a      	bne.n	800b05c <UART_SetConfig+0x278>
 800b006:	4b30      	ldr	r3, [pc, #192]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b00c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b014:	d01a      	beq.n	800b04c <UART_SetConfig+0x268>
 800b016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b01a:	d81b      	bhi.n	800b054 <UART_SetConfig+0x270>
 800b01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b020:	d00c      	beq.n	800b03c <UART_SetConfig+0x258>
 800b022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b026:	d815      	bhi.n	800b054 <UART_SetConfig+0x270>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <UART_SetConfig+0x250>
 800b02c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b030:	d008      	beq.n	800b044 <UART_SetConfig+0x260>
 800b032:	e00f      	b.n	800b054 <UART_SetConfig+0x270>
 800b034:	2300      	movs	r3, #0
 800b036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b03a:	e052      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b03c:	2302      	movs	r3, #2
 800b03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b042:	e04e      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b044:	2304      	movs	r3, #4
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b04a:	e04a      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b04c:	2308      	movs	r3, #8
 800b04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b052:	e046      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b054:	2310      	movs	r3, #16
 800b056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b05a:	e042      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a17      	ldr	r2, [pc, #92]	@ (800b0c0 <UART_SetConfig+0x2dc>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d13a      	bne.n	800b0dc <UART_SetConfig+0x2f8>
 800b066:	4b18      	ldr	r3, [pc, #96]	@ (800b0c8 <UART_SetConfig+0x2e4>)
 800b068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b06c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b074:	d01a      	beq.n	800b0ac <UART_SetConfig+0x2c8>
 800b076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b07a:	d81b      	bhi.n	800b0b4 <UART_SetConfig+0x2d0>
 800b07c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b080:	d00c      	beq.n	800b09c <UART_SetConfig+0x2b8>
 800b082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b086:	d815      	bhi.n	800b0b4 <UART_SetConfig+0x2d0>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <UART_SetConfig+0x2b0>
 800b08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b090:	d008      	beq.n	800b0a4 <UART_SetConfig+0x2c0>
 800b092:	e00f      	b.n	800b0b4 <UART_SetConfig+0x2d0>
 800b094:	2300      	movs	r3, #0
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b09a:	e022      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b09c:	2302      	movs	r3, #2
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a2:	e01e      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0aa:	e01a      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0b2:	e016      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0ba:	e012      	b.n	800b0e2 <UART_SetConfig+0x2fe>
 800b0bc:	cfff69f3 	.word	0xcfff69f3
 800b0c0:	40008000 	.word	0x40008000
 800b0c4:	40013800 	.word	0x40013800
 800b0c8:	40021000 	.word	0x40021000
 800b0cc:	40004400 	.word	0x40004400
 800b0d0:	40004800 	.word	0x40004800
 800b0d4:	40004c00 	.word	0x40004c00
 800b0d8:	40005000 	.word	0x40005000
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4aae      	ldr	r2, [pc, #696]	@ (800b3a0 <UART_SetConfig+0x5bc>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	f040 8097 	bne.w	800b21c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d823      	bhi.n	800b13e <UART_SetConfig+0x35a>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <UART_SetConfig+0x318>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b13f 	.word	0x0800b13f
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b13f 	.word	0x0800b13f
 800b10c:	0800b12f 	.word	0x0800b12f
 800b110:	0800b13f 	.word	0x0800b13f
 800b114:	0800b13f 	.word	0x0800b13f
 800b118:	0800b13f 	.word	0x0800b13f
 800b11c:	0800b137 	.word	0x0800b137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b120:	f7fd fdc2 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800b124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b126:	e010      	b.n	800b14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b128:	4b9e      	ldr	r3, [pc, #632]	@ (800b3a4 <UART_SetConfig+0x5c0>)
 800b12a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b12c:	e00d      	b.n	800b14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b12e:	f7fd fd4d 	bl	8008bcc <HAL_RCC_GetSysClockFreq>
 800b132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b134:	e009      	b.n	800b14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b13c:	e005      	b.n	800b14a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 8130 	beq.w	800b3b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b156:	4a94      	ldr	r2, [pc, #592]	@ (800b3a8 <UART_SetConfig+0x5c4>)
 800b158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b15c:	461a      	mov	r2, r3
 800b15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b160:	fbb3 f3f2 	udiv	r3, r3, r2
 800b164:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	4413      	add	r3, r2
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	429a      	cmp	r2, r3
 800b174:	d305      	bcc.n	800b182 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d903      	bls.n	800b18a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b188:	e113      	b.n	800b3b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18c:	2200      	movs	r2, #0
 800b18e:	60bb      	str	r3, [r7, #8]
 800b190:	60fa      	str	r2, [r7, #12]
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b196:	4a84      	ldr	r2, [pc, #528]	@ (800b3a8 <UART_SetConfig+0x5c4>)
 800b198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	2200      	movs	r2, #0
 800b1a0:	603b      	str	r3, [r7, #0]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1ac:	f7f5 fdf8 	bl	8000da0 <__aeabi_uldivmod>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	020b      	lsls	r3, r1, #8
 800b1c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1c6:	0202      	lsls	r2, r0, #8
 800b1c8:	6979      	ldr	r1, [r7, #20]
 800b1ca:	6849      	ldr	r1, [r1, #4]
 800b1cc:	0849      	lsrs	r1, r1, #1
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	eb12 0804 	adds.w	r8, r2, r4
 800b1d8:	eb43 0905 	adc.w	r9, r3, r5
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	469a      	mov	sl, r3
 800b1e4:	4693      	mov	fp, r2
 800b1e6:	4652      	mov	r2, sl
 800b1e8:	465b      	mov	r3, fp
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 fdd7 	bl	8000da0 <__aeabi_uldivmod>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b200:	d308      	bcc.n	800b214 <UART_SetConfig+0x430>
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b208:	d204      	bcs.n	800b214 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6a3a      	ldr	r2, [r7, #32]
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	e0ce      	b.n	800b3b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b21a:	e0ca      	b.n	800b3b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b224:	d166      	bne.n	800b2f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	d827      	bhi.n	800b27e <UART_SetConfig+0x49a>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <UART_SetConfig+0x450>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b259 	.word	0x0800b259
 800b238:	0800b261 	.word	0x0800b261
 800b23c:	0800b269 	.word	0x0800b269
 800b240:	0800b27f 	.word	0x0800b27f
 800b244:	0800b26f 	.word	0x0800b26f
 800b248:	0800b27f 	.word	0x0800b27f
 800b24c:	0800b27f 	.word	0x0800b27f
 800b250:	0800b27f 	.word	0x0800b27f
 800b254:	0800b277 	.word	0x0800b277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b258:	f7fd fd26 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800b25c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b25e:	e014      	b.n	800b28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b260:	f7fd fd38 	bl	8008cd4 <HAL_RCC_GetPCLK2Freq>
 800b264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b266:	e010      	b.n	800b28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b268:	4b4e      	ldr	r3, [pc, #312]	@ (800b3a4 <UART_SetConfig+0x5c0>)
 800b26a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b26c:	e00d      	b.n	800b28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b26e:	f7fd fcad 	bl	8008bcc <HAL_RCC_GetSysClockFreq>
 800b272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b274:	e009      	b.n	800b28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b27a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b27c:	e005      	b.n	800b28a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8090 	beq.w	800b3b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b296:	4a44      	ldr	r2, [pc, #272]	@ (800b3a8 <UART_SetConfig+0x5c4>)
 800b298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a4:	005a      	lsls	r2, r3, #1
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	441a      	add	r2, r3
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	2b0f      	cmp	r3, #15
 800b2bc:	d916      	bls.n	800b2ec <UART_SetConfig+0x508>
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2c4:	d212      	bcs.n	800b2ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f023 030f 	bic.w	r3, r3, #15
 800b2ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	8bfb      	ldrh	r3, [r7, #30]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	8bfa      	ldrh	r2, [r7, #30]
 800b2e8:	60da      	str	r2, [r3, #12]
 800b2ea:	e062      	b.n	800b3b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2f2:	e05e      	b.n	800b3b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d828      	bhi.n	800b34e <UART_SetConfig+0x56a>
 800b2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b304 <UART_SetConfig+0x520>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	0800b34f 	.word	0x0800b34f
 800b314:	0800b33f 	.word	0x0800b33f
 800b318:	0800b34f 	.word	0x0800b34f
 800b31c:	0800b34f 	.word	0x0800b34f
 800b320:	0800b34f 	.word	0x0800b34f
 800b324:	0800b347 	.word	0x0800b347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b328:	f7fd fcbe 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800b32c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b32e:	e014      	b.n	800b35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b330:	f7fd fcd0 	bl	8008cd4 <HAL_RCC_GetPCLK2Freq>
 800b334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b336:	e010      	b.n	800b35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b338:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a4 <UART_SetConfig+0x5c0>)
 800b33a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b33c:	e00d      	b.n	800b35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b33e:	f7fd fc45 	bl	8008bcc <HAL_RCC_GetSysClockFreq>
 800b342:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b344:	e009      	b.n	800b35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b34a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b34c:	e005      	b.n	800b35a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b358:	bf00      	nop
    }

    if (pclk != 0U)
 800b35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d028      	beq.n	800b3b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	4a10      	ldr	r2, [pc, #64]	@ (800b3a8 <UART_SetConfig+0x5c4>)
 800b366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	441a      	add	r2, r3
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	2b0f      	cmp	r3, #15
 800b388:	d910      	bls.n	800b3ac <UART_SetConfig+0x5c8>
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b390:	d20c      	bcs.n	800b3ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	b29a      	uxth	r2, r3
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60da      	str	r2, [r3, #12]
 800b39c:	e009      	b.n	800b3b2 <UART_SetConfig+0x5ce>
 800b39e:	bf00      	nop
 800b3a0:	40008000 	.word	0x40008000
 800b3a4:	00f42400 	.word	0x00f42400
 800b3a8:	0800d5c0 	.word	0x0800d5c0
      }
      else
      {
        ret = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3730      	adds	r7, #48	@ 0x30
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b3dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00a      	beq.n	800b406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42c:	f003 0302 	and.w	r3, r3, #2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44e:	f003 0304 	and.w	r3, r3, #4
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b470:	f003 0310 	and.w	r3, r3, #16
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00a      	beq.n	800b48e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01a      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4da:	d10a      	bne.n	800b4f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	605a      	str	r2, [r3, #4]
  }
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b098      	sub	sp, #96	@ 0x60
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b530:	f7f9 fae2 	bl	8004af8 <HAL_GetTick>
 800b534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0308 	and.w	r3, r3, #8
 800b540:	2b08      	cmp	r3, #8
 800b542:	d12f      	bne.n	800b5a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54c:	2200      	movs	r2, #0
 800b54e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f88e 	bl	800b674 <UART_WaitOnFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d022      	beq.n	800b5a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b572:	653b      	str	r3, [r7, #80]	@ 0x50
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b57c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b57e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b584:	e841 2300 	strex	r3, r2, [r1]
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1e6      	bne.n	800b55e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e063      	b.n	800b66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d149      	bne.n	800b646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f857 	bl	800b674 <UART_WaitOnFlagUntilTimeout>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d03c      	beq.n	800b646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e6      	bne.n	800b5cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f023 0301 	bic.w	r3, r3, #1
 800b614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b61e:	61fa      	str	r2, [r7, #28]
 800b620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	69b9      	ldr	r1, [r7, #24]
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	617b      	str	r3, [r7, #20]
   return(result);
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e5      	bne.n	800b5fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2220      	movs	r2, #32
 800b636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e012      	b.n	800b66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3758      	adds	r7, #88	@ 0x58
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4613      	mov	r3, r2
 800b682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b684:	e04f      	b.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68c:	d04b      	beq.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b68e:	f7f9 fa33 	bl	8004af8 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d302      	bcc.n	800b6a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e04e      	b.n	800b746 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d037      	beq.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b80      	cmp	r3, #128	@ 0x80
 800b6ba:	d034      	beq.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b40      	cmp	r3, #64	@ 0x40
 800b6c0:	d031      	beq.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d110      	bne.n	800b6f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f920 	bl	800b91e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e029      	b.n	800b746 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b700:	d111      	bne.n	800b726 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b70a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f906 	bl	800b91e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2220      	movs	r2, #32
 800b716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e00f      	b.n	800b746 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	69da      	ldr	r2, [r3, #28]
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4013      	ands	r3, r2
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	429a      	cmp	r2, r3
 800b734:	bf0c      	ite	eq
 800b736:	2301      	moveq	r3, #1
 800b738:	2300      	movne	r3, #0
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	429a      	cmp	r2, r3
 800b742:	d0a0      	beq.n	800b686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b096      	sub	sp, #88	@ 0x58
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	88fa      	ldrh	r2, [r7, #6]
 800b768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2222      	movs	r2, #34	@ 0x22
 800b778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b782:	2b00      	cmp	r3, #0
 800b784:	d02d      	beq.n	800b7e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b78c:	4a40      	ldr	r2, [pc, #256]	@ (800b890 <UART_Start_Receive_DMA+0x140>)
 800b78e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b796:	4a3f      	ldr	r2, [pc, #252]	@ (800b894 <UART_Start_Receive_DMA+0x144>)
 800b798:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a0:	4a3d      	ldr	r2, [pc, #244]	@ (800b898 <UART_Start_Receive_DMA+0x148>)
 800b7a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3324      	adds	r3, #36	@ 0x24
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	f7fb ff4c 	bl	8007660 <HAL_DMA_Start_IT>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2210      	movs	r2, #16
 800b7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e051      	b.n	800b886 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d018      	beq.n	800b81c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b80a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b80e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3308      	adds	r3, #8
 800b822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	653b      	str	r3, [r7, #80]	@ 0x50
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3308      	adds	r3, #8
 800b83a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b83c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b83e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e5      	bne.n	800b81c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3308      	adds	r3, #8
 800b856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	e853 3f00 	ldrex	r3, [r3]
 800b85e:	613b      	str	r3, [r7, #16]
   return(result);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3308      	adds	r3, #8
 800b86e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b870:	623a      	str	r2, [r7, #32]
 800b872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	69f9      	ldr	r1, [r7, #28]
 800b876:	6a3a      	ldr	r2, [r7, #32]
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e5      	bne.n	800b850 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3758      	adds	r7, #88	@ 0x58
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	0800b9eb 	.word	0x0800b9eb
 800b894:	0800bb17 	.word	0x0800bb17
 800b898:	0800bb55 	.word	0x0800bb55

0800b89c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b08f      	sub	sp, #60	@ 0x3c
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e6      	bne.n	800b8a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b8ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f6:	61ba      	str	r2, [r7, #24]
 800b8f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	6979      	ldr	r1, [r7, #20]
 800b8fc:	69ba      	ldr	r2, [r7, #24]
 800b8fe:	e841 2300 	strex	r3, r2, [r1]
 800b902:	613b      	str	r3, [r7, #16]
   return(result);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1e5      	bne.n	800b8d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2220      	movs	r2, #32
 800b90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b912:	bf00      	nop
 800b914:	373c      	adds	r7, #60	@ 0x3c
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b91e:	b480      	push	{r7}
 800b920:	b095      	sub	sp, #84	@ 0x54
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b93a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	461a      	mov	r2, r3
 800b942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b944:	643b      	str	r3, [r7, #64]	@ 0x40
 800b946:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b94a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e6      	bne.n	800b926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3308      	adds	r3, #8
 800b95e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	61fb      	str	r3, [r7, #28]
   return(result);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b96e:	f023 0301 	bic.w	r3, r3, #1
 800b972:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3308      	adds	r3, #8
 800b97a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b97c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b97e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b984:	e841 2300 	strex	r3, r2, [r1]
 800b988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1e3      	bne.n	800b958 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b994:	2b01      	cmp	r3, #1
 800b996:	d118      	bne.n	800b9ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	e853 3f00 	ldrex	r3, [r3]
 800b9a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	f023 0310 	bic.w	r3, r3, #16
 800b9ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6979      	ldr	r1, [r7, #20]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e6      	bne.n	800b998 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b9de:	bf00      	nop
 800b9e0:	3754      	adds	r7, #84	@ 0x54
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b09c      	sub	sp, #112	@ 0x70
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0320 	and.w	r3, r3, #32
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d171      	bne.n	800baea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ba06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba16:	e853 3f00 	ldrex	r3, [r3]
 800ba1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ba1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ba32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba34:	e841 2300 	strex	r3, r2, [r1]
 800ba38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ba3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e6      	bne.n	800ba0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3308      	adds	r3, #8
 800ba46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4a:	e853 3f00 	ldrex	r3, [r3]
 800ba4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba52:	f023 0301 	bic.w	r3, r3, #1
 800ba56:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba60:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e5      	bne.n	800ba40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	e853 3f00 	ldrex	r3, [r3]
 800ba82:	623b      	str	r3, [r7, #32]
   return(result);
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3308      	adds	r3, #8
 800ba92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba94:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba9c:	e841 2300 	strex	r3, r2, [r1]
 800baa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e5      	bne.n	800ba74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800baa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baaa:	2220      	movs	r2, #32
 800baac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d118      	bne.n	800baea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	e853 3f00 	ldrex	r3, [r3]
 800bac4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f023 0310 	bic.w	r3, r3, #16
 800bacc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	461a      	mov	r2, r3
 800bad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bad6:	61fb      	str	r3, [r7, #28]
 800bad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bada:	69b9      	ldr	r1, [r7, #24]
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	e841 2300 	strex	r3, r2, [r1]
 800bae2:	617b      	str	r3, [r7, #20]
   return(result);
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1e6      	bne.n	800bab8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baec:	2200      	movs	r2, #0
 800baee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d107      	bne.n	800bb08 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bafa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bafe:	4619      	mov	r1, r3
 800bb00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb02:	f7f8 fb4b 	bl	800419c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb06:	e002      	b.n	800bb0e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bb08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb0a:	f7ff f94d 	bl	800ada8 <HAL_UART_RxCpltCallback>
}
 800bb0e:	bf00      	nop
 800bb10:	3770      	adds	r7, #112	@ 0x70
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d109      	bne.n	800bb46 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7f8 fb2c 	bl	800419c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb44:	e002      	b.n	800bb4c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7ff f938 	bl	800adbc <HAL_UART_RxHalfCpltCallback>
}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb7c:	2b80      	cmp	r3, #128	@ 0x80
 800bb7e:	d109      	bne.n	800bb94 <UART_DMAError+0x40>
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2b21      	cmp	r3, #33	@ 0x21
 800bb84:	d106      	bne.n	800bb94 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bb8e:	6978      	ldr	r0, [r7, #20]
 800bb90:	f7ff fe84 	bl	800b89c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb9e:	2b40      	cmp	r3, #64	@ 0x40
 800bba0:	d109      	bne.n	800bbb6 <UART_DMAError+0x62>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b22      	cmp	r3, #34	@ 0x22
 800bba6:	d106      	bne.n	800bbb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bbb0:	6978      	ldr	r0, [r7, #20]
 800bbb2:	f7ff feb4 	bl	800b91e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbbc:	f043 0210 	orr.w	r2, r3, #16
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbc6:	6978      	ldr	r0, [r7, #20]
 800bbc8:	f7ff f902 	bl	800add0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbcc:	bf00      	nop
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff f8ec 	bl	800add0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc1c:	61fb      	str	r3, [r7, #28]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	61bb      	str	r3, [r7, #24]
 800bc28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	6979      	ldr	r1, [r7, #20]
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	613b      	str	r3, [r7, #16]
   return(result);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e6      	bne.n	800bc08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff f8a3 	bl	800ad94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc4e:	bf00      	nop
 800bc50:	3720      	adds	r7, #32
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc5e:	bf00      	nop
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc72:	bf00      	nop
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc86:	bf00      	nop
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d101      	bne.n	800bca8 <HAL_UARTEx_DisableFifoMode+0x16>
 800bca4:	2302      	movs	r3, #2
 800bca6:	e027      	b.n	800bcf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2224      	movs	r2, #36	@ 0x24
 800bcb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 0201 	bic.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d101      	bne.n	800bd1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd18:	2302      	movs	r3, #2
 800bd1a:	e02d      	b.n	800bd78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2224      	movs	r2, #36	@ 0x24
 800bd28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 0201 	bic.w	r2, r2, #1
 800bd42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f8a3 	bl	800bea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d101      	bne.n	800bd98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e02d      	b.n	800bdf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2224      	movs	r2, #36	@ 0x24
 800bda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0201 	bic.w	r2, r2, #1
 800bdbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f865 	bl	800bea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08c      	sub	sp, #48	@ 0x30
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be10:	2b20      	cmp	r3, #32
 800be12:	d142      	bne.n	800be9a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e03b      	b.n	800be9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2201      	movs	r2, #1
 800be28:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800be30:	88fb      	ldrh	r3, [r7, #6]
 800be32:	461a      	mov	r2, r3
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f7ff fc8a 	bl	800b750 <UART_Start_Receive_DMA>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800be42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be46:	2b00      	cmp	r3, #0
 800be48:	d124      	bne.n	800be94 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d11d      	bne.n	800be8e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2210      	movs	r2, #16
 800be58:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	617b      	str	r3, [r7, #20]
   return(result);
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f043 0310 	orr.w	r3, r3, #16
 800be6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
 800be7a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	6a39      	ldr	r1, [r7, #32]
 800be7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be80:	e841 2300 	strex	r3, r2, [r1]
 800be84:	61fb      	str	r3, [r7, #28]
   return(result);
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1e6      	bne.n	800be5a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800be8c:	e002      	b.n	800be94 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800be94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be98:	e000      	b.n	800be9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800be9a:	2302      	movs	r3, #2
  }
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3730      	adds	r7, #48	@ 0x30
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d108      	bne.n	800bec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bec4:	e031      	b.n	800bf2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bec6:	2308      	movs	r3, #8
 800bec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800beca:	2308      	movs	r3, #8
 800becc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	0e5b      	lsrs	r3, r3, #25
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f003 0307 	and.w	r3, r3, #7
 800bedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	0f5b      	lsrs	r3, r3, #29
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800beee:	7bbb      	ldrb	r3, [r7, #14]
 800bef0:	7b3a      	ldrb	r2, [r7, #12]
 800bef2:	4911      	ldr	r1, [pc, #68]	@ (800bf38 <UARTEx_SetNbDataToProcess+0x94>)
 800bef4:	5c8a      	ldrb	r2, [r1, r2]
 800bef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800befa:	7b3a      	ldrb	r2, [r7, #12]
 800befc:	490f      	ldr	r1, [pc, #60]	@ (800bf3c <UARTEx_SetNbDataToProcess+0x98>)
 800befe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf00:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	7b7a      	ldrb	r2, [r7, #13]
 800bf10:	4909      	ldr	r1, [pc, #36]	@ (800bf38 <UARTEx_SetNbDataToProcess+0x94>)
 800bf12:	5c8a      	ldrb	r2, [r1, r2]
 800bf14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf18:	7b7a      	ldrb	r2, [r7, #13]
 800bf1a:	4908      	ldr	r1, [pc, #32]	@ (800bf3c <UARTEx_SetNbDataToProcess+0x98>)
 800bf1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	0800d5d8 	.word	0x0800d5d8
 800bf3c:	0800d5e0 	.word	0x0800d5e0

0800bf40 <arm_rfft_1024_fast_init_f32>:
 800bf40:	b190      	cbz	r0, 800bf68 <arm_rfft_1024_fast_init_f32+0x28>
 800bf42:	b430      	push	{r4, r5}
 800bf44:	490a      	ldr	r1, [pc, #40]	@ (800bf70 <arm_rfft_1024_fast_init_f32+0x30>)
 800bf46:	4a0b      	ldr	r2, [pc, #44]	@ (800bf74 <arm_rfft_1024_fast_init_f32+0x34>)
 800bf48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf4c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800bf50:	8003      	strh	r3, [r0, #0]
 800bf52:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800bf56:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800bf5a:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <arm_rfft_1024_fast_init_f32+0x38>)
 800bf5c:	8205      	strh	r5, [r0, #16]
 800bf5e:	8184      	strh	r4, [r0, #12]
 800bf60:	6143      	str	r3, [r0, #20]
 800bf62:	bc30      	pop	{r4, r5}
 800bf64:	2000      	movs	r0, #0
 800bf66:	4770      	bx	lr
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	0800d5e8 	.word	0x0800d5e8
 800bf74:	0800e16c 	.word	0x0800e16c
 800bf78:	0800f16c 	.word	0x0800f16c

0800bf7c <stage_rfft_f32>:
 800bf7c:	b410      	push	{r4}
 800bf7e:	edd1 7a00 	vldr	s15, [r1]
 800bf82:	ed91 7a01 	vldr	s14, [r1, #4]
 800bf86:	8804      	ldrh	r4, [r0, #0]
 800bf88:	6940      	ldr	r0, [r0, #20]
 800bf8a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bf8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf92:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800bf96:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bf9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf9e:	3c01      	subs	r4, #1
 800bfa0:	ee26 7a84 	vmul.f32	s14, s13, s8
 800bfa4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bfa8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800bfac:	ed82 7a00 	vstr	s14, [r2]
 800bfb0:	edc2 7a01 	vstr	s15, [r2, #4]
 800bfb4:	3010      	adds	r0, #16
 800bfb6:	3210      	adds	r2, #16
 800bfb8:	3b08      	subs	r3, #8
 800bfba:	3110      	adds	r1, #16
 800bfbc:	ed11 5a02 	vldr	s10, [r1, #-8]
 800bfc0:	ed93 7a02 	vldr	s14, [r3, #8]
 800bfc4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800bfc8:	edd3 4a03 	vldr	s9, [r3, #12]
 800bfcc:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bfd0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800bfd4:	ee77 5a45 	vsub.f32	s11, s14, s10
 800bfd8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bfdc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800bfe0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800bfe4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800bfe8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bfec:	ee37 7a23 	vadd.f32	s14, s14, s7
 800bff0:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bff4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800bff8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bffc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c004:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c008:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c00c:	3c01      	subs	r4, #1
 800c00e:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c012:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c016:	f1a3 0308 	sub.w	r3, r3, #8
 800c01a:	f101 0108 	add.w	r1, r1, #8
 800c01e:	f100 0008 	add.w	r0, r0, #8
 800c022:	f102 0208 	add.w	r2, r2, #8
 800c026:	d1c9      	bne.n	800bfbc <stage_rfft_f32+0x40>
 800c028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop

0800c030 <merge_rfft_f32>:
 800c030:	b410      	push	{r4}
 800c032:	edd1 7a00 	vldr	s15, [r1]
 800c036:	edd1 6a01 	vldr	s13, [r1, #4]
 800c03a:	8804      	ldrh	r4, [r0, #0]
 800c03c:	6940      	ldr	r0, [r0, #20]
 800c03e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c042:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c046:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800c04a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c04e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c052:	3c01      	subs	r4, #1
 800c054:	ed82 7a00 	vstr	s14, [r2]
 800c058:	edc2 7a01 	vstr	s15, [r2, #4]
 800c05c:	b3dc      	cbz	r4, 800c0d6 <merge_rfft_f32+0xa6>
 800c05e:	00e3      	lsls	r3, r4, #3
 800c060:	3b08      	subs	r3, #8
 800c062:	440b      	add	r3, r1
 800c064:	3010      	adds	r0, #16
 800c066:	3210      	adds	r2, #16
 800c068:	3110      	adds	r1, #16
 800c06a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c06e:	ed93 7a02 	vldr	s14, [r3, #8]
 800c072:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c076:	edd3 4a03 	vldr	s9, [r3, #12]
 800c07a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c07e:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c082:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c086:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c08a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c08e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c092:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c096:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c09a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c09e:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c0a2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c0a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c0aa:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c0ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c0b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c0b6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c0ba:	3c01      	subs	r4, #1
 800c0bc:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c0c0:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c0c4:	f1a3 0308 	sub.w	r3, r3, #8
 800c0c8:	f101 0108 	add.w	r1, r1, #8
 800c0cc:	f100 0008 	add.w	r0, r0, #8
 800c0d0:	f102 0208 	add.w	r2, r2, #8
 800c0d4:	d1c9      	bne.n	800c06a <merge_rfft_f32+0x3a>
 800c0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <arm_rfft_fast_f32>:
 800c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e0:	8a05      	ldrh	r5, [r0, #16]
 800c0e2:	086d      	lsrs	r5, r5, #1
 800c0e4:	8005      	strh	r5, [r0, #0]
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4616      	mov	r6, r2
 800c0ea:	461d      	mov	r5, r3
 800c0ec:	b14b      	cbz	r3, 800c102 <arm_rfft_fast_f32+0x26>
 800c0ee:	f7ff ff9f 	bl	800c030 <merge_rfft_f32>
 800c0f2:	462a      	mov	r2, r5
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fe:	f000 bb33 	b.w	800c768 <arm_cfft_f32>
 800c102:	460f      	mov	r7, r1
 800c104:	461a      	mov	r2, r3
 800c106:	2301      	movs	r3, #1
 800c108:	f000 fb2e 	bl	800c768 <arm_cfft_f32>
 800c10c:	4632      	mov	r2, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	4620      	mov	r0, r4
 800c112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c116:	f7ff bf31 	b.w	800bf7c <stage_rfft_f32>
 800c11a:	bf00      	nop

0800c11c <arm_cfft_radix8by2_f32>:
 800c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c120:	ed2d 8b08 	vpush	{d8-d11}
 800c124:	4607      	mov	r7, r0
 800c126:	4608      	mov	r0, r1
 800c128:	f8b7 c000 	ldrh.w	ip, [r7]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c132:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c13a:	f000 80b0 	beq.w	800c29e <arm_cfft_radix8by2_f32+0x182>
 800c13e:	008c      	lsls	r4, r1, #2
 800c140:	3410      	adds	r4, #16
 800c142:	f100 0310 	add.w	r3, r0, #16
 800c146:	1906      	adds	r6, r0, r4
 800c148:	3210      	adds	r2, #16
 800c14a:	4444      	add	r4, r8
 800c14c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c150:	f108 0510 	add.w	r5, r8, #16
 800c154:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c158:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c15c:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c160:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c164:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c168:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c16c:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c170:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c174:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c178:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c17c:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c180:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c184:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c188:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c18c:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c190:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c194:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c198:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c19c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c1a0:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c1a4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c1a8:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c1ac:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c1b0:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c1b4:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c1b8:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c1bc:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c1c0:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c1c4:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c1c8:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c1cc:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c1d0:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c1d4:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c1d8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c1dc:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c1e0:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c1e4:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c1e8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c1ec:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c1f0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c1f4:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c1f8:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c1fc:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c200:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c204:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c208:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c20c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c210:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c214:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c218:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c21c:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c220:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c224:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c228:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c22c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c230:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c234:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c238:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c23c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c240:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c244:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c248:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c24c:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c250:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c254:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c258:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c25c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c260:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c264:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c268:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c26c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c270:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c274:	3310      	adds	r3, #16
 800c276:	4563      	cmp	r3, ip
 800c278:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c27c:	f106 0610 	add.w	r6, r6, #16
 800c280:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c284:	f102 0210 	add.w	r2, r2, #16
 800c288:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c28c:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c290:	f105 0510 	add.w	r5, r5, #16
 800c294:	f104 0410 	add.w	r4, r4, #16
 800c298:	f47f af5c 	bne.w	800c154 <arm_cfft_radix8by2_f32+0x38>
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	b28c      	uxth	r4, r1
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	f000 fc66 	bl	800cb74 <arm_radix8_butterfly_f32>
 800c2a8:	ecbd 8b08 	vpop	{d8-d11}
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b8:	f000 bc5c 	b.w	800cb74 <arm_radix8_butterfly_f32>

0800c2bc <arm_cfft_radix8by4_f32>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	ed2d 8b0a 	vpush	{d8-d12}
 800c2c4:	b08d      	sub	sp, #52	@ 0x34
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2ca:	8801      	ldrh	r1, [r0, #0]
 800c2cc:	6842      	ldr	r2, [r0, #4]
 800c2ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2d0:	0849      	lsrs	r1, r1, #1
 800c2d2:	008b      	lsls	r3, r1, #2
 800c2d4:	18ee      	adds	r6, r5, r3
 800c2d6:	18f0      	adds	r0, r6, r3
 800c2d8:	edd0 5a00 	vldr	s11, [r0]
 800c2dc:	edd5 7a00 	vldr	s15, [r5]
 800c2e0:	ed96 7a00 	vldr	s14, [r6]
 800c2e4:	edd0 3a01 	vldr	s7, [r0, #4]
 800c2e8:	ed96 4a01 	vldr	s8, [r6, #4]
 800c2ec:	ed95 5a01 	vldr	s10, [r5, #4]
 800c2f0:	9008      	str	r0, [sp, #32]
 800c2f2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c2f6:	18c7      	adds	r7, r0, r3
 800c2f8:	edd7 4a00 	vldr	s9, [r7]
 800c2fc:	ed97 3a01 	vldr	s6, [r7, #4]
 800c300:	9701      	str	r7, [sp, #4]
 800c302:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c306:	462c      	mov	r4, r5
 800c308:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c30c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c310:	ee16 ca90 	vmov	ip, s13
 800c314:	f844 cb08 	str.w	ip, [r4], #8
 800c318:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c31c:	edd6 5a01 	vldr	s11, [r6, #4]
 800c320:	edd7 2a01 	vldr	s5, [r7, #4]
 800c324:	9404      	str	r4, [sp, #16]
 800c326:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c32a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c32e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c332:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c336:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c33a:	0849      	lsrs	r1, r1, #1
 800c33c:	f102 0e08 	add.w	lr, r2, #8
 800c340:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c344:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c348:	9109      	str	r1, [sp, #36]	@ 0x24
 800c34a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c34e:	f1a1 0902 	sub.w	r9, r1, #2
 800c352:	f8cd e00c 	str.w	lr, [sp, #12]
 800c356:	4631      	mov	r1, r6
 800c358:	ee13 ea90 	vmov	lr, s7
 800c35c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c360:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c364:	4604      	mov	r4, r0
 800c366:	edc5 5a01 	vstr	s11, [r5, #4]
 800c36a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c36e:	f841 eb08 	str.w	lr, [r1], #8
 800c372:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c376:	ee16 ea10 	vmov	lr, s12
 800c37a:	ed86 5a01 	vstr	s10, [r6, #4]
 800c37e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c382:	f844 eb08 	str.w	lr, [r4], #8
 800c386:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c38a:	edc0 6a01 	vstr	s13, [r0, #4]
 800c38e:	9405      	str	r4, [sp, #20]
 800c390:	4604      	mov	r4, r0
 800c392:	ee17 0a90 	vmov	r0, s15
 800c396:	9106      	str	r1, [sp, #24]
 800c398:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c39c:	f102 0110 	add.w	r1, r2, #16
 800c3a0:	46bc      	mov	ip, r7
 800c3a2:	9100      	str	r1, [sp, #0]
 800c3a4:	f847 0b08 	str.w	r0, [r7], #8
 800c3a8:	f102 0118 	add.w	r1, r2, #24
 800c3ac:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800c3b0:	9102      	str	r1, [sp, #8]
 800c3b2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c3b6:	9007      	str	r0, [sp, #28]
 800c3b8:	f000 8134 	beq.w	800c624 <arm_cfft_radix8by4_f32+0x368>
 800c3bc:	f102 0920 	add.w	r9, r2, #32
 800c3c0:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800c3c4:	9a01      	ldr	r2, [sp, #4]
 800c3c6:	f8dd a000 	ldr.w	sl, [sp]
 800c3ca:	3b0c      	subs	r3, #12
 800c3cc:	4683      	mov	fp, r0
 800c3ce:	4463      	add	r3, ip
 800c3d0:	f105 0e10 	add.w	lr, r5, #16
 800c3d4:	f1a4 010c 	sub.w	r1, r4, #12
 800c3d8:	f104 0510 	add.w	r5, r4, #16
 800c3dc:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c3e0:	f1a2 040c 	sub.w	r4, r2, #12
 800c3e4:	f106 0010 	add.w	r0, r6, #16
 800c3e8:	3210      	adds	r2, #16
 800c3ea:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c3ee:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c3f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c3f6:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c3fa:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c3fe:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c402:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c406:	ed10 8a01 	vldr	s16, [r0, #-4]
 800c40a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c40e:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c412:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c416:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c41a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c41e:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c422:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c426:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c42a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c42e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c432:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c436:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c43a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c43e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c442:	ed94 7a02 	vldr	s14, [r4, #8]
 800c446:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c44a:	ed91 ba02 	vldr	s22, [r1, #8]
 800c44e:	edd3 9a02 	vldr	s19, [r3, #8]
 800c452:	edd4 2a01 	vldr	s5, [r4, #4]
 800c456:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c45a:	ed93 5a01 	vldr	s10, [r3, #4]
 800c45e:	edd1 0a01 	vldr	s1, [r1, #4]
 800c462:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c466:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c46a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c46e:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c472:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c476:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c47a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c47e:	ed91 7a01 	vldr	s14, [r1, #4]
 800c482:	edd3 8a01 	vldr	s17, [r3, #4]
 800c486:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c48a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c48e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c492:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c496:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c49a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800c49e:	ed1a aa02 	vldr	s20, [sl, #-8]
 800c4a2:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c4a6:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c4aa:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c4ae:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c4b2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c4b6:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c4ba:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c4be:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c4c2:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c4c6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c4ca:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c4ce:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c4d2:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c4d6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c4da:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c4de:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c4e2:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c4e6:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c4ea:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c4ee:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c4f2:	ed00 7a02 	vstr	s14, [r0, #-8]
 800c4f6:	ed40 3a01 	vstr	s7, [r0, #-4]
 800c4fa:	edc1 8a01 	vstr	s17, [r1, #4]
 800c4fe:	ed81 aa02 	vstr	s20, [r1, #8]
 800c502:	ed59 3a04 	vldr	s7, [r9, #-16]
 800c506:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c50a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c50e:	ed59 6a03 	vldr	s13, [r9, #-12]
 800c512:	ee34 4a61 	vsub.f32	s8, s8, s3
 800c516:	ee36 6a41 	vsub.f32	s12, s12, s2
 800c51a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800c51e:	ee66 9a26 	vmul.f32	s19, s12, s13
 800c522:	ee24 9a23 	vmul.f32	s18, s8, s7
 800c526:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c52a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800c52e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c532:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c536:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c53a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c53e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c542:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c546:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c54a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c54e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c552:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c556:	ed45 3a02 	vstr	s7, [r5, #-8]
 800c55a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c55e:	ed84 7a01 	vstr	s14, [r4, #4]
 800c562:	ed84 4a02 	vstr	s8, [r4, #8]
 800c566:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c56a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c56e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800c572:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800c576:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c57a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c57e:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c582:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c586:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c58a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c58e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c592:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c596:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c59a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c59e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c5a2:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c5a6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c5aa:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c5ae:	f1bb 0b01 	subs.w	fp, fp, #1
 800c5b2:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c5b6:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c5ba:	f10e 0e08 	add.w	lr, lr, #8
 800c5be:	ed83 3a02 	vstr	s6, [r3, #8]
 800c5c2:	ed83 7a01 	vstr	s14, [r3, #4]
 800c5c6:	f1ac 0c08 	sub.w	ip, ip, #8
 800c5ca:	f10a 0a08 	add.w	sl, sl, #8
 800c5ce:	f100 0008 	add.w	r0, r0, #8
 800c5d2:	f1a1 0108 	sub.w	r1, r1, #8
 800c5d6:	f109 0910 	add.w	r9, r9, #16
 800c5da:	f105 0508 	add.w	r5, r5, #8
 800c5de:	f1a4 0408 	sub.w	r4, r4, #8
 800c5e2:	f108 0818 	add.w	r8, r8, #24
 800c5e6:	f102 0208 	add.w	r2, r2, #8
 800c5ea:	f1a3 0308 	sub.w	r3, r3, #8
 800c5ee:	f47f aefc 	bne.w	800c3ea <arm_cfft_radix8by4_f32+0x12e>
 800c5f2:	9907      	ldr	r1, [sp, #28]
 800c5f4:	9800      	ldr	r0, [sp, #0]
 800c5f6:	00cb      	lsls	r3, r1, #3
 800c5f8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c5fc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c600:	9100      	str	r1, [sp, #0]
 800c602:	9904      	ldr	r1, [sp, #16]
 800c604:	4419      	add	r1, r3
 800c606:	9104      	str	r1, [sp, #16]
 800c608:	9903      	ldr	r1, [sp, #12]
 800c60a:	4419      	add	r1, r3
 800c60c:	9103      	str	r1, [sp, #12]
 800c60e:	9906      	ldr	r1, [sp, #24]
 800c610:	4419      	add	r1, r3
 800c612:	9106      	str	r1, [sp, #24]
 800c614:	9905      	ldr	r1, [sp, #20]
 800c616:	441f      	add	r7, r3
 800c618:	4419      	add	r1, r3
 800c61a:	9b02      	ldr	r3, [sp, #8]
 800c61c:	9105      	str	r1, [sp, #20]
 800c61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c622:	9302      	str	r3, [sp, #8]
 800c624:	9904      	ldr	r1, [sp, #16]
 800c626:	9805      	ldr	r0, [sp, #20]
 800c628:	ed91 4a00 	vldr	s8, [r1]
 800c62c:	edd0 6a00 	vldr	s13, [r0]
 800c630:	9b06      	ldr	r3, [sp, #24]
 800c632:	ed97 3a00 	vldr	s6, [r7]
 800c636:	edd3 7a00 	vldr	s15, [r3]
 800c63a:	edd0 4a01 	vldr	s9, [r0, #4]
 800c63e:	edd1 3a01 	vldr	s7, [r1, #4]
 800c642:	ed97 2a01 	vldr	s4, [r7, #4]
 800c646:	ed93 7a01 	vldr	s14, [r3, #4]
 800c64a:	9a03      	ldr	r2, [sp, #12]
 800c64c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800c650:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c654:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c658:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c65c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c660:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c664:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c668:	ed81 5a00 	vstr	s10, [r1]
 800c66c:	ed93 5a01 	vldr	s10, [r3, #4]
 800c670:	edd7 4a01 	vldr	s9, [r7, #4]
 800c674:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c678:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c67c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c680:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c684:	ed81 5a01 	vstr	s10, [r1, #4]
 800c688:	edd2 1a00 	vldr	s3, [r2]
 800c68c:	edd2 2a01 	vldr	s5, [r2, #4]
 800c690:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c694:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c698:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c69c:	ee64 4a21 	vmul.f32	s9, s8, s3
 800c6a0:	ee24 4a22 	vmul.f32	s8, s8, s5
 800c6a4:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c6a8:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c6ac:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c6b0:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c6b4:	edc3 2a00 	vstr	s5, [r3]
 800c6b8:	ed83 5a01 	vstr	s10, [r3, #4]
 800c6bc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800c6c0:	9b00      	ldr	r3, [sp, #0]
 800c6c2:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c6c6:	ed93 4a01 	vldr	s8, [r3, #4]
 800c6ca:	ed93 5a00 	vldr	s10, [r3]
 800c6ce:	9b02      	ldr	r3, [sp, #8]
 800c6d0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c6d4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800c6d8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c6dc:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c6e0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c6e4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c6e8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800c6ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c6f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c6f4:	ed80 6a01 	vstr	s12, [r0, #4]
 800c6f8:	edc0 5a00 	vstr	s11, [r0]
 800c6fc:	edd3 5a01 	vldr	s11, [r3, #4]
 800c700:	edd3 6a00 	vldr	s13, [r3]
 800c704:	ee37 7a02 	vadd.f32	s14, s14, s4
 800c708:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c70c:	ee27 6a26 	vmul.f32	s12, s14, s13
 800c710:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c714:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c718:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c71c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c720:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c724:	ed87 7a01 	vstr	s14, [r7, #4]
 800c728:	edc7 7a00 	vstr	s15, [r7]
 800c72c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800c730:	4621      	mov	r1, r4
 800c732:	686a      	ldr	r2, [r5, #4]
 800c734:	2304      	movs	r3, #4
 800c736:	f000 fa1d 	bl	800cb74 <arm_radix8_butterfly_f32>
 800c73a:	4630      	mov	r0, r6
 800c73c:	4621      	mov	r1, r4
 800c73e:	686a      	ldr	r2, [r5, #4]
 800c740:	2304      	movs	r3, #4
 800c742:	f000 fa17 	bl	800cb74 <arm_radix8_butterfly_f32>
 800c746:	9808      	ldr	r0, [sp, #32]
 800c748:	686a      	ldr	r2, [r5, #4]
 800c74a:	4621      	mov	r1, r4
 800c74c:	2304      	movs	r3, #4
 800c74e:	f000 fa11 	bl	800cb74 <arm_radix8_butterfly_f32>
 800c752:	686a      	ldr	r2, [r5, #4]
 800c754:	9801      	ldr	r0, [sp, #4]
 800c756:	4621      	mov	r1, r4
 800c758:	2304      	movs	r3, #4
 800c75a:	b00d      	add	sp, #52	@ 0x34
 800c75c:	ecbd 8b0a 	vpop	{d8-d12}
 800c760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	f000 ba06 	b.w	800cb74 <arm_radix8_butterfly_f32>

0800c768 <arm_cfft_f32>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	2a01      	cmp	r2, #1
 800c76e:	4606      	mov	r6, r0
 800c770:	4617      	mov	r7, r2
 800c772:	460c      	mov	r4, r1
 800c774:	4698      	mov	r8, r3
 800c776:	8805      	ldrh	r5, [r0, #0]
 800c778:	d056      	beq.n	800c828 <arm_cfft_f32+0xc0>
 800c77a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c77e:	d063      	beq.n	800c848 <arm_cfft_f32+0xe0>
 800c780:	d916      	bls.n	800c7b0 <arm_cfft_f32+0x48>
 800c782:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800c786:	d01a      	beq.n	800c7be <arm_cfft_f32+0x56>
 800c788:	d947      	bls.n	800c81a <arm_cfft_f32+0xb2>
 800c78a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800c78e:	d05b      	beq.n	800c848 <arm_cfft_f32+0xe0>
 800c790:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800c794:	d105      	bne.n	800c7a2 <arm_cfft_f32+0x3a>
 800c796:	2301      	movs	r3, #1
 800c798:	6872      	ldr	r2, [r6, #4]
 800c79a:	4629      	mov	r1, r5
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 f9e9 	bl	800cb74 <arm_radix8_butterfly_f32>
 800c7a2:	f1b8 0f00 	cmp.w	r8, #0
 800c7a6:	d111      	bne.n	800c7cc <arm_cfft_f32+0x64>
 800c7a8:	2f01      	cmp	r7, #1
 800c7aa:	d016      	beq.n	800c7da <arm_cfft_f32+0x72>
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	2d20      	cmp	r5, #32
 800c7b2:	d049      	beq.n	800c848 <arm_cfft_f32+0xe0>
 800c7b4:	d935      	bls.n	800c822 <arm_cfft_f32+0xba>
 800c7b6:	2d40      	cmp	r5, #64	@ 0x40
 800c7b8:	d0ed      	beq.n	800c796 <arm_cfft_f32+0x2e>
 800c7ba:	2d80      	cmp	r5, #128	@ 0x80
 800c7bc:	d1f1      	bne.n	800c7a2 <arm_cfft_f32+0x3a>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f7ff fcab 	bl	800c11c <arm_cfft_radix8by2_f32>
 800c7c6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ca:	d0ed      	beq.n	800c7a8 <arm_cfft_f32+0x40>
 800c7cc:	68b2      	ldr	r2, [r6, #8]
 800c7ce:	89b1      	ldrh	r1, [r6, #12]
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 f841 	bl	800c858 <arm_bitreversal_32>
 800c7d6:	2f01      	cmp	r7, #1
 800c7d8:	d1e8      	bne.n	800c7ac <arm_cfft_f32+0x44>
 800c7da:	ee07 5a90 	vmov	s15, r5
 800c7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c7ea:	2d00      	cmp	r5, #0
 800c7ec:	d0de      	beq.n	800c7ac <arm_cfft_f32+0x44>
 800c7ee:	f104 0108 	add.w	r1, r4, #8
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	429d      	cmp	r5, r3
 800c7f8:	f101 0108 	add.w	r1, r1, #8
 800c7fc:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c800:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c804:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c808:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c80c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c810:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c814:	d1ee      	bne.n	800c7f4 <arm_cfft_f32+0x8c>
 800c816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800c81e:	d0ba      	beq.n	800c796 <arm_cfft_f32+0x2e>
 800c820:	e7bf      	b.n	800c7a2 <arm_cfft_f32+0x3a>
 800c822:	2d10      	cmp	r5, #16
 800c824:	d0cb      	beq.n	800c7be <arm_cfft_f32+0x56>
 800c826:	e7bc      	b.n	800c7a2 <arm_cfft_f32+0x3a>
 800c828:	b19d      	cbz	r5, 800c852 <arm_cfft_f32+0xea>
 800c82a:	f101 030c 	add.w	r3, r1, #12
 800c82e:	2200      	movs	r2, #0
 800c830:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c834:	3201      	adds	r2, #1
 800c836:	eef1 7a67 	vneg.f32	s15, s15
 800c83a:	4295      	cmp	r5, r2
 800c83c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c840:	f103 0308 	add.w	r3, r3, #8
 800c844:	d1f4      	bne.n	800c830 <arm_cfft_f32+0xc8>
 800c846:	e798      	b.n	800c77a <arm_cfft_f32+0x12>
 800c848:	4621      	mov	r1, r4
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff fd36 	bl	800c2bc <arm_cfft_radix8by4_f32>
 800c850:	e7a7      	b.n	800c7a2 <arm_cfft_f32+0x3a>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0aa      	beq.n	800c7ac <arm_cfft_f32+0x44>
 800c856:	e7b9      	b.n	800c7cc <arm_cfft_f32+0x64>

0800c858 <arm_bitreversal_32>:
 800c858:	b1e9      	cbz	r1, 800c896 <arm_bitreversal_32+0x3e>
 800c85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85c:	2500      	movs	r5, #0
 800c85e:	f102 0e02 	add.w	lr, r2, #2
 800c862:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c866:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c86a:	08a4      	lsrs	r4, r4, #2
 800c86c:	089b      	lsrs	r3, r3, #2
 800c86e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c872:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c876:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c87a:	00a6      	lsls	r6, r4, #2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c882:	3304      	adds	r3, #4
 800c884:	1d34      	adds	r4, r6, #4
 800c886:	3502      	adds	r5, #2
 800c888:	58c6      	ldr	r6, [r0, r3]
 800c88a:	5907      	ldr	r7, [r0, r4]
 800c88c:	50c7      	str	r7, [r0, r3]
 800c88e:	428d      	cmp	r5, r1
 800c890:	5106      	str	r6, [r0, r4]
 800c892:	d3e6      	bcc.n	800c862 <arm_bitreversal_32+0xa>
 800c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c896:	4770      	bx	lr

0800c898 <arm_cmplx_mag_f32>:
 800c898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89c:	ed2d 8b02 	vpush	{d8}
 800c8a0:	0897      	lsrs	r7, r2, #2
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	d077      	beq.n	800c996 <arm_cmplx_mag_f32+0xfe>
 800c8a6:	f04f 0800 	mov.w	r8, #0
 800c8aa:	f100 0420 	add.w	r4, r0, #32
 800c8ae:	f101 0510 	add.w	r5, r1, #16
 800c8b2:	463e      	mov	r6, r7
 800c8b4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800c8b8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800c8bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d0:	f2c0 80c5 	blt.w	800ca5e <arm_cmplx_mag_f32+0x1c6>
 800c8d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8dc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c8e0:	f100 80cb 	bmi.w	800ca7a <arm_cmplx_mag_f32+0x1e2>
 800c8e4:	ed05 8a04 	vstr	s16, [r5, #-16]
 800c8e8:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800c8ec:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800c8f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c8f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c904:	f2c0 80a8 	blt.w	800ca58 <arm_cmplx_mag_f32+0x1c0>
 800c908:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c910:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c914:	f100 80a8 	bmi.w	800ca68 <arm_cmplx_mag_f32+0x1d0>
 800c918:	ed05 8a03 	vstr	s16, [r5, #-12]
 800c91c:	ed14 0a04 	vldr	s0, [r4, #-16]
 800c920:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c924:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c928:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c92c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c930:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c938:	f2c0 808b 	blt.w	800ca52 <arm_cmplx_mag_f32+0x1ba>
 800c93c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c944:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c948:	f100 80a9 	bmi.w	800ca9e <arm_cmplx_mag_f32+0x206>
 800c94c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800c950:	ed14 0a02 	vldr	s0, [r4, #-8]
 800c954:	ed54 7a01 	vldr	s15, [r4, #-4]
 800c958:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c95c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c960:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c964:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96c:	db6e      	blt.n	800ca4c <arm_cmplx_mag_f32+0x1b4>
 800c96e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c976:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c97a:	f100 8087 	bmi.w	800ca8c <arm_cmplx_mag_f32+0x1f4>
 800c97e:	ed05 8a01 	vstr	s16, [r5, #-4]
 800c982:	3e01      	subs	r6, #1
 800c984:	f104 0420 	add.w	r4, r4, #32
 800c988:	f105 0510 	add.w	r5, r5, #16
 800c98c:	d192      	bne.n	800c8b4 <arm_cmplx_mag_f32+0x1c>
 800c98e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800c992:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800c996:	f012 0203 	ands.w	r2, r2, #3
 800c99a:	d052      	beq.n	800ca42 <arm_cmplx_mag_f32+0x1aa>
 800c99c:	ed90 0a00 	vldr	s0, [r0]
 800c9a0:	edd0 7a01 	vldr	s15, [r0, #4]
 800c9a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c9b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ba:	bfb8      	it	lt
 800c9bc:	600b      	strlt	r3, [r1, #0]
 800c9be:	db08      	blt.n	800c9d2 <arm_cmplx_mag_f32+0x13a>
 800c9c0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c9cc:	d479      	bmi.n	800cac2 <arm_cmplx_mag_f32+0x22a>
 800c9ce:	ed81 8a00 	vstr	s16, [r1]
 800c9d2:	3a01      	subs	r2, #1
 800c9d4:	d035      	beq.n	800ca42 <arm_cmplx_mag_f32+0x1aa>
 800c9d6:	ed90 0a02 	vldr	s0, [r0, #8]
 800c9da:	edd0 7a03 	vldr	s15, [r0, #12]
 800c9de:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c9ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f4:	bfb8      	it	lt
 800c9f6:	604b      	strlt	r3, [r1, #4]
 800c9f8:	db08      	blt.n	800ca0c <arm_cmplx_mag_f32+0x174>
 800c9fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca02:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca06:	d453      	bmi.n	800cab0 <arm_cmplx_mag_f32+0x218>
 800ca08:	ed81 8a01 	vstr	s16, [r1, #4]
 800ca0c:	2a01      	cmp	r2, #1
 800ca0e:	d018      	beq.n	800ca42 <arm_cmplx_mag_f32+0x1aa>
 800ca10:	ed90 0a04 	vldr	s0, [r0, #16]
 800ca14:	edd0 7a05 	vldr	s15, [r0, #20]
 800ca18:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ca1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca20:	2300      	movs	r3, #0
 800ca22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2e:	db19      	blt.n	800ca64 <arm_cmplx_mag_f32+0x1cc>
 800ca30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca38:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ca3c:	d44a      	bmi.n	800cad4 <arm_cmplx_mag_f32+0x23c>
 800ca3e:	ed81 8a02 	vstr	s16, [r1, #8]
 800ca42:	b004      	add	sp, #16
 800ca44:	ecbd 8b02 	vpop	{d8}
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	f845 8c04 	str.w	r8, [r5, #-4]
 800ca50:	e797      	b.n	800c982 <arm_cmplx_mag_f32+0xea>
 800ca52:	f845 8c08 	str.w	r8, [r5, #-8]
 800ca56:	e77b      	b.n	800c950 <arm_cmplx_mag_f32+0xb8>
 800ca58:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ca5c:	e75e      	b.n	800c91c <arm_cmplx_mag_f32+0x84>
 800ca5e:	f845 8c10 	str.w	r8, [r5, #-16]
 800ca62:	e741      	b.n	800c8e8 <arm_cmplx_mag_f32+0x50>
 800ca64:	608b      	str	r3, [r1, #8]
 800ca66:	e7ec      	b.n	800ca42 <arm_cmplx_mag_f32+0x1aa>
 800ca68:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ca6c:	9001      	str	r0, [sp, #4]
 800ca6e:	f000 fbc3 	bl	800d1f8 <sqrtf>
 800ca72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ca76:	9801      	ldr	r0, [sp, #4]
 800ca78:	e74e      	b.n	800c918 <arm_cmplx_mag_f32+0x80>
 800ca7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ca7e:	9001      	str	r0, [sp, #4]
 800ca80:	f000 fbba 	bl	800d1f8 <sqrtf>
 800ca84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ca88:	9801      	ldr	r0, [sp, #4]
 800ca8a:	e72b      	b.n	800c8e4 <arm_cmplx_mag_f32+0x4c>
 800ca8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ca90:	9001      	str	r0, [sp, #4]
 800ca92:	f000 fbb1 	bl	800d1f8 <sqrtf>
 800ca96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ca9a:	9801      	ldr	r0, [sp, #4]
 800ca9c:	e76f      	b.n	800c97e <arm_cmplx_mag_f32+0xe6>
 800ca9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800caa2:	9001      	str	r0, [sp, #4]
 800caa4:	f000 fba8 	bl	800d1f8 <sqrtf>
 800caa8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800caac:	9801      	ldr	r0, [sp, #4]
 800caae:	e74d      	b.n	800c94c <arm_cmplx_mag_f32+0xb4>
 800cab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cab4:	9201      	str	r2, [sp, #4]
 800cab6:	f000 fb9f 	bl	800d1f8 <sqrtf>
 800caba:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cabe:	9903      	ldr	r1, [sp, #12]
 800cac0:	e7a2      	b.n	800ca08 <arm_cmplx_mag_f32+0x170>
 800cac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	f000 fb96 	bl	800d1f8 <sqrtf>
 800cacc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cad0:	9903      	ldr	r1, [sp, #12]
 800cad2:	e77c      	b.n	800c9ce <arm_cmplx_mag_f32+0x136>
 800cad4:	9101      	str	r1, [sp, #4]
 800cad6:	f000 fb8f 	bl	800d1f8 <sqrtf>
 800cada:	9901      	ldr	r1, [sp, #4]
 800cadc:	e7af      	b.n	800ca3e <arm_cmplx_mag_f32+0x1a6>
 800cade:	bf00      	nop

0800cae0 <arm_cos_f32>:
 800cae0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800cb68 <arm_cos_f32+0x88>
 800cae4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cae8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800caec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800caf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800caf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cafc:	d504      	bpl.n	800cb08 <arm_cos_f32+0x28>
 800cafe:	ee17 3a90 	vmov	r3, s15
 800cb02:	3b01      	subs	r3, #1
 800cb04:	ee07 3a90 	vmov	s15, r3
 800cb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb0c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800cb6c <arm_cos_f32+0x8c>
 800cb10:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb14:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cb18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800cb1c:	ee17 3a90 	vmov	r3, s15
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb26:	d21a      	bcs.n	800cb5e <arm_cos_f32+0x7e>
 800cb28:	ee07 3a90 	vmov	s15, r3
 800cb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb30:	1c59      	adds	r1, r3, #1
 800cb32:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb36:	4a0e      	ldr	r2, [pc, #56]	@ (800cb70 <arm_cos_f32+0x90>)
 800cb38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cb44:	ed93 7a00 	vldr	s14, [r3]
 800cb48:	edd2 6a00 	vldr	s13, [r2]
 800cb4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cb50:	ee20 0a26 	vmul.f32	s0, s0, s13
 800cb54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb58:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cb5c:	4770      	bx	lr
 800cb5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cb62:	2101      	movs	r1, #1
 800cb64:	2300      	movs	r3, #0
 800cb66:	e7e6      	b.n	800cb36 <arm_cos_f32+0x56>
 800cb68:	3e22f983 	.word	0x3e22f983
 800cb6c:	44000000 	.word	0x44000000
 800cb70:	0800d968 	.word	0x0800d968

0800cb74 <arm_radix8_butterfly_f32>:
 800cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb78:	ed2d 8b10 	vpush	{d8-d15}
 800cb7c:	b095      	sub	sp, #84	@ 0x54
 800cb7e:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800cb82:	4603      	mov	r3, r0
 800cb84:	3304      	adds	r3, #4
 800cb86:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800ce6c <arm_radix8_butterfly_f32+0x2f8>
 800cb8a:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb8c:	468b      	mov	fp, r1
 800cb8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb90:	4689      	mov	r9, r1
 800cb92:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800cb96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb98:	960f      	str	r6, [sp, #60]	@ 0x3c
 800cb9a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800cb9e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800cba2:	eb03 0508 	add.w	r5, r3, r8
 800cba6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800cbaa:	eb05 040e 	add.w	r4, r5, lr
 800cbae:	0137      	lsls	r7, r6, #4
 800cbb0:	eba6 030a 	sub.w	r3, r6, sl
 800cbb4:	eb04 000e 	add.w	r0, r4, lr
 800cbb8:	44b2      	add	sl, r6
 800cbba:	1d3a      	adds	r2, r7, #4
 800cbbc:	9702      	str	r7, [sp, #8]
 800cbbe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cbc2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800cbc6:	ebae 0c06 	sub.w	ip, lr, r6
 800cbca:	9703      	str	r7, [sp, #12]
 800cbcc:	eb03 0708 	add.w	r7, r3, r8
 800cbd0:	9701      	str	r7, [sp, #4]
 800cbd2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800cbd6:	9706      	str	r7, [sp, #24]
 800cbd8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800cbda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800cbde:	f10e 0104 	add.w	r1, lr, #4
 800cbe2:	4439      	add	r1, r7
 800cbe4:	443a      	add	r2, r7
 800cbe6:	0137      	lsls	r7, r6, #4
 800cbe8:	00f6      	lsls	r6, r6, #3
 800cbea:	9704      	str	r7, [sp, #16]
 800cbec:	9605      	str	r6, [sp, #20]
 800cbee:	9f01      	ldr	r7, [sp, #4]
 800cbf0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cbf2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800cbf6:	f04f 0c00 	mov.w	ip, #0
 800cbfa:	edd4 6a00 	vldr	s13, [r4]
 800cbfe:	edd7 1a00 	vldr	s3, [r7]
 800cc02:	ed16 aa01 	vldr	s20, [r6, #-4]
 800cc06:	edd5 5a00 	vldr	s11, [r5]
 800cc0a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800cc0e:	ed90 6a00 	vldr	s12, [r0]
 800cc12:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cc16:	ed93 3a00 	vldr	s6, [r3]
 800cc1a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800cc1e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800cc22:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800cc26:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800cc2a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800cc2e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800cc32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc36:	ee74 6a07 	vadd.f32	s13, s8, s14
 800cc3a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800cc3e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800cc42:	ed85 4a00 	vstr	s8, [r5]
 800cc46:	edd1 6a00 	vldr	s13, [r1]
 800cc4a:	ed94 9a01 	vldr	s18, [r4, #4]
 800cc4e:	edd3 2a01 	vldr	s5, [r3, #4]
 800cc52:	edd7 8a01 	vldr	s17, [r7, #4]
 800cc56:	edd6 0a00 	vldr	s1, [r6]
 800cc5a:	edd5 3a01 	vldr	s7, [r5, #4]
 800cc5e:	ed90 8a01 	vldr	s16, [r0, #4]
 800cc62:	ed92 7a00 	vldr	s14, [r2]
 800cc66:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cc6a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800cc6e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800cc72:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800cc76:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800cc7a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cc7e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800cc82:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800cc86:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800cc8a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800cc8e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800cc92:	ee77 0a08 	vadd.f32	s1, s14, s16
 800cc96:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800cc9a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800cc9e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800cca2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800cca6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ccaa:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ccae:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ccb2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ccb6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ccba:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800ccbe:	ee33 2a20 	vadd.f32	s4, s6, s1
 800ccc2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ccc6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ccca:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ccce:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ccd2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800ccd6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800ccda:	ee73 1a84 	vadd.f32	s3, s7, s8
 800ccde:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cce2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800cce6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ccea:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ccee:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ccf2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ccf6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ccfa:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ccfe:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800cd02:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800cd06:	ee34 6a67 	vsub.f32	s12, s8, s15
 800cd0a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800cd0e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800cd12:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800cd16:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cd1a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800cd1e:	44dc      	add	ip, fp
 800cd20:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800cd24:	45e1      	cmp	r9, ip
 800cd26:	ed86 8a00 	vstr	s16, [r6]
 800cd2a:	ed85 2a01 	vstr	s4, [r5, #4]
 800cd2e:	4456      	add	r6, sl
 800cd30:	ed02 0a01 	vstr	s0, [r2, #-4]
 800cd34:	4455      	add	r5, sl
 800cd36:	edc0 6a00 	vstr	s13, [r0]
 800cd3a:	ed82 1a00 	vstr	s2, [r2]
 800cd3e:	ed80 5a01 	vstr	s10, [r0, #4]
 800cd42:	4452      	add	r2, sl
 800cd44:	ed01 3a01 	vstr	s6, [r1, #-4]
 800cd48:	4450      	add	r0, sl
 800cd4a:	edc7 2a00 	vstr	s5, [r7]
 800cd4e:	edc4 4a00 	vstr	s9, [r4]
 800cd52:	ed83 7a00 	vstr	s14, [r3]
 800cd56:	edc1 5a00 	vstr	s11, [r1]
 800cd5a:	edc7 3a01 	vstr	s7, [r7, #4]
 800cd5e:	4451      	add	r1, sl
 800cd60:	ed84 6a01 	vstr	s12, [r4, #4]
 800cd64:	4457      	add	r7, sl
 800cd66:	edc3 7a01 	vstr	s15, [r3, #4]
 800cd6a:	4454      	add	r4, sl
 800cd6c:	4453      	add	r3, sl
 800cd6e:	f63f af44 	bhi.w	800cbfa <arm_radix8_butterfly_f32+0x86>
 800cd72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd74:	2b07      	cmp	r3, #7
 800cd76:	f240 81b7 	bls.w	800d0e8 <arm_radix8_butterfly_f32+0x574>
 800cd7a:	9b06      	ldr	r3, [sp, #24]
 800cd7c:	9903      	ldr	r1, [sp, #12]
 800cd7e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cd80:	9e05      	ldr	r6, [sp, #20]
 800cd82:	9a04      	ldr	r2, [sp, #16]
 800cd84:	f103 0c08 	add.w	ip, r3, #8
 800cd88:	9b02      	ldr	r3, [sp, #8]
 800cd8a:	3108      	adds	r1, #8
 800cd8c:	f108 0808 	add.w	r8, r8, #8
 800cd90:	1841      	adds	r1, r0, r1
 800cd92:	3608      	adds	r6, #8
 800cd94:	330c      	adds	r3, #12
 800cd96:	4604      	mov	r4, r0
 800cd98:	4444      	add	r4, r8
 800cd9a:	18c3      	adds	r3, r0, r3
 800cd9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd9e:	1981      	adds	r1, r0, r6
 800cda0:	f10e 0e08 	add.w	lr, lr, #8
 800cda4:	3208      	adds	r2, #8
 800cda6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cda8:	9107      	str	r1, [sp, #28]
 800cdaa:	4604      	mov	r4, r0
 800cdac:	4601      	mov	r1, r0
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	f100 030c 	add.w	r3, r0, #12
 800cdb4:	4474      	add	r4, lr
 800cdb6:	f04f 0801 	mov.w	r8, #1
 800cdba:	1882      	adds	r2, r0, r2
 800cdbc:	4461      	add	r1, ip
 800cdbe:	9305      	str	r3, [sp, #20]
 800cdc0:	464b      	mov	r3, r9
 800cdc2:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdc4:	46c1      	mov	r9, r8
 800cdc6:	9208      	str	r2, [sp, #32]
 800cdc8:	46d8      	mov	r8, fp
 800cdca:	9106      	str	r1, [sp, #24]
 800cdcc:	f04f 0e00 	mov.w	lr, #0
 800cdd0:	469b      	mov	fp, r3
 800cdd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cdd6:	449e      	add	lr, r3
 800cdd8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800cddc:	441a      	add	r2, r3
 800cdde:	920e      	str	r2, [sp, #56]	@ 0x38
 800cde0:	441a      	add	r2, r3
 800cde2:	18d4      	adds	r4, r2, r3
 800cde4:	18e5      	adds	r5, r4, r3
 800cde6:	18ee      	adds	r6, r5, r3
 800cde8:	18f7      	adds	r7, r6, r3
 800cdea:	eb07 0c03 	add.w	ip, r7, r3
 800cdee:	920d      	str	r2, [sp, #52]	@ 0x34
 800cdf0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800cdf4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800cdf8:	910c      	str	r1, [sp, #48]	@ 0x30
 800cdfa:	4419      	add	r1, r3
 800cdfc:	9103      	str	r1, [sp, #12]
 800cdfe:	4419      	add	r1, r3
 800ce00:	18ca      	adds	r2, r1, r3
 800ce02:	9202      	str	r2, [sp, #8]
 800ce04:	441a      	add	r2, r3
 800ce06:	18d0      	adds	r0, r2, r3
 800ce08:	ed92 ea01 	vldr	s28, [r2, #4]
 800ce0c:	9a02      	ldr	r2, [sp, #8]
 800ce0e:	edd4 7a00 	vldr	s15, [r4]
 800ce12:	edd2 da01 	vldr	s27, [r2, #4]
 800ce16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ce18:	ed91 da01 	vldr	s26, [r1, #4]
 800ce1c:	ed92 ca01 	vldr	s24, [r2, #4]
 800ce20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ce22:	9903      	ldr	r1, [sp, #12]
 800ce24:	edcd 7a03 	vstr	s15, [sp, #12]
 800ce28:	edd2 7a00 	vldr	s15, [r2]
 800ce2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce2e:	edcd 7a02 	vstr	s15, [sp, #8]
 800ce32:	edd2 7a00 	vldr	s15, [r2]
 800ce36:	edd0 ea01 	vldr	s29, [r0, #4]
 800ce3a:	edd1 ca01 	vldr	s25, [r1, #4]
 800ce3e:	eddc ba00 	vldr	s23, [ip]
 800ce42:	edd7 aa00 	vldr	s21, [r7]
 800ce46:	ed96 aa00 	vldr	s20, [r6]
 800ce4a:	edd5 9a00 	vldr	s19, [r5]
 800ce4e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ce52:	4403      	add	r3, r0
 800ce54:	ed93 fa01 	vldr	s30, [r3, #4]
 800ce58:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800ce5c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800ce60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ce68:	46cc      	mov	ip, r9
 800ce6a:	e001      	b.n	800ce70 <arm_radix8_butterfly_f32+0x2fc>
 800ce6c:	3f3504f3 	.word	0x3f3504f3
 800ce70:	ed91 6a00 	vldr	s12, [r1]
 800ce74:	ed93 5a00 	vldr	s10, [r3]
 800ce78:	edd0 fa00 	vldr	s31, [r0]
 800ce7c:	edd4 7a00 	vldr	s15, [r4]
 800ce80:	ed95 7a00 	vldr	s14, [r5]
 800ce84:	ed56 3a01 	vldr	s7, [r6, #-4]
 800ce88:	ed17 3a01 	vldr	s6, [r7, #-4]
 800ce8c:	ed92 2a00 	vldr	s4, [r2]
 800ce90:	ed96 0a00 	vldr	s0, [r6]
 800ce94:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ce98:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ce9c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800cea0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800cea4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800cea8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ceac:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ceb0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ceb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ceb8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800cebc:	edd4 8a01 	vldr	s17, [r4, #4]
 800cec0:	ed92 9a01 	vldr	s18, [r2, #4]
 800cec4:	edd7 0a00 	vldr	s1, [r7]
 800cec8:	edd1 2a01 	vldr	s5, [r1, #4]
 800cecc:	ed95 7a01 	vldr	s14, [r5, #4]
 800ced0:	ed93 6a01 	vldr	s12, [r3, #4]
 800ced4:	edd0 5a01 	vldr	s11, [r0, #4]
 800ced8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800cedc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800cee0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800cee4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800cee8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ceec:	ee38 7a87 	vadd.f32	s14, s17, s14
 800cef0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800cef4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800cef8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800cefc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800cf00:	ee30 2a06 	vadd.f32	s4, s0, s12
 800cf04:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800cf08:	ee71 4a64 	vsub.f32	s9, s2, s9
 800cf0c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800cf10:	ee32 1a08 	vadd.f32	s2, s4, s16
 800cf14:	ee72 fa87 	vadd.f32	s31, s5, s14
 800cf18:	ee32 2a48 	vsub.f32	s4, s4, s16
 800cf1c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800cf20:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800cf24:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800cf28:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800cf2c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800cf30:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800cf34:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800cf38:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800cf3c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800cf40:	ee74 0a22 	vadd.f32	s1, s8, s5
 800cf44:	ee36 0a28 	vadd.f32	s0, s12, s17
 800cf48:	ee74 2a62 	vsub.f32	s5, s8, s5
 800cf4c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800cf50:	ee32 4a64 	vsub.f32	s8, s4, s9
 800cf54:	ee73 8a09 	vadd.f32	s17, s6, s18
 800cf58:	ee74 4a82 	vadd.f32	s9, s9, s4
 800cf5c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800cf60:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800cf64:	ee35 3a85 	vadd.f32	s6, s11, s10
 800cf68:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800cf6c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800cf70:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800cf74:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800cf78:	ee30 7a68 	vsub.f32	s14, s0, s17
 800cf7c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800cf80:	ee38 0a80 	vadd.f32	s0, s17, s0
 800cf84:	ee73 3a82 	vadd.f32	s7, s7, s4
 800cf88:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800cf8c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800cf90:	eddd 1a02 	vldr	s3, [sp, #8]
 800cf94:	ee35 5a43 	vsub.f32	s10, s10, s6
 800cf98:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800cf9c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800cfa0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800cfa4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cfa8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800cfac:	ee76 5a49 	vsub.f32	s11, s12, s18
 800cfb0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800cfb4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800cfb8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800cfbc:	ee21 4a84 	vmul.f32	s8, s3, s8
 800cfc0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800cfc4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800cfc8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800cfcc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800cfd0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800cfd4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800cfd8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800cfdc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800cfe0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800cfe4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800cfe8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800cfec:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800cff0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800cff4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800cff8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800cffc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d000:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d004:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d008:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d00c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d010:	eddd 5a03 	vldr	s11, [sp, #12]
 800d014:	edc6 fa00 	vstr	s31, [r6]
 800d018:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d01c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d020:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d024:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d028:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d02c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d030:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d034:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d038:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d03c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d040:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d044:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d048:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d04c:	44c4      	add	ip, r8
 800d04e:	45e3      	cmp	fp, ip
 800d050:	edc3 3a00 	vstr	s7, [r3]
 800d054:	edc3 6a01 	vstr	s13, [r3, #4]
 800d058:	4456      	add	r6, sl
 800d05a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d05e:	edc7 0a00 	vstr	s1, [r7]
 800d062:	4453      	add	r3, sl
 800d064:	ed80 2a00 	vstr	s4, [r0]
 800d068:	edc0 2a01 	vstr	s5, [r0, #4]
 800d06c:	4457      	add	r7, sl
 800d06e:	edc2 1a00 	vstr	s3, [r2]
 800d072:	ed82 7a01 	vstr	s14, [r2, #4]
 800d076:	4450      	add	r0, sl
 800d078:	ed85 8a00 	vstr	s16, [r5]
 800d07c:	ed85 0a01 	vstr	s0, [r5, #4]
 800d080:	4452      	add	r2, sl
 800d082:	edc1 4a00 	vstr	s9, [r1]
 800d086:	4455      	add	r5, sl
 800d088:	ed81 3a01 	vstr	s6, [r1, #4]
 800d08c:	edc4 8a00 	vstr	s17, [r4]
 800d090:	ed84 6a01 	vstr	s12, [r4, #4]
 800d094:	4451      	add	r1, sl
 800d096:	4454      	add	r4, sl
 800d098:	f63f aeea 	bhi.w	800ce70 <arm_radix8_butterfly_f32+0x2fc>
 800d09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d09e:	3308      	adds	r3, #8
 800d0a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ae:	9b08      	ldr	r3, [sp, #32]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	9308      	str	r3, [sp, #32]
 800d0b4:	9b07      	ldr	r3, [sp, #28]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	9307      	str	r3, [sp, #28]
 800d0ba:	9b06      	ldr	r3, [sp, #24]
 800d0bc:	3308      	adds	r3, #8
 800d0be:	9306      	str	r3, [sp, #24]
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	3308      	adds	r3, #8
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ce:	f109 0901 	add.w	r9, r9, #1
 800d0d2:	454b      	cmp	r3, r9
 800d0d4:	f47f ae7d 	bne.w	800cdd2 <arm_radix8_butterfly_f32+0x25e>
 800d0d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	46d9      	mov	r9, fp
 800d0e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0e2:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800d0e6:	e554      	b.n	800cb92 <arm_radix8_butterfly_f32+0x1e>
 800d0e8:	b015      	add	sp, #84	@ 0x54
 800d0ea:	ecbd 8b10 	vpop	{d8-d15}
 800d0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f2:	bf00      	nop

0800d0f4 <_ZdlPvj>:
 800d0f4:	f000 b875 	b.w	800d1e2 <_ZdlPv>

0800d0f8 <_Znwj>:
 800d0f8:	2801      	cmp	r0, #1
 800d0fa:	bf38      	it	cc
 800d0fc:	2001      	movcc	r0, #1
 800d0fe:	b510      	push	{r4, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	4620      	mov	r0, r4
 800d104:	f000 f8a0 	bl	800d248 <malloc>
 800d108:	b100      	cbz	r0, 800d10c <_Znwj+0x14>
 800d10a:	bd10      	pop	{r4, pc}
 800d10c:	f000 f86c 	bl	800d1e8 <_ZSt15get_new_handlerv>
 800d110:	b908      	cbnz	r0, 800d116 <_Znwj+0x1e>
 800d112:	f000 f892 	bl	800d23a <abort>
 800d116:	4780      	blx	r0
 800d118:	e7f3      	b.n	800d102 <_Znwj+0xa>

0800d11a <_ZNSaIcEC1Ev>:
 800d11a:	4770      	bx	lr

0800d11c <_ZNSaIcED1Ev>:
 800d11c:	4770      	bx	lr

0800d11e <_ZSt17__throw_bad_allocv>:
 800d11e:	b508      	push	{r3, lr}
 800d120:	f000 f88b 	bl	800d23a <abort>

0800d124 <_ZSt20__throw_length_errorPKc>:
 800d124:	b508      	push	{r3, lr}
 800d126:	f000 f888 	bl	800d23a <abort>

0800d12a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800d12a:	b10a      	cbz	r2, 800d130 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800d12c:	f000 b94a 	b.w	800d3c4 <memcmp>
 800d130:	4610      	mov	r0, r2
 800d132:	4770      	bx	lr

0800d134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800d134:	6001      	str	r1, [r0, #0]
 800d136:	4770      	bx	lr

0800d138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800d138:	6800      	ldr	r0, [r0, #0]
 800d13a:	4770      	bx	lr

0800d13c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800d13c:	3008      	adds	r0, #8
 800d13e:	4770      	bx	lr

0800d140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800d140:	6081      	str	r1, [r0, #8]
 800d142:	4770      	bx	lr

0800d144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800d144:	6803      	ldr	r3, [r0, #0]
 800d146:	6041      	str	r1, [r0, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	545a      	strb	r2, [r3, r1]
 800d14c:	4770      	bx	lr

0800d14e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800d14e:	f850 3b08 	ldr.w	r3, [r0], #8
 800d152:	1a1b      	subs	r3, r3, r0
 800d154:	4258      	negs	r0, r3
 800d156:	4158      	adcs	r0, r3
 800d158:	4770      	bx	lr
	...

0800d15c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800d15c:	b508      	push	{r3, lr}
 800d15e:	680b      	ldr	r3, [r1, #0]
 800d160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d164:	d302      	bcc.n	800d16c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800d166:	480d      	ldr	r0, [pc, #52]	@ (800d19c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800d168:	f7ff ffdc 	bl	800d124 <_ZSt20__throw_length_errorPKc>
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d90b      	bls.n	800d188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800d170:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800d174:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800d178:	d206      	bcs.n	800d188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800d17a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d17e:	bf2a      	itet	cs
 800d180:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800d184:	6008      	strcc	r0, [r1, #0]
 800d186:	600b      	strcs	r3, [r1, #0]
 800d188:	6808      	ldr	r0, [r1, #0]
 800d18a:	3001      	adds	r0, #1
 800d18c:	d501      	bpl.n	800d192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800d18e:	f7ff ffc6 	bl	800d11e <_ZSt17__throw_bad_allocv>
 800d192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d196:	f7ff bfaf 	b.w	800d0f8 <_Znwj>
 800d19a:	bf00      	nop
 800d19c:	0801016c 	.word	0x0801016c

0800d1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	f7ff ffd3 	bl	800d14e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800d1a8:	b920      	cbnz	r0, 800d1b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b0:	f000 b817 	b.w	800d1e2 <_ZdlPv>
 800d1b4:	bd10      	pop	{r4, pc}

0800d1b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	f7ff fff1 	bl	800d1a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800d1c2:	b538      	push	{r3, r4, r5, lr}
 800d1c4:	6845      	ldr	r5, [r0, #4]
 800d1c6:	684c      	ldr	r4, [r1, #4]
 800d1c8:	6800      	ldr	r0, [r0, #0]
 800d1ca:	6809      	ldr	r1, [r1, #0]
 800d1cc:	42a5      	cmp	r5, r4
 800d1ce:	462a      	mov	r2, r5
 800d1d0:	bf28      	it	cs
 800d1d2:	4622      	movcs	r2, r4
 800d1d4:	f7ff ffa9 	bl	800d12a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800d1d8:	b900      	cbnz	r0, 800d1dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800d1da:	1b28      	subs	r0, r5, r4
 800d1dc:	bd38      	pop	{r3, r4, r5, pc}

0800d1de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800d1de:	6001      	str	r1, [r0, #0]
 800d1e0:	4770      	bx	lr

0800d1e2 <_ZdlPv>:
 800d1e2:	f000 b839 	b.w	800d258 <free>
	...

0800d1e8 <_ZSt15get_new_handlerv>:
 800d1e8:	4b02      	ldr	r3, [pc, #8]	@ (800d1f4 <_ZSt15get_new_handlerv+0xc>)
 800d1ea:	6818      	ldr	r0, [r3, #0]
 800d1ec:	f3bf 8f5b 	dmb	ish
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20001fe0 	.word	0x20001fe0

0800d1f8 <sqrtf>:
 800d1f8:	b508      	push	{r3, lr}
 800d1fa:	ed2d 8b02 	vpush	{d8}
 800d1fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d202:	f000 f817 	bl	800d234 <__ieee754_sqrtf>
 800d206:	eeb4 8a48 	vcmp.f32	s16, s16
 800d20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20e:	d60c      	bvs.n	800d22a <sqrtf+0x32>
 800d210:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d230 <sqrtf+0x38>
 800d214:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	d505      	bpl.n	800d22a <sqrtf+0x32>
 800d21e:	f000 f93d 	bl	800d49c <__errno>
 800d222:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d226:	2321      	movs	r3, #33	@ 0x21
 800d228:	6003      	str	r3, [r0, #0]
 800d22a:	ecbd 8b02 	vpop	{d8}
 800d22e:	bd08      	pop	{r3, pc}
 800d230:	00000000 	.word	0x00000000

0800d234 <__ieee754_sqrtf>:
 800d234:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d238:	4770      	bx	lr

0800d23a <abort>:
 800d23a:	b508      	push	{r3, lr}
 800d23c:	2006      	movs	r0, #6
 800d23e:	f000 f901 	bl	800d444 <raise>
 800d242:	2001      	movs	r0, #1
 800d244:	f7f6 fe3c 	bl	8003ec0 <_exit>

0800d248 <malloc>:
 800d248:	4b02      	ldr	r3, [pc, #8]	@ (800d254 <malloc+0xc>)
 800d24a:	4601      	mov	r1, r0
 800d24c:	6818      	ldr	r0, [r3, #0]
 800d24e:	f000 b82d 	b.w	800d2ac <_malloc_r>
 800d252:	bf00      	nop
 800d254:	20000018 	.word	0x20000018

0800d258 <free>:
 800d258:	4b02      	ldr	r3, [pc, #8]	@ (800d264 <free+0xc>)
 800d25a:	4601      	mov	r1, r0
 800d25c:	6818      	ldr	r0, [r3, #0]
 800d25e:	f000 b949 	b.w	800d4f4 <_free_r>
 800d262:	bf00      	nop
 800d264:	20000018 	.word	0x20000018

0800d268 <sbrk_aligned>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	4e0f      	ldr	r6, [pc, #60]	@ (800d2a8 <sbrk_aligned+0x40>)
 800d26c:	460c      	mov	r4, r1
 800d26e:	6831      	ldr	r1, [r6, #0]
 800d270:	4605      	mov	r5, r0
 800d272:	b911      	cbnz	r1, 800d27a <sbrk_aligned+0x12>
 800d274:	f000 f902 	bl	800d47c <_sbrk_r>
 800d278:	6030      	str	r0, [r6, #0]
 800d27a:	4621      	mov	r1, r4
 800d27c:	4628      	mov	r0, r5
 800d27e:	f000 f8fd 	bl	800d47c <_sbrk_r>
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	d103      	bne.n	800d28e <sbrk_aligned+0x26>
 800d286:	f04f 34ff 	mov.w	r4, #4294967295
 800d28a:	4620      	mov	r0, r4
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
 800d28e:	1cc4      	adds	r4, r0, #3
 800d290:	f024 0403 	bic.w	r4, r4, #3
 800d294:	42a0      	cmp	r0, r4
 800d296:	d0f8      	beq.n	800d28a <sbrk_aligned+0x22>
 800d298:	1a21      	subs	r1, r4, r0
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f8ee 	bl	800d47c <_sbrk_r>
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d1f2      	bne.n	800d28a <sbrk_aligned+0x22>
 800d2a4:	e7ef      	b.n	800d286 <sbrk_aligned+0x1e>
 800d2a6:	bf00      	nop
 800d2a8:	20001fe4 	.word	0x20001fe4

0800d2ac <_malloc_r>:
 800d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	1ccd      	adds	r5, r1, #3
 800d2b2:	f025 0503 	bic.w	r5, r5, #3
 800d2b6:	3508      	adds	r5, #8
 800d2b8:	2d0c      	cmp	r5, #12
 800d2ba:	bf38      	it	cc
 800d2bc:	250c      	movcc	r5, #12
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	db01      	blt.n	800d2c8 <_malloc_r+0x1c>
 800d2c4:	42a9      	cmp	r1, r5
 800d2c6:	d904      	bls.n	800d2d2 <_malloc_r+0x26>
 800d2c8:	230c      	movs	r3, #12
 800d2ca:	6033      	str	r3, [r6, #0]
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3a8 <_malloc_r+0xfc>
 800d2d6:	f000 f869 	bl	800d3ac <__malloc_lock>
 800d2da:	f8d8 3000 	ldr.w	r3, [r8]
 800d2de:	461c      	mov	r4, r3
 800d2e0:	bb44      	cbnz	r4, 800d334 <_malloc_r+0x88>
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff ffbf 	bl	800d268 <sbrk_aligned>
 800d2ea:	1c43      	adds	r3, r0, #1
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	d158      	bne.n	800d3a2 <_malloc_r+0xf6>
 800d2f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d2f4:	4627      	mov	r7, r4
 800d2f6:	2f00      	cmp	r7, #0
 800d2f8:	d143      	bne.n	800d382 <_malloc_r+0xd6>
 800d2fa:	2c00      	cmp	r4, #0
 800d2fc:	d04b      	beq.n	800d396 <_malloc_r+0xea>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	4639      	mov	r1, r7
 800d302:	4630      	mov	r0, r6
 800d304:	eb04 0903 	add.w	r9, r4, r3
 800d308:	f000 f8b8 	bl	800d47c <_sbrk_r>
 800d30c:	4581      	cmp	r9, r0
 800d30e:	d142      	bne.n	800d396 <_malloc_r+0xea>
 800d310:	6821      	ldr	r1, [r4, #0]
 800d312:	1a6d      	subs	r5, r5, r1
 800d314:	4629      	mov	r1, r5
 800d316:	4630      	mov	r0, r6
 800d318:	f7ff ffa6 	bl	800d268 <sbrk_aligned>
 800d31c:	3001      	adds	r0, #1
 800d31e:	d03a      	beq.n	800d396 <_malloc_r+0xea>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	442b      	add	r3, r5
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	f8d8 3000 	ldr.w	r3, [r8]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	bb62      	cbnz	r2, 800d388 <_malloc_r+0xdc>
 800d32e:	f8c8 7000 	str.w	r7, [r8]
 800d332:	e00f      	b.n	800d354 <_malloc_r+0xa8>
 800d334:	6822      	ldr	r2, [r4, #0]
 800d336:	1b52      	subs	r2, r2, r5
 800d338:	d420      	bmi.n	800d37c <_malloc_r+0xd0>
 800d33a:	2a0b      	cmp	r2, #11
 800d33c:	d917      	bls.n	800d36e <_malloc_r+0xc2>
 800d33e:	1961      	adds	r1, r4, r5
 800d340:	42a3      	cmp	r3, r4
 800d342:	6025      	str	r5, [r4, #0]
 800d344:	bf18      	it	ne
 800d346:	6059      	strne	r1, [r3, #4]
 800d348:	6863      	ldr	r3, [r4, #4]
 800d34a:	bf08      	it	eq
 800d34c:	f8c8 1000 	streq.w	r1, [r8]
 800d350:	5162      	str	r2, [r4, r5]
 800d352:	604b      	str	r3, [r1, #4]
 800d354:	4630      	mov	r0, r6
 800d356:	f000 f82f 	bl	800d3b8 <__malloc_unlock>
 800d35a:	f104 000b 	add.w	r0, r4, #11
 800d35e:	1d23      	adds	r3, r4, #4
 800d360:	f020 0007 	bic.w	r0, r0, #7
 800d364:	1ac2      	subs	r2, r0, r3
 800d366:	bf1c      	itt	ne
 800d368:	1a1b      	subne	r3, r3, r0
 800d36a:	50a3      	strne	r3, [r4, r2]
 800d36c:	e7af      	b.n	800d2ce <_malloc_r+0x22>
 800d36e:	6862      	ldr	r2, [r4, #4]
 800d370:	42a3      	cmp	r3, r4
 800d372:	bf0c      	ite	eq
 800d374:	f8c8 2000 	streq.w	r2, [r8]
 800d378:	605a      	strne	r2, [r3, #4]
 800d37a:	e7eb      	b.n	800d354 <_malloc_r+0xa8>
 800d37c:	4623      	mov	r3, r4
 800d37e:	6864      	ldr	r4, [r4, #4]
 800d380:	e7ae      	b.n	800d2e0 <_malloc_r+0x34>
 800d382:	463c      	mov	r4, r7
 800d384:	687f      	ldr	r7, [r7, #4]
 800d386:	e7b6      	b.n	800d2f6 <_malloc_r+0x4a>
 800d388:	461a      	mov	r2, r3
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d1fb      	bne.n	800d388 <_malloc_r+0xdc>
 800d390:	2300      	movs	r3, #0
 800d392:	6053      	str	r3, [r2, #4]
 800d394:	e7de      	b.n	800d354 <_malloc_r+0xa8>
 800d396:	230c      	movs	r3, #12
 800d398:	6033      	str	r3, [r6, #0]
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 f80c 	bl	800d3b8 <__malloc_unlock>
 800d3a0:	e794      	b.n	800d2cc <_malloc_r+0x20>
 800d3a2:	6005      	str	r5, [r0, #0]
 800d3a4:	e7d6      	b.n	800d354 <_malloc_r+0xa8>
 800d3a6:	bf00      	nop
 800d3a8:	20001fe8 	.word	0x20001fe8

0800d3ac <__malloc_lock>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	@ (800d3b4 <__malloc_lock+0x8>)
 800d3ae:	f000 b89f 	b.w	800d4f0 <__retarget_lock_acquire_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	20002128 	.word	0x20002128

0800d3b8 <__malloc_unlock>:
 800d3b8:	4801      	ldr	r0, [pc, #4]	@ (800d3c0 <__malloc_unlock+0x8>)
 800d3ba:	f000 b89a 	b.w	800d4f2 <__retarget_lock_release_recursive>
 800d3be:	bf00      	nop
 800d3c0:	20002128 	.word	0x20002128

0800d3c4 <memcmp>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	3901      	subs	r1, #1
 800d3c8:	4402      	add	r2, r0
 800d3ca:	4290      	cmp	r0, r2
 800d3cc:	d101      	bne.n	800d3d2 <memcmp+0xe>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e005      	b.n	800d3de <memcmp+0x1a>
 800d3d2:	7803      	ldrb	r3, [r0, #0]
 800d3d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3d8:	42a3      	cmp	r3, r4
 800d3da:	d001      	beq.n	800d3e0 <memcmp+0x1c>
 800d3dc:	1b18      	subs	r0, r3, r4
 800d3de:	bd10      	pop	{r4, pc}
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	e7f2      	b.n	800d3ca <memcmp+0x6>

0800d3e4 <memset>:
 800d3e4:	4402      	add	r2, r0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d100      	bne.n	800d3ee <memset+0xa>
 800d3ec:	4770      	bx	lr
 800d3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d3f2:	e7f9      	b.n	800d3e8 <memset+0x4>

0800d3f4 <_raise_r>:
 800d3f4:	291f      	cmp	r1, #31
 800d3f6:	b538      	push	{r3, r4, r5, lr}
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	d904      	bls.n	800d408 <_raise_r+0x14>
 800d3fe:	2316      	movs	r3, #22
 800d400:	6003      	str	r3, [r0, #0]
 800d402:	f04f 30ff 	mov.w	r0, #4294967295
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d40a:	b112      	cbz	r2, 800d412 <_raise_r+0x1e>
 800d40c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d410:	b94b      	cbnz	r3, 800d426 <_raise_r+0x32>
 800d412:	4628      	mov	r0, r5
 800d414:	f000 f830 	bl	800d478 <_getpid_r>
 800d418:	4622      	mov	r2, r4
 800d41a:	4601      	mov	r1, r0
 800d41c:	4628      	mov	r0, r5
 800d41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d422:	f000 b817 	b.w	800d454 <_kill_r>
 800d426:	2b01      	cmp	r3, #1
 800d428:	d00a      	beq.n	800d440 <_raise_r+0x4c>
 800d42a:	1c59      	adds	r1, r3, #1
 800d42c:	d103      	bne.n	800d436 <_raise_r+0x42>
 800d42e:	2316      	movs	r3, #22
 800d430:	6003      	str	r3, [r0, #0]
 800d432:	2001      	movs	r0, #1
 800d434:	e7e7      	b.n	800d406 <_raise_r+0x12>
 800d436:	2100      	movs	r1, #0
 800d438:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d43c:	4620      	mov	r0, r4
 800d43e:	4798      	blx	r3
 800d440:	2000      	movs	r0, #0
 800d442:	e7e0      	b.n	800d406 <_raise_r+0x12>

0800d444 <raise>:
 800d444:	4b02      	ldr	r3, [pc, #8]	@ (800d450 <raise+0xc>)
 800d446:	4601      	mov	r1, r0
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	f7ff bfd3 	b.w	800d3f4 <_raise_r>
 800d44e:	bf00      	nop
 800d450:	20000018 	.word	0x20000018

0800d454 <_kill_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d07      	ldr	r5, [pc, #28]	@ (800d474 <_kill_r+0x20>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	602b      	str	r3, [r5, #0]
 800d462:	f7f6 fd1d 	bl	8003ea0 <_kill>
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	d102      	bne.n	800d470 <_kill_r+0x1c>
 800d46a:	682b      	ldr	r3, [r5, #0]
 800d46c:	b103      	cbz	r3, 800d470 <_kill_r+0x1c>
 800d46e:	6023      	str	r3, [r4, #0]
 800d470:	bd38      	pop	{r3, r4, r5, pc}
 800d472:	bf00      	nop
 800d474:	20002124 	.word	0x20002124

0800d478 <_getpid_r>:
 800d478:	f7f6 bd0a 	b.w	8003e90 <_getpid>

0800d47c <_sbrk_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d06      	ldr	r5, [pc, #24]	@ (800d498 <_sbrk_r+0x1c>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f6 fd26 	bl	8003ed8 <_sbrk>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_sbrk_r+0x1a>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_sbrk_r+0x1a>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	20002124 	.word	0x20002124

0800d49c <__errno>:
 800d49c:	4b01      	ldr	r3, [pc, #4]	@ (800d4a4 <__errno+0x8>)
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20000018 	.word	0x20000018

0800d4a8 <__libc_init_array>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d4e0 <__libc_init_array+0x38>)
 800d4ac:	4c0d      	ldr	r4, [pc, #52]	@ (800d4e4 <__libc_init_array+0x3c>)
 800d4ae:	1b64      	subs	r4, r4, r5
 800d4b0:	10a4      	asrs	r4, r4, #2
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	42a6      	cmp	r6, r4
 800d4b6:	d109      	bne.n	800d4cc <__libc_init_array+0x24>
 800d4b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d4e8 <__libc_init_array+0x40>)
 800d4ba:	4c0c      	ldr	r4, [pc, #48]	@ (800d4ec <__libc_init_array+0x44>)
 800d4bc:	f000 f864 	bl	800d588 <_init>
 800d4c0:	1b64      	subs	r4, r4, r5
 800d4c2:	10a4      	asrs	r4, r4, #2
 800d4c4:	2600      	movs	r6, #0
 800d4c6:	42a6      	cmp	r6, r4
 800d4c8:	d105      	bne.n	800d4d6 <__libc_init_array+0x2e>
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4d0:	4798      	blx	r3
 800d4d2:	3601      	adds	r6, #1
 800d4d4:	e7ee      	b.n	800d4b4 <__libc_init_array+0xc>
 800d4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4da:	4798      	blx	r3
 800d4dc:	3601      	adds	r6, #1
 800d4de:	e7f2      	b.n	800d4c6 <__libc_init_array+0x1e>
 800d4e0:	0801018c 	.word	0x0801018c
 800d4e4:	0801018c 	.word	0x0801018c
 800d4e8:	0801018c 	.word	0x0801018c
 800d4ec:	08010198 	.word	0x08010198

0800d4f0 <__retarget_lock_acquire_recursive>:
 800d4f0:	4770      	bx	lr

0800d4f2 <__retarget_lock_release_recursive>:
 800d4f2:	4770      	bx	lr

0800d4f4 <_free_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	2900      	cmp	r1, #0
 800d4fa:	d041      	beq.n	800d580 <_free_r+0x8c>
 800d4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d500:	1f0c      	subs	r4, r1, #4
 800d502:	2b00      	cmp	r3, #0
 800d504:	bfb8      	it	lt
 800d506:	18e4      	addlt	r4, r4, r3
 800d508:	f7ff ff50 	bl	800d3ac <__malloc_lock>
 800d50c:	4a1d      	ldr	r2, [pc, #116]	@ (800d584 <_free_r+0x90>)
 800d50e:	6813      	ldr	r3, [r2, #0]
 800d510:	b933      	cbnz	r3, 800d520 <_free_r+0x2c>
 800d512:	6063      	str	r3, [r4, #4]
 800d514:	6014      	str	r4, [r2, #0]
 800d516:	4628      	mov	r0, r5
 800d518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d51c:	f7ff bf4c 	b.w	800d3b8 <__malloc_unlock>
 800d520:	42a3      	cmp	r3, r4
 800d522:	d908      	bls.n	800d536 <_free_r+0x42>
 800d524:	6820      	ldr	r0, [r4, #0]
 800d526:	1821      	adds	r1, r4, r0
 800d528:	428b      	cmp	r3, r1
 800d52a:	bf01      	itttt	eq
 800d52c:	6819      	ldreq	r1, [r3, #0]
 800d52e:	685b      	ldreq	r3, [r3, #4]
 800d530:	1809      	addeq	r1, r1, r0
 800d532:	6021      	streq	r1, [r4, #0]
 800d534:	e7ed      	b.n	800d512 <_free_r+0x1e>
 800d536:	461a      	mov	r2, r3
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	b10b      	cbz	r3, 800d540 <_free_r+0x4c>
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	d9fa      	bls.n	800d536 <_free_r+0x42>
 800d540:	6811      	ldr	r1, [r2, #0]
 800d542:	1850      	adds	r0, r2, r1
 800d544:	42a0      	cmp	r0, r4
 800d546:	d10b      	bne.n	800d560 <_free_r+0x6c>
 800d548:	6820      	ldr	r0, [r4, #0]
 800d54a:	4401      	add	r1, r0
 800d54c:	1850      	adds	r0, r2, r1
 800d54e:	4283      	cmp	r3, r0
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	d1e0      	bne.n	800d516 <_free_r+0x22>
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	6053      	str	r3, [r2, #4]
 800d55a:	4408      	add	r0, r1
 800d55c:	6010      	str	r0, [r2, #0]
 800d55e:	e7da      	b.n	800d516 <_free_r+0x22>
 800d560:	d902      	bls.n	800d568 <_free_r+0x74>
 800d562:	230c      	movs	r3, #12
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	e7d6      	b.n	800d516 <_free_r+0x22>
 800d568:	6820      	ldr	r0, [r4, #0]
 800d56a:	1821      	adds	r1, r4, r0
 800d56c:	428b      	cmp	r3, r1
 800d56e:	bf04      	itt	eq
 800d570:	6819      	ldreq	r1, [r3, #0]
 800d572:	685b      	ldreq	r3, [r3, #4]
 800d574:	6063      	str	r3, [r4, #4]
 800d576:	bf04      	itt	eq
 800d578:	1809      	addeq	r1, r1, r0
 800d57a:	6021      	streq	r1, [r4, #0]
 800d57c:	6054      	str	r4, [r2, #4]
 800d57e:	e7ca      	b.n	800d516 <_free_r+0x22>
 800d580:	bd38      	pop	{r3, r4, r5, pc}
 800d582:	bf00      	nop
 800d584:	20001fe8 	.word	0x20001fe8

0800d588 <_init>:
 800d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58a:	bf00      	nop
 800d58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58e:	bc08      	pop	{r3}
 800d590:	469e      	mov	lr, r3
 800d592:	4770      	bx	lr

0800d594 <_fini>:
 800d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d596:	bf00      	nop
 800d598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59a:	bc08      	pop	{r3}
 800d59c:	469e      	mov	lr, r3
 800d59e:	4770      	bx	lr
