
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed94  0800ed94  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed94  0800ed94  0000fd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed9c  0800ed9c  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ed9c  0800ed9c  0000fd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800eda4  0800eda4  0000fda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800edac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  20000068  0800ee14  00010068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002064  0800ee14  00011064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039750  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e00  00000000  00000000  000497e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d8  00000000  00000000  0004f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a28  00000000  00000000  000518c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eeb6  00000000  00000000  000532e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a12e  00000000  00000000  0008219e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147ba0  00000000  00000000  000ac2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001f3e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b144  00000000  00000000  001f3f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ff068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  001ff0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00202a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c198 	.word	0x0800c198

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800c198 	.word	0x0800c198

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f003 f9cc 	bl	8004148 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000db2:	f007 fc8d 	bl	80086d0 <HAL_TIM_Base_Stop>
 8000db6:	e000      	b.n	8000dba <HAL_ADC_ConvCpltCallback+0x26>
		return;
 8000db8:	bf00      	nop
}
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	20001cec 	.word	0x20001cec
 8000dc8:	200002fc 	.word	0x200002fc

08000dcc <AFE_Offset_LDAC_Init>:
void AFE_Offset_LDAC_Init()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  uint8_t cmd[2]={144,0};
 8000dd2:	2390      	movs	r3, #144	@ 0x90
 8000dd4:	80bb      	strh	r3, [r7, #4]
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <AFE_Offset_LDAC_Init+0x38>)
 8000dde:	f005 fe6b 	bl	8006ab8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, cmd, 2, 1000);
 8000de2:	1d39      	adds	r1, r7, #4
 8000de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de8:	2202      	movs	r2, #2
 8000dea:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <AFE_Offset_LDAC_Init+0x3c>)
 8000dec:	f007 f8cf 	bl	8007f8e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df6:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <AFE_Offset_LDAC_Init+0x38>)
 8000df8:	f005 fe5e 	bl	8006ab8 <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	48000400 	.word	0x48000400
 8000e08:	20000200 	.word	0x20000200

08000e0c <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    if (gain_level<=0 || gain_level>6){
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02a      	beq.n	8000e72 <AFE_Gain+0x66>
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d827      	bhi.n	8000e72 <AFE_Gain+0x66>
        return;
    }
    else {
    uint8_t Gain_Levels[6]={
 8000e22:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <AFE_Gain+0x70>)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2c:	6018      	str	r0, [r3, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	3310      	adds	r3, #16
 8000e38:	443b      	add	r3, r7
 8000e3a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <AFE_Gain+0x74>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <AFE_Gain+0x74>)
 8000e48:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <AFE_Gain+0x78>)
 8000e52:	f005 fe31 	bl	8006ab8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &gain_state, 1, 1000);
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <AFE_Gain+0x74>)
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <AFE_Gain+0x7c>)
 8000e60:	f007 f895 	bl	8007f8e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <AFE_Gain+0x78>)
 8000e6c:	f005 fe24 	bl	8006ab8 <HAL_GPIO_WritePin>
 8000e70:	e000      	b.n	8000e74 <AFE_Gain+0x68>
        return;
 8000e72:	bf00      	nop
    }
}
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	0800c1b0 	.word	0x0800c1b0
 8000e80:	20000cea 	.word	0x20000cea
 8000e84:	48000400 	.word	0x48000400
 8000e88:	20000200 	.word	0x20000200

08000e8c <AFE_Offset>:
/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4095, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level >= 4096) {
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e9c:	d21e      	bcs.n	8000edc <AFE_Offset+0x50>
    return ;
  }
  else {
    uint8_t AFE_cmd[2];
    AFE_cmd[0]= DAC_AFE_OFF2*16+offset_level/256;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	733b      	strb	r3, [r7, #12]
    AFE_cmd[1]= offset_level%256;
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <AFE_Offset+0x58>)
 8000eba:	f005 fdfd 	bl	8006ab8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, AFE_cmd, 2, 1000);
 8000ebe:	f107 010c 	add.w	r1, r7, #12
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <AFE_Offset+0x5c>)
 8000eca:	f007 f860 	bl	8007f8e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <AFE_Offset+0x58>)
 8000ed6:	f005 fdef 	bl	8006ab8 <HAL_GPIO_WritePin>
 8000eda:	e000      	b.n	8000ede <AFE_Offset+0x52>
    return ;
 8000edc:	bf00      	nop
  }
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	20000200 	.word	0x20000200

08000eec <roundToNearest5>:

int roundToNearest5(int num)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <roundToNearest5+0x44>)
 8000ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8000efc:	1059      	asrs	r1, r3, #1
 8000efe:	17d3      	asrs	r3, r2, #31
 8000f00:	1ac9      	subs	r1, r1, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	dd05      	ble.n	8000f1e <roundToNearest5+0x32>
        return num + (5 - remainder);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1c3 0205 	rsb	r2, r3, #5
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	e002      	b.n	8000f24 <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1ad3      	subs	r3, r2, r3
    }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	66666667 	.word	0x66666667
 8000f34:	00000000 	.word	0x00000000

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 5d61 	sub.w	sp, sp, #14400	@ 0x3840
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f002 fb94 	bl	800366e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 fd6d 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f001 f905 	bl	8002158 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4e:	f001 f8bd 	bl	80020cc <MX_DMA_Init>
  MX_CRC_Init();
 8000f52:	f000 fe57 	bl	8001c04 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000f56:	f001 f86d 	bl	8002034 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f5a:	f000 fdb5 	bl	8001ac8 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000f5e:	f000 fef7 	bl	8001d50 <MX_SPI3_Init>
  MX_TIM6_Init();
 8000f62:	f000 fffb 	bl	8001f5c <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f66:	f000 feb3 	bl	8001cd0 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000f6a:	f000 fe77 	bl	8001c5c <MX_DAC1_Init>
  MX_COMP3_Init();
 8000f6e:	f000 fe23 	bl	8001bb8 <MX_COMP3_Init>
  MX_TIM3_Init();
 8000f72:	f000 ffa5 	bl	8001ec0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f76:	f000 ff29 	bl	8001dcc <MX_TIM2_Init>
  MX_TIM7_Init();
 8000f7a:	f001 f825 	bl	8001fc8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8000f84:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e03c      	b.n	8001006 <main+0xce>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 8000f8c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000f90:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9e:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80011e8 <main+0x2b0>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	f00a fba1 	bl	800b6f0 <arm_cos_f32>
 8000fae:	ee10 3a10 	vmov	r3, s0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa94 	bl	80004e0 <__aeabi_f2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b8b      	ldr	r3, [pc, #556]	@ (80011ec <main+0x2b4>)
 8000fbe:	f7ff fae7 	bl	8000590 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4988      	ldr	r1, [pc, #544]	@ (80011ec <main+0x2b4>)
 8000fcc:	f7ff f928 	bl	8000220 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd14 	bl	8000a04 <__aeabi_d2f>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4984      	ldr	r1, [pc, #528]	@ (80011f0 <main+0x2b8>)
 8000fe0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000fe4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < N; ++i)
 8000ff0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8000ff4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001000:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800100a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001014:	dbba      	blt.n	8000f8c <main+0x54>
  }
  AFE_Offset_LDAC_Init();
 8001016:	f7ff fed9 	bl	8000dcc <AFE_Offset_LDAC_Init>
  AFE_Gain(3);
 800101a:	2003      	movs	r0, #3
 800101c:	f7ff fef6 	bl	8000e0c <AFE_Gain>
  AFE_Offset(256);
 8001020:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001024:	f7ff ff32 	bl	8000e8c <AFE_Offset>

  float fft_in[N] = {0};
 8001028:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 800102c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001030:	3b3c      	subs	r3, #60	@ 0x3c
 8001032:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00a ffdb 	bl	800bff4 <memset>
  float fft_out[N] = {0};
 800103e:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 8001042:	f103 0318 	add.w	r3, r3, #24
 8001046:	3b3c      	subs	r3, #60	@ 0x3c
 8001048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00a ffd0 	bl	800bff4 <memset>
  float deal_mag[N] = {0};
 8001054:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001058:	3b3c      	subs	r3, #60	@ 0x3c
 800105a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00a ffc7 	bl	800bff4 <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */
	  uint32_t big_mag[6] = {0};
 8001066:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800106a:	3b5c      	subs	r3, #92	@ 0x5c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
	  int index[6] = {0};
 800107a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800107e:	3b74      	subs	r3, #116	@ 0x74
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
	  int freq_counter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001094:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001098:	6013      	str	r3, [r2, #0]
	  set_sm_freq(1e6 , &htim6);
 800109a:	4956      	ldr	r1, [pc, #344]	@ (80011f4 <main+0x2bc>)
 800109c:	4856      	ldr	r0, [pc, #344]	@ (80011f8 <main+0x2c0>)
 800109e:	f001 f959 	bl	8002354 <set_sm_freq>
	  samp(adc_buffer, 1025, &htim6, &hadc1);
 80010a2:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <main+0x2c4>)
 80010a4:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <main+0x2bc>)
 80010a6:	f240 4101 	movw	r1, #1025	@ 0x401
 80010aa:	4855      	ldr	r0, [pc, #340]	@ (8001200 <main+0x2c8>)
 80010ac:	f001 f934 	bl	8002318 <samp>
	  uint16_t temp_buffer[1025];
	  make_8to16(adc_buffer, 2050, temp_buffer);
 80010b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010b4:	3b38      	subs	r3, #56	@ 0x38
 80010b6:	461a      	mov	r2, r3
 80010b8:	f640 0102 	movw	r1, #2050	@ 0x802
 80010bc:	4850      	ldr	r0, [pc, #320]	@ (8001200 <main+0x2c8>)
 80010be:	f001 f8f5 	bl	80022ac <make_8to16>
	  int_to_float(temp_buffer + 1, fft_in);
 80010c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010c6:	3b38      	subs	r3, #56	@ 0x38
 80010c8:	3302      	adds	r3, #2
 80010ca:	f507 5221 	add.w	r2, r7, #10304	@ 0x2840
 80010ce:	f102 0218 	add.w	r2, r2, #24
 80010d2:	3a1c      	subs	r2, #28
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f95a 	bl	8002390 <int_to_float>
	  for (int i = 0; i < N; ++i)
 80010dc:	2300      	movs	r3, #0
 80010de:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80010e2:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e034      	b.n	8001154 <main+0x21c>
	  {
	  	  fft_in[i] *= window[i];
 80010ea:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 80010ee:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80010f2:	461a      	mov	r2, r3
 80010f4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80010f8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b3c      	subs	r3, #60	@ 0x3c
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	4a39      	ldr	r2, [pc, #228]	@ (80011f0 <main+0x2b8>)
 800110a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800110e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8001124:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001128:	461a      	mov	r2, r3
 800112a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800112e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b3c      	subs	r3, #60	@ 0x3c
 800113a:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < N; ++i)
 800113e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001142:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800114e:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001158:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001162:	dbc2      	blt.n	80010ea <main+0x1b2>
	  }
	  fft_transfer(fft_in, fft_out, deal_mag);
 8001164:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001168:	3a3c      	subs	r2, #60	@ 0x3c
 800116a:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 800116e:	f101 0118 	add.w	r1, r1, #24
 8001172:	393c      	subs	r1, #60	@ 0x3c
 8001174:	f507 5321 	add.w	r3, r7, #10304	@ 0x2840
 8001178:	f103 0318 	add.w	r3, r3, #24
 800117c:	3b1c      	subs	r3, #28
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f92b 	bl	80023da <fft_transfer>

	  uint8_t k = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800118a:	f102 022b 	add.w	r2, r2, #43	@ 0x2b
 800118e:	7013      	strb	r3, [r2, #0]
	  float max = 0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001198:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800119c:	6013      	str	r3, [r2, #0]
	  float sec = 0;
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011a6:	f102 0220 	add.w	r2, r2, #32
 80011aa:	6013      	str	r3, [r2, #0]
	  int freq_1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011b2:	f102 021c 	add.w	r2, r2, #28
 80011b6:	6013      	str	r3, [r2, #0]
	  int freq_2 = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011be:	f102 0218 	add.w	r2, r2, #24
 80011c2:	6013      	str	r3, [r2, #0]
      int waveform_1 = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011ca:	6013      	str	r3, [r2, #0]
      int waveform_2 = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80011d2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80011d6:	6013      	str	r3, [r2, #0]
	  for(int i = 2; i < 510; ++i)
 80011d8:	2302      	movs	r3, #2
 80011da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80011de:	f102 0214 	add.w	r2, r2, #20
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e0ab      	b.n	800133e <main+0x406>
 80011e6:	bf00      	nop
 80011e8:	3bc9422c 	.word	0x3bc9422c
 80011ec:	3fe00000 	.word	0x3fe00000
 80011f0:	20000cec 	.word	0x20000cec
 80011f4:	200002fc 	.word	0x200002fc
 80011f8:	000f4240 	.word	0x000f4240
 80011fc:	20000084 	.word	0x20000084
 8001200:	200004e8 	.word	0x200004e8
 8001204:	45160000 	.word	0x45160000
	  {
		  if((deal_mag[i]) > 2400)
 8001208:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800120c:	461a      	mov	r2, r3
 800120e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001212:	f103 0314 	add.w	r3, r3, #20
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b3c      	subs	r3, #60	@ 0x3c
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001204 <main+0x2cc>
 8001226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd74      	ble.n	800131a <main+0x3e2>
		  {
			  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 8001230:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001234:	461a      	mov	r2, r3
 8001236:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800123a:	f103 0314 	add.w	r3, r3, #20
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b3c      	subs	r3, #60	@ 0x3c
 8001246:	ed93 7a00 	vldr	s14, [r3]
 800124a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800124e:	f103 0314 	add.w	r3, r3, #20
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b3c      	subs	r3, #60	@ 0x3c
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	dd55      	ble.n	800131a <main+0x3e2>
 800126e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001272:	461a      	mov	r2, r3
 8001274:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001278:	f103 0314 	add.w	r3, r3, #20
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b3c      	subs	r3, #60	@ 0x3c
 8001284:	ed93 7a00 	vldr	s14, [r3]
 8001288:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800128c:	f103 0314 	add.w	r3, r3, #20
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3b3c      	subs	r3, #60	@ 0x3c
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	dd36      	ble.n	800131a <main+0x3e2>
			  {
				  big_mag[k] = deal_mag[i];
 80012ac:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80012b0:	461a      	mov	r2, r3
 80012b2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012b6:	f103 0314 	add.w	r3, r3, #20
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	3b3c      	subs	r3, #60	@ 0x3c
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012ca:	f103 032b 	add.w	r3, r3, #43	@ 0x2b
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d4:	ee17 1a90 	vmov	r1, s15
 80012d8:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	f843 1c5c 	str.w	r1, [r3, #-92]
				  index[k] = i;
 80012e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80012e8:	f103 032b 	add.w	r3, r3, #43	@ 0x2b
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80012fa:	f102 0214 	add.w	r2, r2, #20
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f843 2c74 	str.w	r2, [r3, #-116]
				  k++;
 8001304:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001308:	f103 032b 	add.w	r3, r3, #43	@ 0x2b
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001314:	f102 022b 	add.w	r2, r2, #43	@ 0x2b
 8001318:	7013      	strb	r3, [r2, #0]
			  }
		  }
		  if(k == 6) break;
 800131a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800131e:	f103 032b 	add.w	r3, r3, #43	@ 0x2b
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b06      	cmp	r3, #6
 8001326:	d014      	beq.n	8001352 <main+0x41a>
	  for(int i = 2; i < 510; ++i)
 8001328:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800132c:	f103 0314 	add.w	r3, r3, #20
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001338:	f102 0214 	add.w	r2, r2, #20
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001342:	f103 0314 	add.w	r3, r3, #20
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800134c:	f6ff af5c 	blt.w	8001208 <main+0x2d0>
 8001350:	e000      	b.n	8001354 <main+0x41c>
		  if(k == 6) break;
 8001352:	bf00      	nop
	  }
	  for(int i = 0;i < 6; ++i)
 8001354:	2300      	movs	r3, #0
 8001356:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800135a:	f102 0210 	add.w	r2, r2, #16
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e078      	b.n	8001454 <main+0x51c>
	  {
		  index[i] = ((index[i] * 0.97656) / 5) * 5;
 8001362:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001366:	461a      	mov	r2, r3
 8001368:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800136c:	f103 0310 	add.w	r3, r3, #16
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f89e 	bl	80004bc <__aeabi_i2d>
 8001380:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001694 <main+0x75c>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f903 	bl	8000590 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4bbe      	ldr	r3, [pc, #760]	@ (8001690 <main+0x758>)
 8001398:	f7ff fa24 	bl	80007e4 <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001690 <main+0x758>)
 80013aa:	f7ff f8f1 	bl	8000590 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fafd 	bl	80009b4 <__aeabi_d2iz>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80013c0:	4619      	mov	r1, r3
 80013c2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013c6:	f103 0310 	add.w	r3, r3, #16
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	f843 2c74 	str.w	r2, [r3, #-116]
		  index[i] = roundToNearest5(index[i]);
 80013d4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80013d8:	461a      	mov	r2, r3
 80013da:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013de:	f103 0310 	add.w	r3, r3, #16
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd7d 	bl	8000eec <roundToNearest5>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80013f8:	4619      	mov	r1, r3
 80013fa:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80013fe:	f103 0310 	add.w	r3, r3, #16
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f843 2c74 	str.w	r2, [r3, #-116]
		  if(index[i] > 0) freq_counter ++;
 800140c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001410:	461a      	mov	r2, r3
 8001412:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001416:	f103 0310 	add.w	r3, r3, #16
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd0a      	ble.n	800143e <main+0x506>
 8001428:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800142c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001438:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800143c:	6013      	str	r3, [r2, #0]
	  for(int i = 0;i < 6; ++i)
 800143e:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001442:	f103 0310 	add.w	r3, r3, #16
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800144e:	f102 0210 	add.w	r2, r2, #16
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001458:	f103 0310 	add.w	r3, r3, #16
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b05      	cmp	r3, #5
 8001460:	f77f af7f 	ble.w	8001362 <main+0x42a>
	  }
	  switch(freq_counter)
 8001464:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001468:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	2b05      	cmp	r3, #5
 8001472:	f200 82bd 	bhi.w	80019f0 <main+0xab8>
 8001476:	a201      	add	r2, pc, #4	@ (adr r2, 800147c <main+0x544>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	08001495 	.word	0x08001495
 8001480:	080014cf 	.word	0x080014cf
 8001484:	0800152d 	.word	0x0800152d
 8001488:	0800166b 	.word	0x0800166b
 800148c:	080017f7 	.word	0x080017f7
 8001490:	080017f7 	.word	0x080017f7
	  {
		  case 1:
		  {
			  waveform_1 = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800149a:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80014a2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80014a6:	6013      	str	r3, [r2, #0]
			  freq_1 = index[0];
 80014a8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014ac:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80014b0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014b4:	f102 021c 	add.w	r2, r2, #28
 80014b8:	6013      	str	r3, [r2, #0]
			  freq_2 = index[0];
 80014ba:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014be:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80014c2:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014c6:	f102 0218 	add.w	r2, r2, #24
 80014ca:	6013      	str	r3, [r2, #0]
			  break;
 80014cc:	e290      	b.n	80019f0 <main+0xab8>
		  }
		  case 2 :
		  {
			  waveform_1 = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014d4:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 80014dc:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80014e0:	6013      	str	r3, [r2, #0]
			  freq_1 = index[0];
 80014e2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014e6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80014ea:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80014ee:	f102 021c 	add.w	r2, r2, #28
 80014f2:	6013      	str	r3, [r2, #0]
			  if(big_mag[1]<10000)
 80014f4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80014f8:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80014fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001500:	4293      	cmp	r3, r2
 8001502:	d809      	bhi.n	8001518 <main+0x5e0>
			  {
				  freq_2 = index[0];
 8001504:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001508:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800150c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001510:	f102 0218 	add.w	r2, r2, #24
 8001514:	6013      	str	r3, [r2, #0]
			  }
			  else
			  {
				  freq_2 = index[1];
			  }
			  break;
 8001516:	e26b      	b.n	80019f0 <main+0xab8>
				  freq_2 = index[1];
 8001518:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800151c:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001520:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001524:	f102 0218 	add.w	r2, r2, #24
 8001528:	6013      	str	r3, [r2, #0]
			  break;
 800152a:	e261      	b.n	80019f0 <main+0xab8>
		  }
		  case 3:
		  {
			  waveform_1 = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001532:	6013      	str	r3, [r2, #0]
			  waveform_2 = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 800153a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800153e:	6013      	str	r3, [r2, #0]
			  freq_2 = 100;
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001546:	f102 0218 	add.w	r2, r2, #24
 800154a:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 800154c:	2300      	movs	r3, #0
 800154e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001552:	f102 020c 	add.w	r2, r2, #12
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e07e      	b.n	8001658 <main+0x720>
			  {
				  if(big_mag[i] > max)
 800155a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800155e:	461a      	mov	r2, r3
 8001560:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001564:	f103 030c 	add.w	r3, r3, #12
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800157e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d526      	bpl.n	80015de <main+0x6a6>
				  {
					  max = big_mag[i];
 8001590:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001594:	461a      	mov	r2, r3
 8001596:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800159a:	f103 030c 	add.w	r3, r3, #12
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015b4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80015b8:	edc3 7a00 	vstr	s15, [r3]
					  freq_1 = index[i];
 80015bc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80015c0:	461a      	mov	r2, r3
 80015c2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015c6:	f103 030c 	add.w	r3, r3, #12
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80015d4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015d8:	f102 021c 	add.w	r2, r2, #28
 80015dc:	6013      	str	r3, [r2, #0]
				  }
				  if(freq_2 > index[i] && index[i] > 0)
 80015de:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80015e2:	461a      	mov	r2, r3
 80015e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80015e8:	f103 030c 	add.w	r3, r3, #12
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80015f6:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80015fa:	f102 0218 	add.w	r2, r2, #24
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	dd1e      	ble.n	8001642 <main+0x70a>
 8001604:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001608:	461a      	mov	r2, r3
 800160a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800160e:	f103 030c 	add.w	r3, r3, #12
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800161c:	2b00      	cmp	r3, #0
 800161e:	dd10      	ble.n	8001642 <main+0x70a>
				  {
					  freq_2 = index[i];
 8001620:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001624:	461a      	mov	r2, r3
 8001626:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800162a:	f103 030c 	add.w	r3, r3, #12
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001638:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800163c:	f102 0218 	add.w	r2, r2, #24
 8001640:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 8001642:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001646:	f103 030c 	add.w	r3, r3, #12
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001652:	f102 020c 	add.w	r2, r2, #12
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800165c:	f103 030c 	add.w	r3, r3, #12
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b05      	cmp	r3, #5
 8001664:	f77f af79 	ble.w	800155a <main+0x622>
				  }
			  }
			  break;
 8001668:	e1c2      	b.n	80019f0 <main+0xab8>
		  }
		  case 4 :
		  {
			  waveform_1 = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001670:	6013      	str	r3, [r2, #0]
			  waveform_2 = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001678:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800167c:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 800167e:	2300      	movs	r3, #0
 8001680:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001684:	f102 0208 	add.w	r2, r2, #8
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e0ab      	b.n	80017e4 <main+0x8ac>
 800168c:	f3af 8000 	nop.w
 8001690:	40140000 	.word	0x40140000
 8001694:	c1d29dc7 	.word	0xc1d29dc7
 8001698:	3fef3ffa 	.word	0x3fef3ffa
			  {
				  if(big_mag[i] > sec)
 800169c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016a0:	461a      	mov	r2, r3
 80016a2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016a6:	f103 0308 	add.w	r3, r3, #8
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016bc:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016c0:	f103 0320 	add.w	r3, r3, #32
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d57d      	bpl.n	80017ce <main+0x896>
				  {
					  if(big_mag[i] > max)
 80016d2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80016d6:	461a      	mov	r2, r3
 80016d8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016dc:	f103 0308 	add.w	r3, r3, #8
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80016f6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d53b      	bpl.n	8001780 <main+0x848>
					  {
						  sec = max;
 8001708:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800170c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001716:	f102 0220 	add.w	r2, r2, #32
 800171a:	6013      	str	r3, [r2, #0]
						  freq_2 = freq_1;
 800171c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001720:	f103 031c 	add.w	r3, r3, #28
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800172a:	f102 0218 	add.w	r2, r2, #24
 800172e:	6013      	str	r3, [r2, #0]
						  max = big_mag[i];
 8001730:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001734:	461a      	mov	r2, r3
 8001736:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800173a:	f103 0308 	add.w	r3, r3, #8
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001750:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001754:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001758:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 800175c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001760:	461a      	mov	r2, r3
 8001762:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001766:	f103 0308 	add.w	r3, r3, #8
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001774:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001778:	f102 021c 	add.w	r2, r2, #28
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e026      	b.n	80017ce <main+0x896>
					  }
					  else
					  {
						  sec = big_mag[i];
 8001780:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001784:	461a      	mov	r2, r3
 8001786:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800178a:	f103 0308 	add.w	r3, r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a0:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017a4:	f103 0320 	add.w	r3, r3, #32
 80017a8:	edc3 7a00 	vstr	s15, [r3]
						  freq_2 = index[i];
 80017ac:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80017b0:	461a      	mov	r2, r3
 80017b2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017b6:	f103 0308 	add.w	r3, r3, #8
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80017c4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017c8:	f102 0218 	add.w	r2, r2, #24
 80017cc:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 80017ce:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017d2:	f103 0308 	add.w	r3, r3, #8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017de:	f102 0208 	add.w	r2, r2, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80017e8:	f103 0308 	add.w	r3, r3, #8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	f77f af54 	ble.w	800169c <main+0x764>
					  }
				  }
			  }
			  break;
 80017f4:	e0fc      	b.n	80019f0 <main+0xab8>
		  }
		  case 5 : case 6:
		  {
			  waveform_1 = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80017fc:	6013      	str	r3, [r2, #0]
			  waveform_2 = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	f507 5260 	add.w	r2, r7, #14336	@ 0x3800
 8001804:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001808:	6013      	str	r3, [r2, #0]
			  if(index[0] == index[1] / 2 && index[0] == index[2] / 3 &&index[0] == index[3] / 5)
 800180a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800180e:	f853 2c74 	ldr.w	r2, [r3, #-116]
 8001812:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001816:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800181a:	0fd9      	lsrs	r1, r3, #31
 800181c:	440b      	add	r3, r1
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	429a      	cmp	r2, r3
 8001822:	d131      	bne.n	8001888 <main+0x950>
 8001824:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001828:	f853 2c74 	ldr.w	r2, [r3, #-116]
 800182c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001830:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8001834:	4979      	ldr	r1, [pc, #484]	@ (8001a1c <main+0xae4>)
 8001836:	fb81 0103 	smull	r0, r1, r1, r3
 800183a:	17db      	asrs	r3, r3, #31
 800183c:	1acb      	subs	r3, r1, r3
 800183e:	429a      	cmp	r2, r3
 8001840:	d122      	bne.n	8001888 <main+0x950>
 8001842:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001846:	f853 2c74 	ldr.w	r2, [r3, #-116]
 800184a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800184e:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001852:	4973      	ldr	r1, [pc, #460]	@ (8001a20 <main+0xae8>)
 8001854:	fb81 0103 	smull	r0, r1, r1, r3
 8001858:	1049      	asrs	r1, r1, #1
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1acb      	subs	r3, r1, r3
 800185e:	429a      	cmp	r2, r3
 8001860:	d112      	bne.n	8001888 <main+0x950>
			  {
				  freq_1 = index[0];
 8001862:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001866:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800186a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800186e:	f102 021c 	add.w	r2, r2, #28
 8001872:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 8001874:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001878:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800187c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001880:	f102 0218 	add.w	r2, r2, #24
 8001884:	6013      	str	r3, [r2, #0]
				  break;
 8001886:	e0b3      	b.n	80019f0 <main+0xab8>
			  }
			  for(int i = 0;i < 6; ++i)
 8001888:	2300      	movs	r3, #0
 800188a:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 800188e:	f102 0204 	add.w	r2, r2, #4
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e0a3      	b.n	80019de <main+0xaa6>
			  {
				  if(big_mag[i] > sec)
 8001896:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800189a:	461a      	mov	r2, r3
 800189c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018a0:	f103 0304 	add.w	r3, r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018ba:	f103 0320 	add.w	r3, r3, #32
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d57d      	bpl.n	80019c8 <main+0xa90>
				  {
					  if(big_mag[i] > max)
 80018cc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80018d0:	461a      	mov	r2, r3
 80018d2:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018d6:	f103 0304 	add.w	r3, r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ec:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80018f0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	d53b      	bpl.n	800197a <main+0xa42>
					  {
						  sec = max;
 8001902:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001906:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001910:	f102 0220 	add.w	r2, r2, #32
 8001914:	6013      	str	r3, [r2, #0]
						  freq_2 = freq_1;
 8001916:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800191a:	f103 031c 	add.w	r3, r3, #28
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001924:	f102 0218 	add.w	r2, r2, #24
 8001928:	6013      	str	r3, [r2, #0]
						  max = big_mag[i];
 800192a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800192e:	461a      	mov	r2, r3
 8001930:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001934:	f103 0304 	add.w	r3, r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800194e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001952:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 8001956:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800195a:	461a      	mov	r2, r3
 800195c:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001960:	f103 0304 	add.w	r3, r3, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800196e:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 8001972:	f102 021c 	add.w	r2, r2, #28
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e026      	b.n	80019c8 <main+0xa90>
					  }
					  else
					  {
						  sec = big_mag[i];
 800197a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800197e:	461a      	mov	r2, r3
 8001980:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001984:	f103 0304 	add.w	r3, r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 800199e:	f103 0320 	add.w	r3, r3, #32
 80019a2:	edc3 7a00 	vstr	s15, [r3]
						  freq_2 = index[i];
 80019a6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019aa:	461a      	mov	r2, r3
 80019ac:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019b0:	f103 0304 	add.w	r3, r3, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80019be:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019c2:	f102 0218 	add.w	r2, r2, #24
 80019c6:	6013      	str	r3, [r2, #0]
			  for(int i = 0;i < 6; ++i)
 80019c8:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019cc:	f103 0304 	add.w	r3, r3, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	f507 5261 	add.w	r2, r7, #14400	@ 0x3840
 80019d8:	f102 0204 	add.w	r2, r2, #4
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019e2:	f103 0304 	add.w	r3, r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	f77f af54 	ble.w	8001896 <main+0x95e>
					  }
				  }
			  }
			  break;
 80019ee:	bf00      	nop
		  }
	  }
	  dds[0] = freq_1;
 80019f0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019f4:	461a      	mov	r2, r3
 80019f6:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 80019fa:	f103 031c 	add.w	r3, r3, #28
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f842 3c44 	str.w	r3, [r2, #-68]
	  dds[1] = freq_2;
 8001a04:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f507 5361 	add.w	r3, r7, #14400	@ 0x3840
 8001a0e:	f103 0318 	add.w	r3, r3, #24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f842 3c40 	str.w	r3, [r2, #-64]
  {
 8001a18:	f7ff bb25 	b.w	8001066 <main+0x12e>
 8001a1c:	55555556 	.word	0x55555556
 8001a20:	66666667 	.word	0x66666667

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	@ 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2238      	movs	r2, #56	@ 0x38
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00a fade 	bl	800bff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a4a:	f005 f97f 	bl	8006d4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8001a60:	2305      	movs	r3, #5
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a64:	233c      	movs	r3, #60	@ 0x3c
 8001a66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 fa1b 	bl	8006eb4 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a84:	f000 fc0c 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 fd19 	bl	80074d8 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001aac:	f000 fbf8 	bl	80022a0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <SystemClock_Config+0xa0>)
 8001ab8:	f005 fe4a 	bl	8007750 <HAL_RCC_MCOConfig>
}
 8001abc:	bf00      	nop
 8001abe:	3750      	adds	r7, #80	@ 0x50
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	00060400 	.word	0x00060400

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2220      	movs	r2, #32
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00a fa87 	bl	800bff4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ae6:	4b32      	ldr	r3, [pc, #200]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001ae8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001aec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aee:	4b30      	ldr	r3, [pc, #192]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afa:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b06:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b2e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b52:	4817      	ldr	r0, [pc, #92]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b54:	f002 f868 	bl	8003c28 <HAL_ADC_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001b5e:	f000 fb9f 	bl	80022a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4810      	ldr	r0, [pc, #64]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b6e:	f003 fa0d 	bl	8004f8c <HAL_ADCEx_MultiModeConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001b78:	f000 fb92 	bl	80022a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <MX_ADC1_Init+0xec>)
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b80:	2306      	movs	r3, #6
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b88:	237f      	movs	r3, #127	@ 0x7f
 8001b8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_ADC1_Init+0xe8>)
 8001b9a:	f002 fb4b 	bl	8004234 <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001ba4:	f000 fb7c 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	@ 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000084 	.word	0x20000084
 8001bb4:	04300002 	.word	0x04300002

08001bb8 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <MX_COMP3_Init+0x48>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bca:	2250      	movs	r2, #80	@ 0x50
 8001bcc:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bd6:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001bda:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <MX_COMP3_Init+0x44>)
 8001bea:	f003 fc27 	bl	800543c <HAL_COMP_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8001bf4:	f000 fb54 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000150 	.word	0x20000150
 8001c00:	40010208 	.word	0x40010208

08001c04 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c0a:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <MX_CRC_Init+0x54>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c1c:	f241 0221 	movw	r2, #4129	@ 0x1021
 8001c20:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c24:	2208      	movs	r2, #8
 8001c26:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_CRC_Init+0x50>)
 8001c42:	f003 fea5 	bl	8005990 <HAL_CRC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001c4c:	f000 fb28 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000174 	.word	0x20000174
 8001c58:	40023000 	.word	0x40023000

08001c5c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	@ 0x30
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c62:	463b      	mov	r3, r7
 8001c64:	2230      	movs	r2, #48	@ 0x30
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00a f9c3 	bl	800bff4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_DAC1_Init+0x6c>)
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <MX_DAC1_Init+0x70>)
 8001c72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c74:	4814      	ldr	r0, [pc, #80]	@ (8001cc8 <MX_DAC1_Init+0x6c>)
 8001c76:	f004 f891 	bl	8005d9c <HAL_DAC_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c80:	f000 fb0e 	bl	80022a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001c84:	2302      	movs	r3, #2
 8001c86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <MX_DAC1_Init+0x6c>)
 8001cb0:	f004 f896 	bl	8005de0 <HAL_DAC_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001cba:	f000 faf1 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	@ 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000198 	.word	0x20000198
 8001ccc:	50000800 	.word	0x50000800

08001cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <MX_I2C1_Init+0x78>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <MX_I2C1_Init+0x7c>)
 8001cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d0a:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001d0c:	f004 feec 	bl	8006ae8 <HAL_I2C_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d16:	f000 fac3 	bl	80022a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001d1e:	f004 ff7e 	bl	8006c1e <HAL_I2CEx_ConfigAnalogFilter>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d28:	f000 faba 	bl	80022a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_I2C1_Init+0x74>)
 8001d30:	f004 ffc0 	bl	8006cb4 <HAL_I2CEx_ConfigDigitalFilter>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d3a:	f000 fab1 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001ac 	.word	0x200001ac
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	10e32879 	.word	0x10e32879

08001d50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <MX_SPI3_Init+0x78>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d6e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d70:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d76:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d82:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d86:	2218      	movs	r2, #24
 8001d88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001d9e:	2207      	movs	r2, #7
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001daa:	2208      	movs	r2, #8
 8001dac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_SPI3_Init+0x74>)
 8001db0:	f006 f842 	bl	8007e38 <HAL_SPI_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 fa71 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000200 	.word	0x20000200
 8001dc8:	40003c00 	.word	0x40003c00

08001dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	@ 0x30
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0320 	add.w	r3, r7, #32
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df8:	4b30      	ldr	r3, [pc, #192]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001dfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e00:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e20:	4826      	ldr	r0, [pc, #152]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e22:	f006 fb8d 	bl	8008540 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001e2c:	f000 fa38 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e34:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481f      	ldr	r0, [pc, #124]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e3e:	f006 fd6b 	bl	8008918 <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001e48:	f000 fa2a 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e4c:	481b      	ldr	r0, [pc, #108]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e4e:	f006 fc66 	bl	800871e <HAL_TIM_IC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e58:	f000 fa22 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4814      	ldr	r0, [pc, #80]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e6c:	f007 f8e4 	bl	8009038 <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001e76:	f000 fa13 	bl	80022a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480a      	ldr	r0, [pc, #40]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001e92:	f006 fca5 	bl	80087e0 <HAL_TIM_IC_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001e9c:	f000 fa00 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_TIM2_Init+0xf0>)
 8001ea6:	f007 f95d 	bl	8009164 <HAL_TIMEx_TISelection>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001eb0:	f000 f9f6 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3730      	adds	r7, #48	@ 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000264 	.word	0x20000264

08001ec0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <MX_TIM3_Init+0x98>)
 8001ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f04:	4813      	ldr	r0, [pc, #76]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001f06:	f006 fb1b 	bl	8008540 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f10:	f000 f9c6 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001f22:	f006 fcf9 	bl	8008918 <HAL_TIM_ConfigClockSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f2c:	f000 f9b8 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_TIM3_Init+0x94>)
 8001f3e:	f007 f87b 	bl	8009038 <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f48:	f000 f9aa 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200002b0 	.word	0x200002b0
 8001f58:	40000400 	.word	0x40000400

08001f5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f6e:	4a15      	ldr	r2, [pc, #84]	@ (8001fc4 <MX_TIM6_Init+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001f72:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f80:	2295      	movs	r2, #149	@ 0x95
 8001f82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f8a:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001f8c:	f006 fad8 	bl	8008540 <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f96:	f000 f983 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <MX_TIM6_Init+0x64>)
 8001fa8:	f007 f846 	bl	8009038 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001fb2:	f000 f975 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002fc 	.word	0x200002fc
 8001fc4:	40001000 	.word	0x40001000

08001fc8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <MX_TIM7_Init+0x64>)
 8001fda:	4a15      	ldr	r2, [pc, #84]	@ (8002030 <MX_TIM7_Init+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <MX_TIM7_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <MX_TIM7_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_TIM7_Init+0x64>)
 8001fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_TIM7_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <MX_TIM7_Init+0x64>)
 8001ffa:	f006 faa1 	bl	8008540 <HAL_TIM_Base_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002004:	f000 f94c 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_TIM7_Init+0x64>)
 8002016:	f007 f80f 	bl	8009038 <HAL_TIMEx_MasterConfigSynchronization>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002020:	f000 f93e 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000348 	.word	0x20000348
 8002030:	40001400 	.word	0x40001400

08002034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <MX_USART2_UART_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 800207e:	f007 f8ff 	bl	8009280 <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002088:	f000 f90a 	bl	80022a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 8002090:	f008 fc40 	bl	800a914 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800209a:	f000 f901 	bl	80022a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 80020a2:	f008 fc75 	bl	800a990 <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f000 f8f8 	bl	80022a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <MX_USART2_UART_Init+0x90>)
 80020b2:	f008 fbf6 	bl	800a8a2 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f000 f8f0 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200003f4 	.word	0x200003f4
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <MX_DMA_Init+0x88>)
 80020d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002154 <MX_DMA_Init+0x88>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80020de:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <MX_DMA_Init+0x88>)
 80020e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002154 <MX_DMA_Init+0x88>)
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	4a19      	ldr	r2, [pc, #100]	@ (8002154 <MX_DMA_Init+0x88>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <MX_DMA_Init+0x88>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <MX_DMA_Init+0x88>)
 8002104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002106:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <MX_DMA_Init+0x88>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6493      	str	r3, [r2, #72]	@ 0x48
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_DMA_Init+0x88>)
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	200b      	movs	r0, #11
 8002120:	f003 fc01 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002124:	200b      	movs	r0, #11
 8002126:	f003 fc18 	bl	800595a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	200c      	movs	r0, #12
 8002130:	f003 fbf9 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002134:	200c      	movs	r0, #12
 8002136:	f003 fc10 	bl	800595a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2063      	movs	r0, #99	@ 0x63
 8002140:	f003 fbf1 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8002144:	2063      	movs	r0, #99	@ 0x63
 8002146:	f003 fc08 	bl	800595a <HAL_NVIC_EnableIRQ>

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800216e:	4b48      	ldr	r3, [pc, #288]	@ (8002290 <MX_GPIO_Init+0x138>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a47      	ldr	r2, [pc, #284]	@ (8002290 <MX_GPIO_Init+0x138>)
 8002174:	f043 0320 	orr.w	r3, r3, #32
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b45      	ldr	r3, [pc, #276]	@ (8002290 <MX_GPIO_Init+0x138>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002186:	4b42      	ldr	r3, [pc, #264]	@ (8002290 <MX_GPIO_Init+0x138>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a41      	ldr	r2, [pc, #260]	@ (8002290 <MX_GPIO_Init+0x138>)
 800218c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <MX_GPIO_Init+0x138>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	4b3c      	ldr	r3, [pc, #240]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021aa:	4b39      	ldr	r3, [pc, #228]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b36      	ldr	r3, [pc, #216]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	4a35      	ldr	r2, [pc, #212]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c2:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <MX_GPIO_Init+0x138>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2101      	movs	r1, #1
 80021ea:	482a      	ldr	r0, [pc, #168]	@ (8002294 <MX_GPIO_Init+0x13c>)
 80021ec:	f004 fc64 	bl	8006ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fa:	f004 fc5d 	bl	8006ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIPO_CS_Pin|XDAC_CS_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002204:	4824      	ldr	r0, [pc, #144]	@ (8002298 <MX_GPIO_Init+0x140>)
 8002206:	f004 fc57 	bl	8006ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800220a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	481d      	ldr	r0, [pc, #116]	@ (800229c <MX_GPIO_Init+0x144>)
 8002228:	f004 fac4 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : con_Pin */
  GPIO_InitStruct.Pin = con_Pin;
 800222c:	2301      	movs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4814      	ldr	r0, [pc, #80]	@ (8002294 <MX_GPIO_Init+0x13c>)
 8002244:	f004 fab6 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800224c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002264:	f004 faa6 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8002268:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_GPIO_Init+0x140>)
 8002282:	f004 fa97 	bl	80067b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	@ 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	48000800 	.word	0x48000800
 8002298:	48000400 	.word	0x48000400
 800229c:	48001800 	.word	0x48001800

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <Error_Handler+0x8>

080022ac <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01b      	beq.n	80022fe <make_8to16+0x52>
		return 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e01f      	b.n	800230a <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	3301      	adds	r3, #1
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	440b      	add	r3, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b219      	sxth	r1, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	b28a      	uxth	r2, r1
 80022f6:	801a      	strh	r2, [r3, #0]
		++i;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	085a      	lsrs	r2, r3, #1
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8e0      	bhi.n	80022ca <make_8to16+0x1e>
	}
	return new_buffer;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 f962 	bl	80085f0 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f001 fe35 	bl	8003fa0 <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <samp+0x38>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <samp+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d000      	beq.n	8002346 <samp+0x2e>
 8002344:	e7fa      	b.n	800233c <samp+0x24>
    		break;
 8002346:	bf00      	nop
    }
    return;
 8002348:	bf00      	nop
}
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20001cec 	.word	0x20001cec

08002354 <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <set_sm_freq+0x38>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
	if (set <38)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b25      	cmp	r3, #37	@ 0x25
 8002370:	d801      	bhi.n	8002376 <set_sm_freq+0x22>
		set = 38;
 8002372:	2326      	movs	r3, #38	@ 0x26
 8002374:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e011      	b.n	80023c4 <int_to_float+0x34>
		fft_in[i] = buffer[i];
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	8819      	ldrh	r1, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	ee07 1a90 	vmov	s15, r1
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ca:	d1e9      	bne.n	80023a0 <int_to_float+0x10>
	}
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08a      	sub	sp, #40	@ 0x28
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f008 fbb0 	bl	800ab50 <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 80023f0:	f107 0010 	add.w	r0, r7, #16
 80023f4:	2300      	movs	r3, #0
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	f008 fc77 	bl	800acec <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 80023fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	68b8      	ldr	r0, [r7, #8]
 8002406:	f009 f84f 	bl	800b4a8 <arm_cmplx_mag_f32>
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	@ 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6613      	str	r3, [r2, #96]	@ 0x60
 8002426:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <HAL_MspInit+0x44>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x44>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x44>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800244a:	f004 fd23 	bl	8006e94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b09e      	sub	sp, #120	@ 0x78
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	2254      	movs	r2, #84	@ 0x54
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f009 fdb9 	bl	800bff4 <memset>
  if(hadc->Instance==ADC1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248a:	d15f      	bne.n	800254c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800248c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002490:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002492:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002496:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f005 fa7d 	bl	800799c <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80024a8:	f7ff fefa 	bl	80022a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b0:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b8:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d0:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <HAL_ADC_MspInit+0xf8>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024dc:	2301      	movs	r3, #1
 80024de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e0:	2303      	movs	r3, #3
 80024e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f2:	f004 f95f 	bl	80067b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <HAL_ADC_MspInit+0x100>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 80024fe:	2205      	movs	r2, #5
 8002500:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002510:	2280      	movs	r2, #128	@ 0x80
 8002512:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800251a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800251c:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 800251e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002522:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002530:	4809      	ldr	r0, [pc, #36]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002532:	f003 fe0d 	bl	8006150 <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800253c:	f7ff feb0 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_ADC_MspInit+0xfc>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800254c:	bf00      	nop
 800254e:	3778      	adds	r7, #120	@ 0x78
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	200000f0 	.word	0x200000f0
 800255c:	40020008 	.word	0x40020008

08002560 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_COMP_MspInit+0x94>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d134      	bne.n	80025ec <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	4a16      	ldr	r2, [pc, #88]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a6:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_COMP_MspInit+0x98>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025b2:	2304      	movs	r3, #4
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 80025c2:	2303      	movs	r3, #3
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	480b      	ldr	r0, [pc, #44]	@ (80025fc <HAL_COMP_MspInit+0x9c>)
 80025ce:	f004 f8f1 	bl	80067b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025d2:	2301      	movs	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d6:	2303      	movs	r3, #3
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e8:	f004 f8e4 	bl	80067b4 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	@ 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40010208 	.word	0x40010208
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000800 	.word	0x48000800

08002600 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_CRC_MspInit+0x38>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10b      	bne.n	800262a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_CRC_MspInit+0x3c>)
 8002614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_CRC_MspInit+0x3c>)
 8002618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800261c:	6493      	str	r3, [r2, #72]	@ 0x48
 800261e:	4b07      	ldr	r3, [pc, #28]	@ (800263c <HAL_CRC_MspInit+0x3c>)
 8002620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023000 	.word	0x40023000
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_DAC_MspInit+0x38>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10b      	bne.n	800266a <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_DAC_MspInit+0x3c>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	4a09      	ldr	r2, [pc, #36]	@ (800267c <HAL_DAC_MspInit+0x3c>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <HAL_DAC_MspInit+0x3c>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	50000800 	.word	0x50000800
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0a0      	sub	sp, #128	@ 0x80
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	2254      	movs	r2, #84	@ 0x54
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f009 fca7 	bl	800bff4 <memset>
  if(hi2c->Instance==I2C1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002760 <HAL_I2C_MspInit+0xe0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d153      	bne.n	8002758 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026b0:	2340      	movs	r3, #64	@ 0x40
 80026b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 f96d 	bl	800799c <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026c8:	f7ff fdea 	bl	80022a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	4b25      	ldr	r3, [pc, #148]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d8:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002700:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002702:	2312      	movs	r3, #18
 8002704:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800270e:	2304      	movs	r3, #4
 8002710:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271c:	f004 f84a 	bl	80067b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002724:	2312      	movs	r3, #18
 8002726:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002730:	2304      	movs	r3, #4
 8002732:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002738:	4619      	mov	r1, r3
 800273a:	480b      	ldr	r0, [pc, #44]	@ (8002768 <HAL_I2C_MspInit+0xe8>)
 800273c:	f004 f83a 	bl	80067b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 8002746:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_I2C_MspInit+0xe4>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002758:	bf00      	nop
 800275a:	3780      	adds	r7, #128	@ 0x80
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40005400 	.word	0x40005400
 8002764:	40021000 	.word	0x40021000
 8002768:	48000400 	.word	0x48000400

0800276c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_SPI_MspInit+0x7c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d128      	bne.n	80027e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800278e:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4a16      	ldr	r2, [pc, #88]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 8002794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <HAL_SPI_MspInit+0x80>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80027be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027d0:	2306      	movs	r3, #6
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <HAL_SPI_MspInit+0x84>)
 80027dc:	f003 ffea 	bl	80067b4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	@ 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40003c00 	.word	0x40003c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	48000800 	.word	0x48000800

080027f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002804:	d138      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002806:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	4a38      	ldr	r2, [pc, #224]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6593      	str	r3, [r2, #88]	@ 0x58
 8002812:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 800281e:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002820:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_TIM_Base_MspInit+0x100>)
 8002822:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002824:	4b32      	ldr	r3, [pc, #200]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002826:	2238      	movs	r2, #56	@ 0x38
 8002828:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002830:	4b2f      	ldr	r3, [pc, #188]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002836:	4b2e      	ldr	r3, [pc, #184]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800283c:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002846:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800284a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800284c:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002858:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800285a:	4825      	ldr	r0, [pc, #148]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 800285c:	f003 fc78 	bl	8006150 <HAL_DMA_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8002866:	f7ff fd1b 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a20      	ldr	r2, [pc, #128]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002870:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_TIM_Base_MspInit+0xfc>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002876:	e034      	b.n	80028e2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <HAL_TIM_Base_MspInit+0x104>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10c      	bne.n	800289c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6593      	str	r3, [r2, #88]	@ 0x58
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
}
 800289a:	e022      	b.n	80028e2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <HAL_TIM_Base_MspInit+0x108>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10c      	bne.n	80028c0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028a6:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
}
 80028be:	e010      	b.n	80028e2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <HAL_TIM_Base_MspInit+0x10c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	4a07      	ldr	r2, [pc, #28]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d6:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_TIM_Base_MspInit+0xf8>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	20000394 	.word	0x20000394
 80028f4:	4002001c 	.word	0x4002001c
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40001000 	.word	0x40001000
 8002900:	40001400 	.word	0x40001400

08002904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09e      	sub	sp, #120	@ 0x78
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	2254      	movs	r2, #84	@ 0x54
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f009 fb65 	bl	800bff4 <memset>
  if(huart->Instance==USART2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <HAL_UART_MspInit+0x108>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d167      	bne.n	8002a04 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002934:	2302      	movs	r3, #2
 8002936:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002938:	2304      	movs	r3, #4
 800293a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	4618      	mov	r0, r3
 8002942:	f005 f82b 	bl	800799c <HAL_RCCEx_PeriphCLKConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800294c:	f7ff fca8 	bl	80022a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002950:	4b2f      	ldr	r3, [pc, #188]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 8002956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295a:	6593      	str	r3, [r2, #88]	@ 0x58
 800295c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002968:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296c:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_UART_MspInit+0x10c>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002980:	2318      	movs	r3, #24
 8002982:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002990:	2307      	movs	r3, #7
 8002992:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002998:	4619      	mov	r1, r3
 800299a:	481e      	ldr	r0, [pc, #120]	@ (8002a14 <HAL_UART_MspInit+0x110>)
 800299c:	f003 ff0a 	bl	80067b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_UART_MspInit+0x118>)
 80029a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029a8:	221a      	movs	r2, #26
 80029aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b2:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c4:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029d6:	4810      	ldr	r0, [pc, #64]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029d8:	f003 fbba 	bl	8006150 <HAL_DMA_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80029e2:	f7ff fc5d 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_UART_MspInit+0x114>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	210e      	movs	r1, #14
 80029f8:	2026      	movs	r0, #38	@ 0x26
 80029fa:	f002 ff94 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029fe:	2026      	movs	r0, #38	@ 0x26
 8002a00:	f002 ffab 	bl	800595a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a04:	bf00      	nop
 8002a06:	3778      	adds	r7, #120	@ 0x78
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40021000 	.word	0x40021000
 8002a14:	48000400 	.word	0x48000400
 8002a18:	20000488 	.word	0x20000488
 8002a1c:	40020494 	.word	0x40020494

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <NMI_Handler+0x4>

08002a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <MemManage_Handler+0x4>

08002a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a76:	f000 fe4d 	bl	8003714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <DMA1_Channel1_IRQHandler+0x10>)
 8002a86:	f003 fd46 	bl	8006516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200000f0 	.word	0x200000f0

08002a94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <DMA1_Channel2_IRQHandler+0x10>)
 8002a9a:	f003 fd3c 	bl	8006516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000394 	.word	0x20000394

08002aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <USART2_IRQHandler+0x10>)
 8002aae:	f006 fc37 	bl	8009320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003f4 	.word	0x200003f4

08002abc <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <DMA2_Channel8_IRQHandler+0x10>)
 8002ac2:	f003 fd28 	bl	8006516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000488 	.word	0x20000488

08002ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return 1;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_kill>:

int _kill(int pid, int sig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aea:	f009 fadf 	bl	800c0ac <__errno>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2216      	movs	r2, #22
 8002af2:	601a      	str	r2, [r3, #0]
  return -1;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_exit>:

void _exit (int status)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ffe7 	bl	8002ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <_exit+0x12>
	...

08002b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <_sbrk+0x5c>)
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <_sbrk+0x60>)
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b48:	f009 fab0 	bl	800c0ac <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20020000 	.word	0x20020000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	20001cf0 	.word	0x20001cf0
 8002b80:	20002068 	.word	0x20002068

08002b84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <SystemInit+0x20>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <SystemInit+0x20>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	701a      	strb	r2, [r3, #0]
      }
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f805 	bl	8002be4 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
    }
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f940 	bl	8002e9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f91e 	bl	8002e74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ffeb 	bl	8002c28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b090      	sub	sp, #64	@ 0x40
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	dc02      	bgt.n	8002c76 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	e0aa      	b.n	8002dcc <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b55      	cmp	r3, #85	@ 0x55
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <_ZL12uart_managerPhS_+0x36>
    return -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	e09c      	b.n	8002dcc <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2ba5      	cmp	r3, #165	@ 0xa5
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <_ZL12uart_managerPhS_+0x52>
    return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e08e      	b.n	8002dcc <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cc4:	4413      	add	r3, r2
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	3302      	adds	r3, #2
 8002cd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	dc02      	bgt.n	8002cdc <_ZL12uart_managerPhS_+0x80>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	dc02      	bgt.n	8002ce2 <_ZL12uart_managerPhS_+0x86>
    return -1;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce0:	e074      	b.n	8002dcc <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cee:	3301      	adds	r3, #1
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	440b      	add	r3, r1
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4834      	ldr	r0, [pc, #208]	@ (8002dd4 <_ZL12uart_managerPhS_+0x178>)
 8002d04:	f002 fea8 	bl	8005a58 <HAL_CRC_Calculate>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d002      	beq.n	8002d1a <_ZL12uart_managerPhS_+0xbe>
    return -1;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	e058      	b.n	8002dcc <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	603b      	str	r3, [r7, #0]
  auto p = begin;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 8002d26:	e006      	b.n	8002d36 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8002d2e:	d007      	beq.n	8002d40 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 8002d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d32:	3301      	adds	r3, #1
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d1f4      	bne.n	8002d28 <_ZL12uart_managerPhS_+0xcc>
 8002d3e:	e000      	b.n	8002d42 <_ZL12uart_managerPhS_+0xe6>
      break;
 8002d40:	bf00      	nop
  }

  if (p != end)
 8002d42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d03e      	beq.n	8002dc8 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 8002d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f008 ffeb 	bl	800bd2a <_ZNSaIcEC1Ev>
 8002d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d58:	f107 0010 	add.w	r0, r7, #16
 8002d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	f000 f8be 	bl	8002ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8002d64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 ffdf 	bl	800bd2c <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	4619      	mov	r1, r3
 8002d74:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <_ZL12uart_managerPhS_+0x17c>)
 8002d76:	f000 f8d8 	bl	8002f2a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 8002d7e:	4816      	ldr	r0, [pc, #88]	@ (8002dd8 <_ZL12uart_managerPhS_+0x17c>)
 8002d80:	f000 f8e2 	bl	8002f48 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8002d84:	4603      	mov	r3, r0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d88:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f8e5 	bl	8002f62 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da0:	3301      	adds	r3, #1
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f8ee 	bl	8002f8a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002db6:	1a8a      	subs	r2, r1, r2
 8002db8:	4611      	mov	r1, r2
 8002dba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dbc:	4798      	blx	r3
    }
  }
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f008 ffff 	bl	800bdc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	3306      	adds	r3, #6
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3740      	adds	r7, #64	@ 0x40
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000174 	.word	0x20000174
 8002dd8:	20001efc 	.word	0x20001efc

08002ddc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_UARTEx_RxEventCallback+0x58>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11b      	bne.n	8002e2a <HAL_UARTEx_RxEventCallback+0x4e>
    return;

  auto end = rx_buf + Size;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002df6:	4413      	add	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00b      	b.n	8002e18 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 8002e00:	6939      	ldr	r1, [r7, #16]
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff2a 	bl	8002c5c <_ZL12uart_managerPhS_>
 8002e08:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db08      	blt.n	8002e22 <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3ef      	bcc.n	8002e00 <HAL_UARTEx_RxEventCallback+0x24>
 8002e20:	e000      	b.n	8002e24 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 8002e22:	bf00      	nop
  }

  uart_receive_start();
 8002e24:	f000 f80a 	bl	8002e3c <_ZL18uart_receive_startv>
 8002e28:	e000      	b.n	8002e2c <HAL_UARTEx_RxEventCallback+0x50>
    return;
 8002e2a:	bf00      	nop
}
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000008 	.word	0x20000008
 8002e38:	20001cf4 	.word	0x20001cf4

08002e3c <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <_ZL18uart_receive_startv+0x2c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8002e48:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <_ZL18uart_receive_startv+0x30>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 fdde 	bl	800aa0c <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <_ZL18uart_receive_startv+0x34>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <_ZL18uart_receive_startv+0x34>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000008 	.word	0x20000008
 8002e6c:	20001cf4 	.word	0x20001cf4
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f892 	bl	8002fa6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f89a 	bl	8002fbe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe99 	bl	8002bc6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f894 	bl	8002fd4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8b3 	bl	800302a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f88e 	bl	8002fea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe9d 	bl	8002c10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8002eee:	68fc      	ldr	r4, [r7, #12]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f008 ff2b 	bl	800bd4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4620      	mov	r0, r4
 8002efe:	f008 ff76 	bl	800bdee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 8002f08:	68bc      	ldr	r4, [r7, #8]
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f8ba 	bl	8003088 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8002f14:	462b      	mov	r3, r5
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4621      	mov	r1, r4
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8e0 	bl	80030e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdb0      	pop	{r4, r5, r7, pc}

08002f2a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f917 	bl	800316c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f946 	bl	80031e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f935 	bl	8003206 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f937 	bl	8003222 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
      { }
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8002ff4:	e011      	b.n	800301a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f000 f91e 	bl	8003238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff fff2 	bl	8002fea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f000 f922 	bl	8003250 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 800300c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f929 	bl	8003268 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ea      	bne.n	8002ff6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f929 	bl	800328a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 8003038:	4603      	mov	r3, r0
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68b8      	ldr	r0, [r7, #8]
 800307a:	f000 f912 	bl	80032a2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800307e:	4603      	mov	r3, r0
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003090:	bf00      	nop
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f008 fe6d 	bl	800bdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	68b8      	ldr	r0, [r7, #8]
 80030f2:	f000 f8f5 	bl	80032e0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80030f6:	4603      	mov	r3, r0
 80030f8:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d911      	bls.n	8003124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8003100:	f107 0318 	add.w	r3, r7, #24
 8003104:	2200      	movs	r2, #0
 8003106:	4619      	mov	r1, r3
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f008 fe2f 	bl	800bd6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f008 fe16 	bl	800bd44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f008 fe17 	bl	800bd50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8003122:	e005      	b.n	8003130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8003128:	69f8      	ldr	r0, [r7, #28]
 800312a:	f008 fe0f 	bl	800bd4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800312e:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ffb1 	bl	800309e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f008 fe03 	bl	800bd48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003142:	4603      	mov	r3, r0
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f8dd 	bl	8003308 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f008 fdfc 	bl	800bd54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ffab 	bl	80030bc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff57 	bl	800302a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 800317c:	4604      	mov	r4, r0
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8e1 	bl	8003346 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8003184:	4602      	mov	r2, r0
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	4621      	mov	r1, r4
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8e7 	bl	800335e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8003190:	4603      	mov	r3, r0
 8003192:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f825 	bl	80031e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 800319a:	4603      	mov	r3, r0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	f107 020c 	add.w	r2, r7, #12
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff4a 	bl	8003042 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 80031ae:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80031b4:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80031b6:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f901 	bl	80033c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ff50 	bl	800306a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f807 	bl	80031e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 80031d6:	4603      	mov	r3, r0
 80031d8:	e000      	b.n	80031dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 80031da:	68bb      	ldr	r3, [r7, #8]
    }
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f863 	bl	80032c2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3310      	adds	r3, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f8e0 	bl	80033d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8003218:	4603      	mov	r3, r0
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8bb 	bl	80033f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8cc 	bl	800341a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f008 fd8f 	bl	800bdd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80032b4:	4603      	mov	r3, r0
 80032b6:	0fdb      	lsrs	r3, r3, #31
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80032ea:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff feca 	bl	8003088 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80032f4:	462a      	mov	r2, r5
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 f8b3 	bl	8003464 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80032fe:	4603      	mov	r3, r0
    }
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bdb0      	pop	{r4, r5, r7, pc}

08003308 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8003314:	e00e      	b.n	8003334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	75fb      	strb	r3, [r7, #23]
 800331c:	f107 0317 	add.w	r3, r7, #23
 8003320:	4619      	mov	r1, r3
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fc40 	bl	8002ba8 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3301      	adds	r3, #1
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3301      	adds	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d1ec      	bne.n	8003316 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800335e:	b590      	push	{r4, r7, lr}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800336c:	e01a      	b.n	80033a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800336e:	68fc      	ldr	r4, [r7, #12]
 8003370:	68b8      	ldr	r0, [r7, #8]
 8003372:	f000 f864 	bl	800343e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8003376:	4603      	mov	r3, r0
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff fe74 	bl	800306a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8003382:	4603      	mov	r3, r0
 8003384:	f083 0301 	eor.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	68b8      	ldr	r0, [r7, #8]
 8003394:	f7ff ff5c 	bl	8003250 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003398:	60b8      	str	r0, [r7, #8]
 800339a:	e003      	b.n	80033a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 800339c:	68b8      	ldr	r0, [r7, #8]
 800339e:	f7ff ff4b 	bl	8003238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80033a2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e1      	bne.n	800336e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff86 	bl	80032c2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80033b6:	697b      	ldr	r3, [r7, #20]
    }
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f838 	bl	800343e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f84e 	bl	8003482 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f84c 	bl	8003498 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8003400:	4604      	mov	r4, r0
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f7ff feff 	bl	8003206 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8003408:	4603      	mov	r3, r0
 800340a:	4619      	mov	r1, r3
 800340c:	4620      	mov	r0, r4
 800340e:	f000 f84e 	bl	80034ae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}

0800341a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f837 	bl	8003498 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 800342a:	4603      	mov	r3, r0
 800342c:	2201      	movs	r2, #1
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f849 	bl	80034c8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f84d 	bl	80034e6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800344c:	4602      	mov	r2, r0
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f854 	bl	8003502 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 800345a:	4603      	mov	r3, r0
      }
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f83a 	bl	8003534 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f837 	bl	800354c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3310      	adds	r3, #16
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f83c 	bl	8003570 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	f008 fc4e 	bl	800bdc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800353e:	6838      	ldr	r0, [r7, #0]
 8003540:	f7ff ffeb 	bl	800351a <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	222c      	movs	r2, #44	@ 0x2c
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	4619      	mov	r1, r3
 8003562:	68b8      	ldr	r0, [r7, #8]
 8003564:	f008 fbce 	bl	800bd04 <_ZdlPvj>
      }
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f805 	bl	8003588 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 800357e:	4603      	mov	r3, r0
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fc84 	bl	8002eb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d102      	bne.n	80035d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 80035d2:	4809      	ldr	r0, [pc, #36]	@ (80035f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80035d4:	f7ff fb35 	bl	8002c42 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80035e8:	4803      	ldr	r0, [pc, #12]	@ (80035f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80035ea:	f7ff ffd8 	bl	800359e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20001efc 	.word	0x20001efc

080035fc <_GLOBAL__sub_I_huart_reg>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
 8003600:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003604:	2001      	movs	r0, #1
 8003606:	f7ff ffd7 	bl	80035b8 <_Z41__static_initialization_and_destruction_0ii>
 800360a:	bd80      	pop	{r7, pc}

0800360c <_GLOBAL__sub_D_huart_reg>:
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
 8003610:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff ffcf 	bl	80035b8 <_Z41__static_initialization_and_destruction_0ii>
 800361a:	bd80      	pop	{r7, pc}

0800361c <Reset_Handler>:
 800361c:	480d      	ldr	r0, [pc, #52]	@ (8003654 <LoopForever+0x2>)
 800361e:	4685      	mov	sp, r0
 8003620:	f7ff fab0 	bl	8002b84 <SystemInit>
 8003624:	480c      	ldr	r0, [pc, #48]	@ (8003658 <LoopForever+0x6>)
 8003626:	490d      	ldr	r1, [pc, #52]	@ (800365c <LoopForever+0xa>)
 8003628:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <LoopForever+0xe>)
 800362a:	2300      	movs	r3, #0
 800362c:	e002      	b.n	8003634 <LoopCopyDataInit>

0800362e <CopyDataInit>:
 800362e:	58d4      	ldr	r4, [r2, r3]
 8003630:	50c4      	str	r4, [r0, r3]
 8003632:	3304      	adds	r3, #4

08003634 <LoopCopyDataInit>:
 8003634:	18c4      	adds	r4, r0, r3
 8003636:	428c      	cmp	r4, r1
 8003638:	d3f9      	bcc.n	800362e <CopyDataInit>
 800363a:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <LoopForever+0x12>)
 800363c:	4c0a      	ldr	r4, [pc, #40]	@ (8003668 <LoopForever+0x16>)
 800363e:	2300      	movs	r3, #0
 8003640:	e001      	b.n	8003646 <LoopFillZerobss>

08003642 <FillZerobss>:
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	3204      	adds	r2, #4

08003646 <LoopFillZerobss>:
 8003646:	42a2      	cmp	r2, r4
 8003648:	d3fb      	bcc.n	8003642 <FillZerobss>
 800364a:	f008 fd35 	bl	800c0b8 <__libc_init_array>
 800364e:	f7fd fc73 	bl	8000f38 <main>

08003652 <LoopForever>:
 8003652:	e7fe      	b.n	8003652 <LoopForever>
 8003654:	20020000 	.word	0x20020000
 8003658:	20000000 	.word	0x20000000
 800365c:	20000068 	.word	0x20000068
 8003660:	0800edac 	.word	0x0800edac
 8003664:	20000068 	.word	0x20000068
 8003668:	20002064 	.word	0x20002064

0800366c <ADC1_2_IRQHandler>:
 800366c:	e7fe      	b.n	800366c <ADC1_2_IRQHandler>

0800366e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003678:	2003      	movs	r0, #3
 800367a:	f002 f949 	bl	8005910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800367e:	200f      	movs	r0, #15
 8003680:	f000 f80e 	bl	80036a0 <HAL_InitTick>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	71fb      	strb	r3, [r7, #7]
 800368e:	e001      	b.n	8003694 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003690:	f7fe fec0 	bl	8002414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003694:	79fb      	ldrb	r3, [r7, #7]

}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036ac:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <HAL_InitTick+0x68>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d022      	beq.n	80036fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036b4:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_InitTick+0x6c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <HAL_InitTick+0x68>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 f954 	bl	8005976 <HAL_SYSTICK_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10f      	bne.n	80036f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	d809      	bhi.n	80036ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036da:	2200      	movs	r2, #0
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	f002 f920 	bl	8005926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003710 <HAL_InitTick+0x70>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e007      	b.n	80036fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e004      	b.n	80036fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e001      	b.n	80036fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000014 	.word	0x20000014
 800370c:	20000004 	.word	0x20000004
 8003710:	20000010 	.word	0x20000010

08003714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_IncTick+0x1c>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_IncTick+0x20>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4413      	add	r3, r2
 8003722:	4a03      	ldr	r2, [pc, #12]	@ (8003730 <HAL_IncTick+0x1c>)
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20001f14 	.word	0x20001f14
 8003734:	20000014 	.word	0x20000014

08003738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return uwTick;
 800373c:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_GetTick+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20001f14 	.word	0x20001f14

08003750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3360      	adds	r3, #96	@ 0x60
 80037ca:	461a      	mov	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <LL_ADC_SetOffset+0x44>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	03fff000 	.word	0x03fff000

08003800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3360      	adds	r3, #96	@ 0x60
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3360      	adds	r3, #96	@ 0x60
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003862:	b480      	push	{r7}
 8003864:	b087      	sub	sp, #28
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3360      	adds	r3, #96	@ 0x60
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	431a      	orrs	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3360      	adds	r3, #96	@ 0x60
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	615a      	str	r2, [r3, #20]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3330      	adds	r3, #48	@ 0x30
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	4413      	add	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	211f      	movs	r1, #31
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 011f 	and.w	r1, r3, #31
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003972:	b480      	push	{r7}
 8003974:	b087      	sub	sp, #28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3314      	adds	r3, #20
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0e5b      	lsrs	r3, r3, #25
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0d1b      	lsrs	r3, r3, #20
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2107      	movs	r1, #7
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	401a      	ands	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0d1b      	lsrs	r3, r3, #20
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	431a      	orrs	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0318 	and.w	r3, r3, #24
 80039ea:	4908      	ldr	r1, [pc, #32]	@ (8003a0c <LL_ADC_SetChannelSingleDiff+0x44>)
 80039ec:	40d9      	lsrs	r1, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	400b      	ands	r3, r1
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	0007ffff 	.word	0x0007ffff

08003a10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6093      	str	r3, [r2, #8]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab4:	d101      	bne.n	8003aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <LL_ADC_IsEnabled+0x18>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <LL_ADC_IsEnabled+0x1a>
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d101      	bne.n	8003b56 <LL_ADC_IsDisableOngoing+0x18>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <LL_ADC_IsDisableOngoing+0x1a>
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b78:	f043 0204 	orr.w	r2, r3, #4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba0:	f043 0210 	orr.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d101      	bne.n	8003bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d101      	bne.n	8003c1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	@ 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1a9      	b.n	8003f96 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fe fc03 	bl	800245c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fef1 	bl	8003a50 <LL_ADC_IsDeepPowerDownEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fed7 	bl	8003a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff0c 	bl	8003aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d115      	bne.n	8003cba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fef0 	bl	8003a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c98:	4b9c      	ldr	r3, [pc, #624]	@ (8003f0c <HAL_ADC_Init+0x2e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	4a9c      	ldr	r2, [pc, #624]	@ (8003f10 <HAL_ADC_Init+0x2e8>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cac:	e002      	b.n	8003cb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f9      	bne.n	8003cae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff feee 	bl	8003aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff62 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8003cf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 8142 	bne.w	8003f84 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 813e 	bne.w	8003f84 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d10:	f043 0202 	orr.w	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fefb 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d141      	bne.n	8003dac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d30:	d004      	beq.n	8003d3c <HAL_ADC_Init+0x114>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a77      	ldr	r2, [pc, #476]	@ (8003f14 <HAL_ADC_Init+0x2ec>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10f      	bne.n	8003d5c <HAL_ADC_Init+0x134>
 8003d3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d40:	f7ff feea 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d44:	4604      	mov	r4, r0
 8003d46:	4873      	ldr	r0, [pc, #460]	@ (8003f14 <HAL_ADC_Init+0x2ec>)
 8003d48:	f7ff fee6 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4323      	orrs	r3, r4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e012      	b.n	8003d82 <HAL_ADC_Init+0x15a>
 8003d5c:	486e      	ldr	r0, [pc, #440]	@ (8003f18 <HAL_ADC_Init+0x2f0>)
 8003d5e:	f7ff fedb 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d62:	4604      	mov	r4, r0
 8003d64:	486d      	ldr	r0, [pc, #436]	@ (8003f1c <HAL_ADC_Init+0x2f4>)
 8003d66:	f7ff fed7 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	431c      	orrs	r4, r3
 8003d6e:	486c      	ldr	r0, [pc, #432]	@ (8003f20 <HAL_ADC_Init+0x2f8>)
 8003d70:	f7ff fed2 	bl	8003b18 <LL_ADC_IsEnabled>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4323      	orrs	r3, r4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d012      	beq.n	8003dac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d8e:	d004      	beq.n	8003d9a <HAL_ADC_Init+0x172>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5f      	ldr	r2, [pc, #380]	@ (8003f14 <HAL_ADC_Init+0x2ec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_Init+0x176>
 8003d9a:	4a62      	ldr	r2, [pc, #392]	@ (8003f24 <HAL_ADC_Init+0x2fc>)
 8003d9c:	e000      	b.n	8003da0 <HAL_ADC_Init+0x178>
 8003d9e:	4a62      	ldr	r2, [pc, #392]	@ (8003f28 <HAL_ADC_Init+0x300>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7ff fcd2 	bl	8003750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	7f5b      	ldrb	r3, [r3, #29]
 8003db0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003db6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003dbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d106      	bne.n	8003de8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	045b      	lsls	r3, r3, #17
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <HAL_ADC_Init+0x304>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fee5 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 8003e38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d17f      	bne.n	8003f40 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d17c      	bne.n	8003f40 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e4a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e52:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e62:	f023 0302 	bic.w	r3, r3, #2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003e90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6911      	ldr	r1, [r2, #16]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003ea6:	e013      	b.n	8003ed0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003eb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ecc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d12a      	bne.n	8003f30 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ef0:	4311      	orrs	r1, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003efc:	430a      	orrs	r2, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	611a      	str	r2, [r3, #16]
 8003f0a:	e019      	b.n	8003f40 <HAL_ADC_Init+0x318>
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	053e2d63 	.word	0x053e2d63
 8003f14:	50000100 	.word	0x50000100
 8003f18:	50000400 	.word	0x50000400
 8003f1c:	50000500 	.word	0x50000500
 8003f20:	50000600 	.word	0x50000600
 8003f24:	50000300 	.word	0x50000300
 8003f28:	50000700 	.word	0x50000700
 8003f2c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10c      	bne.n	8003f62 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	f023 010f 	bic.w	r1, r3, #15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f60:	e007      	b.n	8003f72 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 020f 	bic.w	r2, r2, #15
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f82:	e007      	b.n	8003f94 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop

08003fa0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb4:	d004      	beq.n	8003fc0 <HAL_ADC_Start_DMA+0x20>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a5a      	ldr	r2, [pc, #360]	@ (8004124 <HAL_ADC_Start_DMA+0x184>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_Start_DMA+0x24>
 8003fc0:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_ADC_Start_DMA+0x188>)
 8003fc2:	e000      	b.n	8003fc6 <HAL_ADC_Start_DMA+0x26>
 8003fc4:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_ADC_Start_DMA+0x18c>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fd22 	bl	8003a10 <LL_ADC_GetMultimode>
 8003fcc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fdee 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 809b 	bne.w	8004116 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Start_DMA+0x4e>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e096      	b.n	800411c <HAL_ADC_Start_DMA+0x17c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8004130 <HAL_ADC_Start_DMA+0x190>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d008      	beq.n	8004012 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b05      	cmp	r3, #5
 800400a:	d002      	beq.n	8004012 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b09      	cmp	r3, #9
 8004010:	d17a      	bne.n	8004108 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fe0a 	bl	8004c2c <ADC_Enable>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d16d      	bne.n	80040fe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3a      	ldr	r2, [pc, #232]	@ (8004124 <HAL_ADC_Start_DMA+0x184>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d009      	beq.n	8004054 <HAL_ADC_Start_DMA+0xb4>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3b      	ldr	r2, [pc, #236]	@ (8004134 <HAL_ADC_Start_DMA+0x194>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d002      	beq.n	8004050 <HAL_ADC_Start_DMA+0xb0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e003      	b.n	8004058 <HAL_ADC_Start_DMA+0xb8>
 8004050:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_ADC_Start_DMA+0x198>)
 8004052:	e001      	b.n	8004058 <HAL_ADC_Start_DMA+0xb8>
 8004054:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4293      	cmp	r3, r2
 800405e:	d002      	beq.n	8004066 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004082:	f023 0206 	bic.w	r2, r3, #6
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	661a      	str	r2, [r3, #96]	@ 0x60
 800408a:	e002      	b.n	8004092 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	4a29      	ldr	r2, [pc, #164]	@ (800413c <HAL_ADC_Start_DMA+0x19c>)
 8004098:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409e:	4a28      	ldr	r2, [pc, #160]	@ (8004140 <HAL_ADC_Start_DMA+0x1a0>)
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_ADC_Start_DMA+0x1a4>)
 80040a8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	221c      	movs	r2, #28
 80040b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3340      	adds	r3, #64	@ 0x40
 80040e4:	4619      	mov	r1, r3
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f002 f8d9 	bl	80062a0 <HAL_DMA_Start_IT>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd34 	bl	8003b64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040fc:	e00d      	b.n	800411a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004106:	e008      	b.n	800411a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004114:	e001      	b.n	800411a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	50000100 	.word	0x50000100
 8004128:	50000300 	.word	0x50000300
 800412c:	50000700 	.word	0x50000700
 8004130:	50000600 	.word	0x50000600
 8004134:	50000500 	.word	0x50000500
 8004138:	50000400 	.word	0x50000400
 800413c:	08004e17 	.word	0x08004e17
 8004140:	08004eef 	.word	0x08004eef
 8004144:	08004f0b 	.word	0x08004f0b

08004148 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_ADC_Stop_DMA+0x16>
 800415a:	2302      	movs	r3, #2
 800415c:	e051      	b.n	8004202 <HAL_ADC_Stop_DMA+0xba>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004166:	2103      	movs	r1, #3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fca3 	bl	8004ab4 <ADC_ConversionStop>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13f      	bne.n	80041f8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d10f      	bne.n	80041b6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	4618      	mov	r0, r3
 800419c:	f002 f8fb 	bl	8006396 <HAL_DMA_Abort>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0210 	bic.w	r2, r2, #16
 80041c4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fdc3 	bl	8004d58 <ADC_Disable>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e002      	b.n	80041de <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fdbd 	bl	8004d58 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b0b6      	sub	sp, #216	@ 0xd8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800424e:	2b01      	cmp	r3, #1
 8004250:	d102      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x24>
 8004252:	2302      	movs	r3, #2
 8004254:	f000 bc13 	b.w	8004a7e <HAL_ADC_ConfigChannel+0x84a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fca5 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 83f3 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7ff fb4b 	bl	800391a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fc93 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 800428e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fcb3 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 800429c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 81d9 	bne.w	800465c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 81d4 	bne.w	800465c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042bc:	d10f      	bne.n	80042de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7ff fb52 	bl	8003972 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff faf9 	bl	80038ce <LL_ADC_SetSamplingTimeCommonConfig>
 80042dc:	e00e      	b.n	80042fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7ff fb41 	bl	8003972 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fae9 	bl	80038ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b04      	cmp	r3, #4
 800431c:	d022      	beq.n	8004364 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800432e:	f7ff fa43 	bl	80037b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	461a      	mov	r2, r3
 8004340:	f7ff fa8f 	bl	8003862 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_ADC_ConfigChannel+0x126>
 8004354:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004358:	e000      	b.n	800435c <HAL_ADC_ConfigChannel+0x128>
 800435a:	2300      	movs	r3, #0
 800435c:	461a      	mov	r2, r3
 800435e:	f7ff fa9b 	bl	8003898 <LL_ADC_SetOffsetSaturation>
 8004362:	e17b      	b.n	800465c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fa48 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x15c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa3d 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004386:	4603      	mov	r3, r0
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	f003 021f 	and.w	r2, r3, #31
 800438e:	e01e      	b.n	80043ce <HAL_ADC_ConfigChannel+0x19a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fa32 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800439c:	4603      	mov	r3, r0
 800439e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e004      	b.n	80043cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80043c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x1b2>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0e9b      	lsrs	r3, r3, #26
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	e018      	b.n	8004418 <HAL_ADC_ConfigChannel+0x1e4>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80043fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800440a:	2320      	movs	r3, #32
 800440c:	e004      	b.n	8004418 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800440e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004418:	429a      	cmp	r2, r3
 800441a:	d106      	bne.n	800442a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fa01 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff f9e5 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x222>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f9da 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800444c:	4603      	mov	r3, r0
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	e01e      	b.n	8004494 <HAL_ADC_ConfigChannel+0x260>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f9cf 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004462:	4603      	mov	r3, r0
 8004464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800447c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e004      	b.n	8004492 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x278>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	e018      	b.n	80044de <HAL_ADC_ConfigChannel+0x2aa>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80044c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80044c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	e004      	b.n	80044de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80044d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044de:	429a      	cmp	r2, r3
 80044e0:	d106      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f99e 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f982 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_ADC_ConfigChannel+0x2e8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f977 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004512:	4603      	mov	r3, r0
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	f003 021f 	and.w	r2, r3, #31
 800451a:	e01e      	b.n	800455a <HAL_ADC_ConfigChannel+0x326>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f96c 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004528:	4603      	mov	r3, r0
 800452a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800453a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800453e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004542:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800454a:	2320      	movs	r3, #32
 800454c:	e004      	b.n	8004558 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800454e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x33e>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0e9b      	lsrs	r3, r3, #26
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	e016      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x36c>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800458a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004592:	2320      	movs	r3, #32
 8004594:	e004      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d106      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff f93d 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2103      	movs	r1, #3
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f921 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <HAL_ADC_ConfigChannel+0x3aa>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2103      	movs	r1, #3
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff f916 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80045d4:	4603      	mov	r3, r0
 80045d6:	0e9b      	lsrs	r3, r3, #26
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	e017      	b.n	800460e <HAL_ADC_ConfigChannel+0x3da>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2103      	movs	r1, #3
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f90b 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80045ea:	4603      	mov	r3, r0
 80045ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80045fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e003      	b.n	800460c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x3f2>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	e011      	b.n	800464a <HAL_ADC_ConfigChannel+0x416>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800463e:	2320      	movs	r3, #32
 8004640:	e003      	b.n	800464a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004644:	fab3 f383 	clz	r3, r3
 8004648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800464a:	429a      	cmp	r2, r3
 800464c:	d106      	bne.n	800465c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	2103      	movs	r1, #3
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f8e8 	bl	800382c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fa59 	bl	8003b18 <LL_ADC_IsEnabled>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 813d 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f7ff f9a4 	bl	80039c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4aa2      	ldr	r2, [pc, #648]	@ (8004910 <HAL_ADC_ConfigChannel+0x6dc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	f040 812e 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x480>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	3301      	adds	r3, #1
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	bf94      	ite	ls
 80046ac:	2301      	movls	r3, #1
 80046ae:	2300      	movhi	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e019      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x4b4>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80046c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80046c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80046d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2b09      	cmp	r3, #9
 80046e0:	bf94      	ite	ls
 80046e2:	2301      	movls	r3, #1
 80046e4:	2300      	movhi	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d079      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x4d4>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	3301      	adds	r3, #1
 8004700:	069b      	lsls	r3, r3, #26
 8004702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004706:	e015      	b.n	8004734 <HAL_ADC_ConfigChannel+0x500>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800471a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e003      	b.n	800472c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3301      	adds	r3, #1
 800472e:	069b      	lsls	r3, r3, #26
 8004730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x520>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	3301      	adds	r3, #1
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	e017      	b.n	8004784 <HAL_ADC_ConfigChannel+0x550>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e003      	b.n	8004778 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	ea42 0103 	orr.w	r1, r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x576>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	051b      	lsls	r3, r3, #20
 80047a8:	e018      	b.n	80047dc <HAL_ADC_ConfigChannel+0x5a8>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	fa93 f3a3 	rbit	r3, r3
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80047bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80047c2:	2320      	movs	r3, #32
 80047c4:	e003      	b.n	80047ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047dc:	430b      	orrs	r3, r1
 80047de:	e07e      	b.n	80048de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x5c8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	3301      	adds	r3, #1
 80047f4:	069b      	lsls	r3, r3, #26
 80047f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047fa:	e015      	b.n	8004828 <HAL_ADC_ConfigChannel+0x5f4>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e003      	b.n	8004820 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	069b      	lsls	r3, r3, #26
 8004824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x614>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	0e9b      	lsrs	r3, r3, #26
 800483a:	3301      	adds	r3, #1
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	e017      	b.n	8004878 <HAL_ADC_ConfigChannel+0x644>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	61fb      	str	r3, [r7, #28]
  return result;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004860:	2320      	movs	r3, #32
 8004862:	e003      	b.n	800486c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2101      	movs	r1, #1
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	ea42 0103 	orr.w	r1, r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10d      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x670>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0e9b      	lsrs	r3, r3, #26
 800488e:	3301      	adds	r3, #1
 8004890:	f003 021f 	and.w	r2, r3, #31
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	3b1e      	subs	r3, #30
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048a2:	e01b      	b.n	80048dc <HAL_ADC_ConfigChannel+0x6a8>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	613b      	str	r3, [r7, #16]
  return result;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	e003      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 021f 	and.w	r2, r3, #31
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	3b1e      	subs	r3, #30
 80048d6:	051b      	lsls	r3, r3, #20
 80048d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048e2:	4619      	mov	r1, r3
 80048e4:	f7ff f845 	bl	8003972 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <HAL_ADC_ConfigChannel+0x6e0>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80be 	beq.w	8004a72 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048fe:	d004      	beq.n	800490a <HAL_ADC_ConfigChannel+0x6d6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a04      	ldr	r2, [pc, #16]	@ (8004918 <HAL_ADC_ConfigChannel+0x6e4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10a      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x6ec>
 800490a:	4b04      	ldr	r3, [pc, #16]	@ (800491c <HAL_ADC_ConfigChannel+0x6e8>)
 800490c:	e009      	b.n	8004922 <HAL_ADC_ConfigChannel+0x6ee>
 800490e:	bf00      	nop
 8004910:	407f0000 	.word	0x407f0000
 8004914:	80080000 	.word	0x80080000
 8004918:	50000100 	.word	0x50000100
 800491c:	50000300 	.word	0x50000300
 8004920:	4b59      	ldr	r3, [pc, #356]	@ (8004a88 <HAL_ADC_ConfigChannel+0x854>)
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe ff3a 	bl	800379c <LL_ADC_GetCommonPathInternalCh>
 8004928:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a56      	ldr	r2, [pc, #344]	@ (8004a8c <HAL_ADC_ConfigChannel+0x858>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_ConfigChannel+0x70c>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a55      	ldr	r2, [pc, #340]	@ (8004a90 <HAL_ADC_ConfigChannel+0x85c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d13a      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d134      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004954:	d005      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x72e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a94 <HAL_ADC_ConfigChannel+0x860>)
 800495c:	4293      	cmp	r3, r2
 800495e:	f040 8085 	bne.w	8004a6c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800496a:	d004      	beq.n	8004976 <HAL_ADC_ConfigChannel+0x742>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a49      	ldr	r2, [pc, #292]	@ (8004a98 <HAL_ADC_ConfigChannel+0x864>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_ADC_ConfigChannel+0x746>
 8004976:	4a49      	ldr	r2, [pc, #292]	@ (8004a9c <HAL_ADC_ConfigChannel+0x868>)
 8004978:	e000      	b.n	800497c <HAL_ADC_ConfigChannel+0x748>
 800497a:	4a43      	ldr	r2, [pc, #268]	@ (8004a88 <HAL_ADC_ConfigChannel+0x854>)
 800497c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7fe fef5 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800498c:	4b44      	ldr	r3, [pc, #272]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x86c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	4a44      	ldr	r2, [pc, #272]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x870>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049a6:	e002      	b.n	80049ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b4:	e05a      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	@ (8004aa8 <HAL_ADC_ConfigChannel+0x874>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d125      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11f      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a31      	ldr	r2, [pc, #196]	@ (8004a98 <HAL_ADC_ConfigChannel+0x864>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d104      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x7ac>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a34      	ldr	r2, [pc, #208]	@ (8004aac <HAL_ADC_ConfigChannel+0x878>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d047      	beq.n	8004a70 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049e8:	d004      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x7c0>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <HAL_ADC_ConfigChannel+0x864>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7c4>
 80049f4:	4a29      	ldr	r2, [pc, #164]	@ (8004a9c <HAL_ADC_ConfigChannel+0x868>)
 80049f6:	e000      	b.n	80049fa <HAL_ADC_ConfigChannel+0x7c6>
 80049f8:	4a23      	ldr	r2, [pc, #140]	@ (8004a88 <HAL_ADC_ConfigChannel+0x854>)
 80049fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe feb6 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a0a:	e031      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a27      	ldr	r2, [pc, #156]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x87c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d12d      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d127      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	@ (8004a98 <HAL_ADC_ConfigChannel+0x864>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a34:	d004      	beq.n	8004a40 <HAL_ADC_ConfigChannel+0x80c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <HAL_ADC_ConfigChannel+0x864>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x810>
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <HAL_ADC_ConfigChannel+0x868>)
 8004a42:	e000      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x812>
 8004a44:	4a10      	ldr	r2, [pc, #64]	@ (8004a88 <HAL_ADC_ConfigChannel+0x854>)
 8004a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fe fe90 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
 8004a56:	e00c      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a6a:	e002      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	37d8      	adds	r7, #216	@ 0xd8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	50000700 	.word	0x50000700
 8004a8c:	c3210000 	.word	0xc3210000
 8004a90:	90c00010 	.word	0x90c00010
 8004a94:	50000600 	.word	0x50000600
 8004a98:	50000100 	.word	0x50000100
 8004a9c:	50000300 	.word	0x50000300
 8004aa0:	20000004 	.word	0x20000004
 8004aa4:	053e2d63 	.word	0x053e2d63
 8004aa8:	c7520000 	.word	0xc7520000
 8004aac:	50000500 	.word	0x50000500
 8004ab0:	cb840000 	.word	0xcb840000

08004ab4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff f872 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8004ad0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f893 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 8004adc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8098 	beq.w	8004c1c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02a      	beq.n	8004b50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7f5b      	ldrb	r3, [r3, #29]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d126      	bne.n	8004b50 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7f1b      	ldrb	r3, [r3, #28]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d122      	bne.n	8004b50 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b0e:	e014      	b.n	8004b3a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4a45      	ldr	r2, [pc, #276]	@ (8004c28 <ADC_ConversionStop+0x174>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d90d      	bls.n	8004b34 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f043 0210 	orr.w	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e074      	b.n	8004c1e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d1e3      	bne.n	8004b10 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2240      	movs	r2, #64	@ 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d014      	beq.n	8004b80 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff f82a 	bl	8003bb4 <LL_ADC_REG_IsConversionOngoing>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe ffe7 	bl	8003b3e <LL_ADC_IsDisableOngoing>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff f806 	bl	8003b8c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d014      	beq.n	8004bb0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff f839 	bl	8003c02 <LL_ADC_INJ_IsConversionOngoing>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe ffcf 	bl	8003b3e <LL_ADC_IsDisableOngoing>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f815 	bl	8003bda <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d005      	beq.n	8004bc2 <ADC_ConversionStop+0x10e>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d105      	bne.n	8004bc8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	617b      	str	r3, [r7, #20]
        break;
 8004bc0:	e005      	b.n	8004bce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	617b      	str	r3, [r7, #20]
        break;
 8004bc6:	e002      	b.n	8004bce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bc8:	2304      	movs	r3, #4
 8004bca:	617b      	str	r3, [r7, #20]
        break;
 8004bcc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bce:	f7fe fdb3 	bl	8003738 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bd4:	e01b      	b.n	8004c0e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bd6:	f7fe fdaf 	bl	8003738 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d914      	bls.n	8004c0e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	f043 0210 	orr.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e007      	b.n	8004c1e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1dc      	bne.n	8004bd6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	a33fffff 	.word	0xa33fffff

08004c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe ff6b 	bl	8003b18 <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d176      	bne.n	8004d36 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d40 <ADC_Enable+0x114>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e062      	b.n	8004d38 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe ff26 	bl	8003ac8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c84:	d004      	beq.n	8004c90 <ADC_Enable+0x64>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <ADC_Enable+0x118>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <ADC_Enable+0x68>
 8004c90:	4b2d      	ldr	r3, [pc, #180]	@ (8004d48 <ADC_Enable+0x11c>)
 8004c92:	e000      	b.n	8004c96 <ADC_Enable+0x6a>
 8004c94:	4b2d      	ldr	r3, [pc, #180]	@ (8004d4c <ADC_Enable+0x120>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fd80 	bl	800379c <LL_ADC_GetCommonPathInternalCh>
 8004c9c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <ADC_Enable+0x124>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <ADC_Enable+0x128>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cc0:	e002      	b.n	8004cc8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f9      	bne.n	8004cc2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cce:	f7fe fd33 	bl	8003738 <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cd4:	e028      	b.n	8004d28 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe ff1c 	bl	8003b18 <LL_ADC_IsEnabled>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe feec 	bl	8003ac8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cf0:	f7fe fd22 	bl	8003738 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d914      	bls.n	8004d28 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d00d      	beq.n	8004d28 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d10:	f043 0210 	orr.w	r2, r3, #16
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e007      	b.n	8004d38 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d1cf      	bne.n	8004cd6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	8000003f 	.word	0x8000003f
 8004d44:	50000100 	.word	0x50000100
 8004d48:	50000300 	.word	0x50000300
 8004d4c:	50000700 	.word	0x50000700
 8004d50:	20000004 	.word	0x20000004
 8004d54:	053e2d63 	.word	0x053e2d63

08004d58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe feea 	bl	8003b3e <LL_ADC_IsDisableOngoing>
 8004d6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fed1 	bl	8003b18 <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d047      	beq.n	8004e0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d144      	bne.n	8004e0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030d 	and.w	r3, r3, #13
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe feab 	bl	8003af0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004da2:	f7fe fcc9 	bl	8003738 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004da8:	e029      	b.n	8004dfe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e023      	b.n	8004e0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dc6:	f7fe fcb7 	bl	8003738 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d914      	bls.n	8004dfe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e007      	b.n	8004e0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1dc      	bne.n	8004dc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d14b      	bne.n	8004ec8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d021      	beq.n	8004e8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fd50 	bl	80038f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d032      	beq.n	8004ec0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d12b      	bne.n	8004ec0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11f      	bne.n	8004ec0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	f043 0201 	orr.w	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e8c:	e018      	b.n	8004ec0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d111      	bne.n	8004ec0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	f043 0201 	orr.w	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7fb ff67 	bl	8000d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ec6:	e00e      	b.n	8004ee6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff f9a2 	bl	800421e <HAL_ADC_ErrorCallback>
}
 8004eda:	e004      	b.n	8004ee6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff f984 	bl	800420a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff f974 	bl	800421e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <LL_ADC_IsEnabled>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <LL_ADC_IsEnabled+0x18>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <LL_ADC_IsEnabled+0x1a>
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d101      	bne.n	8004f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b0a1      	sub	sp, #132	@ 0x84
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e0e7      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fc2:	d102      	bne.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	e009      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6e      	ldr	r2, [pc, #440]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d102      	bne.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004fd4:	4b6d      	ldr	r3, [pc, #436]	@ (800518c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	e001      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0be      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ffb0 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005004:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff ffaa 	bl	8004f64 <LL_ADC_REG_IsConversionOngoing>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 80a0 	bne.w	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 809c 	bne.w	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005028:	d004      	beq.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a55      	ldr	r2, [pc, #340]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005034:	4b56      	ldr	r3, [pc, #344]	@ (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005036:	e000      	b.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005038:	4b56      	ldr	r3, [pc, #344]	@ (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800503a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d04b      	beq.n	80050dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005056:	035b      	lsls	r3, r3, #13
 8005058:	430b      	orrs	r3, r1
 800505a:	431a      	orrs	r2, r3
 800505c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005068:	d004      	beq.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a45      	ldr	r2, [pc, #276]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10f      	bne.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005074:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005078:	f7ff ff61 	bl	8004f3e <LL_ADC_IsEnabled>
 800507c:	4604      	mov	r4, r0
 800507e:	4841      	ldr	r0, [pc, #260]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005080:	f7ff ff5d 	bl	8004f3e <LL_ADC_IsEnabled>
 8005084:	4603      	mov	r3, r0
 8005086:	4323      	orrs	r3, r4
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e012      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005094:	483c      	ldr	r0, [pc, #240]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005096:	f7ff ff52 	bl	8004f3e <LL_ADC_IsEnabled>
 800509a:	4604      	mov	r4, r0
 800509c:	483b      	ldr	r0, [pc, #236]	@ (800518c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800509e:	f7ff ff4e 	bl	8004f3e <LL_ADC_IsEnabled>
 80050a2:	4603      	mov	r3, r0
 80050a4:	431c      	orrs	r4, r3
 80050a6:	483c      	ldr	r0, [pc, #240]	@ (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050a8:	f7ff ff49 	bl	8004f3e <LL_ADC_IsEnabled>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4323      	orrs	r3, r4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d056      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050c6:	f023 030f 	bic.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	6892      	ldr	r2, [r2, #8]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	431a      	orrs	r2, r3
 80050d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050da:	e047      	b.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050f0:	d004      	beq.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a23      	ldr	r2, [pc, #140]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10f      	bne.n	800511c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80050fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005100:	f7ff ff1d 	bl	8004f3e <LL_ADC_IsEnabled>
 8005104:	4604      	mov	r4, r0
 8005106:	481f      	ldr	r0, [pc, #124]	@ (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005108:	f7ff ff19 	bl	8004f3e <LL_ADC_IsEnabled>
 800510c:	4603      	mov	r3, r0
 800510e:	4323      	orrs	r3, r4
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e012      	b.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800511c:	481a      	ldr	r0, [pc, #104]	@ (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800511e:	f7ff ff0e 	bl	8004f3e <LL_ADC_IsEnabled>
 8005122:	4604      	mov	r4, r0
 8005124:	4819      	ldr	r0, [pc, #100]	@ (800518c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005126:	f7ff ff0a 	bl	8004f3e <LL_ADC_IsEnabled>
 800512a:	4603      	mov	r3, r0
 800512c:	431c      	orrs	r4, r3
 800512e:	481a      	ldr	r0, [pc, #104]	@ (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005130:	f7ff ff05 	bl	8004f3e <LL_ADC_IsEnabled>
 8005134:	4603      	mov	r3, r0
 8005136:	4323      	orrs	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800514e:	f023 030f 	bic.w	r3, r3, #15
 8005152:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005154:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005156:	e009      	b.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800516a:	e000      	b.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800516c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005176:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800517a:	4618      	mov	r0, r3
 800517c:	3784      	adds	r7, #132	@ 0x84
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	bf00      	nop
 8005184:	50000100 	.word	0x50000100
 8005188:	50000400 	.word	0x50000400
 800518c:	50000500 	.word	0x50000500
 8005190:	50000300 	.word	0x50000300
 8005194:	50000700 	.word	0x50000700
 8005198:	50000600 	.word	0x50000600

0800519c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <LL_EXTI_EnableIT_0_31+0x20>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4904      	ldr	r1, [pc, #16]	@ (80051bc <LL_EXTI_EnableIT_0_31+0x20>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40010400 	.word	0x40010400

080051c0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	4904      	ldr	r1, [pc, #16]	@ (80051e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	620b      	str	r3, [r1, #32]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40010400 	.word	0x40010400

080051e4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80051ec:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <LL_EXTI_DisableIT_0_31+0x24>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	4904      	ldr	r1, [pc, #16]	@ (8005208 <LL_EXTI_DisableIT_0_31+0x24>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010400 	.word	0x40010400

0800520c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <LL_EXTI_DisableIT_32_63+0x24>)
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	43db      	mvns	r3, r3
 800521c:	4904      	ldr	r1, [pc, #16]	@ (8005230 <LL_EXTI_DisableIT_32_63+0x24>)
 800521e:	4013      	ands	r3, r2
 8005220:	620b      	str	r3, [r1, #32]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010400 	.word	0x40010400

08005234 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <LL_EXTI_EnableEvent_0_31+0x20>)
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	4904      	ldr	r1, [pc, #16]	@ (8005254 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]

}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40010400 	.word	0x40010400

08005258 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005264:	4904      	ldr	r1, [pc, #16]	@ (8005278 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40010400 	.word	0x40010400

0800527c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005284:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	43db      	mvns	r3, r3
 800528c:	4904      	ldr	r1, [pc, #16]	@ (80052a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800528e:	4013      	ands	r3, r2
 8005290:	604b      	str	r3, [r1, #4]
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010400 	.word	0x40010400

080052a4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80052ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	4904      	ldr	r1, [pc, #16]	@ (80052c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010400 	.word	0x40010400

080052cc <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80052d4:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	4904      	ldr	r1, [pc, #16]	@ (80052ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4313      	orrs	r3, r2
 80052de:	608b      	str	r3, [r1, #8]

}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40010400 	.word	0x40010400

080052f0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80052fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fc:	4904      	ldr	r1, [pc, #16]	@ (8005310 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4313      	orrs	r3, r2
 8005302:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40010400 	.word	0x40010400

08005314 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800531c:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	43db      	mvns	r3, r3
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005326:	4013      	ands	r3, r2
 8005328:	608b      	str	r3, [r1, #8]

}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40010400 	.word	0x40010400

0800533c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	43db      	mvns	r3, r3
 800534c:	4904      	ldr	r1, [pc, #16]	@ (8005360 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800534e:	4013      	ands	r3, r2
 8005350:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010400 	.word	0x40010400

08005364 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800536c:	4b05      	ldr	r3, [pc, #20]	@ (8005384 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	4904      	ldr	r1, [pc, #16]	@ (8005384 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4313      	orrs	r3, r2
 8005376:	60cb      	str	r3, [r1, #12]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010400 	.word	0x40010400

08005388 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005394:	4904      	ldr	r1, [pc, #16]	@ (80053a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4313      	orrs	r3, r2
 800539a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010400 	.word	0x40010400

080053ac <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80053b4:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60cb      	str	r3, [r1, #12]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010400 	.word	0x40010400

080053d4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80053dc:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80053de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	4904      	ldr	r1, [pc, #16]	@ (80053f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010400 	.word	0x40010400

080053fc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005404:	4a04      	ldr	r2, [pc, #16]	@ (8005418 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6153      	str	r3, [r2, #20]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010400 	.word	0x40010400

0800541c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8005424:	4a04      	ldr	r2, [pc, #16]	@ (8005438 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010400 	.word	0x40010400

0800543c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e181      	b.n	800575c <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005466:	d102      	bne.n	800546e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e176      	b.n	800575c <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	7f5b      	ldrb	r3, [r3, #29]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fd f86b 	bl	8002560 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005494:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b90      	ldr	r3, [pc, #576]	@ (80056fc <HAL_COMP_Init+0x2c0>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_COMP_Init+0xc8>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d113      	bne.n	8005504 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054dc:	4b88      	ldr	r3, [pc, #544]	@ (8005700 <HAL_COMP_Init+0x2c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	4a88      	ldr	r2, [pc, #544]	@ (8005704 <HAL_COMP_Init+0x2c8>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80054f6:	e002      	b.n	80054fe <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f9      	bne.n	80054f8 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7f      	ldr	r2, [pc, #508]	@ (8005708 <HAL_COMP_Init+0x2cc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d028      	beq.n	8005560 <HAL_COMP_Init+0x124>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7e      	ldr	r2, [pc, #504]	@ (800570c <HAL_COMP_Init+0x2d0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d020      	beq.n	800555a <HAL_COMP_Init+0x11e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7c      	ldr	r2, [pc, #496]	@ (8005710 <HAL_COMP_Init+0x2d4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <HAL_COMP_Init+0x118>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7b      	ldr	r2, [pc, #492]	@ (8005714 <HAL_COMP_Init+0x2d8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d010      	beq.n	800554e <HAL_COMP_Init+0x112>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a79      	ldr	r2, [pc, #484]	@ (8005718 <HAL_COMP_Init+0x2dc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d008      	beq.n	8005548 <HAL_COMP_Init+0x10c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a78      	ldr	r2, [pc, #480]	@ (800571c <HAL_COMP_Init+0x2e0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <HAL_COMP_Init+0x108>
 8005540:	2301      	movs	r3, #1
 8005542:	e00f      	b.n	8005564 <HAL_COMP_Init+0x128>
 8005544:	2302      	movs	r3, #2
 8005546:	e00d      	b.n	8005564 <HAL_COMP_Init+0x128>
 8005548:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800554c:	e00a      	b.n	8005564 <HAL_COMP_Init+0x128>
 800554e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005552:	e007      	b.n	8005564 <HAL_COMP_Init+0x128>
 8005554:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005558:	e004      	b.n	8005564 <HAL_COMP_Init+0x128>
 800555a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800555e:	e001      	b.n	8005564 <HAL_COMP_Init+0x128>
 8005560:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005564:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80b6 	beq.w	80056e0 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a65      	ldr	r2, [pc, #404]	@ (800571c <HAL_COMP_Init+0x2e0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_COMP_Init+0x158>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a64      	ldr	r2, [pc, #400]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f7ff feab 	bl	80052f0 <LL_EXTI_EnableRisingTrig_32_63>
 800559a:	e014      	b.n	80055c6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800559c:	6938      	ldr	r0, [r7, #16]
 800559e:	f7ff fe95 	bl	80052cc <LL_EXTI_EnableRisingTrig_0_31>
 80055a2:	e010      	b.n	80055c6 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5c      	ldr	r2, [pc, #368]	@ (800571c <HAL_COMP_Init+0x2e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_COMP_Init+0x17c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d103      	bne.n	80055c0 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80055b8:	6938      	ldr	r0, [r7, #16]
 80055ba:	f7ff febf 	bl	800533c <LL_EXTI_DisableRisingTrig_32_63>
 80055be:	e002      	b.n	80055c6 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80055c0:	6938      	ldr	r0, [r7, #16]
 80055c2:	f7ff fea7 	bl	8005314 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d011      	beq.n	80055f6 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a51      	ldr	r2, [pc, #324]	@ (800571c <HAL_COMP_Init+0x2e0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_COMP_Init+0x1aa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d103      	bne.n	80055ee <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80055e6:	6938      	ldr	r0, [r7, #16]
 80055e8:	f7ff fece 	bl	8005388 <LL_EXTI_EnableFallingTrig_32_63>
 80055ec:	e014      	b.n	8005618 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80055ee:	6938      	ldr	r0, [r7, #16]
 80055f0:	f7ff feb8 	bl	8005364 <LL_EXTI_EnableFallingTrig_0_31>
 80055f4:	e010      	b.n	8005618 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a48      	ldr	r2, [pc, #288]	@ (800571c <HAL_COMP_Init+0x2e0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_COMP_Init+0x1ce>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a46      	ldr	r2, [pc, #280]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d103      	bne.n	8005612 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f7ff fee2 	bl	80053d4 <LL_EXTI_DisableFallingTrig_32_63>
 8005610:	e002      	b.n	8005618 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005612:	6938      	ldr	r0, [r7, #16]
 8005614:	f7ff feca 	bl	80053ac <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <HAL_COMP_Init+0x2e0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_COMP_Init+0x1f0>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3e      	ldr	r2, [pc, #248]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800562c:	6938      	ldr	r0, [r7, #16]
 800562e:	f7ff fef5 	bl	800541c <LL_EXTI_ClearFlag_32_63>
 8005632:	e002      	b.n	800563a <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8005634:	6938      	ldr	r0, [r7, #16]
 8005636:	f7ff fee1 	bl	80053fc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a34      	ldr	r2, [pc, #208]	@ (800571c <HAL_COMP_Init+0x2e0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_COMP_Init+0x21e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a32      	ldr	r2, [pc, #200]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d103      	bne.n	8005662 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800565a:	6938      	ldr	r0, [r7, #16]
 800565c:	f7ff fdfc 	bl	8005258 <LL_EXTI_EnableEvent_32_63>
 8005660:	e014      	b.n	800568c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8005662:	6938      	ldr	r0, [r7, #16]
 8005664:	f7ff fde6 	bl	8005234 <LL_EXTI_EnableEvent_0_31>
 8005668:	e010      	b.n	800568c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <HAL_COMP_Init+0x2e0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_COMP_Init+0x242>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a29      	ldr	r2, [pc, #164]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d103      	bne.n	8005686 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f7ff fe10 	bl	80052a4 <LL_EXTI_DisableEvent_32_63>
 8005684:	e002      	b.n	800568c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f7ff fdf8 	bl	800527c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d011      	beq.n	80056bc <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <HAL_COMP_Init+0x2e0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_COMP_Init+0x270>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d103      	bne.n	80056b4 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f7ff fd87 	bl	80051c0 <LL_EXTI_EnableIT_32_63>
 80056b2:	e04b      	b.n	800574c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80056b4:	6938      	ldr	r0, [r7, #16]
 80056b6:	f7ff fd71 	bl	800519c <LL_EXTI_EnableIT_0_31>
 80056ba:	e047      	b.n	800574c <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <HAL_COMP_Init+0x2e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_COMP_Init+0x294>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a15      	ldr	r2, [pc, #84]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80056d0:	6938      	ldr	r0, [r7, #16]
 80056d2:	f7ff fd9b 	bl	800520c <LL_EXTI_DisableIT_32_63>
 80056d6:	e039      	b.n	800574c <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80056d8:	6938      	ldr	r0, [r7, #16]
 80056da:	f7ff fd83 	bl	80051e4 <LL_EXTI_DisableIT_0_31>
 80056de:	e035      	b.n	800574c <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0d      	ldr	r2, [pc, #52]	@ (800571c <HAL_COMP_Init+0x2e0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_COMP_Init+0x2b8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <HAL_COMP_Init+0x2e4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d117      	bne.n	8005724 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80056f4:	6938      	ldr	r0, [r7, #16]
 80056f6:	f7ff fdd5 	bl	80052a4 <LL_EXTI_DisableEvent_32_63>
 80056fa:	e016      	b.n	800572a <HAL_COMP_Init+0x2ee>
 80056fc:	ff007e0f 	.word	0xff007e0f
 8005700:	20000004 	.word	0x20000004
 8005704:	053e2d63 	.word	0x053e2d63
 8005708:	40010200 	.word	0x40010200
 800570c:	40010204 	.word	0x40010204
 8005710:	40010208 	.word	0x40010208
 8005714:	4001020c 	.word	0x4001020c
 8005718:	40010210 	.word	0x40010210
 800571c:	40010214 	.word	0x40010214
 8005720:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005724:	6938      	ldr	r0, [r7, #16]
 8005726:	f7ff fda9 	bl	800527c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a0e      	ldr	r2, [pc, #56]	@ (8005768 <HAL_COMP_Init+0x32c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_COMP_Init+0x302>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0c      	ldr	r2, [pc, #48]	@ (800576c <HAL_COMP_Init+0x330>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d103      	bne.n	8005746 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f7ff fd64 	bl	800520c <LL_EXTI_DisableIT_32_63>
 8005744:	e002      	b.n	800574c <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f7ff fd4c 	bl	80051e4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7f5b      	ldrb	r3, [r3, #29]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40010214 	.word	0x40010214
 800576c:	40010218 	.word	0x40010218

08005770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005780:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800578c:	4013      	ands	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800579c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057a2:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	60d3      	str	r3, [r2, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057bc:	4b04      	ldr	r3, [pc, #16]	@ (80057d0 <__NVIC_GetPriorityGrouping+0x18>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 0307 	and.w	r3, r3, #7
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db0b      	blt.n	80057fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	4907      	ldr	r1, [pc, #28]	@ (800580c <__NVIC_EnableIRQ+0x38>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2001      	movs	r0, #1
 80057f6:	fa00 f202 	lsl.w	r2, r0, r2
 80057fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	@ (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	@ (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
         );
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	@ 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058dc:	d301      	bcc.n	80058e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058de:	2301      	movs	r3, #1
 80058e0:	e00f      	b.n	8005902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e2:	4a0a      	ldr	r2, [pc, #40]	@ (800590c <SysTick_Config+0x40>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ea:	210f      	movs	r1, #15
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f7ff ff8e 	bl	8005810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f4:	4b05      	ldr	r3, [pc, #20]	@ (800590c <SysTick_Config+0x40>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fa:	4b04      	ldr	r3, [pc, #16]	@ (800590c <SysTick_Config+0x40>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010

08005910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ff29 	bl	8005770 <__NVIC_SetPriorityGrouping>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b086      	sub	sp, #24
 800592a:	af00      	add	r7, sp, #0
 800592c:	4603      	mov	r3, r0
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005934:	f7ff ff40 	bl	80057b8 <__NVIC_GetPriorityGrouping>
 8005938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ff90 	bl	8005864 <NVIC_EncodePriority>
 8005944:	4602      	mov	r2, r0
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff5f 	bl	8005810 <__NVIC_SetPriority>
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	4603      	mov	r3, r0
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff33 	bl	80057d4 <__NVIC_EnableIRQ>
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffa4 	bl	80058cc <SysTick_Config>
 8005984:	4603      	mov	r3, r0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e054      	b.n	8005a4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7f5b      	ldrb	r3, [r3, #29]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fc fe24 	bl	8002600 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	791b      	ldrb	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10c      	bne.n	80059e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a22      	ldr	r2, [pc, #136]	@ (8005a54 <HAL_CRC_Init+0xc4>)
 80059cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0218 	bic.w	r2, r2, #24
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	e00c      	b.n	80059fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f948 	bl	8005c80 <HAL_CRCEx_Polynomial_Set>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e028      	b.n	8005a4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	795b      	ldrb	r3, [r3, #5]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d105      	bne.n	8005a0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	611a      	str	r2, [r3, #16]
 8005a0c:	e004      	b.n	8005a18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6912      	ldr	r2, [r2, #16]
 8005a16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	04c11db7 	.word	0x04c11db7

08005a58 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d006      	beq.n	8005a94 <HAL_CRC_Calculate+0x3c>
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d829      	bhi.n	8005ade <HAL_CRC_Calculate+0x86>
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d019      	beq.n	8005ac2 <HAL_CRC_Calculate+0x6a>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d01e      	beq.n	8005ad0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005a92:	e024      	b.n	8005ade <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e00a      	b.n	8005ab0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3301      	adds	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d3f0      	bcc.n	8005a9a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	613b      	str	r3, [r7, #16]
      break;
 8005ac0:	e00e      	b.n	8005ae0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f812 	bl	8005af0 <CRC_Handle_8>
 8005acc:	6138      	str	r0, [r7, #16]
      break;
 8005ace:	e007      	b.n	8005ae0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f899 	bl	8005c0c <CRC_Handle_16>
 8005ada:	6138      	str	r0, [r7, #16]
      break;
 8005adc:	e000      	b.n	8005ae0 <HAL_CRC_Calculate+0x88>
      break;
 8005ade:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005ae6:	693b      	ldr	r3, [r7, #16]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	@ 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e023      	b.n	8005b4a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4413      	add	r3, r2
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3301      	adds	r3, #1
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	440b      	add	r3, r1
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005b1c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	3302      	adds	r3, #2
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	440b      	add	r3, r1
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005b2c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	3303      	adds	r3, #3
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	440b      	add	r3, r1
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005b40:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005b42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	089b      	lsrs	r3, r3, #2
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d3d6      	bcc.n	8005b02 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04d      	beq.n	8005bfa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d107      	bne.n	8005b78 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4413      	add	r3, r2
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d116      	bne.n	8005bb0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	b21a      	sxth	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	3301      	adds	r3, #1
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	440b      	add	r3, r1
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	8b7a      	ldrh	r2, [r7, #26]
 8005bae:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d11f      	bne.n	8005bfa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	3301      	adds	r3, #1
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	8b7a      	ldrh	r2, [r7, #26]
 8005be6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3302      	adds	r3, #2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3724      	adds	r7, #36	@ 0x24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e013      	b.n	8005c46 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	3302      	adds	r3, #2
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	440b      	add	r3, r1
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	4619      	mov	r1, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d3e6      	bcc.n	8005c1e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	4413      	add	r3, r2
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005c90:	231f      	movs	r3, #31
 8005c92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
 8005ca2:	e063      	b.n	8005d6c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005ca4:	bf00      	nop
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	613a      	str	r2, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <HAL_CRCEx_Polynomial_Set+0x44>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b18      	cmp	r3, #24
 8005cc8:	d846      	bhi.n	8005d58 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005d5f 	.word	0x08005d5f
 8005cd4:	08005d59 	.word	0x08005d59
 8005cd8:	08005d59 	.word	0x08005d59
 8005cdc:	08005d59 	.word	0x08005d59
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d59 	.word	0x08005d59
 8005ce8:	08005d59 	.word	0x08005d59
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08005d59 	.word	0x08005d59
 8005cf8:	08005d59 	.word	0x08005d59
 8005cfc:	08005d59 	.word	0x08005d59
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005d59 	.word	0x08005d59
 8005d0c:	08005d59 	.word	0x08005d59
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d59 	.word	0x08005d59
 8005d1c:	08005d59 	.word	0x08005d59
 8005d20:	08005d59 	.word	0x08005d59
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d59 	.word	0x08005d59
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	08005d35 	.word	0x08005d35
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b06      	cmp	r3, #6
 8005d38:	d913      	bls.n	8005d62 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d3e:	e010      	b.n	8005d62 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	d90f      	bls.n	8005d66 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d4a:	e00c      	b.n	8005d66 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	d90b      	bls.n	8005d6a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005d56:	e008      	b.n	8005d6a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
        break;
 8005d5c:	e006      	b.n	8005d6c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d5e:	bf00      	nop
 8005d60:	e004      	b.n	8005d6c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005d6a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 0118 	bic.w	r1, r3, #24
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e014      	b.n	8005dd8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	791b      	ldrb	r3, [r3, #4]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc fc3e 	bl	8002640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	@ 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_DAC_ConfigChannel+0x1c>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e19e      	b.n	800613e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	795b      	ldrb	r3, [r3, #5]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_DAC_ConfigChannel+0x2c>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e198      	b.n	800613e <HAL_DAC_ConfigChannel+0x35e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2202      	movs	r2, #2
 8005e16:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d17a      	bne.n	8005f16 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005e20:	f7fd fc8a 	bl	8003738 <HAL_GetTick>
 8005e24:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d13d      	bne.n	8005ea8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e2c:	e018      	b.n	8005e60 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e2e:	f7fd fc83 	bl	8003738 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d911      	bls.n	8005e60 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f043 0208 	orr.w	r2, r3, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e16e      	b.n	800613e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1df      	bne.n	8005e2e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e78:	e020      	b.n	8005ebc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e7a:	f7fd fc5d 	bl	8003738 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d90f      	bls.n	8005ea8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da0a      	bge.n	8005ea8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e14a      	b.n	800613e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dbe3      	blt.n	8005e7a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	ea02 0103 	and.w	r1, r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	21ff      	movs	r1, #255	@ 0xff
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	ea02 0103 	and.w	r1, r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11d      	bne.n	8005f5a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	221f      	movs	r2, #31
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f36:	4013      	ands	r3, r2
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2207      	movs	r2, #7
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f72:	4013      	ands	r3, r2
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d102      	bne.n	8005f84 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	e00f      	b.n	8005fa4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d102      	bne.n	8005f92 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	623b      	str	r3, [r7, #32]
 8005f90:	e008      	b.n	8005fa4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	e001      	b.n	8005fa4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d102      	bne.n	8005fd8 <HAL_DAC_ConfigChannel+0x1f8>
 8005fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fd6:	e000      	b.n	8005fda <HAL_DAC_ConfigChannel+0x1fa>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	795b      	ldrb	r3, [r3, #5]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d102      	bne.n	8006004 <HAL_DAC_ConfigChannel+0x224>
 8005ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006002:	e000      	b.n	8006006 <HAL_DAC_ConfigChannel+0x226>
 8006004:	2300      	movs	r3, #0
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d114      	bne.n	8006046 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800601c:	f001 fc40 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 8006020:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4a48      	ldr	r2, [pc, #288]	@ (8006148 <HAL_DAC_ConfigChannel+0x368>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d904      	bls.n	8006034 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e00f      	b.n	8006054 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4a45      	ldr	r2, [pc, #276]	@ (800614c <HAL_DAC_ConfigChannel+0x36c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d90a      	bls.n	8006052 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	e006      	b.n	8006054 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604c:	4313      	orrs	r3, r2
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006050:	e000      	b.n	8006054 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006052:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f003 0310 	and.w	r3, r3, #16
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006062:	4313      	orrs	r3, r2
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43da      	mvns	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	400a      	ands	r2, r1
 800608a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43db      	mvns	r3, r3
 80060a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a6:	4013      	ands	r3, r2
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060be:	4313      	orrs	r3, r2
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	22c0      	movs	r2, #192	@ 0xc0
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43da      	mvns	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	400a      	ands	r2, r1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	ea02 0103 	and.w	r1, r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	409a      	lsls	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800613c:	7ffb      	ldrb	r3, [r7, #31]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3728      	adds	r7, #40	@ 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	09896800 	.word	0x09896800
 800614c:	04c4b400 	.word	0x04c4b400

08006150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e08d      	b.n	800627e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	4b47      	ldr	r3, [pc, #284]	@ (8006288 <HAL_DMA_Init+0x138>)
 800616a:	429a      	cmp	r2, r3
 800616c:	d80f      	bhi.n	800618e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	4b45      	ldr	r3, [pc, #276]	@ (800628c <HAL_DMA_Init+0x13c>)
 8006176:	4413      	add	r3, r2
 8006178:	4a45      	ldr	r2, [pc, #276]	@ (8006290 <HAL_DMA_Init+0x140>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	009a      	lsls	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a42      	ldr	r2, [pc, #264]	@ (8006294 <HAL_DMA_Init+0x144>)
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40
 800618c:	e00e      	b.n	80061ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	4b40      	ldr	r3, [pc, #256]	@ (8006298 <HAL_DMA_Init+0x148>)
 8006196:	4413      	add	r3, r2
 8006198:	4a3d      	ldr	r2, [pc, #244]	@ (8006290 <HAL_DMA_Init+0x140>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	009a      	lsls	r2, r3, #2
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a3c      	ldr	r2, [pc, #240]	@ (800629c <HAL_DMA_Init+0x14c>)
 80061aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80061d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa76 	bl	80066f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800620c:	d102      	bne.n	8006214 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006228:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <HAL_DMA_Init+0x104>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d80c      	bhi.n	8006254 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa96 	bl	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	e008      	b.n	8006266 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40020407 	.word	0x40020407
 800628c:	bffdfff8 	.word	0xbffdfff8
 8006290:	cccccccd 	.word	0xcccccccd
 8006294:	40020000 	.word	0x40020000
 8006298:	bffdfbf8 	.word	0xbffdfbf8
 800629c:	40020400 	.word	0x40020400

080062a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_DMA_Start_IT+0x20>
 80062bc:	2302      	movs	r3, #2
 80062be:	e066      	b.n	800638e <HAL_DMA_Start_IT+0xee>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d155      	bne.n	8006380 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f9bb 	bl	8006674 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 020e 	orr.w	r2, r2, #14
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e00f      	b.n	8006338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 020a 	orr.w	r2, r2, #10
 8006336:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006354:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800636c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e005      	b.n	800638c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006388:	2302      	movs	r3, #2
 800638a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d005      	beq.n	80063ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2204      	movs	r2, #4
 80063b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e037      	b.n	800642a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 020e 	bic.w	r2, r2, #14
 80063c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	f003 021f 	and.w	r2, r3, #31
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f202 	lsl.w	r2, r1, r2
 80063fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006406:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800641e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006428:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d00d      	beq.n	800647c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2204      	movs	r2, #4
 8006464:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e047      	b.n	800650c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 020e 	bic.w	r2, r2, #14
 800648a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	f003 021f 	and.w	r2, r3, #31
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f202 	lsl.w	r2, r1, r2
 80064be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
    }
  }
  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2204      	movs	r2, #4
 8006538:	409a      	lsls	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d026      	beq.n	8006590 <HAL_DMA_IRQHandler+0x7a>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0204 	bic.w	r2, r2, #4
 8006568:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	f003 021f 	and.w	r2, r3, #31
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2104      	movs	r1, #4
 8006578:	fa01 f202 	lsl.w	r2, r1, r2
 800657c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	2b00      	cmp	r3, #0
 8006584:	d071      	beq.n	800666a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800658e:	e06c      	b.n	800666a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2202      	movs	r2, #2
 800659a:	409a      	lsls	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02e      	beq.n	8006602 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d029      	beq.n	8006602 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 020a 	bic.w	r2, r2, #10
 80065ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	2102      	movs	r1, #2
 80065e2:	fa01 f202 	lsl.w	r2, r1, r2
 80065e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d038      	beq.n	800666a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006600:	e033      	b.n	800666a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2208      	movs	r2, #8
 800660c:	409a      	lsls	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02a      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d025      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 020e 	bic.w	r2, r2, #14
 800662e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006634:	f003 021f 	and.w	r2, r3, #31
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	2101      	movs	r1, #1
 800663e:	fa01 f202 	lsl.w	r2, r1, r2
 8006642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800666a:	bf00      	nop
 800666c:	bf00      	nop
}
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800668a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	f003 021f 	and.w	r2, r3, #31
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2101      	movs	r1, #1
 80066ac:	fa01 f202 	lsl.w	r2, r1, r2
 80066b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d108      	bne.n	80066d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066d2:	e007      	b.n	80066e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b16      	ldr	r3, [pc, #88]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d802      	bhi.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006704:	4b15      	ldr	r3, [pc, #84]	@ (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e001      	b.n	800670e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800670c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	3b08      	subs	r3, #8
 800671a:	4a12      	ldr	r2, [pc, #72]	@ (8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800671c:	fba2 2303 	umull	r2, r3, r2, r3
 8006720:	091b      	lsrs	r3, r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	009a      	lsls	r2, r3, #2
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a0b      	ldr	r2, [pc, #44]	@ (8006768 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800673a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	409a      	lsls	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40020407 	.word	0x40020407
 800675c:	40020800 	.word	0x40020800
 8006760:	40020820 	.word	0x40020820
 8006764:	cccccccd 	.word	0xcccccccd
 8006768:	40020880 	.word	0x40020880

0800676c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800678e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3b01      	subs	r3, #1
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2201      	movs	r2, #1
 800679a:	409a      	lsls	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	1000823f 	.word	0x1000823f
 80067b0:	40020940 	.word	0x40020940

080067b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067c2:	e15a      	b.n	8006a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	2101      	movs	r1, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 814c 	beq.w	8006a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d005      	beq.n	80067f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d130      	bne.n	8006856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2203      	movs	r2, #3
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4013      	ands	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800682a:	2201      	movs	r2, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 0201 	and.w	r2, r3, #1
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d017      	beq.n	8006892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2203      	movs	r2, #3
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4013      	ands	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d123      	bne.n	80068e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	08da      	lsrs	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3208      	adds	r2, #8
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	220f      	movs	r2, #15
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4013      	ands	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	08da      	lsrs	r2, r3, #3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3208      	adds	r2, #8
 80068e0:	6939      	ldr	r1, [r7, #16]
 80068e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	2203      	movs	r2, #3
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43db      	mvns	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a6 	beq.w	8006a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006928:	4b5b      	ldr	r3, [pc, #364]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 800692a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692c:	4a5a      	ldr	r2, [pc, #360]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	6613      	str	r3, [r2, #96]	@ 0x60
 8006934:	4b58      	ldr	r3, [pc, #352]	@ (8006a98 <HAL_GPIO_Init+0x2e4>)
 8006936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006940:	4a56      	ldr	r2, [pc, #344]	@ (8006a9c <HAL_GPIO_Init+0x2e8>)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	089b      	lsrs	r3, r3, #2
 8006946:	3302      	adds	r3, #2
 8006948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	220f      	movs	r2, #15
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800696a:	d01f      	beq.n	80069ac <HAL_GPIO_Init+0x1f8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a4c      	ldr	r2, [pc, #304]	@ (8006aa0 <HAL_GPIO_Init+0x2ec>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d019      	beq.n	80069a8 <HAL_GPIO_Init+0x1f4>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a4b      	ldr	r2, [pc, #300]	@ (8006aa4 <HAL_GPIO_Init+0x2f0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_GPIO_Init+0x1f0>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a4a      	ldr	r2, [pc, #296]	@ (8006aa8 <HAL_GPIO_Init+0x2f4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00d      	beq.n	80069a0 <HAL_GPIO_Init+0x1ec>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a49      	ldr	r2, [pc, #292]	@ (8006aac <HAL_GPIO_Init+0x2f8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <HAL_GPIO_Init+0x1e8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a48      	ldr	r2, [pc, #288]	@ (8006ab0 <HAL_GPIO_Init+0x2fc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_GPIO_Init+0x1e4>
 8006994:	2305      	movs	r3, #5
 8006996:	e00a      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 8006998:	2306      	movs	r3, #6
 800699a:	e008      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 800699c:	2304      	movs	r3, #4
 800699e:	e006      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a0:	2303      	movs	r3, #3
 80069a2:	e004      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e002      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_GPIO_Init+0x1fa>
 80069ac:	2300      	movs	r3, #0
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	f002 0203 	and.w	r2, r2, #3
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	4093      	lsls	r3, r2
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069be:	4937      	ldr	r1, [pc, #220]	@ (8006a9c <HAL_GPIO_Init+0x2e8>)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	3302      	adds	r3, #2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069cc:	4b39      	ldr	r3, [pc, #228]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4013      	ands	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069f0:	4a30      	ldr	r2, [pc, #192]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069f6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	43db      	mvns	r3, r3
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4013      	ands	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a1a:	4a26      	ldr	r2, [pc, #152]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a20:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a44:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a6e:	4a11      	ldr	r2, [pc, #68]	@ (8006ab4 <HAL_GPIO_Init+0x300>)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3301      	adds	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f47f ae9d 	bne.w	80067c4 <HAL_GPIO_Init+0x10>
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	48000400 	.word	0x48000400
 8006aa4:	48000800 	.word	0x48000800
 8006aa8:	48000c00 	.word	0x48000c00
 8006aac:	48001000 	.word	0x48001000
 8006ab0:	48001400 	.word	0x48001400
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	807b      	strh	r3, [r7, #2]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ac8:	787b      	ldrb	r3, [r7, #1]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ace:	887a      	ldrh	r2, [r7, #2]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ad4:	e002      	b.n	8006adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e08d      	b.n	8006c16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb fdb6 	bl	8002680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2224      	movs	r2, #36	@ 0x24
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d107      	bne.n	8006b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	e006      	b.n	8006b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d108      	bne.n	8006b8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	e007      	b.n	8006b9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69d9      	ldr	r1, [r3, #28]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1a      	ldr	r2, [r3, #32]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d138      	bne.n	8006ca6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e032      	b.n	8006ca8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	@ 0x24
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d139      	bne.n	8006d3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e033      	b.n	8006d40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2224      	movs	r2, #36	@ 0x24
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d141      	bne.n	8006dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d66:	d131      	bne.n	8006dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d68:	4b47      	ldr	r3, [pc, #284]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6e:	4a46      	ldr	r2, [pc, #280]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d78:	4b43      	ldr	r3, [pc, #268]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d80:	4a41      	ldr	r2, [pc, #260]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d88:	4b40      	ldr	r3, [pc, #256]	@ (8006e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2232      	movs	r2, #50	@ 0x32
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	4a3f      	ldr	r2, [pc, #252]	@ (8006e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	0c9b      	lsrs	r3, r3, #18
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d9e:	e002      	b.n	8006da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006da6:	4b38      	ldr	r3, [pc, #224]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db2:	d102      	bne.n	8006dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f2      	bne.n	8006da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dba:	4b33      	ldr	r3, [pc, #204]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc6:	d158      	bne.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e057      	b.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ddc:	e04d      	b.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d141      	bne.n	8006e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006de6:	4b28      	ldr	r3, [pc, #160]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df2:	d131      	bne.n	8006e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006df4:	4b24      	ldr	r3, [pc, #144]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfa:	4a23      	ldr	r2, [pc, #140]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e04:	4b20      	ldr	r3, [pc, #128]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e14:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2232      	movs	r2, #50	@ 0x32
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	0c9b      	lsrs	r3, r3, #18
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e2a:	e002      	b.n	8006e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e32:	4b15      	ldr	r3, [pc, #84]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3e:	d102      	bne.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f2      	bne.n	8006e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e46:	4b10      	ldr	r3, [pc, #64]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e52:	d112      	bne.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e011      	b.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e58:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e68:	e007      	b.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e72:	4a05      	ldr	r2, [pc, #20]	@ (8006e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40007000 	.word	0x40007000
 8006e8c:	20000004 	.word	0x20000004
 8006e90:	431bde83 	.word	0x431bde83

08006e94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e98:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4a04      	ldr	r2, [pc, #16]	@ (8006eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ea2:	6093      	str	r3, [r2, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40007000 	.word	0x40007000

08006eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e2fe      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d075      	beq.n	8006fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed2:	4b97      	ldr	r3, [pc, #604]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 030c 	and.w	r3, r3, #12
 8006eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006edc:	4b94      	ldr	r3, [pc, #592]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b0c      	cmp	r3, #12
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x3e>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d002      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x44>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d10b      	bne.n	8006f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05b      	beq.n	8006fbc <HAL_RCC_OscConfig+0x108>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d157      	bne.n	8006fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e2d9      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_OscConfig+0x74>
 8006f1a:	4b85      	ldr	r3, [pc, #532]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a84      	ldr	r2, [pc, #528]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e01d      	b.n	8006f64 <HAL_RCC_OscConfig+0xb0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f30:	d10c      	bne.n	8006f4c <HAL_RCC_OscConfig+0x98>
 8006f32:	4b7f      	ldr	r3, [pc, #508]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a7e      	ldr	r2, [pc, #504]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a7b      	ldr	r2, [pc, #492]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e00b      	b.n	8006f64 <HAL_RCC_OscConfig+0xb0>
 8006f4c:	4b78      	ldr	r3, [pc, #480]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a77      	ldr	r2, [pc, #476]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b75      	ldr	r3, [pc, #468]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a74      	ldr	r2, [pc, #464]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fbe4 	bl	8003738 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f74:	f7fc fbe0 	bl	8003738 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b64      	cmp	r3, #100	@ 0x64
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e29e      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f86:	4b6a      	ldr	r3, [pc, #424]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f0      	beq.n	8006f74 <HAL_RCC_OscConfig+0xc0>
 8006f92:	e014      	b.n	8006fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fc fbd0 	bl	8003738 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f9c:	f7fc fbcc 	bl	8003738 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	@ 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e28a      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fae:	4b60      	ldr	r3, [pc, #384]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0xe8>
 8006fba:	e000      	b.n	8006fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d075      	beq.n	80070b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fca:	4b59      	ldr	r3, [pc, #356]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
 8006fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fd4:	4b56      	ldr	r3, [pc, #344]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d102      	bne.n	8006fea <HAL_RCC_OscConfig+0x136>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d002      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x13c>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d11f      	bne.n	8007030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_OscConfig+0x154>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e25d      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007008:	4b49      	ldr	r3, [pc, #292]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	4946      	ldr	r1, [pc, #280]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8007018:	4313      	orrs	r3, r2
 800701a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800701c:	4b45      	ldr	r3, [pc, #276]	@ (8007134 <HAL_RCC_OscConfig+0x280>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f7fc fb3d 	bl	80036a0 <HAL_InitTick>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d043      	beq.n	80070b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e249      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007038:	4b3d      	ldr	r3, [pc, #244]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800703e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fc fb78 	bl	8003738 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704c:	f7fc fb74 	bl	8003738 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e232      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800705e:	4b34      	ldr	r3, [pc, #208]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800706a:	4b31      	ldr	r3, [pc, #196]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	061b      	lsls	r3, r3, #24
 8007078:	492d      	ldr	r1, [pc, #180]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	604b      	str	r3, [r1, #4]
 800707e:	e01a      	b.n	80070b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007080:	4b2b      	ldr	r3, [pc, #172]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8007086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800708a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fc fb54 	bl	8003738 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007094:	f7fc fb50 	bl	8003738 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e20e      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070a6:	4b22      	ldr	r3, [pc, #136]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f0      	bne.n	8007094 <HAL_RCC_OscConfig+0x1e0>
 80070b2:	e000      	b.n	80070b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d041      	beq.n	8007146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01c      	beq.n	8007104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ca:	4b19      	ldr	r3, [pc, #100]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 80070cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070d0:	4a17      	ldr	r2, [pc, #92]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 80070d2:	f043 0301 	orr.w	r3, r3, #1
 80070d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070da:	f7fc fb2d 	bl	8003738 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e2:	f7fc fb29 	bl	8003738 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e1e7      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 80070f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0ef      	beq.n	80070e2 <HAL_RCC_OscConfig+0x22e>
 8007102:	e020      	b.n	8007146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007104:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 8007106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800710a:	4a09      	ldr	r2, [pc, #36]	@ (8007130 <HAL_RCC_OscConfig+0x27c>)
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007114:	f7fc fb10 	bl	8003738 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800711a:	e00d      	b.n	8007138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800711c:	f7fc fb0c 	bl	8003738 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d906      	bls.n	8007138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e1ca      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007138:	4b8c      	ldr	r3, [pc, #560]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800713a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1ea      	bne.n	800711c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80a6 	beq.w	80072a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007154:	2300      	movs	r3, #0
 8007156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007158:	4b84      	ldr	r3, [pc, #528]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800715a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_OscConfig+0x2b4>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_RCC_OscConfig+0x2b6>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800716e:	4b7f      	ldr	r3, [pc, #508]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007172:	4a7e      	ldr	r2, [pc, #504]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007178:	6593      	str	r3, [r2, #88]	@ 0x58
 800717a:	4b7c      	ldr	r3, [pc, #496]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007186:	2301      	movs	r3, #1
 8007188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718a:	4b79      	ldr	r3, [pc, #484]	@ (8007370 <HAL_RCC_OscConfig+0x4bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d118      	bne.n	80071c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007196:	4b76      	ldr	r3, [pc, #472]	@ (8007370 <HAL_RCC_OscConfig+0x4bc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a75      	ldr	r2, [pc, #468]	@ (8007370 <HAL_RCC_OscConfig+0x4bc>)
 800719c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a2:	f7fc fac9 	bl	8003738 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071aa:	f7fc fac5 	bl	8003738 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e183      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <HAL_RCC_OscConfig+0x4bc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d108      	bne.n	80071e2 <HAL_RCC_OscConfig+0x32e>
 80071d0:	4b66      	ldr	r3, [pc, #408]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d6:	4a65      	ldr	r2, [pc, #404]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80071d8:	f043 0301 	orr.w	r3, r3, #1
 80071dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071e0:	e024      	b.n	800722c <HAL_RCC_OscConfig+0x378>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	d110      	bne.n	800720c <HAL_RCC_OscConfig+0x358>
 80071ea:	4b60      	ldr	r3, [pc, #384]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f0:	4a5e      	ldr	r2, [pc, #376]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80071f2:	f043 0304 	orr.w	r3, r3, #4
 80071f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071fa:	4b5c      	ldr	r3, [pc, #368]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007200:	4a5a      	ldr	r2, [pc, #360]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800720a:	e00f      	b.n	800722c <HAL_RCC_OscConfig+0x378>
 800720c:	4b57      	ldr	r3, [pc, #348]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007212:	4a56      	ldr	r2, [pc, #344]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800721c:	4b53      	ldr	r3, [pc, #332]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007222:	4a52      	ldr	r2, [pc, #328]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007224:	f023 0304 	bic.w	r3, r3, #4
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d016      	beq.n	8007262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007234:	f7fc fa80 	bl	8003738 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723a:	e00a      	b.n	8007252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723c:	f7fc fa7c 	bl	8003738 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e138      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007252:	4b46      	ldr	r3, [pc, #280]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0ed      	beq.n	800723c <HAL_RCC_OscConfig+0x388>
 8007260:	e015      	b.n	800728e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007262:	f7fc fa69 	bl	8003738 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007268:	e00a      	b.n	8007280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fc fa65 	bl	8003738 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e121      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007280:	4b3a      	ldr	r3, [pc, #232]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ed      	bne.n	800726a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800728e:	7ffb      	ldrb	r3, [r7, #31]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d105      	bne.n	80072a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007294:	4b35      	ldr	r3, [pc, #212]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	4a34      	ldr	r2, [pc, #208]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800729a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800729e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d03c      	beq.n	8007326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072b4:	4b2d      	ldr	r3, [pc, #180]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80072b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072ba:	4a2c      	ldr	r2, [pc, #176]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c4:	f7fc fa38 	bl	8003738 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072cc:	f7fc fa34 	bl	8003738 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e0f2      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072de:	4b23      	ldr	r3, [pc, #140]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80072e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0ef      	beq.n	80072cc <HAL_RCC_OscConfig+0x418>
 80072ec:	e01b      	b.n	8007326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072ee:	4b1f      	ldr	r3, [pc, #124]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80072f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072f4:	4a1d      	ldr	r2, [pc, #116]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fe:	f7fc fa1b 	bl	8003738 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007306:	f7fc fa17 	bl	8003738 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e0d5      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007318:	4b14      	ldr	r3, [pc, #80]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800731a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ef      	bne.n	8007306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80c9 	beq.w	80074c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007330:	4b0e      	ldr	r3, [pc, #56]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 030c 	and.w	r3, r3, #12
 8007338:	2b0c      	cmp	r3, #12
 800733a:	f000 8083 	beq.w	8007444 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d15e      	bne.n	8007404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a08      	ldr	r2, [pc, #32]	@ (800736c <HAL_RCC_OscConfig+0x4b8>)
 800734c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007352:	f7fc f9f1 	bl	8003738 <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007358:	e00c      	b.n	8007374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735a:	f7fc f9ed 	bl	8003738 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d905      	bls.n	8007374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e0ab      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
 800736c:	40021000 	.word	0x40021000
 8007370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007374:	4b55      	ldr	r3, [pc, #340]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1ec      	bne.n	800735a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007380:	4b52      	ldr	r3, [pc, #328]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	4b52      	ldr	r3, [pc, #328]	@ (80074d0 <HAL_RCC_OscConfig+0x61c>)
 8007386:	4013      	ands	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6a11      	ldr	r1, [r2, #32]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007390:	3a01      	subs	r2, #1
 8007392:	0112      	lsls	r2, r2, #4
 8007394:	4311      	orrs	r1, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800739a:	0212      	lsls	r2, r2, #8
 800739c:	4311      	orrs	r1, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073a2:	0852      	lsrs	r2, r2, #1
 80073a4:	3a01      	subs	r2, #1
 80073a6:	0552      	lsls	r2, r2, #21
 80073a8:	4311      	orrs	r1, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073ae:	0852      	lsrs	r2, r2, #1
 80073b0:	3a01      	subs	r2, #1
 80073b2:	0652      	lsls	r2, r2, #25
 80073b4:	4311      	orrs	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073ba:	06d2      	lsls	r2, r2, #27
 80073bc:	430a      	orrs	r2, r1
 80073be:	4943      	ldr	r1, [pc, #268]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073c4:	4b41      	ldr	r3, [pc, #260]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a40      	ldr	r2, [pc, #256]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073d0:	4b3e      	ldr	r3, [pc, #248]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	4a3d      	ldr	r2, [pc, #244]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fc f9ac 	bl	8003738 <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e4:	f7fc f9a8 	bl	8003738 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e066      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f6:	4b35      	ldr	r3, [pc, #212]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x530>
 8007402:	e05e      	b.n	80074c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007404:	4b31      	ldr	r3, [pc, #196]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a30      	ldr	r2, [pc, #192]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 800740a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800740e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fc f992 	bl	8003738 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007418:	f7fc f98e 	bl	8003738 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e04c      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800742a:	4b28      	ldr	r3, [pc, #160]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007436:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	4924      	ldr	r1, [pc, #144]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 800743c:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <HAL_RCC_OscConfig+0x620>)
 800743e:	4013      	ands	r3, r2
 8007440:	60cb      	str	r3, [r1, #12]
 8007442:	e03e      	b.n	80074c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e039      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007450:	4b1e      	ldr	r3, [pc, #120]	@ (80074cc <HAL_RCC_OscConfig+0x618>)
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f003 0203 	and.w	r2, r3, #3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	429a      	cmp	r2, r3
 8007462:	d12c      	bne.n	80074be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746e:	3b01      	subs	r3, #1
 8007470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d123      	bne.n	80074be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007482:	429a      	cmp	r2, r3
 8007484:	d11b      	bne.n	80074be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d113      	bne.n	80074be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	3b01      	subs	r3, #1
 80074a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d109      	bne.n	80074be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	3b01      	subs	r3, #1
 80074b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d001      	beq.n	80074c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40021000 	.word	0x40021000
 80074d0:	019f800c 	.word	0x019f800c
 80074d4:	feeefffc 	.word	0xfeeefffc

080074d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e11e      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074f0:	4b91      	ldr	r3, [pc, #580]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d910      	bls.n	8007520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fe:	4b8e      	ldr	r3, [pc, #568]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f023 020f 	bic.w	r2, r3, #15
 8007506:	498c      	ldr	r1, [pc, #560]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800750e:	4b8a      	ldr	r3, [pc, #552]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	429a      	cmp	r2, r3
 800751a:	d001      	beq.n	8007520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e106      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d073      	beq.n	8007614 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d129      	bne.n	8007588 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007534:	4b81      	ldr	r3, [pc, #516]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e0f4      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007544:	f000 f9e4 	bl	8007910 <RCC_GetSysClockFreqFromPLLSource>
 8007548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4a7c      	ldr	r2, [pc, #496]	@ (8007740 <HAL_RCC_ClockConfig+0x268>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d93f      	bls.n	80075d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007552:	4b7a      	ldr	r3, [pc, #488]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007566:	2b00      	cmp	r3, #0
 8007568:	d033      	beq.n	80075d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800756e:	2b00      	cmp	r3, #0
 8007570:	d12f      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007572:	4b72      	ldr	r3, [pc, #456]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800757a:	4a70      	ldr	r2, [pc, #448]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 800757c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007582:	2380      	movs	r3, #128	@ 0x80
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	e024      	b.n	80075d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d107      	bne.n	80075a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007590:	4b6a      	ldr	r3, [pc, #424]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0c6      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075a0:	4b66      	ldr	r3, [pc, #408]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0be      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075b0:	f000 f914 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 80075b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4a61      	ldr	r2, [pc, #388]	@ (8007740 <HAL_RCC_ClockConfig+0x268>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d909      	bls.n	80075d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075be:	4b5f      	ldr	r3, [pc, #380]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075c6:	4a5d      	ldr	r2, [pc, #372]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80075c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075ce:	2380      	movs	r3, #128	@ 0x80
 80075d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075d2:	4b5a      	ldr	r3, [pc, #360]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0203 	bic.w	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4957      	ldr	r1, [pc, #348]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fc f8a8 	bl	8003738 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ea:	e00a      	b.n	8007602 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ec:	f7fc f8a4 	bl	8003738 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e095      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	4b4e      	ldr	r3, [pc, #312]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 020c 	and.w	r2, r3, #12
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	429a      	cmp	r2, r3
 8007612:	d1eb      	bne.n	80075ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d023      	beq.n	8007668 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800762c:	4b43      	ldr	r3, [pc, #268]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	4a42      	ldr	r2, [pc, #264]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007636:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007644:	4b3d      	ldr	r3, [pc, #244]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800764c:	4a3b      	ldr	r2, [pc, #236]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 800764e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007654:	4b39      	ldr	r3, [pc, #228]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	4936      	ldr	r1, [pc, #216]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007662:	4313      	orrs	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
 8007666:	e008      	b.n	800767a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b80      	cmp	r3, #128	@ 0x80
 800766c:	d105      	bne.n	800767a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800766e:	4b33      	ldr	r3, [pc, #204]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4a32      	ldr	r2, [pc, #200]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 8007674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007678:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800767a:	4b2f      	ldr	r3, [pc, #188]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d21d      	bcs.n	80076c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007688:	4b2b      	ldr	r3, [pc, #172]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f023 020f 	bic.w	r2, r3, #15
 8007690:	4929      	ldr	r1, [pc, #164]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007698:	f7fc f84e 	bl	8003738 <HAL_GetTick>
 800769c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800769e:	e00a      	b.n	80076b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a0:	f7fc f84a 	bl	8003738 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e03b      	b.n	800772e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076b6:	4b20      	ldr	r3, [pc, #128]	@ (8007738 <HAL_RCC_ClockConfig+0x260>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d1ed      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	4917      	ldr	r1, [pc, #92]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ee:	4b13      	ldr	r3, [pc, #76]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	490f      	ldr	r1, [pc, #60]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007702:	f000 f86b 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8007706:	4602      	mov	r2, r0
 8007708:	4b0c      	ldr	r3, [pc, #48]	@ (800773c <HAL_RCC_ClockConfig+0x264>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	091b      	lsrs	r3, r3, #4
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	490c      	ldr	r1, [pc, #48]	@ (8007744 <HAL_RCC_ClockConfig+0x26c>)
 8007714:	5ccb      	ldrb	r3, [r1, r3]
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	4a0a      	ldr	r2, [pc, #40]	@ (8007748 <HAL_RCC_ClockConfig+0x270>)
 8007720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007722:	4b0a      	ldr	r3, [pc, #40]	@ (800774c <HAL_RCC_ClockConfig+0x274>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fb ffba 	bl	80036a0 <HAL_InitTick>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40022000 	.word	0x40022000
 800773c:	40021000 	.word	0x40021000
 8007740:	04c4b400 	.word	0x04c4b400
 8007744:	0800c1b8 	.word	0x0800c1b8
 8007748:	20000004 	.word	0x20000004
 800774c:	20000010 	.word	0x20000010

08007750 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800775c:	2302      	movs	r3, #2
 800775e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007760:	2303      	movs	r3, #3
 8007762:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800777c:	029b      	lsls	r3, r3, #10
 800777e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800778a:	4b13      	ldr	r3, [pc, #76]	@ (80077d8 <HAL_RCC_MCOConfig+0x88>)
 800778c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800778e:	2101      	movs	r1, #1
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	fa01 f303 	lsl.w	r3, r1, r3
 8007796:	4910      	ldr	r1, [pc, #64]	@ (80077d8 <HAL_RCC_MCOConfig+0x88>)
 8007798:	4313      	orrs	r3, r2
 800779a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	0d1b      	lsrs	r3, r3, #20
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80077aa:	f107 0310 	add.w	r3, r7, #16
 80077ae:	4619      	mov	r1, r3
 80077b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b2:	f7fe ffff 	bl	80067b4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d109      	bne.n	80077d0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <HAL_RCC_MCOConfig+0x88>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	430b      	orrs	r3, r1
 80077ca:	4903      	ldr	r1, [pc, #12]	@ (80077d8 <HAL_RCC_MCOConfig+0x88>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	608b      	str	r3, [r1, #8]
  }
}
 80077d0:	bf00      	nop
 80077d2:	3730      	adds	r7, #48	@ 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000

080077dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 030c 	and.w	r3, r3, #12
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d102      	bne.n	80077f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	e047      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80077f4:	4b27      	ldr	r3, [pc, #156]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d102      	bne.n	8007806 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007800:	4b26      	ldr	r3, [pc, #152]	@ (800789c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	e03e      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007806:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b0c      	cmp	r3, #12
 8007810:	d136      	bne.n	8007880 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800781c:	4b1d      	ldr	r3, [pc, #116]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3301      	adds	r3, #1
 8007828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d10c      	bne.n	800784a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007830:	4a1a      	ldr	r2, [pc, #104]	@ (800789c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	4a16      	ldr	r2, [pc, #88]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800783a:	68d2      	ldr	r2, [r2, #12]
 800783c:	0a12      	lsrs	r2, r2, #8
 800783e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	617b      	str	r3, [r7, #20]
      break;
 8007848:	e00c      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800784a:	4a13      	ldr	r2, [pc, #76]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	4a10      	ldr	r2, [pc, #64]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007854:	68d2      	ldr	r2, [r2, #12]
 8007856:	0a12      	lsrs	r2, r2, #8
 8007858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]
      break;
 8007862:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007864:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	0e5b      	lsrs	r3, r3, #25
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	3301      	adds	r3, #1
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	e001      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007884:	693b      	ldr	r3, [r7, #16]
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40021000 	.word	0x40021000
 8007898:	00f42400 	.word	0x00f42400
 800789c:	017d7840 	.word	0x017d7840

080078a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a4:	4b03      	ldr	r3, [pc, #12]	@ (80078b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078a6:	681b      	ldr	r3, [r3, #0]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000004 	.word	0x20000004

080078b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078bc:	f7ff fff0 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	4904      	ldr	r1, [pc, #16]	@ (80078e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078ce:	5ccb      	ldrb	r3, [r1, r3]
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40021000 	.word	0x40021000
 80078e0:	0800c1c8 	.word	0x0800c1c8

080078e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078e8:	f7ff ffda 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	0adb      	lsrs	r3, r3, #11
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	4904      	ldr	r1, [pc, #16]	@ (800790c <HAL_RCC_GetPCLK2Freq+0x28>)
 80078fa:	5ccb      	ldrb	r3, [r1, r3]
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40021000 	.word	0x40021000
 800790c:	0800c1c8 	.word	0x0800c1c8

08007910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007916:	4b1e      	ldr	r3, [pc, #120]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007920:	4b1b      	ldr	r3, [pc, #108]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	3301      	adds	r3, #1
 800792c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d10c      	bne.n	800794e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007934:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	4a14      	ldr	r2, [pc, #80]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800793e:	68d2      	ldr	r2, [r2, #12]
 8007940:	0a12      	lsrs	r2, r2, #8
 8007942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	617b      	str	r3, [r7, #20]
    break;
 800794c:	e00c      	b.n	8007968 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800794e:	4a12      	ldr	r2, [pc, #72]	@ (8007998 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	fbb2 f3f3 	udiv	r3, r2, r3
 8007956:	4a0e      	ldr	r2, [pc, #56]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007958:	68d2      	ldr	r2, [r2, #12]
 800795a:	0a12      	lsrs	r2, r2, #8
 800795c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]
    break;
 8007966:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007968:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	0e5b      	lsrs	r3, r3, #25
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	3301      	adds	r3, #1
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007982:	687b      	ldr	r3, [r7, #4]
}
 8007984:	4618      	mov	r0, r3
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40021000 	.word	0x40021000
 8007994:	017d7840 	.word	0x017d7840
 8007998:	00f42400 	.word	0x00f42400

0800799c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079a4:	2300      	movs	r3, #0
 80079a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079a8:	2300      	movs	r3, #0
 80079aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8098 	beq.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ba:	2300      	movs	r3, #0
 80079bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079be:	4b43      	ldr	r3, [pc, #268]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10d      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ca:	4b40      	ldr	r3, [pc, #256]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ce:	4a3f      	ldr	r2, [pc, #252]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d6:	4b3d      	ldr	r3, [pc, #244]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079e2:	2301      	movs	r3, #1
 80079e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079e6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a39      	ldr	r2, [pc, #228]	@ (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079f2:	f7fb fea1 	bl	8003738 <HAL_GetTick>
 80079f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079f8:	e009      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fa:	f7fb fe9d 	bl	8003738 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d902      	bls.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a0c:	e005      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a0e:	4b30      	ldr	r3, [pc, #192]	@ (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0ef      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a1a:	7cfb      	ldrb	r3, [r7, #19]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d159      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a20:	4b2a      	ldr	r3, [pc, #168]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01e      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d019      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a3c:	4b23      	ldr	r3, [pc, #140]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a48:	4b20      	ldr	r3, [pc, #128]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a58:	4b1c      	ldr	r3, [pc, #112]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a68:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7a:	f7fb fe5d 	bl	8003738 <HAL_GetTick>
 8007a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a80:	e00b      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a82:	f7fb fe59 	bl	8003738 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d902      	bls.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	74fb      	strb	r3, [r7, #19]
            break;
 8007a98:	e006      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0ec      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10b      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aae:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007abc:	4903      	ldr	r1, [pc, #12]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ac6:	7cfb      	ldrb	r3, [r7, #19]
 8007ac8:	74bb      	strb	r3, [r7, #18]
 8007aca:	e005      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007acc:	40021000 	.word	0x40021000
 8007ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	7cfb      	ldrb	r3, [r7, #19]
 8007ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad8:	7c7b      	ldrb	r3, [r7, #17]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d105      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ade:	4ba7      	ldr	r3, [pc, #668]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae2:	4aa6      	ldr	r2, [pc, #664]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007af6:	4ba1      	ldr	r3, [pc, #644]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afc:	f023 0203 	bic.w	r2, r3, #3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	499d      	ldr	r1, [pc, #628]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b18:	4b98      	ldr	r3, [pc, #608]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1e:	f023 020c 	bic.w	r2, r3, #12
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	4995      	ldr	r1, [pc, #596]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b3a:	4b90      	ldr	r3, [pc, #576]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	498c      	ldr	r1, [pc, #560]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b5c:	4b87      	ldr	r3, [pc, #540]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	4984      	ldr	r1, [pc, #528]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	497b      	ldr	r1, [pc, #492]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ba0:	4b76      	ldr	r3, [pc, #472]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	4973      	ldr	r1, [pc, #460]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	496a      	ldr	r1, [pc, #424]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007be4:	4b65      	ldr	r3, [pc, #404]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	4962      	ldr	r1, [pc, #392]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c06:	4b5d      	ldr	r3, [pc, #372]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	4959      	ldr	r1, [pc, #356]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c28:	4b54      	ldr	r3, [pc, #336]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c2e:	f023 0203 	bic.w	r2, r3, #3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	4951      	ldr	r1, [pc, #324]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4948      	ldr	r1, [pc, #288]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d015      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c6c:	4b43      	ldr	r3, [pc, #268]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7a:	4940      	ldr	r1, [pc, #256]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c8a:	d105      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	4a3a      	ldr	r2, [pc, #232]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d015      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ca4:	4b35      	ldr	r3, [pc, #212]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb2:	4932      	ldr	r1, [pc, #200]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cc2:	d105      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d015      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cdc:	4b27      	ldr	r3, [pc, #156]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cea:	4924      	ldr	r1, [pc, #144]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cfa:	d105      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a1e      	ldr	r2, [pc, #120]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d015      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d14:	4b19      	ldr	r3, [pc, #100]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d22:	4916      	ldr	r1, [pc, #88]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d32:	d105      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d34:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a10      	ldr	r2, [pc, #64]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d019      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	4908      	ldr	r1, [pc, #32]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d6a:	d109      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d6c:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4a02      	ldr	r2, [pc, #8]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d76:	60d3      	str	r3, [r2, #12]
 8007d78:	e002      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d7a:	bf00      	nop
 8007d7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d015      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d8c:	4b29      	ldr	r3, [pc, #164]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d9a:	4926      	ldr	r1, [pc, #152]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007daa:	d105      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dac:	4b21      	ldr	r3, [pc, #132]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a20      	ldr	r2, [pc, #128]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007db6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d015      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd2:	4918      	ldr	r1, [pc, #96]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de2:	d105      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007de4:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4a12      	ldr	r2, [pc, #72]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d015      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e0a:	490a      	ldr	r1, [pc, #40]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e1a:	d105      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40021000 	.word	0x40021000

08007e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e09d      	b.n	8007f86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e5a:	d009      	beq.n	8007e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	61da      	str	r2, [r3, #28]
 8007e62:	e005      	b.n	8007e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fa fc6e 	bl	800276c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007eb0:	d902      	bls.n	8007eb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	e002      	b.n	8007ebe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ebc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007ec6:	d007      	beq.n	8007ed8 <HAL_SPI_Init+0xa0>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f1a:	ea42 0103 	orr.w	r1, r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	f003 0204 	and.w	r2, r3, #4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f54:	ea42 0103 	orr.w	r1, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b088      	sub	sp, #32
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_SPI_Transmit+0x22>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e15f      	b.n	8008270 <HAL_SPI_Transmit+0x2e2>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fb8:	f7fb fbbe 	bl	8003738 <HAL_GetTick>
 8007fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d002      	beq.n	8007fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fd2:	e148      	b.n	8008266 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <HAL_SPI_Transmit+0x52>
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fe4:	e13f      	b.n	8008266 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2203      	movs	r2, #3
 8007fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008030:	d10f      	bne.n	8008052 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b40      	cmp	r3, #64	@ 0x40
 800805e:	d007      	beq.n	8008070 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800806e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008078:	d94f      	bls.n	800811a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_SPI_Transmit+0xfa>
 8008082:	8afb      	ldrh	r3, [r7, #22]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d142      	bne.n	800810e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	881a      	ldrh	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008098:	1c9a      	adds	r2, r3, #2
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080ac:	e02f      	b.n	800810e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d112      	bne.n	80080e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	881a      	ldrh	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	1c9a      	adds	r2, r3, #2
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080e0:	e015      	b.n	800810e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e2:	f7fb fb29 	bl	8003738 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d803      	bhi.n	80080fa <HAL_SPI_Transmit+0x16c>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d102      	bne.n	8008100 <HAL_SPI_Transmit+0x172>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800810c:	e0ab      	b.n	8008266 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1ca      	bne.n	80080ae <HAL_SPI_Transmit+0x120>
 8008118:	e080      	b.n	800821c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_SPI_Transmit+0x19a>
 8008122:	8afb      	ldrh	r3, [r7, #22]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d174      	bne.n	8008212 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	d912      	bls.n	8008158 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008142:	1c9a      	adds	r2, r3, #2
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b02      	subs	r3, #2
 8008150:	b29a      	uxth	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008156:	e05c      	b.n	8008212 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800817e:	e048      	b.n	8008212 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d12b      	bne.n	80081e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d912      	bls.n	80081be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	881a      	ldrh	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a8:	1c9a      	adds	r2, r3, #2
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b02      	subs	r3, #2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081bc:	e029      	b.n	8008212 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081e4:	e015      	b.n	8008212 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e6:	f7fb faa7 	bl	8003738 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d803      	bhi.n	80081fe <HAL_SPI_Transmit+0x270>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d102      	bne.n	8008204 <HAL_SPI_Transmit+0x276>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008210:	e029      	b.n	8008266 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1b1      	bne.n	8008180 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f947 	bl	80084b4 <SPI_EndRxTxTransaction>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e003      	b.n	8008266 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800826e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008288:	f7fb fa56 	bl	8003738 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4413      	add	r3, r2
 8008296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008298:	f7fb fa4e 	bl	8003738 <HAL_GetTick>
 800829c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800829e:	4b39      	ldr	r3, [pc, #228]	@ (8008384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	015b      	lsls	r3, r3, #5
 80082a4:	0d1b      	lsrs	r3, r3, #20
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ae:	e054      	b.n	800835a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b6:	d050      	beq.n	800835a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b8:	f7fb fa3e 	bl	8003738 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d902      	bls.n	80082ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d13d      	bne.n	800834a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80082dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082e6:	d111      	bne.n	800830c <SPI_WaitFlagStateUntilTimeout+0x94>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082f0:	d004      	beq.n	80082fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082fa:	d107      	bne.n	800830c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800830a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008314:	d10f      	bne.n	8008336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e017      	b.n	800837a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3b01      	subs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	429a      	cmp	r2, r3
 8008376:	d19b      	bne.n	80082b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000004 	.word	0x20000004

08008388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800839a:	f7fb f9cd 	bl	8003738 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	4413      	add	r3, r2
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80083aa:	f7fb f9c5 	bl	8003738 <HAL_GetTick>
 80083ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083b8:	4b3d      	ldr	r3, [pc, #244]	@ (80084b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00da      	lsls	r2, r3, #3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	0d1b      	lsrs	r3, r3, #20
 80083c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083d0:	e060      	b.n	8008494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80083d8:	d107      	bne.n	80083ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d050      	beq.n	8008494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f2:	f7fb f9a1 	bl	8003738 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fe:	429a      	cmp	r2, r3
 8008400:	d902      	bls.n	8008408 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d13d      	bne.n	8008484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008420:	d111      	bne.n	8008446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800842a:	d004      	beq.n	8008436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008434:	d107      	bne.n	8008446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844e:	d10f      	bne.n	8008470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800846e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e010      	b.n	80084a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	3b01      	subs	r3, #1
 8008492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d196      	bne.n	80083d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3728      	adds	r7, #40	@ 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000004 	.word	0x20000004

080084b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff ff5b 	bl	8008388 <SPI_WaitFifoStateUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084dc:	f043 0220 	orr.w	r2, r3, #32
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e027      	b.n	8008538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	2180      	movs	r1, #128	@ 0x80
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fec0 	bl	8008278 <SPI_WaitFlagStateUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008502:	f043 0220 	orr.w	r2, r3, #32
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e014      	b.n	8008538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff ff34 	bl	8008388 <SPI_WaitFifoStateUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800852a:	f043 0220 	orr.w	r2, r3, #32
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e000      	b.n	8008538 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e049      	b.n	80085e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fa f944 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f000 fae0 	bl	8008b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d001      	beq.n	8008608 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e04c      	b.n	80086a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a26      	ldr	r2, [pc, #152]	@ (80086b0 <HAL_TIM_Base_Start+0xc0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d022      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008622:	d01d      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a22      	ldr	r2, [pc, #136]	@ (80086b4 <HAL_TIM_Base_Start+0xc4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d018      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a21      	ldr	r2, [pc, #132]	@ (80086b8 <HAL_TIM_Base_Start+0xc8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d013      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	@ (80086bc <HAL_TIM_Base_Start+0xcc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00e      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1e      	ldr	r2, [pc, #120]	@ (80086c0 <HAL_TIM_Base_Start+0xd0>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d009      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1c      	ldr	r2, [pc, #112]	@ (80086c4 <HAL_TIM_Base_Start+0xd4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_TIM_Base_Start+0x70>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1b      	ldr	r2, [pc, #108]	@ (80086c8 <HAL_TIM_Base_Start+0xd8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d115      	bne.n	800868c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	4b19      	ldr	r3, [pc, #100]	@ (80086cc <HAL_TIM_Base_Start+0xdc>)
 8008668:	4013      	ands	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b06      	cmp	r3, #6
 8008670:	d015      	beq.n	800869e <HAL_TIM_Base_Start+0xae>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008678:	d011      	beq.n	800869e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868a:	e008      	b.n	800869e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e000      	b.n	80086a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40013400 	.word	0x40013400
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40015000 	.word	0x40015000
 80086cc:	00010007 	.word	0x00010007

080086d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086e2:	4013      	ands	r3, r2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10f      	bne.n	8008708 <HAL_TIM_Base_Stop+0x38>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d107      	bne.n	8008708 <HAL_TIM_Base_Stop+0x38>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e049      	b.n	80087c4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f841 	bl	80087cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3304      	adds	r3, #4
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f000 f9f1 	bl	8008b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e088      	b.n	8008910 <HAL_TIM_IC_ConfigChannel+0x130>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d11b      	bne.n	8008844 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800881c:	f000 fa46 	bl	8008cac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 020c 	bic.w	r2, r2, #12
 800882e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6999      	ldr	r1, [r3, #24]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	619a      	str	r2, [r3, #24]
 8008842:	e060      	b.n	8008906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b04      	cmp	r3, #4
 8008848:	d11c      	bne.n	8008884 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800885a:	f000 faca 	bl	8008df2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	699a      	ldr	r2, [r3, #24]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800886c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6999      	ldr	r1, [r3, #24]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	021a      	lsls	r2, r3, #8
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	619a      	str	r2, [r3, #24]
 8008882:	e040      	b.n	8008906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b08      	cmp	r3, #8
 8008888:	d11b      	bne.n	80088c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800889a:	f000 fb17 	bl	8008ecc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 020c 	bic.w	r2, r2, #12
 80088ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69d9      	ldr	r1, [r3, #28]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	61da      	str	r2, [r3, #28]
 80088c0:	e021      	b.n	8008906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b0c      	cmp	r3, #12
 80088c6:	d11c      	bne.n	8008902 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80088d8:	f000 fb34 	bl	8008f44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69da      	ldr	r2, [r3, #28]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69d9      	ldr	r1, [r3, #28]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	61da      	str	r2, [r3, #28]
 8008900:	e001      	b.n	8008906 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800890e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIM_ConfigClockSource+0x1c>
 8008930:	2302      	movs	r3, #2
 8008932:	e0f6      	b.n	8008b22 <HAL_TIM_ConfigClockSource+0x20a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800895e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a6f      	ldr	r2, [pc, #444]	@ (8008b2c <HAL_TIM_ConfigClockSource+0x214>)
 800896e:	4293      	cmp	r3, r2
 8008970:	f000 80c1 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008974:	4a6d      	ldr	r2, [pc, #436]	@ (8008b2c <HAL_TIM_ConfigClockSource+0x214>)
 8008976:	4293      	cmp	r3, r2
 8008978:	f200 80c6 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 800897c:	4a6c      	ldr	r2, [pc, #432]	@ (8008b30 <HAL_TIM_ConfigClockSource+0x218>)
 800897e:	4293      	cmp	r3, r2
 8008980:	f000 80b9 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008984:	4a6a      	ldr	r2, [pc, #424]	@ (8008b30 <HAL_TIM_ConfigClockSource+0x218>)
 8008986:	4293      	cmp	r3, r2
 8008988:	f200 80be 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 800898c:	4a69      	ldr	r2, [pc, #420]	@ (8008b34 <HAL_TIM_ConfigClockSource+0x21c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	f000 80b1 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008994:	4a67      	ldr	r2, [pc, #412]	@ (8008b34 <HAL_TIM_ConfigClockSource+0x21c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	f200 80b6 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 800899c:	4a66      	ldr	r2, [pc, #408]	@ (8008b38 <HAL_TIM_ConfigClockSource+0x220>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	f000 80a9 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 80089a4:	4a64      	ldr	r2, [pc, #400]	@ (8008b38 <HAL_TIM_ConfigClockSource+0x220>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f200 80ae 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089ac:	4a63      	ldr	r2, [pc, #396]	@ (8008b3c <HAL_TIM_ConfigClockSource+0x224>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	f000 80a1 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 80089b4:	4a61      	ldr	r2, [pc, #388]	@ (8008b3c <HAL_TIM_ConfigClockSource+0x224>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	f200 80a6 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089bc:	4a60      	ldr	r2, [pc, #384]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x228>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f000 8099 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 80089c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008b40 <HAL_TIM_ConfigClockSource+0x228>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	f200 809e 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089d0:	f000 8091 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 80089d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089d8:	f200 8096 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e0:	f000 8089 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 80089e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e8:	f200 808e 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f0:	d03e      	beq.n	8008a70 <HAL_TIM_ConfigClockSource+0x158>
 80089f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f6:	f200 8087 	bhi.w	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fe:	f000 8086 	beq.w	8008b0e <HAL_TIM_ConfigClockSource+0x1f6>
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a06:	d87f      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a08:	2b70      	cmp	r3, #112	@ 0x70
 8008a0a:	d01a      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x12a>
 8008a0c:	2b70      	cmp	r3, #112	@ 0x70
 8008a0e:	d87b      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a10:	2b60      	cmp	r3, #96	@ 0x60
 8008a12:	d050      	beq.n	8008ab6 <HAL_TIM_ConfigClockSource+0x19e>
 8008a14:	2b60      	cmp	r3, #96	@ 0x60
 8008a16:	d877      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a18:	2b50      	cmp	r3, #80	@ 0x50
 8008a1a:	d03c      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x17e>
 8008a1c:	2b50      	cmp	r3, #80	@ 0x50
 8008a1e:	d873      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a20:	2b40      	cmp	r3, #64	@ 0x40
 8008a22:	d058      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0x1be>
 8008a24:	2b40      	cmp	r3, #64	@ 0x40
 8008a26:	d86f      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a28:	2b30      	cmp	r3, #48	@ 0x30
 8008a2a:	d064      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a2c:	2b30      	cmp	r3, #48	@ 0x30
 8008a2e:	d86b      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d060      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d867      	bhi.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d05c      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d05a      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a40:	e062      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a52:	f000 fad1 	bl	8008ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	609a      	str	r2, [r3, #8]
      break;
 8008a6e:	e04f      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a80:	f000 faba 	bl	8008ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a92:	609a      	str	r2, [r3, #8]
      break;
 8008a94:	e03c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f000 f976 	bl	8008d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2150      	movs	r1, #80	@ 0x50
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fa85 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008ab4:	e02c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f000 f9d2 	bl	8008e6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2160      	movs	r1, #96	@ 0x60
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fa75 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008ad4:	e01c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 f956 	bl	8008d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2140      	movs	r1, #64	@ 0x40
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fa65 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008af4:	e00c      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f000 fa5c 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008b06:	e003      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0c:	e000      	b.n	8008b10 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	00100070 	.word	0x00100070
 8008b30:	00100060 	.word	0x00100060
 8008b34:	00100050 	.word	0x00100050
 8008b38:	00100040 	.word	0x00100040
 8008b3c:	00100030 	.word	0x00100030
 8008b40:	00100020 	.word	0x00100020

08008b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a4c      	ldr	r2, [pc, #304]	@ (8008c88 <TIM_Base_SetConfig+0x144>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d017      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b62:	d013      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a49      	ldr	r2, [pc, #292]	@ (8008c8c <TIM_Base_SetConfig+0x148>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00f      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a48      	ldr	r2, [pc, #288]	@ (8008c90 <TIM_Base_SetConfig+0x14c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00b      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a47      	ldr	r2, [pc, #284]	@ (8008c94 <TIM_Base_SetConfig+0x150>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d007      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a46      	ldr	r2, [pc, #280]	@ (8008c98 <TIM_Base_SetConfig+0x154>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_Base_SetConfig+0x48>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a45      	ldr	r2, [pc, #276]	@ (8008c9c <TIM_Base_SetConfig+0x158>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d108      	bne.n	8008b9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a39      	ldr	r2, [pc, #228]	@ (8008c88 <TIM_Base_SetConfig+0x144>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d023      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bac:	d01f      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a36      	ldr	r2, [pc, #216]	@ (8008c8c <TIM_Base_SetConfig+0x148>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d01b      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a35      	ldr	r2, [pc, #212]	@ (8008c90 <TIM_Base_SetConfig+0x14c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d017      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a34      	ldr	r2, [pc, #208]	@ (8008c94 <TIM_Base_SetConfig+0x150>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a33      	ldr	r2, [pc, #204]	@ (8008c98 <TIM_Base_SetConfig+0x154>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00f      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a33      	ldr	r2, [pc, #204]	@ (8008ca0 <TIM_Base_SetConfig+0x15c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00b      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a32      	ldr	r2, [pc, #200]	@ (8008ca4 <TIM_Base_SetConfig+0x160>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d007      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a31      	ldr	r2, [pc, #196]	@ (8008ca8 <TIM_Base_SetConfig+0x164>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d003      	beq.n	8008bee <TIM_Base_SetConfig+0xaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a2c      	ldr	r2, [pc, #176]	@ (8008c9c <TIM_Base_SetConfig+0x158>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d108      	bne.n	8008c00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a18      	ldr	r2, [pc, #96]	@ (8008c88 <TIM_Base_SetConfig+0x144>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d013      	beq.n	8008c54 <TIM_Base_SetConfig+0x110>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008c98 <TIM_Base_SetConfig+0x154>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00f      	beq.n	8008c54 <TIM_Base_SetConfig+0x110>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca0 <TIM_Base_SetConfig+0x15c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00b      	beq.n	8008c54 <TIM_Base_SetConfig+0x110>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a19      	ldr	r2, [pc, #100]	@ (8008ca4 <TIM_Base_SetConfig+0x160>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d007      	beq.n	8008c54 <TIM_Base_SetConfig+0x110>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a18      	ldr	r2, [pc, #96]	@ (8008ca8 <TIM_Base_SetConfig+0x164>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d003      	beq.n	8008c54 <TIM_Base_SetConfig+0x110>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a13      	ldr	r2, [pc, #76]	@ (8008c9c <TIM_Base_SetConfig+0x158>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d103      	bne.n	8008c5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d105      	bne.n	8008c7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f023 0201 	bic.w	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	611a      	str	r2, [r3, #16]
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40000400 	.word	0x40000400
 8008c90:	40000800 	.word	0x40000800
 8008c94:	40000c00 	.word	0x40000c00
 8008c98:	40013400 	.word	0x40013400
 8008c9c:	40015000 	.word	0x40015000
 8008ca0:	40014000 	.word	0x40014000
 8008ca4:	40014400 	.word	0x40014400
 8008ca8:	40014800 	.word	0x40014800

08008cac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f023 0201 	bic.w	r2, r3, #1
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4a28      	ldr	r2, [pc, #160]	@ (8008d78 <TIM_TI1_SetConfig+0xcc>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d01b      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce0:	d017      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4a25      	ldr	r2, [pc, #148]	@ (8008d7c <TIM_TI1_SetConfig+0xd0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a24      	ldr	r2, [pc, #144]	@ (8008d80 <TIM_TI1_SetConfig+0xd4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00f      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a23      	ldr	r2, [pc, #140]	@ (8008d84 <TIM_TI1_SetConfig+0xd8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00b      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a22      	ldr	r2, [pc, #136]	@ (8008d88 <TIM_TI1_SetConfig+0xdc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d007      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4a21      	ldr	r2, [pc, #132]	@ (8008d8c <TIM_TI1_SetConfig+0xe0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d003      	beq.n	8008d12 <TIM_TI1_SetConfig+0x66>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a20      	ldr	r2, [pc, #128]	@ (8008d90 <TIM_TI1_SetConfig+0xe4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d101      	bne.n	8008d16 <TIM_TI1_SetConfig+0x6a>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <TIM_TI1_SetConfig+0x6c>
 8008d16:	2300      	movs	r3, #0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d008      	beq.n	8008d2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e003      	b.n	8008d36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	011b      	lsls	r3, r3, #4
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f023 030a 	bic.w	r3, r3, #10
 8008d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f003 030a 	and.w	r3, r3, #10
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40012c00 	.word	0x40012c00
 8008d7c:	40000400 	.word	0x40000400
 8008d80:	40000800 	.word	0x40000800
 8008d84:	40000c00 	.word	0x40000c00
 8008d88:	40013400 	.word	0x40013400
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40015000 	.word	0x40015000

08008d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 030a 	bic.w	r3, r3, #10
 8008dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b087      	sub	sp, #28
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f023 0210 	bic.w	r2, r3, #16
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	031b      	lsls	r3, r3, #12
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	621a      	str	r2, [r3, #32]
}
 8008e60:	bf00      	nop
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f023 0210 	bic.w	r2, r3, #16
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	031b      	lsls	r3, r3, #12
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	621a      	str	r2, [r3, #32]
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1b      	ldr	r3, [r3, #32]
 8008ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	621a      	str	r2, [r3, #32]
}
 8008f38:	bf00      	nop
 8008f3a:	371c      	adds	r7, #28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	031b      	lsls	r3, r3, #12
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008f96:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	031b      	lsls	r3, r3, #12
 8008f9c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	f043 0307 	orr.w	r3, r3, #7
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	609a      	str	r2, [r3, #8]
}
 8008fec:	bf00      	nop
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	021a      	lsls	r2, r3, #8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	431a      	orrs	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	4313      	orrs	r3, r2
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	609a      	str	r2, [r3, #8]
}
 800902c:	bf00      	nop
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800904c:	2302      	movs	r3, #2
 800904e:	e074      	b.n	800913a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a34      	ldr	r2, [pc, #208]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a33      	ldr	r2, [pc, #204]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a31      	ldr	r2, [pc, #196]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d108      	bne.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80090a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a21      	ldr	r2, [pc, #132]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d022      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d0:	d01d      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d018      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009158 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1c      	ldr	r2, [pc, #112]	@ (800915c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00e      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a15      	ldr	r2, [pc, #84]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d009      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a18      	ldr	r2, [pc, #96]	@ (8009160 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d004      	beq.n	800910e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a11      	ldr	r2, [pc, #68]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d10c      	bne.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	4313      	orrs	r3, r2
 800911e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40013400 	.word	0x40013400
 8009150:	40015000 	.word	0x40015000
 8009154:	40000400 	.word	0x40000400
 8009158:	40000800 	.word	0x40000800
 800915c:	40000c00 	.word	0x40000c00
 8009160:	40014000 	.word	0x40014000

08009164 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_TIMEx_TISelection+0x1e>
 800917e:	2302      	movs	r3, #2
 8009180:	e073      	b.n	800926a <HAL_TIMEx_TISelection+0x106>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b0c      	cmp	r3, #12
 800918e:	d864      	bhi.n	800925a <HAL_TIMEx_TISelection+0xf6>
 8009190:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <HAL_TIMEx_TISelection+0x34>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091cd 	.word	0x080091cd
 800919c:	0800925b 	.word	0x0800925b
 80091a0:	0800925b 	.word	0x0800925b
 80091a4:	0800925b 	.word	0x0800925b
 80091a8:	08009219 	.word	0x08009219
 80091ac:	0800925b 	.word	0x0800925b
 80091b0:	0800925b 	.word	0x0800925b
 80091b4:	0800925b 	.word	0x0800925b
 80091b8:	0800922f 	.word	0x0800922f
 80091bc:	0800925b 	.word	0x0800925b
 80091c0:	0800925b 	.word	0x0800925b
 80091c4:	0800925b 	.word	0x0800925b
 80091c8:	08009245 	.word	0x08009245
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d2:	f023 010f 	bic.w	r1, r3, #15
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	430a      	orrs	r2, r1
 80091de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a24      	ldr	r2, [pc, #144]	@ (8009278 <HAL_TIMEx_TISelection+0x114>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d004      	beq.n	80091f4 <HAL_TIMEx_TISelection+0x90>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a23      	ldr	r2, [pc, #140]	@ (800927c <HAL_TIMEx_TISelection+0x118>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d108      	bne.n	8009206 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8009204:	e02c      	b.n	8009260 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8009216:	e023      	b.n	8009260 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800921e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	430a      	orrs	r2, r1
 800922a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800922c:	e018      	b.n	8009260 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009234:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	430a      	orrs	r2, r1
 8009240:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009242:	e00d      	b.n	8009260 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	430a      	orrs	r2, r1
 8009256:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8009258:	e002      	b.n	8009260 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
      break;
 800925e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40014400 	.word	0x40014400
 800927c:	40014800 	.word	0x40014800

08009280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e042      	b.n	8009318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009298:	2b00      	cmp	r3, #0
 800929a:	d106      	bne.n	80092aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7f9 fb2d 	bl	8002904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2224      	movs	r2, #36	@ 0x24
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0201 	bic.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fe8e 	bl	8009fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb8f 	bl	80099f4 <UART_SetConfig>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e01b      	b.n	8009318 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0201 	orr.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 ff0d 	bl	800a130 <UART_CheckIdleState>
 8009316:	4603      	mov	r3, r0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b0ba      	sub	sp, #232	@ 0xe8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009346:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800934a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800934e:	4013      	ands	r3, r2
 8009350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11b      	bne.n	8009394 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800935c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009360:	f003 0320 	and.w	r3, r3, #32
 8009364:	2b00      	cmp	r3, #0
 8009366:	d015      	beq.n	8009394 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 8300 	beq.w	800998a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      }
      return;
 8009392:	e2fa      	b.n	800998a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8123 	beq.w	80095e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800939e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093a2:	4b8d      	ldr	r3, [pc, #564]	@ (80095d8 <HAL_UART_IRQHandler+0x2b8>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093ae:	4b8b      	ldr	r3, [pc, #556]	@ (80095dc <HAL_UART_IRQHandler+0x2bc>)
 80093b0:	4013      	ands	r3, r2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 8116 	beq.w	80095e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d011      	beq.n	80093e8 <HAL_UART_IRQHandler+0xc8>
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2201      	movs	r2, #1
 80093d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093de:	f043 0201 	orr.w	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d011      	beq.n	8009418 <HAL_UART_IRQHandler+0xf8>
 80093f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2202      	movs	r2, #2
 8009406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940e:	f043 0204 	orr.w	r2, r3, #4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d011      	beq.n	8009448 <HAL_UART_IRQHandler+0x128>
 8009424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2204      	movs	r2, #4
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943e:	f043 0202 	orr.w	r2, r3, #2
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d017      	beq.n	8009484 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009458:	f003 0320 	and.w	r3, r3, #32
 800945c:	2b00      	cmp	r3, #0
 800945e:	d105      	bne.n	800946c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009460:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009464:	4b5c      	ldr	r3, [pc, #368]	@ (80095d8 <HAL_UART_IRQHandler+0x2b8>)
 8009466:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2208      	movs	r2, #8
 8009472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947a:	f043 0208 	orr.w	r2, r3, #8
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800948c:	2b00      	cmp	r3, #0
 800948e:	d012      	beq.n	80094b6 <HAL_UART_IRQHandler+0x196>
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ac:	f043 0220 	orr.w	r2, r3, #32
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8266 	beq.w	800998e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d013      	beq.n	80094f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d105      	bne.n	80094e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950a:	2b40      	cmp	r3, #64	@ 0x40
 800950c:	d005      	beq.n	800951a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800950e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009512:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009516:	2b00      	cmp	r3, #0
 8009518:	d054      	beq.n	80095c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f807 	bl	800a52e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952a:	2b40      	cmp	r3, #64	@ 0x40
 800952c:	d146      	bne.n	80095bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800954c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3308      	adds	r3, #8
 8009556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800955a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800955e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1d9      	bne.n	800952e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009580:	2b00      	cmp	r3, #0
 8009582:	d017      	beq.n	80095b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958a:	4a15      	ldr	r2, [pc, #84]	@ (80095e0 <HAL_UART_IRQHandler+0x2c0>)
 800958c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009594:	4618      	mov	r0, r3
 8009596:	f7fc ff57 	bl	8006448 <HAL_DMA_Abort_IT>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d019      	beq.n	80095d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80095ae:	4610      	mov	r0, r2
 80095b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b2:	e00f      	b.n	80095d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fa13 	bl	80099e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ba:	e00b      	b.n	80095d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa0f 	bl	80099e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c2:	e007      	b.n	80095d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fa0b 	bl	80099e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095d2:	e1dc      	b.n	800998e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d4:	bf00      	nop
    return;
 80095d6:	e1da      	b.n	800998e <HAL_UART_IRQHandler+0x66e>
 80095d8:	10000001 	.word	0x10000001
 80095dc:	04000120 	.word	0x04000120
 80095e0:	0800a7e5 	.word	0x0800a7e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	f040 8170 	bne.w	80098ce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 8169 	beq.w	80098ce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 8162 	beq.w	80098ce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2210      	movs	r2, #16
 8009610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961c:	2b40      	cmp	r3, #64	@ 0x40
 800961e:	f040 80d8 	bne.w	80097d2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80af 	beq.w	8009798 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009644:	429a      	cmp	r2, r3
 8009646:	f080 80a7 	bcs.w	8009798 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8087 	bne.w	8009776 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800967c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009696:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800969e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1da      	bne.n	8009668 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e1      	bne.n	80096b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009714:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e3      	bne.n	80096ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009744:	f023 0310 	bic.w	r3, r3, #16
 8009748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009758:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800975c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e4      	bne.n	8009734 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009770:	4618      	mov	r0, r3
 8009772:	f7fc fe10 	bl	8006396 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009788:	b29b      	uxth	r3, r3
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	b29b      	uxth	r3, r3
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7f9 fb23 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009796:	e0fc      	b.n	8009992 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800979e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097a2:	429a      	cmp	r2, r3
 80097a4:	f040 80f5 	bne.w	8009992 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	f040 80eb 	bne.w	8009992 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f9 fb06 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
      return;
 80097d0:	e0df      	b.n	8009992 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097de:	b29b      	uxth	r3, r3
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 80d1 	beq.w	8009996 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80097f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80cc 	beq.w	8009996 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800980c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009820:	647b      	str	r3, [r7, #68]	@ 0x44
 8009822:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800982e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e4      	bne.n	80097fe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	623b      	str	r3, [r7, #32]
   return(result);
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800985c:	633a      	str	r2, [r7, #48]	@ 0x30
 800985e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e1      	bne.n	8009834 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	60fb      	str	r3, [r7, #12]
   return(result);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	69b9      	ldr	r1, [r7, #24]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	617b      	str	r3, [r7, #20]
   return(result);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e4      	bne.n	8009884 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7f9 fa88 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098cc:	e063      	b.n	8009996 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00e      	beq.n	80098f8 <HAL_UART_IRQHandler+0x5d8>
 80098da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d008      	beq.n	80098f8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 ffb8 	bl	800a866 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098f6:	e051      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d014      	beq.n	800992e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990c:	2b00      	cmp	r3, #0
 800990e:	d105      	bne.n	800991c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d008      	beq.n	800992e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009920:	2b00      	cmp	r3, #0
 8009922:	d03a      	beq.n	800999a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
    }
    return;
 800992c:	e035      	b.n	800999a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800992e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <HAL_UART_IRQHandler+0x62e>
 800993a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800993e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 ff62 	bl	800a810 <UART_EndTransmit_IT>
    return;
 800994c:	e026      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800994e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <HAL_UART_IRQHandler+0x64e>
 800995a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 ff91 	bl	800a88e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800996c:	e016      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800996e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d010      	beq.n	800999c <HAL_UART_IRQHandler+0x67c>
 800997a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800997e:	2b00      	cmp	r3, #0
 8009980:	da0c      	bge.n	800999c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 ff79 	bl	800a87a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009988:	e008      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
      return;
 800998a:	bf00      	nop
 800998c:	e006      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
    return;
 800998e:	bf00      	nop
 8009990:	e004      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
      return;
 8009992:	bf00      	nop
 8009994:	e002      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
      return;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <HAL_UART_IRQHandler+0x67c>
    return;
 800999a:	bf00      	nop
  }
}
 800999c:	37e8      	adds	r7, #232	@ 0xe8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop

080099a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099f8:	b08c      	sub	sp, #48	@ 0x30
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4baa      	ldr	r3, [pc, #680]	@ (8009ccc <UART_SetConfig+0x2d8>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a9f      	ldr	r2, [pc, #636]	@ (8009cd0 <UART_SetConfig+0x2dc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d004      	beq.n	8009a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	f023 010f 	bic.w	r1, r3, #15
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a90      	ldr	r2, [pc, #576]	@ (8009cd4 <UART_SetConfig+0x2e0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d125      	bne.n	8009ae4 <UART_SetConfig+0xf0>
 8009a98:	4b8f      	ldr	r3, [pc, #572]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d81a      	bhi.n	8009adc <UART_SetConfig+0xe8>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0xb8>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009abd 	.word	0x08009abd
 8009ab0:	08009acd 	.word	0x08009acd
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e116      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e112      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e10e      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e10a      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009adc:	2310      	movs	r3, #16
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e106      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8009cdc <UART_SetConfig+0x2e8>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d138      	bne.n	8009b60 <UART_SetConfig+0x16c>
 8009aee:	4b7a      	ldr	r3, [pc, #488]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af4:	f003 030c 	and.w	r3, r3, #12
 8009af8:	2b0c      	cmp	r3, #12
 8009afa:	d82d      	bhi.n	8009b58 <UART_SetConfig+0x164>
 8009afc:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <UART_SetConfig+0x110>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b39 	.word	0x08009b39
 8009b08:	08009b59 	.word	0x08009b59
 8009b0c:	08009b59 	.word	0x08009b59
 8009b10:	08009b59 	.word	0x08009b59
 8009b14:	08009b49 	.word	0x08009b49
 8009b18:	08009b59 	.word	0x08009b59
 8009b1c:	08009b59 	.word	0x08009b59
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3e:	e0d8      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b40:	2302      	movs	r3, #2
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b46:	e0d4      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4e:	e0d0      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e0cc      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e0c8      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a5e      	ldr	r2, [pc, #376]	@ (8009ce0 <UART_SetConfig+0x2ec>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d125      	bne.n	8009bb6 <UART_SetConfig+0x1c2>
 8009b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b74:	2b30      	cmp	r3, #48	@ 0x30
 8009b76:	d016      	beq.n	8009ba6 <UART_SetConfig+0x1b2>
 8009b78:	2b30      	cmp	r3, #48	@ 0x30
 8009b7a:	d818      	bhi.n	8009bae <UART_SetConfig+0x1ba>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d00a      	beq.n	8009b96 <UART_SetConfig+0x1a2>
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d814      	bhi.n	8009bae <UART_SetConfig+0x1ba>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <UART_SetConfig+0x19a>
 8009b88:	2b10      	cmp	r3, #16
 8009b8a:	d008      	beq.n	8009b9e <UART_SetConfig+0x1aa>
 8009b8c:	e00f      	b.n	8009bae <UART_SetConfig+0x1ba>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b94:	e0ad      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b96:	2302      	movs	r3, #2
 8009b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9c:	e0a9      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009b9e:	2304      	movs	r3, #4
 8009ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba4:	e0a5      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009ba6:	2308      	movs	r3, #8
 8009ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bac:	e0a1      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009bae:	2310      	movs	r3, #16
 8009bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb4:	e09d      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a4a      	ldr	r2, [pc, #296]	@ (8009ce4 <UART_SetConfig+0x2f0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d125      	bne.n	8009c0c <UART_SetConfig+0x218>
 8009bc0:	4b45      	ldr	r3, [pc, #276]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bcc:	d016      	beq.n	8009bfc <UART_SetConfig+0x208>
 8009bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bd0:	d818      	bhi.n	8009c04 <UART_SetConfig+0x210>
 8009bd2:	2b80      	cmp	r3, #128	@ 0x80
 8009bd4:	d00a      	beq.n	8009bec <UART_SetConfig+0x1f8>
 8009bd6:	2b80      	cmp	r3, #128	@ 0x80
 8009bd8:	d814      	bhi.n	8009c04 <UART_SetConfig+0x210>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <UART_SetConfig+0x1f0>
 8009bde:	2b40      	cmp	r3, #64	@ 0x40
 8009be0:	d008      	beq.n	8009bf4 <UART_SetConfig+0x200>
 8009be2:	e00f      	b.n	8009c04 <UART_SetConfig+0x210>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bea:	e082      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009bec:	2302      	movs	r3, #2
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bf2:	e07e      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfa:	e07a      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c02:	e076      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c04:	2310      	movs	r3, #16
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0a:	e072      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a35      	ldr	r2, [pc, #212]	@ (8009ce8 <UART_SetConfig+0x2f4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d12a      	bne.n	8009c6c <UART_SetConfig+0x278>
 8009c16:	4b30      	ldr	r3, [pc, #192]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c24:	d01a      	beq.n	8009c5c <UART_SetConfig+0x268>
 8009c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c2a:	d81b      	bhi.n	8009c64 <UART_SetConfig+0x270>
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c30:	d00c      	beq.n	8009c4c <UART_SetConfig+0x258>
 8009c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c36:	d815      	bhi.n	8009c64 <UART_SetConfig+0x270>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <UART_SetConfig+0x250>
 8009c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c40:	d008      	beq.n	8009c54 <UART_SetConfig+0x260>
 8009c42:	e00f      	b.n	8009c64 <UART_SetConfig+0x270>
 8009c44:	2300      	movs	r3, #0
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c4a:	e052      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c52:	e04e      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c54:	2304      	movs	r3, #4
 8009c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c5a:	e04a      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c62:	e046      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c64:	2310      	movs	r3, #16
 8009c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	e042      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a17      	ldr	r2, [pc, #92]	@ (8009cd0 <UART_SetConfig+0x2dc>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d13a      	bne.n	8009cec <UART_SetConfig+0x2f8>
 8009c76:	4b18      	ldr	r3, [pc, #96]	@ (8009cd8 <UART_SetConfig+0x2e4>)
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c84:	d01a      	beq.n	8009cbc <UART_SetConfig+0x2c8>
 8009c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c8a:	d81b      	bhi.n	8009cc4 <UART_SetConfig+0x2d0>
 8009c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c90:	d00c      	beq.n	8009cac <UART_SetConfig+0x2b8>
 8009c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c96:	d815      	bhi.n	8009cc4 <UART_SetConfig+0x2d0>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <UART_SetConfig+0x2b0>
 8009c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca0:	d008      	beq.n	8009cb4 <UART_SetConfig+0x2c0>
 8009ca2:	e00f      	b.n	8009cc4 <UART_SetConfig+0x2d0>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009caa:	e022      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009cac:	2302      	movs	r3, #2
 8009cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cb2:	e01e      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cba:	e01a      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cc2:	e016      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cca:	e012      	b.n	8009cf2 <UART_SetConfig+0x2fe>
 8009ccc:	cfff69f3 	.word	0xcfff69f3
 8009cd0:	40008000 	.word	0x40008000
 8009cd4:	40013800 	.word	0x40013800
 8009cd8:	40021000 	.word	0x40021000
 8009cdc:	40004400 	.word	0x40004400
 8009ce0:	40004800 	.word	0x40004800
 8009ce4:	40004c00 	.word	0x40004c00
 8009ce8:	40005000 	.word	0x40005000
 8009cec:	2310      	movs	r3, #16
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4aae      	ldr	r2, [pc, #696]	@ (8009fb0 <UART_SetConfig+0x5bc>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	f040 8097 	bne.w	8009e2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d823      	bhi.n	8009d4e <UART_SetConfig+0x35a>
 8009d06:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <UART_SetConfig+0x318>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d31 	.word	0x08009d31
 8009d10:	08009d4f 	.word	0x08009d4f
 8009d14:	08009d39 	.word	0x08009d39
 8009d18:	08009d4f 	.word	0x08009d4f
 8009d1c:	08009d3f 	.word	0x08009d3f
 8009d20:	08009d4f 	.word	0x08009d4f
 8009d24:	08009d4f 	.word	0x08009d4f
 8009d28:	08009d4f 	.word	0x08009d4f
 8009d2c:	08009d47 	.word	0x08009d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d30:	f7fd fdc2 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 8009d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d36:	e010      	b.n	8009d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d38:	4b9e      	ldr	r3, [pc, #632]	@ (8009fb4 <UART_SetConfig+0x5c0>)
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d3c:	e00d      	b.n	8009d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d3e:	f7fd fd4d 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8009d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d44:	e009      	b.n	8009d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d4c:	e005      	b.n	8009d5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8130 	beq.w	8009fc2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d66:	4a94      	ldr	r2, [pc, #592]	@ (8009fb8 <UART_SetConfig+0x5c4>)
 8009d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	69ba      	ldr	r2, [r7, #24]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d305      	bcc.n	8009d92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d903      	bls.n	8009d9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d98:	e113      	b.n	8009fc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60bb      	str	r3, [r7, #8]
 8009da0:	60fa      	str	r2, [r7, #12]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	4a84      	ldr	r2, [pc, #528]	@ (8009fb8 <UART_SetConfig+0x5c4>)
 8009da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2200      	movs	r2, #0
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dbc:	f7f6 fe72 	bl	8000aa4 <__aeabi_uldivmod>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0200 	mov.w	r2, #0
 8009dcc:	f04f 0300 	mov.w	r3, #0
 8009dd0:	020b      	lsls	r3, r1, #8
 8009dd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dd6:	0202      	lsls	r2, r0, #8
 8009dd8:	6979      	ldr	r1, [r7, #20]
 8009dda:	6849      	ldr	r1, [r1, #4]
 8009ddc:	0849      	lsrs	r1, r1, #1
 8009dde:	2000      	movs	r0, #0
 8009de0:	460c      	mov	r4, r1
 8009de2:	4605      	mov	r5, r0
 8009de4:	eb12 0804 	adds.w	r8, r2, r4
 8009de8:	eb43 0905 	adc.w	r9, r3, r5
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	469a      	mov	sl, r3
 8009df4:	4693      	mov	fp, r2
 8009df6:	4652      	mov	r2, sl
 8009df8:	465b      	mov	r3, fp
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fe51 	bl	8000aa4 <__aeabi_uldivmod>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4613      	mov	r3, r2
 8009e08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e10:	d308      	bcc.n	8009e24 <UART_SetConfig+0x430>
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e18:	d204      	bcs.n	8009e24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6a3a      	ldr	r2, [r7, #32]
 8009e20:	60da      	str	r2, [r3, #12]
 8009e22:	e0ce      	b.n	8009fc2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e2a:	e0ca      	b.n	8009fc2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e34:	d166      	bne.n	8009f04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009e36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d827      	bhi.n	8009e8e <UART_SetConfig+0x49a>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <UART_SetConfig+0x450>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	08009e8f 	.word	0x08009e8f
 8009e54:	08009e7f 	.word	0x08009e7f
 8009e58:	08009e8f 	.word	0x08009e8f
 8009e5c:	08009e8f 	.word	0x08009e8f
 8009e60:	08009e8f 	.word	0x08009e8f
 8009e64:	08009e87 	.word	0x08009e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e68:	f7fd fd26 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 8009e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e6e:	e014      	b.n	8009e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e70:	f7fd fd38 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 8009e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e76:	e010      	b.n	8009e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e78:	4b4e      	ldr	r3, [pc, #312]	@ (8009fb4 <UART_SetConfig+0x5c0>)
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e7c:	e00d      	b.n	8009e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e7e:	f7fd fcad 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8009e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e84:	e009      	b.n	8009e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e8c:	e005      	b.n	8009e9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8090 	beq.w	8009fc2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea6:	4a44      	ldr	r2, [pc, #272]	@ (8009fb8 <UART_SetConfig+0x5c4>)
 8009ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb4:	005a      	lsls	r2, r3, #1
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	085b      	lsrs	r3, r3, #1
 8009ebc:	441a      	add	r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b0f      	cmp	r3, #15
 8009ecc:	d916      	bls.n	8009efc <UART_SetConfig+0x508>
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed4:	d212      	bcs.n	8009efc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	f023 030f 	bic.w	r3, r3, #15
 8009ede:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	8bfb      	ldrh	r3, [r7, #30]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	8bfa      	ldrh	r2, [r7, #30]
 8009ef8:	60da      	str	r2, [r3, #12]
 8009efa:	e062      	b.n	8009fc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f02:	e05e      	b.n	8009fc2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d828      	bhi.n	8009f5e <UART_SetConfig+0x56a>
 8009f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <UART_SetConfig+0x520>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	08009f5f 	.word	0x08009f5f
 8009f24:	08009f4f 	.word	0x08009f4f
 8009f28:	08009f5f 	.word	0x08009f5f
 8009f2c:	08009f5f 	.word	0x08009f5f
 8009f30:	08009f5f 	.word	0x08009f5f
 8009f34:	08009f57 	.word	0x08009f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f38:	f7fd fcbe 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 8009f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f3e:	e014      	b.n	8009f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f40:	f7fd fcd0 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 8009f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f46:	e010      	b.n	8009f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f48:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb4 <UART_SetConfig+0x5c0>)
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f4c:	e00d      	b.n	8009f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4e:	f7fd fc45 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8009f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f54:	e009      	b.n	8009f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f5c:	e005      	b.n	8009f6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f68:	bf00      	nop
    }

    if (pclk != 0U)
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d028      	beq.n	8009fc2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f74:	4a10      	ldr	r2, [pc, #64]	@ (8009fb8 <UART_SetConfig+0x5c4>)
 8009f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	441a      	add	r2, r3
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d910      	bls.n	8009fbc <UART_SetConfig+0x5c8>
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa0:	d20c      	bcs.n	8009fbc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60da      	str	r2, [r3, #12]
 8009fac:	e009      	b.n	8009fc2 <UART_SetConfig+0x5ce>
 8009fae:	bf00      	nop
 8009fb0:	40008000 	.word	0x40008000
 8009fb4:	00f42400 	.word	0x00f42400
 8009fb8:	0800c1d0 	.word	0x0800c1d0
      }
      else
      {
        ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009fde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3730      	adds	r7, #48	@ 0x30
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00a      	beq.n	800a016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00a      	beq.n	800a038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d01a      	beq.n	800a102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0ea:	d10a      	bne.n	800a102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	605a      	str	r2, [r3, #4]
  }
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b098      	sub	sp, #96	@ 0x60
 800a134:	af02      	add	r7, sp, #8
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a140:	f7f9 fafa 	bl	8003738 <HAL_GetTick>
 800a144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0308 	and.w	r3, r3, #8
 800a150:	2b08      	cmp	r3, #8
 800a152:	d12f      	bne.n	800a1b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a15c:	2200      	movs	r2, #0
 800a15e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f88e 	bl	800a284 <UART_WaitOnFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d022      	beq.n	800a1b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a182:	653b      	str	r3, [r7, #80]	@ 0x50
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a18c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a18e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e063      	b.n	800a27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d149      	bne.n	800a256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f857 	bl	800a284 <UART_WaitOnFlagUntilTimeout>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03c      	beq.n	800a256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e6      	bne.n	800a1dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3308      	adds	r3, #8
 800a214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f023 0301 	bic.w	r3, r3, #1
 800a224:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3308      	adds	r3, #8
 800a22c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a22e:	61fa      	str	r2, [r7, #28]
 800a230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	69b9      	ldr	r1, [r7, #24]
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	617b      	str	r3, [r7, #20]
   return(result);
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e5      	bne.n	800a20e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e012      	b.n	800a27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2220      	movs	r2, #32
 800a25a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3758      	adds	r7, #88	@ 0x58
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a294:	e04f      	b.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d04b      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29e:	f7f9 fa4b 	bl	8003738 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d302      	bcc.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e04e      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0304 	and.w	r3, r3, #4
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d037      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ca:	d034      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b40      	cmp	r3, #64	@ 0x40
 800a2d0:	d031      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d110      	bne.n	800a302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f920 	bl	800a52e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e029      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a30c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a310:	d111      	bne.n	800a336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f906 	bl	800a52e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e00f      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4013      	ands	r3, r2
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	429a      	cmp	r2, r3
 800a344:	bf0c      	ite	eq
 800a346:	2301      	moveq	r3, #1
 800a348:	2300      	movne	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	461a      	mov	r2, r3
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	429a      	cmp	r2, r3
 800a352:	d0a0      	beq.n	800a296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b096      	sub	sp, #88	@ 0x58
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4613      	mov	r3, r2
 800a36c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2222      	movs	r2, #34	@ 0x22
 800a388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a392:	2b00      	cmp	r3, #0
 800a394:	d02d      	beq.n	800a3f2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a39c:	4a40      	ldr	r2, [pc, #256]	@ (800a4a0 <UART_Start_Receive_DMA+0x140>)
 800a39e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a4a4 <UART_Start_Receive_DMA+0x144>)
 800a3a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b0:	4a3d      	ldr	r2, [pc, #244]	@ (800a4a8 <UART_Start_Receive_DMA+0x148>)
 800a3b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3324      	adds	r3, #36	@ 0x24
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	f7fb ff64 	bl	80062a0 <HAL_DMA_Start_IT>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2210      	movs	r2, #16
 800a3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e051      	b.n	800a496 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d018      	beq.n	800a42c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a40e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a41a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a41e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e6      	bne.n	800a3fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3308      	adds	r3, #8
 800a432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	f043 0301 	orr.w	r3, r3, #1
 800a442:	653b      	str	r3, [r7, #80]	@ 0x50
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a44c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a44e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e5      	bne.n	800a42c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3308      	adds	r3, #8
 800a466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	e853 3f00 	ldrex	r3, [r3]
 800a46e:	613b      	str	r3, [r7, #16]
   return(result);
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a480:	623a      	str	r2, [r7, #32]
 800a482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	69f9      	ldr	r1, [r7, #28]
 800a486:	6a3a      	ldr	r2, [r7, #32]
 800a488:	e841 2300 	strex	r3, r2, [r1]
 800a48c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e5      	bne.n	800a460 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3758      	adds	r7, #88	@ 0x58
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800a5fb 	.word	0x0800a5fb
 800a4a4:	0800a727 	.word	0x0800a727
 800a4a8:	0800a765 	.word	0x0800a765

0800a4ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b08f      	sub	sp, #60	@ 0x3c
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e6      	bne.n	800a4b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a4fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a506:	61ba      	str	r2, [r7, #24]
 800a508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	613b      	str	r3, [r7, #16]
   return(result);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a522:	bf00      	nop
 800a524:	373c      	adds	r7, #60	@ 0x3c
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a52e:	b480      	push	{r7}
 800a530:	b095      	sub	sp, #84	@ 0x54
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a554:	643b      	str	r3, [r7, #64]	@ 0x40
 800a556:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a55a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e6      	bne.n	800a536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3308      	adds	r3, #8
 800a56e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	61fb      	str	r3, [r7, #28]
   return(result);
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a57e:	f023 0301 	bic.w	r3, r3, #1
 800a582:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3308      	adds	r3, #8
 800a58a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a58c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a58e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e3      	bne.n	800a568 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d118      	bne.n	800a5da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f023 0310 	bic.w	r3, r3, #16
 800a5bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5c6:	61bb      	str	r3, [r7, #24]
 800a5c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6979      	ldr	r1, [r7, #20]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e6      	bne.n	800a5a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5ee:	bf00      	nop
 800a5f0:	3754      	adds	r7, #84	@ 0x54
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b09c      	sub	sp, #112	@ 0x70
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a606:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d171      	bne.n	800a6fa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a618:	2200      	movs	r2, #0
 800a61a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a62c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a62e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a632:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	461a      	mov	r2, r3
 800a63a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a63c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a63e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a64a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e6      	bne.n	800a61e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	667b      	str	r3, [r7, #100]	@ 0x64
 800a668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a670:	647a      	str	r2, [r7, #68]	@ 0x44
 800a672:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3308      	adds	r3, #8
 800a68a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	623b      	str	r3, [r7, #32]
   return(result);
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a69a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a69c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6a4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ac:	e841 2300 	strex	r3, r2, [r1]
 800a6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e5      	bne.n	800a684 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ba:	2220      	movs	r2, #32
 800a6bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d118      	bne.n	800a6fa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f023 0310 	bic.w	r3, r3, #16
 800a6dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	69b9      	ldr	r1, [r7, #24]
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e6      	bne.n	800a6c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a704:	2b01      	cmp	r3, #1
 800a706:	d107      	bne.n	800a718 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a70a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a70e:	4619      	mov	r1, r3
 800a710:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a712:	f7f8 fb63 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a716:	e002      	b.n	800a71e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a718:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a71a:	f7ff f94d 	bl	80099b8 <HAL_UART_RxCpltCallback>
}
 800a71e:	bf00      	nop
 800a720:	3770      	adds	r7, #112	@ 0x70
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2201      	movs	r2, #1
 800a738:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d109      	bne.n	800a756 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a748:	085b      	lsrs	r3, r3, #1
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	4619      	mov	r1, r3
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7f8 fb44 	bl	8002ddc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a754:	e002      	b.n	800a75c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f7ff f938 	bl	80099cc <HAL_UART_RxHalfCpltCallback>
}
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a770:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a778:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a780:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a78c:	2b80      	cmp	r3, #128	@ 0x80
 800a78e:	d109      	bne.n	800a7a4 <UART_DMAError+0x40>
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b21      	cmp	r3, #33	@ 0x21
 800a794:	d106      	bne.n	800a7a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2200      	movs	r2, #0
 800a79a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a79e:	6978      	ldr	r0, [r7, #20]
 800a7a0:	f7ff fe84 	bl	800a4ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ae:	2b40      	cmp	r3, #64	@ 0x40
 800a7b0:	d109      	bne.n	800a7c6 <UART_DMAError+0x62>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b22      	cmp	r3, #34	@ 0x22
 800a7b6:	d106      	bne.n	800a7c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a7c0:	6978      	ldr	r0, [r7, #20]
 800a7c2:	f7ff feb4 	bl	800a52e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7cc:	f043 0210 	orr.w	r2, r3, #16
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	f7ff f902 	bl	80099e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7dc:	bf00      	nop
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff f8ec 	bl	80099e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	60bb      	str	r3, [r7, #8]
   return(result);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a82c:	61fb      	str	r3, [r7, #28]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	613b      	str	r3, [r7, #16]
   return(result);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e6      	bne.n	800a818 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff f8a3 	bl	80099a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85e:	bf00      	nop
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e027      	b.n	800a908 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2224      	movs	r2, #36	@ 0x24
 800a8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a928:	2302      	movs	r3, #2
 800a92a:	e02d      	b.n	800a988 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2224      	movs	r2, #36	@ 0x24
 800a938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 0201 	bic.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f8a3 	bl	800aab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2220      	movs	r2, #32
 800a97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d101      	bne.n	800a9a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	e02d      	b.n	800aa04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2224      	movs	r2, #36	@ 0x24
 800a9b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0201 	bic.w	r2, r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f865 	bl	800aab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08c      	sub	sp, #48	@ 0x30
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4613      	mov	r3, r2
 800aa18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d142      	bne.n	800aaaa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e03b      	b.n	800aaac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2201      	movs	r2, #1
 800aa38:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	461a      	mov	r2, r3
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff fc8a 	bl	800a360 <UART_Start_Receive_DMA>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aa52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d124      	bne.n	800aaa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d11d      	bne.n	800aa9e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2210      	movs	r2, #16
 800aa68:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	617b      	str	r3, [r7, #20]
   return(result);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f043 0310 	orr.w	r3, r3, #16
 800aa7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa8a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6a39      	ldr	r1, [r7, #32]
 800aa8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e6      	bne.n	800aa6a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800aa9c:	e002      	b.n	800aaa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800aaa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aaa8:	e000      	b.n	800aaac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aaaa:	2302      	movs	r3, #2
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3730      	adds	r7, #48	@ 0x30
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d108      	bne.n	800aad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad4:	e031      	b.n	800ab3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aad6:	2308      	movs	r3, #8
 800aad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aada:	2308      	movs	r3, #8
 800aadc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	0e5b      	lsrs	r3, r3, #25
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	f003 0307 	and.w	r3, r3, #7
 800aaec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	0f5b      	lsrs	r3, r3, #29
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	7b3a      	ldrb	r2, [r7, #12]
 800ab02:	4911      	ldr	r1, [pc, #68]	@ (800ab48 <UARTEx_SetNbDataToProcess+0x94>)
 800ab04:	5c8a      	ldrb	r2, [r1, r2]
 800ab06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab0a:	7b3a      	ldrb	r2, [r7, #12]
 800ab0c:	490f      	ldr	r1, [pc, #60]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x98>)
 800ab0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	7b7a      	ldrb	r2, [r7, #13]
 800ab20:	4909      	ldr	r1, [pc, #36]	@ (800ab48 <UARTEx_SetNbDataToProcess+0x94>)
 800ab22:	5c8a      	ldrb	r2, [r1, r2]
 800ab24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab28:	7b7a      	ldrb	r2, [r7, #13]
 800ab2a:	4908      	ldr	r1, [pc, #32]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x98>)
 800ab2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	0800c1e8 	.word	0x0800c1e8
 800ab4c:	0800c1f0 	.word	0x0800c1f0

0800ab50 <arm_rfft_1024_fast_init_f32>:
 800ab50:	b190      	cbz	r0, 800ab78 <arm_rfft_1024_fast_init_f32+0x28>
 800ab52:	b430      	push	{r4, r5}
 800ab54:	490a      	ldr	r1, [pc, #40]	@ (800ab80 <arm_rfft_1024_fast_init_f32+0x30>)
 800ab56:	4a0b      	ldr	r2, [pc, #44]	@ (800ab84 <arm_rfft_1024_fast_init_f32+0x34>)
 800ab58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab5c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab60:	8003      	strh	r3, [r0, #0]
 800ab62:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800ab66:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800ab6a:	4b07      	ldr	r3, [pc, #28]	@ (800ab88 <arm_rfft_1024_fast_init_f32+0x38>)
 800ab6c:	8205      	strh	r5, [r0, #16]
 800ab6e:	8184      	strh	r4, [r0, #12]
 800ab70:	6143      	str	r3, [r0, #20]
 800ab72:	bc30      	pop	{r4, r5}
 800ab74:	2000      	movs	r0, #0
 800ab76:	4770      	bx	lr
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	0800c1f8 	.word	0x0800c1f8
 800ab84:	0800cd7c 	.word	0x0800cd7c
 800ab88:	0800dd7c 	.word	0x0800dd7c

0800ab8c <stage_rfft_f32>:
 800ab8c:	b410      	push	{r4}
 800ab8e:	edd1 7a00 	vldr	s15, [r1]
 800ab92:	ed91 7a01 	vldr	s14, [r1, #4]
 800ab96:	8804      	ldrh	r4, [r0, #0]
 800ab98:	6940      	ldr	r0, [r0, #20]
 800ab9a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ab9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aba2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800aba6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abae:	3c01      	subs	r4, #1
 800abb0:	ee26 7a84 	vmul.f32	s14, s13, s8
 800abb4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800abb8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800abbc:	ed82 7a00 	vstr	s14, [r2]
 800abc0:	edc2 7a01 	vstr	s15, [r2, #4]
 800abc4:	3010      	adds	r0, #16
 800abc6:	3210      	adds	r2, #16
 800abc8:	3b08      	subs	r3, #8
 800abca:	3110      	adds	r1, #16
 800abcc:	ed11 5a02 	vldr	s10, [r1, #-8]
 800abd0:	ed93 7a02 	vldr	s14, [r3, #8]
 800abd4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800abd8:	edd3 4a03 	vldr	s9, [r3, #12]
 800abdc:	ed51 7a01 	vldr	s15, [r1, #-4]
 800abe0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800abe4:	ee77 5a45 	vsub.f32	s11, s14, s10
 800abe8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800abec:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800abf0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800abf4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800abf8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800abfc:	ee37 7a23 	vadd.f32	s14, s14, s7
 800ac00:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ac04:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ac08:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ac0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ac10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac14:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ac18:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac1c:	3c01      	subs	r4, #1
 800ac1e:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ac22:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ac26:	f1a3 0308 	sub.w	r3, r3, #8
 800ac2a:	f101 0108 	add.w	r1, r1, #8
 800ac2e:	f100 0008 	add.w	r0, r0, #8
 800ac32:	f102 0208 	add.w	r2, r2, #8
 800ac36:	d1c9      	bne.n	800abcc <stage_rfft_f32+0x40>
 800ac38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop

0800ac40 <merge_rfft_f32>:
 800ac40:	b410      	push	{r4}
 800ac42:	edd1 7a00 	vldr	s15, [r1]
 800ac46:	edd1 6a01 	vldr	s13, [r1, #4]
 800ac4a:	8804      	ldrh	r4, [r0, #0]
 800ac4c:	6940      	ldr	r0, [r0, #20]
 800ac4e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ac52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac56:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ac5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ac5e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac62:	3c01      	subs	r4, #1
 800ac64:	ed82 7a00 	vstr	s14, [r2]
 800ac68:	edc2 7a01 	vstr	s15, [r2, #4]
 800ac6c:	b3dc      	cbz	r4, 800ace6 <merge_rfft_f32+0xa6>
 800ac6e:	00e3      	lsls	r3, r4, #3
 800ac70:	3b08      	subs	r3, #8
 800ac72:	440b      	add	r3, r1
 800ac74:	3010      	adds	r0, #16
 800ac76:	3210      	adds	r2, #16
 800ac78:	3110      	adds	r1, #16
 800ac7a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ac7e:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac82:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ac86:	edd3 4a03 	vldr	s9, [r3, #12]
 800ac8a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ac8e:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ac92:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ac96:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ac9a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ac9e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800aca2:	ee66 5a25 	vmul.f32	s11, s12, s11
 800aca6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800acaa:	ee37 7a63 	vsub.f32	s14, s14, s7
 800acae:	ee66 6a85 	vmul.f32	s13, s13, s10
 800acb2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800acb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800acba:	ee37 7a46 	vsub.f32	s14, s14, s12
 800acbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800acc6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800acca:	3c01      	subs	r4, #1
 800accc:	ed02 7a02 	vstr	s14, [r2, #-8]
 800acd0:	ed42 7a01 	vstr	s15, [r2, #-4]
 800acd4:	f1a3 0308 	sub.w	r3, r3, #8
 800acd8:	f101 0108 	add.w	r1, r1, #8
 800acdc:	f100 0008 	add.w	r0, r0, #8
 800ace0:	f102 0208 	add.w	r2, r2, #8
 800ace4:	d1c9      	bne.n	800ac7a <merge_rfft_f32+0x3a>
 800ace6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acea:	4770      	bx	lr

0800acec <arm_rfft_fast_f32>:
 800acec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf0:	8a05      	ldrh	r5, [r0, #16]
 800acf2:	086d      	lsrs	r5, r5, #1
 800acf4:	8005      	strh	r5, [r0, #0]
 800acf6:	4604      	mov	r4, r0
 800acf8:	4616      	mov	r6, r2
 800acfa:	461d      	mov	r5, r3
 800acfc:	b14b      	cbz	r3, 800ad12 <arm_rfft_fast_f32+0x26>
 800acfe:	f7ff ff9f 	bl	800ac40 <merge_rfft_f32>
 800ad02:	462a      	mov	r2, r5
 800ad04:	4631      	mov	r1, r6
 800ad06:	4620      	mov	r0, r4
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0e:	f000 bb33 	b.w	800b378 <arm_cfft_f32>
 800ad12:	460f      	mov	r7, r1
 800ad14:	461a      	mov	r2, r3
 800ad16:	2301      	movs	r3, #1
 800ad18:	f000 fb2e 	bl	800b378 <arm_cfft_f32>
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	4639      	mov	r1, r7
 800ad20:	4620      	mov	r0, r4
 800ad22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad26:	f7ff bf31 	b.w	800ab8c <stage_rfft_f32>
 800ad2a:	bf00      	nop

0800ad2c <arm_cfft_radix8by2_f32>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	ed2d 8b08 	vpush	{d8-d11}
 800ad34:	4607      	mov	r7, r0
 800ad36:	4608      	mov	r0, r1
 800ad38:	f8b7 c000 	ldrh.w	ip, [r7]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ad42:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ad46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ad4a:	f000 80b0 	beq.w	800aeae <arm_cfft_radix8by2_f32+0x182>
 800ad4e:	008c      	lsls	r4, r1, #2
 800ad50:	3410      	adds	r4, #16
 800ad52:	f100 0310 	add.w	r3, r0, #16
 800ad56:	1906      	adds	r6, r0, r4
 800ad58:	3210      	adds	r2, #16
 800ad5a:	4444      	add	r4, r8
 800ad5c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ad60:	f108 0510 	add.w	r5, r8, #16
 800ad64:	ed15 2a04 	vldr	s4, [r5, #-16]
 800ad68:	ed55 2a03 	vldr	s5, [r5, #-12]
 800ad6c:	ed54 4a04 	vldr	s9, [r4, #-16]
 800ad70:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ad74:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ad78:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ad7c:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ad80:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ad84:	ed55 0a01 	vldr	s1, [r5, #-4]
 800ad88:	ed56 6a04 	vldr	s13, [r6, #-16]
 800ad8c:	ed16 3a03 	vldr	s6, [r6, #-12]
 800ad90:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ad94:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ad98:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ad9c:	ed16 1a02 	vldr	s2, [r6, #-8]
 800ada0:	ed56 1a01 	vldr	s3, [r6, #-4]
 800ada4:	ee73 ba82 	vadd.f32	s23, s7, s4
 800ada8:	ee37 ba22 	vadd.f32	s22, s14, s5
 800adac:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800adb0:	ee33 9a04 	vadd.f32	s18, s6, s8
 800adb4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800adb8:	ee75 aa00 	vadd.f32	s21, s10, s0
 800adbc:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800adc0:	ee71 8a06 	vadd.f32	s17, s2, s12
 800adc4:	ed43 ba04 	vstr	s23, [r3, #-16]
 800adc8:	ed03 ba03 	vstr	s22, [r3, #-12]
 800adcc:	ed43 aa02 	vstr	s21, [r3, #-8]
 800add0:	ed03 aa01 	vstr	s20, [r3, #-4]
 800add4:	ed06 8a01 	vstr	s16, [r6, #-4]
 800add8:	ed46 9a04 	vstr	s19, [r6, #-16]
 800addc:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ade0:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ade4:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ade8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800adec:	ee34 4a43 	vsub.f32	s8, s8, s6
 800adf0:	ed52 6a03 	vldr	s13, [r2, #-12]
 800adf4:	ed12 3a04 	vldr	s6, [r2, #-16]
 800adf8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800adfc:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ae00:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800ae04:	ee23 2a83 	vmul.f32	s4, s7, s6
 800ae08:	ee64 4a83 	vmul.f32	s9, s9, s6
 800ae0c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800ae10:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ae14:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ae18:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ae1c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ae20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ae24:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800ae28:	ee32 3a08 	vadd.f32	s6, s4, s16
 800ae2c:	ed05 7a03 	vstr	s14, [r5, #-12]
 800ae30:	ed05 3a04 	vstr	s6, [r5, #-16]
 800ae34:	ed04 4a04 	vstr	s8, [r4, #-16]
 800ae38:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ae3c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ae40:	ee76 6a41 	vsub.f32	s13, s12, s2
 800ae44:	ee35 5a40 	vsub.f32	s10, s10, s0
 800ae48:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800ae4c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ae50:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ae54:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ae58:	ee66 4a87 	vmul.f32	s9, s13, s14
 800ae5c:	ee25 4a25 	vmul.f32	s8, s10, s11
 800ae60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae64:	ee25 5a07 	vmul.f32	s10, s10, s14
 800ae68:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ae6c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ae70:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ae74:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ae78:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ae7c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800ae80:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ae84:	3310      	adds	r3, #16
 800ae86:	4563      	cmp	r3, ip
 800ae88:	ed45 5a02 	vstr	s11, [r5, #-8]
 800ae8c:	f106 0610 	add.w	r6, r6, #16
 800ae90:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ae94:	f102 0210 	add.w	r2, r2, #16
 800ae98:	ed04 6a02 	vstr	s12, [r4, #-8]
 800ae9c:	ed04 7a01 	vstr	s14, [r4, #-4]
 800aea0:	f105 0510 	add.w	r5, r5, #16
 800aea4:	f104 0410 	add.w	r4, r4, #16
 800aea8:	f47f af5c 	bne.w	800ad64 <arm_cfft_radix8by2_f32+0x38>
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	b28c      	uxth	r4, r1
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	f000 fc66 	bl	800b784 <arm_radix8_butterfly_f32>
 800aeb8:	ecbd 8b08 	vpop	{d8-d11}
 800aebc:	4621      	mov	r1, r4
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4640      	mov	r0, r8
 800aec2:	2302      	movs	r3, #2
 800aec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	f000 bc5c 	b.w	800b784 <arm_radix8_butterfly_f32>

0800aecc <arm_cfft_radix8by4_f32>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	ed2d 8b0a 	vpush	{d8-d12}
 800aed4:	b08d      	sub	sp, #52	@ 0x34
 800aed6:	460d      	mov	r5, r1
 800aed8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aeda:	8801      	ldrh	r1, [r0, #0]
 800aedc:	6842      	ldr	r2, [r0, #4]
 800aede:	900a      	str	r0, [sp, #40]	@ 0x28
 800aee0:	0849      	lsrs	r1, r1, #1
 800aee2:	008b      	lsls	r3, r1, #2
 800aee4:	18ee      	adds	r6, r5, r3
 800aee6:	18f0      	adds	r0, r6, r3
 800aee8:	edd0 5a00 	vldr	s11, [r0]
 800aeec:	edd5 7a00 	vldr	s15, [r5]
 800aef0:	ed96 7a00 	vldr	s14, [r6]
 800aef4:	edd0 3a01 	vldr	s7, [r0, #4]
 800aef8:	ed96 4a01 	vldr	s8, [r6, #4]
 800aefc:	ed95 5a01 	vldr	s10, [r5, #4]
 800af00:	9008      	str	r0, [sp, #32]
 800af02:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800af06:	18c7      	adds	r7, r0, r3
 800af08:	edd7 4a00 	vldr	s9, [r7]
 800af0c:	ed97 3a01 	vldr	s6, [r7, #4]
 800af10:	9701      	str	r7, [sp, #4]
 800af12:	ee77 6a06 	vadd.f32	s13, s14, s12
 800af16:	462c      	mov	r4, r5
 800af18:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800af1c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800af20:	ee16 ca90 	vmov	ip, s13
 800af24:	f844 cb08 	str.w	ip, [r4], #8
 800af28:	ee75 6a23 	vadd.f32	s13, s10, s7
 800af2c:	edd6 5a01 	vldr	s11, [r6, #4]
 800af30:	edd7 2a01 	vldr	s5, [r7, #4]
 800af34:	9404      	str	r4, [sp, #16]
 800af36:	ee35 5a63 	vsub.f32	s10, s10, s7
 800af3a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800af3e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800af42:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800af46:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800af4a:	0849      	lsrs	r1, r1, #1
 800af4c:	f102 0e08 	add.w	lr, r2, #8
 800af50:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800af54:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800af58:	9109      	str	r1, [sp, #36]	@ 0x24
 800af5a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800af5e:	f1a1 0902 	sub.w	r9, r1, #2
 800af62:	f8cd e00c 	str.w	lr, [sp, #12]
 800af66:	4631      	mov	r1, r6
 800af68:	ee13 ea90 	vmov	lr, s7
 800af6c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800af70:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800af74:	4604      	mov	r4, r0
 800af76:	edc5 5a01 	vstr	s11, [r5, #4]
 800af7a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800af7e:	f841 eb08 	str.w	lr, [r1], #8
 800af82:	ee34 5a24 	vadd.f32	s10, s8, s9
 800af86:	ee16 ea10 	vmov	lr, s12
 800af8a:	ed86 5a01 	vstr	s10, [r6, #4]
 800af8e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800af92:	f844 eb08 	str.w	lr, [r4], #8
 800af96:	ee77 7a83 	vadd.f32	s15, s15, s6
 800af9a:	edc0 6a01 	vstr	s13, [r0, #4]
 800af9e:	9405      	str	r4, [sp, #20]
 800afa0:	4604      	mov	r4, r0
 800afa2:	ee17 0a90 	vmov	r0, s15
 800afa6:	9106      	str	r1, [sp, #24]
 800afa8:	ee37 7a64 	vsub.f32	s14, s14, s9
 800afac:	f102 0110 	add.w	r1, r2, #16
 800afb0:	46bc      	mov	ip, r7
 800afb2:	9100      	str	r1, [sp, #0]
 800afb4:	f847 0b08 	str.w	r0, [r7], #8
 800afb8:	f102 0118 	add.w	r1, r2, #24
 800afbc:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800afc0:	9102      	str	r1, [sp, #8]
 800afc2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800afc6:	9007      	str	r0, [sp, #28]
 800afc8:	f000 8134 	beq.w	800b234 <arm_cfft_radix8by4_f32+0x368>
 800afcc:	f102 0920 	add.w	r9, r2, #32
 800afd0:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800afd4:	9a01      	ldr	r2, [sp, #4]
 800afd6:	f8dd a000 	ldr.w	sl, [sp]
 800afda:	3b0c      	subs	r3, #12
 800afdc:	4683      	mov	fp, r0
 800afde:	4463      	add	r3, ip
 800afe0:	f105 0e10 	add.w	lr, r5, #16
 800afe4:	f1a4 010c 	sub.w	r1, r4, #12
 800afe8:	f104 0510 	add.w	r5, r4, #16
 800afec:	f1a6 0c0c 	sub.w	ip, r6, #12
 800aff0:	f1a2 040c 	sub.w	r4, r2, #12
 800aff4:	f106 0010 	add.w	r0, r6, #16
 800aff8:	3210      	adds	r2, #16
 800affa:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800affe:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b002:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b006:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b00a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b00e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b012:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b016:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b01a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b01e:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b022:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b026:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b02a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b02e:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b032:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b036:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b03a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b03e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b042:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b046:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b04a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b04e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b052:	ed94 7a02 	vldr	s14, [r4, #8]
 800b056:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b05a:	ed91 ba02 	vldr	s22, [r1, #8]
 800b05e:	edd3 9a02 	vldr	s19, [r3, #8]
 800b062:	edd4 2a01 	vldr	s5, [r4, #4]
 800b066:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b06a:	ed93 5a01 	vldr	s10, [r3, #4]
 800b06e:	edd1 0a01 	vldr	s1, [r1, #4]
 800b072:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b076:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b07a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b07e:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b082:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b086:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b08a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b08e:	ed91 7a01 	vldr	s14, [r1, #4]
 800b092:	edd3 8a01 	vldr	s17, [r3, #4]
 800b096:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b09a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b09e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b0a2:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b0a6:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b0aa:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b0ae:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b0b2:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b0b6:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b0ba:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b0be:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b0c2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b0c6:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b0ca:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b0ce:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b0d2:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b0d6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b0da:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b0de:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b0e2:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b0e6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b0ea:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b0ee:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b0f2:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b0f6:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b0fa:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b0fe:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b102:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b106:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b10a:	edc1 8a01 	vstr	s17, [r1, #4]
 800b10e:	ed81 aa02 	vstr	s20, [r1, #8]
 800b112:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b116:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b11a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b11e:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b122:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b126:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b12a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b12e:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b132:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b136:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b13a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b13e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b142:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b146:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b14a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b14e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b152:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b156:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b15a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b15e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b162:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b166:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b16a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b16e:	ed84 7a01 	vstr	s14, [r4, #4]
 800b172:	ed84 4a02 	vstr	s8, [r4, #8]
 800b176:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b17a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b17e:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b182:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b186:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b18a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b18e:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b192:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b196:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b19a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b19e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b1a2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b1a6:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b1aa:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b1ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b1b2:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b1b6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b1ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b1be:	f1bb 0b01 	subs.w	fp, fp, #1
 800b1c2:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b1c6:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b1ca:	f10e 0e08 	add.w	lr, lr, #8
 800b1ce:	ed83 3a02 	vstr	s6, [r3, #8]
 800b1d2:	ed83 7a01 	vstr	s14, [r3, #4]
 800b1d6:	f1ac 0c08 	sub.w	ip, ip, #8
 800b1da:	f10a 0a08 	add.w	sl, sl, #8
 800b1de:	f100 0008 	add.w	r0, r0, #8
 800b1e2:	f1a1 0108 	sub.w	r1, r1, #8
 800b1e6:	f109 0910 	add.w	r9, r9, #16
 800b1ea:	f105 0508 	add.w	r5, r5, #8
 800b1ee:	f1a4 0408 	sub.w	r4, r4, #8
 800b1f2:	f108 0818 	add.w	r8, r8, #24
 800b1f6:	f102 0208 	add.w	r2, r2, #8
 800b1fa:	f1a3 0308 	sub.w	r3, r3, #8
 800b1fe:	f47f aefc 	bne.w	800affa <arm_cfft_radix8by4_f32+0x12e>
 800b202:	9907      	ldr	r1, [sp, #28]
 800b204:	9800      	ldr	r0, [sp, #0]
 800b206:	00cb      	lsls	r3, r1, #3
 800b208:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b20c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b210:	9100      	str	r1, [sp, #0]
 800b212:	9904      	ldr	r1, [sp, #16]
 800b214:	4419      	add	r1, r3
 800b216:	9104      	str	r1, [sp, #16]
 800b218:	9903      	ldr	r1, [sp, #12]
 800b21a:	4419      	add	r1, r3
 800b21c:	9103      	str	r1, [sp, #12]
 800b21e:	9906      	ldr	r1, [sp, #24]
 800b220:	4419      	add	r1, r3
 800b222:	9106      	str	r1, [sp, #24]
 800b224:	9905      	ldr	r1, [sp, #20]
 800b226:	441f      	add	r7, r3
 800b228:	4419      	add	r1, r3
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	9105      	str	r1, [sp, #20]
 800b22e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b232:	9302      	str	r3, [sp, #8]
 800b234:	9904      	ldr	r1, [sp, #16]
 800b236:	9805      	ldr	r0, [sp, #20]
 800b238:	ed91 4a00 	vldr	s8, [r1]
 800b23c:	edd0 6a00 	vldr	s13, [r0]
 800b240:	9b06      	ldr	r3, [sp, #24]
 800b242:	ed97 3a00 	vldr	s6, [r7]
 800b246:	edd3 7a00 	vldr	s15, [r3]
 800b24a:	edd0 4a01 	vldr	s9, [r0, #4]
 800b24e:	edd1 3a01 	vldr	s7, [r1, #4]
 800b252:	ed97 2a01 	vldr	s4, [r7, #4]
 800b256:	ed93 7a01 	vldr	s14, [r3, #4]
 800b25a:	9a03      	ldr	r2, [sp, #12]
 800b25c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b260:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b264:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b268:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b26c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b270:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b274:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b278:	ed81 5a00 	vstr	s10, [r1]
 800b27c:	ed93 5a01 	vldr	s10, [r3, #4]
 800b280:	edd7 4a01 	vldr	s9, [r7, #4]
 800b284:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b288:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b28c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b290:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b294:	ed81 5a01 	vstr	s10, [r1, #4]
 800b298:	edd2 1a00 	vldr	s3, [r2]
 800b29c:	edd2 2a01 	vldr	s5, [r2, #4]
 800b2a0:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b2a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b2a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b2ac:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b2b0:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b2b4:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b2b8:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b2bc:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b2c0:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b2c4:	edc3 2a00 	vstr	s5, [r3]
 800b2c8:	ed83 5a01 	vstr	s10, [r3, #4]
 800b2cc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b2d6:	ed93 4a01 	vldr	s8, [r3, #4]
 800b2da:	ed93 5a00 	vldr	s10, [r3]
 800b2de:	9b02      	ldr	r3, [sp, #8]
 800b2e0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b2e4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b2e8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b2ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b2f0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b2f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b2f8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b2fc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b300:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b304:	ed80 6a01 	vstr	s12, [r0, #4]
 800b308:	edc0 5a00 	vstr	s11, [r0]
 800b30c:	edd3 5a01 	vldr	s11, [r3, #4]
 800b310:	edd3 6a00 	vldr	s13, [r3]
 800b314:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b318:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b31c:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b320:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b324:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b328:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b32c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b330:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b334:	ed87 7a01 	vstr	s14, [r7, #4]
 800b338:	edc7 7a00 	vstr	s15, [r7]
 800b33c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b340:	4621      	mov	r1, r4
 800b342:	686a      	ldr	r2, [r5, #4]
 800b344:	2304      	movs	r3, #4
 800b346:	f000 fa1d 	bl	800b784 <arm_radix8_butterfly_f32>
 800b34a:	4630      	mov	r0, r6
 800b34c:	4621      	mov	r1, r4
 800b34e:	686a      	ldr	r2, [r5, #4]
 800b350:	2304      	movs	r3, #4
 800b352:	f000 fa17 	bl	800b784 <arm_radix8_butterfly_f32>
 800b356:	9808      	ldr	r0, [sp, #32]
 800b358:	686a      	ldr	r2, [r5, #4]
 800b35a:	4621      	mov	r1, r4
 800b35c:	2304      	movs	r3, #4
 800b35e:	f000 fa11 	bl	800b784 <arm_radix8_butterfly_f32>
 800b362:	686a      	ldr	r2, [r5, #4]
 800b364:	9801      	ldr	r0, [sp, #4]
 800b366:	4621      	mov	r1, r4
 800b368:	2304      	movs	r3, #4
 800b36a:	b00d      	add	sp, #52	@ 0x34
 800b36c:	ecbd 8b0a 	vpop	{d8-d12}
 800b370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	f000 ba06 	b.w	800b784 <arm_radix8_butterfly_f32>

0800b378 <arm_cfft_f32>:
 800b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	2a01      	cmp	r2, #1
 800b37e:	4606      	mov	r6, r0
 800b380:	4617      	mov	r7, r2
 800b382:	460c      	mov	r4, r1
 800b384:	4698      	mov	r8, r3
 800b386:	8805      	ldrh	r5, [r0, #0]
 800b388:	d056      	beq.n	800b438 <arm_cfft_f32+0xc0>
 800b38a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b38e:	d063      	beq.n	800b458 <arm_cfft_f32+0xe0>
 800b390:	d916      	bls.n	800b3c0 <arm_cfft_f32+0x48>
 800b392:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b396:	d01a      	beq.n	800b3ce <arm_cfft_f32+0x56>
 800b398:	d947      	bls.n	800b42a <arm_cfft_f32+0xb2>
 800b39a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b39e:	d05b      	beq.n	800b458 <arm_cfft_f32+0xe0>
 800b3a0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b3a4:	d105      	bne.n	800b3b2 <arm_cfft_f32+0x3a>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6872      	ldr	r2, [r6, #4]
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 f9e9 	bl	800b784 <arm_radix8_butterfly_f32>
 800b3b2:	f1b8 0f00 	cmp.w	r8, #0
 800b3b6:	d111      	bne.n	800b3dc <arm_cfft_f32+0x64>
 800b3b8:	2f01      	cmp	r7, #1
 800b3ba:	d016      	beq.n	800b3ea <arm_cfft_f32+0x72>
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	2d20      	cmp	r5, #32
 800b3c2:	d049      	beq.n	800b458 <arm_cfft_f32+0xe0>
 800b3c4:	d935      	bls.n	800b432 <arm_cfft_f32+0xba>
 800b3c6:	2d40      	cmp	r5, #64	@ 0x40
 800b3c8:	d0ed      	beq.n	800b3a6 <arm_cfft_f32+0x2e>
 800b3ca:	2d80      	cmp	r5, #128	@ 0x80
 800b3cc:	d1f1      	bne.n	800b3b2 <arm_cfft_f32+0x3a>
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f7ff fcab 	bl	800ad2c <arm_cfft_radix8by2_f32>
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	d0ed      	beq.n	800b3b8 <arm_cfft_f32+0x40>
 800b3dc:	68b2      	ldr	r2, [r6, #8]
 800b3de:	89b1      	ldrh	r1, [r6, #12]
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 f841 	bl	800b468 <arm_bitreversal_32>
 800b3e6:	2f01      	cmp	r7, #1
 800b3e8:	d1e8      	bne.n	800b3bc <arm_cfft_f32+0x44>
 800b3ea:	ee07 5a90 	vmov	s15, r5
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b3fa:	2d00      	cmp	r5, #0
 800b3fc:	d0de      	beq.n	800b3bc <arm_cfft_f32+0x44>
 800b3fe:	f104 0108 	add.w	r1, r4, #8
 800b402:	2300      	movs	r3, #0
 800b404:	3301      	adds	r3, #1
 800b406:	429d      	cmp	r5, r3
 800b408:	f101 0108 	add.w	r1, r1, #8
 800b40c:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b410:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b414:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b418:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b41c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b420:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b424:	d1ee      	bne.n	800b404 <arm_cfft_f32+0x8c>
 800b426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b42e:	d0ba      	beq.n	800b3a6 <arm_cfft_f32+0x2e>
 800b430:	e7bf      	b.n	800b3b2 <arm_cfft_f32+0x3a>
 800b432:	2d10      	cmp	r5, #16
 800b434:	d0cb      	beq.n	800b3ce <arm_cfft_f32+0x56>
 800b436:	e7bc      	b.n	800b3b2 <arm_cfft_f32+0x3a>
 800b438:	b19d      	cbz	r5, 800b462 <arm_cfft_f32+0xea>
 800b43a:	f101 030c 	add.w	r3, r1, #12
 800b43e:	2200      	movs	r2, #0
 800b440:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b444:	3201      	adds	r2, #1
 800b446:	eef1 7a67 	vneg.f32	s15, s15
 800b44a:	4295      	cmp	r5, r2
 800b44c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b450:	f103 0308 	add.w	r3, r3, #8
 800b454:	d1f4      	bne.n	800b440 <arm_cfft_f32+0xc8>
 800b456:	e798      	b.n	800b38a <arm_cfft_f32+0x12>
 800b458:	4621      	mov	r1, r4
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7ff fd36 	bl	800aecc <arm_cfft_radix8by4_f32>
 800b460:	e7a7      	b.n	800b3b2 <arm_cfft_f32+0x3a>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d0aa      	beq.n	800b3bc <arm_cfft_f32+0x44>
 800b466:	e7b9      	b.n	800b3dc <arm_cfft_f32+0x64>

0800b468 <arm_bitreversal_32>:
 800b468:	b1e9      	cbz	r1, 800b4a6 <arm_bitreversal_32+0x3e>
 800b46a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46c:	2500      	movs	r5, #0
 800b46e:	f102 0e02 	add.w	lr, r2, #2
 800b472:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b476:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b47a:	08a4      	lsrs	r4, r4, #2
 800b47c:	089b      	lsrs	r3, r3, #2
 800b47e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b482:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b486:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b48a:	00a6      	lsls	r6, r4, #2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b492:	3304      	adds	r3, #4
 800b494:	1d34      	adds	r4, r6, #4
 800b496:	3502      	adds	r5, #2
 800b498:	58c6      	ldr	r6, [r0, r3]
 800b49a:	5907      	ldr	r7, [r0, r4]
 800b49c:	50c7      	str	r7, [r0, r3]
 800b49e:	428d      	cmp	r5, r1
 800b4a0:	5106      	str	r6, [r0, r4]
 800b4a2:	d3e6      	bcc.n	800b472 <arm_bitreversal_32+0xa>
 800b4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a6:	4770      	bx	lr

0800b4a8 <arm_cmplx_mag_f32>:
 800b4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ac:	ed2d 8b02 	vpush	{d8}
 800b4b0:	0897      	lsrs	r7, r2, #2
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	d077      	beq.n	800b5a6 <arm_cmplx_mag_f32+0xfe>
 800b4b6:	f04f 0800 	mov.w	r8, #0
 800b4ba:	f100 0420 	add.w	r4, r0, #32
 800b4be:	f101 0510 	add.w	r5, r1, #16
 800b4c2:	463e      	mov	r6, r7
 800b4c4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b4c8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b4cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b4d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b4d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e0:	f2c0 80c5 	blt.w	800b66e <arm_cmplx_mag_f32+0x1c6>
 800b4e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b4f0:	f100 80cb 	bmi.w	800b68a <arm_cmplx_mag_f32+0x1e2>
 800b4f4:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b4f8:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b4fc:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b500:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b504:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b508:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b50c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b514:	f2c0 80a8 	blt.w	800b668 <arm_cmplx_mag_f32+0x1c0>
 800b518:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b520:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b524:	f100 80a8 	bmi.w	800b678 <arm_cmplx_mag_f32+0x1d0>
 800b528:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b52c:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b530:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b534:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b53c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b540:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b548:	f2c0 808b 	blt.w	800b662 <arm_cmplx_mag_f32+0x1ba>
 800b54c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b554:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b558:	f100 80a9 	bmi.w	800b6ae <arm_cmplx_mag_f32+0x206>
 800b55c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b560:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b564:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b568:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b56c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b570:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b574:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57c:	db6e      	blt.n	800b65c <arm_cmplx_mag_f32+0x1b4>
 800b57e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b58a:	f100 8087 	bmi.w	800b69c <arm_cmplx_mag_f32+0x1f4>
 800b58e:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b592:	3e01      	subs	r6, #1
 800b594:	f104 0420 	add.w	r4, r4, #32
 800b598:	f105 0510 	add.w	r5, r5, #16
 800b59c:	d192      	bne.n	800b4c4 <arm_cmplx_mag_f32+0x1c>
 800b59e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b5a2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b5a6:	f012 0203 	ands.w	r2, r2, #3
 800b5aa:	d052      	beq.n	800b652 <arm_cmplx_mag_f32+0x1aa>
 800b5ac:	ed90 0a00 	vldr	s0, [r0]
 800b5b0:	edd0 7a01 	vldr	s15, [r0, #4]
 800b5b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b5b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b5bc:	2300      	movs	r3, #0
 800b5be:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b5c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ca:	bfb8      	it	lt
 800b5cc:	600b      	strlt	r3, [r1, #0]
 800b5ce:	db08      	blt.n	800b5e2 <arm_cmplx_mag_f32+0x13a>
 800b5d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b5dc:	d479      	bmi.n	800b6d2 <arm_cmplx_mag_f32+0x22a>
 800b5de:	ed81 8a00 	vstr	s16, [r1]
 800b5e2:	3a01      	subs	r2, #1
 800b5e4:	d035      	beq.n	800b652 <arm_cmplx_mag_f32+0x1aa>
 800b5e6:	ed90 0a02 	vldr	s0, [r0, #8]
 800b5ea:	edd0 7a03 	vldr	s15, [r0, #12]
 800b5ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b5f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b5fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b604:	bfb8      	it	lt
 800b606:	604b      	strlt	r3, [r1, #4]
 800b608:	db08      	blt.n	800b61c <arm_cmplx_mag_f32+0x174>
 800b60a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b612:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b616:	d453      	bmi.n	800b6c0 <arm_cmplx_mag_f32+0x218>
 800b618:	ed81 8a01 	vstr	s16, [r1, #4]
 800b61c:	2a01      	cmp	r2, #1
 800b61e:	d018      	beq.n	800b652 <arm_cmplx_mag_f32+0x1aa>
 800b620:	ed90 0a04 	vldr	s0, [r0, #16]
 800b624:	edd0 7a05 	vldr	s15, [r0, #20]
 800b628:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b62c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b630:	2300      	movs	r3, #0
 800b632:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b636:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	db19      	blt.n	800b674 <arm_cmplx_mag_f32+0x1cc>
 800b640:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b648:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b64c:	d44a      	bmi.n	800b6e4 <arm_cmplx_mag_f32+0x23c>
 800b64e:	ed81 8a02 	vstr	s16, [r1, #8]
 800b652:	b004      	add	sp, #16
 800b654:	ecbd 8b02 	vpop	{d8}
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	f845 8c04 	str.w	r8, [r5, #-4]
 800b660:	e797      	b.n	800b592 <arm_cmplx_mag_f32+0xea>
 800b662:	f845 8c08 	str.w	r8, [r5, #-8]
 800b666:	e77b      	b.n	800b560 <arm_cmplx_mag_f32+0xb8>
 800b668:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b66c:	e75e      	b.n	800b52c <arm_cmplx_mag_f32+0x84>
 800b66e:	f845 8c10 	str.w	r8, [r5, #-16]
 800b672:	e741      	b.n	800b4f8 <arm_cmplx_mag_f32+0x50>
 800b674:	608b      	str	r3, [r1, #8]
 800b676:	e7ec      	b.n	800b652 <arm_cmplx_mag_f32+0x1aa>
 800b678:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b67c:	9001      	str	r0, [sp, #4]
 800b67e:	f000 fbc3 	bl	800be08 <sqrtf>
 800b682:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b686:	9801      	ldr	r0, [sp, #4]
 800b688:	e74e      	b.n	800b528 <arm_cmplx_mag_f32+0x80>
 800b68a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b68e:	9001      	str	r0, [sp, #4]
 800b690:	f000 fbba 	bl	800be08 <sqrtf>
 800b694:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b698:	9801      	ldr	r0, [sp, #4]
 800b69a:	e72b      	b.n	800b4f4 <arm_cmplx_mag_f32+0x4c>
 800b69c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b6a0:	9001      	str	r0, [sp, #4]
 800b6a2:	f000 fbb1 	bl	800be08 <sqrtf>
 800b6a6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b6aa:	9801      	ldr	r0, [sp, #4]
 800b6ac:	e76f      	b.n	800b58e <arm_cmplx_mag_f32+0xe6>
 800b6ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b6b2:	9001      	str	r0, [sp, #4]
 800b6b4:	f000 fba8 	bl	800be08 <sqrtf>
 800b6b8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b6bc:	9801      	ldr	r0, [sp, #4]
 800b6be:	e74d      	b.n	800b55c <arm_cmplx_mag_f32+0xb4>
 800b6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c4:	9201      	str	r2, [sp, #4]
 800b6c6:	f000 fb9f 	bl	800be08 <sqrtf>
 800b6ca:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b6ce:	9903      	ldr	r1, [sp, #12]
 800b6d0:	e7a2      	b.n	800b618 <arm_cmplx_mag_f32+0x170>
 800b6d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d6:	9201      	str	r2, [sp, #4]
 800b6d8:	f000 fb96 	bl	800be08 <sqrtf>
 800b6dc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b6e0:	9903      	ldr	r1, [sp, #12]
 800b6e2:	e77c      	b.n	800b5de <arm_cmplx_mag_f32+0x136>
 800b6e4:	9101      	str	r1, [sp, #4]
 800b6e6:	f000 fb8f 	bl	800be08 <sqrtf>
 800b6ea:	9901      	ldr	r1, [sp, #4]
 800b6ec:	e7af      	b.n	800b64e <arm_cmplx_mag_f32+0x1a6>
 800b6ee:	bf00      	nop

0800b6f0 <arm_cos_f32>:
 800b6f0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b778 <arm_cos_f32+0x88>
 800b6f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b6f8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b6fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b700:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b708:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b70c:	d504      	bpl.n	800b718 <arm_cos_f32+0x28>
 800b70e:	ee17 3a90 	vmov	r3, s15
 800b712:	3b01      	subs	r3, #1
 800b714:	ee07 3a90 	vmov	s15, r3
 800b718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b71c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800b77c <arm_cos_f32+0x8c>
 800b720:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b724:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b728:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b72c:	ee17 3a90 	vmov	r3, s15
 800b730:	b29b      	uxth	r3, r3
 800b732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b736:	d21a      	bcs.n	800b76e <arm_cos_f32+0x7e>
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b740:	1c59      	adds	r1, r3, #1
 800b742:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b746:	4a0e      	ldr	r2, [pc, #56]	@ (800b780 <arm_cos_f32+0x90>)
 800b748:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b74c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b750:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b754:	ed93 7a00 	vldr	s14, [r3]
 800b758:	edd2 6a00 	vldr	s13, [r2]
 800b75c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b760:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b764:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b768:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b76c:	4770      	bx	lr
 800b76e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b772:	2101      	movs	r1, #1
 800b774:	2300      	movs	r3, #0
 800b776:	e7e6      	b.n	800b746 <arm_cos_f32+0x56>
 800b778:	3e22f983 	.word	0x3e22f983
 800b77c:	44000000 	.word	0x44000000
 800b780:	0800c578 	.word	0x0800c578

0800b784 <arm_radix8_butterfly_f32>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	ed2d 8b10 	vpush	{d8-d15}
 800b78c:	b095      	sub	sp, #84	@ 0x54
 800b78e:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b792:	4603      	mov	r3, r0
 800b794:	3304      	adds	r3, #4
 800b796:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800ba7c <arm_radix8_butterfly_f32+0x2f8>
 800b79a:	9012      	str	r0, [sp, #72]	@ 0x48
 800b79c:	468b      	mov	fp, r1
 800b79e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7a0:	4689      	mov	r9, r1
 800b7a2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b7a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7a8:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b7aa:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b7ae:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b7b2:	eb03 0508 	add.w	r5, r3, r8
 800b7b6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b7ba:	eb05 040e 	add.w	r4, r5, lr
 800b7be:	0137      	lsls	r7, r6, #4
 800b7c0:	eba6 030a 	sub.w	r3, r6, sl
 800b7c4:	eb04 000e 	add.w	r0, r4, lr
 800b7c8:	44b2      	add	sl, r6
 800b7ca:	1d3a      	adds	r2, r7, #4
 800b7cc:	9702      	str	r7, [sp, #8]
 800b7ce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b7d2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b7d6:	ebae 0c06 	sub.w	ip, lr, r6
 800b7da:	9703      	str	r7, [sp, #12]
 800b7dc:	eb03 0708 	add.w	r7, r3, r8
 800b7e0:	9701      	str	r7, [sp, #4]
 800b7e2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b7e6:	9706      	str	r7, [sp, #24]
 800b7e8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b7ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b7ee:	f10e 0104 	add.w	r1, lr, #4
 800b7f2:	4439      	add	r1, r7
 800b7f4:	443a      	add	r2, r7
 800b7f6:	0137      	lsls	r7, r6, #4
 800b7f8:	00f6      	lsls	r6, r6, #3
 800b7fa:	9704      	str	r7, [sp, #16]
 800b7fc:	9605      	str	r6, [sp, #20]
 800b7fe:	9f01      	ldr	r7, [sp, #4]
 800b800:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b802:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b806:	f04f 0c00 	mov.w	ip, #0
 800b80a:	edd4 6a00 	vldr	s13, [r4]
 800b80e:	edd7 1a00 	vldr	s3, [r7]
 800b812:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b816:	edd5 5a00 	vldr	s11, [r5]
 800b81a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b81e:	ed90 6a00 	vldr	s12, [r0]
 800b822:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b826:	ed93 3a00 	vldr	s6, [r3]
 800b82a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b82e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b832:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b836:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b83a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b83e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b842:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b846:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b84a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b84e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b852:	ed85 4a00 	vstr	s8, [r5]
 800b856:	edd1 6a00 	vldr	s13, [r1]
 800b85a:	ed94 9a01 	vldr	s18, [r4, #4]
 800b85e:	edd3 2a01 	vldr	s5, [r3, #4]
 800b862:	edd7 8a01 	vldr	s17, [r7, #4]
 800b866:	edd6 0a00 	vldr	s1, [r6]
 800b86a:	edd5 3a01 	vldr	s7, [r5, #4]
 800b86e:	ed90 8a01 	vldr	s16, [r0, #4]
 800b872:	ed92 7a00 	vldr	s14, [r2]
 800b876:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b87a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b87e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b882:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b886:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b88a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b88e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b892:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b896:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b89a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b89e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b8a2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b8a6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b8aa:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b8ae:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b8b2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b8b6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b8ba:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b8be:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b8c2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b8c6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b8ca:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b8ce:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b8d2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b8d6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b8da:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b8de:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b8e2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b8e6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b8ea:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b8ee:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b8f2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b8f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b8fa:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b8fe:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b902:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b906:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b90a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b90e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b912:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b916:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b91a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b91e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b922:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b926:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b92a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b92e:	44dc      	add	ip, fp
 800b930:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b934:	45e1      	cmp	r9, ip
 800b936:	ed86 8a00 	vstr	s16, [r6]
 800b93a:	ed85 2a01 	vstr	s4, [r5, #4]
 800b93e:	4456      	add	r6, sl
 800b940:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b944:	4455      	add	r5, sl
 800b946:	edc0 6a00 	vstr	s13, [r0]
 800b94a:	ed82 1a00 	vstr	s2, [r2]
 800b94e:	ed80 5a01 	vstr	s10, [r0, #4]
 800b952:	4452      	add	r2, sl
 800b954:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b958:	4450      	add	r0, sl
 800b95a:	edc7 2a00 	vstr	s5, [r7]
 800b95e:	edc4 4a00 	vstr	s9, [r4]
 800b962:	ed83 7a00 	vstr	s14, [r3]
 800b966:	edc1 5a00 	vstr	s11, [r1]
 800b96a:	edc7 3a01 	vstr	s7, [r7, #4]
 800b96e:	4451      	add	r1, sl
 800b970:	ed84 6a01 	vstr	s12, [r4, #4]
 800b974:	4457      	add	r7, sl
 800b976:	edc3 7a01 	vstr	s15, [r3, #4]
 800b97a:	4454      	add	r4, sl
 800b97c:	4453      	add	r3, sl
 800b97e:	f63f af44 	bhi.w	800b80a <arm_radix8_butterfly_f32+0x86>
 800b982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b984:	2b07      	cmp	r3, #7
 800b986:	f240 81b7 	bls.w	800bcf8 <arm_radix8_butterfly_f32+0x574>
 800b98a:	9b06      	ldr	r3, [sp, #24]
 800b98c:	9903      	ldr	r1, [sp, #12]
 800b98e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b990:	9e05      	ldr	r6, [sp, #20]
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	f103 0c08 	add.w	ip, r3, #8
 800b998:	9b02      	ldr	r3, [sp, #8]
 800b99a:	3108      	adds	r1, #8
 800b99c:	f108 0808 	add.w	r8, r8, #8
 800b9a0:	1841      	adds	r1, r0, r1
 800b9a2:	3608      	adds	r6, #8
 800b9a4:	330c      	adds	r3, #12
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4444      	add	r4, r8
 800b9aa:	18c3      	adds	r3, r0, r3
 800b9ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9ae:	1981      	adds	r1, r0, r6
 800b9b0:	f10e 0e08 	add.w	lr, lr, #8
 800b9b4:	3208      	adds	r2, #8
 800b9b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9b8:	9107      	str	r1, [sp, #28]
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4601      	mov	r1, r0
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	f100 030c 	add.w	r3, r0, #12
 800b9c4:	4474      	add	r4, lr
 800b9c6:	f04f 0801 	mov.w	r8, #1
 800b9ca:	1882      	adds	r2, r0, r2
 800b9cc:	4461      	add	r1, ip
 800b9ce:	9305      	str	r3, [sp, #20]
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9d4:	46c1      	mov	r9, r8
 800b9d6:	9208      	str	r2, [sp, #32]
 800b9d8:	46d8      	mov	r8, fp
 800b9da:	9106      	str	r1, [sp, #24]
 800b9dc:	f04f 0e00 	mov.w	lr, #0
 800b9e0:	469b      	mov	fp, r3
 800b9e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9e6:	449e      	add	lr, r3
 800b9e8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b9ec:	441a      	add	r2, r3
 800b9ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9f0:	441a      	add	r2, r3
 800b9f2:	18d4      	adds	r4, r2, r3
 800b9f4:	18e5      	adds	r5, r4, r3
 800b9f6:	18ee      	adds	r6, r5, r3
 800b9f8:	18f7      	adds	r7, r6, r3
 800b9fa:	eb07 0c03 	add.w	ip, r7, r3
 800b9fe:	920d      	str	r2, [sp, #52]	@ 0x34
 800ba00:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800ba04:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800ba08:	910c      	str	r1, [sp, #48]	@ 0x30
 800ba0a:	4419      	add	r1, r3
 800ba0c:	9103      	str	r1, [sp, #12]
 800ba0e:	4419      	add	r1, r3
 800ba10:	18ca      	adds	r2, r1, r3
 800ba12:	9202      	str	r2, [sp, #8]
 800ba14:	441a      	add	r2, r3
 800ba16:	18d0      	adds	r0, r2, r3
 800ba18:	ed92 ea01 	vldr	s28, [r2, #4]
 800ba1c:	9a02      	ldr	r2, [sp, #8]
 800ba1e:	edd4 7a00 	vldr	s15, [r4]
 800ba22:	edd2 da01 	vldr	s27, [r2, #4]
 800ba26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba28:	ed91 da01 	vldr	s26, [r1, #4]
 800ba2c:	ed92 ca01 	vldr	s24, [r2, #4]
 800ba30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba32:	9903      	ldr	r1, [sp, #12]
 800ba34:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba38:	edd2 7a00 	vldr	s15, [r2]
 800ba3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba3e:	edcd 7a02 	vstr	s15, [sp, #8]
 800ba42:	edd2 7a00 	vldr	s15, [r2]
 800ba46:	edd0 ea01 	vldr	s29, [r0, #4]
 800ba4a:	edd1 ca01 	vldr	s25, [r1, #4]
 800ba4e:	eddc ba00 	vldr	s23, [ip]
 800ba52:	edd7 aa00 	vldr	s21, [r7]
 800ba56:	ed96 aa00 	vldr	s20, [r6]
 800ba5a:	edd5 9a00 	vldr	s19, [r5]
 800ba5e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ba62:	4403      	add	r3, r0
 800ba64:	ed93 fa01 	vldr	s30, [r3, #4]
 800ba68:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800ba6c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800ba70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ba78:	46cc      	mov	ip, r9
 800ba7a:	e001      	b.n	800ba80 <arm_radix8_butterfly_f32+0x2fc>
 800ba7c:	3f3504f3 	.word	0x3f3504f3
 800ba80:	ed91 6a00 	vldr	s12, [r1]
 800ba84:	ed93 5a00 	vldr	s10, [r3]
 800ba88:	edd0 fa00 	vldr	s31, [r0]
 800ba8c:	edd4 7a00 	vldr	s15, [r4]
 800ba90:	ed95 7a00 	vldr	s14, [r5]
 800ba94:	ed56 3a01 	vldr	s7, [r6, #-4]
 800ba98:	ed17 3a01 	vldr	s6, [r7, #-4]
 800ba9c:	ed92 2a00 	vldr	s4, [r2]
 800baa0:	ed96 0a00 	vldr	s0, [r6]
 800baa4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800baa8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800baac:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800bab0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bab4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800bab8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800babc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800bac0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800bac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bac8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800bacc:	edd4 8a01 	vldr	s17, [r4, #4]
 800bad0:	ed92 9a01 	vldr	s18, [r2, #4]
 800bad4:	edd7 0a00 	vldr	s1, [r7]
 800bad8:	edd1 2a01 	vldr	s5, [r1, #4]
 800badc:	ed95 7a01 	vldr	s14, [r5, #4]
 800bae0:	ed93 6a01 	vldr	s12, [r3, #4]
 800bae4:	edd0 5a01 	vldr	s11, [r0, #4]
 800bae8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800baec:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800baf0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800baf4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800baf8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800bafc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800bb00:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800bb04:	ee79 2a22 	vadd.f32	s5, s18, s5
 800bb08:	ee32 9a27 	vadd.f32	s18, s4, s15
 800bb0c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800bb10:	ee30 2a06 	vadd.f32	s4, s0, s12
 800bb14:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800bb18:	ee71 4a64 	vsub.f32	s9, s2, s9
 800bb1c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800bb20:	ee32 1a08 	vadd.f32	s2, s4, s16
 800bb24:	ee72 fa87 	vadd.f32	s31, s5, s14
 800bb28:	ee32 2a48 	vsub.f32	s4, s4, s16
 800bb2c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800bb30:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800bb34:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800bb38:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800bb3c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800bb40:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800bb44:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800bb48:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bb4c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800bb50:	ee74 0a22 	vadd.f32	s1, s8, s5
 800bb54:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bb58:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bb5c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bb60:	ee32 4a64 	vsub.f32	s8, s4, s9
 800bb64:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bb68:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bb6c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bb70:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800bb74:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bb78:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bb7c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bb80:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800bb84:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800bb88:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bb8c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bb90:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bb94:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bb98:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800bb9c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800bba0:	eddd 1a02 	vldr	s3, [sp, #8]
 800bba4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bba8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bbac:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bbb0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bbb4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bbb8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bbbc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bbc0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bbc4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bbc8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bbcc:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bbd0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bbd4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800bbd8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bbdc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bbe0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bbe4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800bbe8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bbec:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bbf0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bbf4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bbf8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bbfc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bc00:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bc04:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bc08:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bc0c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bc10:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bc14:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bc18:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bc1c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bc20:	eddd 5a03 	vldr	s11, [sp, #12]
 800bc24:	edc6 fa00 	vstr	s31, [r6]
 800bc28:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bc2c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bc30:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bc34:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bc38:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bc3c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bc40:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bc44:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bc48:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bc4c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bc50:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bc54:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bc58:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bc5c:	44c4      	add	ip, r8
 800bc5e:	45e3      	cmp	fp, ip
 800bc60:	edc3 3a00 	vstr	s7, [r3]
 800bc64:	edc3 6a01 	vstr	s13, [r3, #4]
 800bc68:	4456      	add	r6, sl
 800bc6a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bc6e:	edc7 0a00 	vstr	s1, [r7]
 800bc72:	4453      	add	r3, sl
 800bc74:	ed80 2a00 	vstr	s4, [r0]
 800bc78:	edc0 2a01 	vstr	s5, [r0, #4]
 800bc7c:	4457      	add	r7, sl
 800bc7e:	edc2 1a00 	vstr	s3, [r2]
 800bc82:	ed82 7a01 	vstr	s14, [r2, #4]
 800bc86:	4450      	add	r0, sl
 800bc88:	ed85 8a00 	vstr	s16, [r5]
 800bc8c:	ed85 0a01 	vstr	s0, [r5, #4]
 800bc90:	4452      	add	r2, sl
 800bc92:	edc1 4a00 	vstr	s9, [r1]
 800bc96:	4455      	add	r5, sl
 800bc98:	ed81 3a01 	vstr	s6, [r1, #4]
 800bc9c:	edc4 8a00 	vstr	s17, [r4]
 800bca0:	ed84 6a01 	vstr	s12, [r4, #4]
 800bca4:	4451      	add	r1, sl
 800bca6:	4454      	add	r4, sl
 800bca8:	f63f aeea 	bhi.w	800ba80 <arm_radix8_butterfly_f32+0x2fc>
 800bcac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcae:	3308      	adds	r3, #8
 800bcb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcba:	3308      	adds	r3, #8
 800bcbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcbe:	9b08      	ldr	r3, [sp, #32]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	9308      	str	r3, [sp, #32]
 800bcc4:	9b07      	ldr	r3, [sp, #28]
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	9b06      	ldr	r3, [sp, #24]
 800bccc:	3308      	adds	r3, #8
 800bcce:	9306      	str	r3, [sp, #24]
 800bcd0:	9b05      	ldr	r3, [sp, #20]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcde:	f109 0901 	add.w	r9, r9, #1
 800bce2:	454b      	cmp	r3, r9
 800bce4:	f47f ae7d 	bne.w	800b9e2 <arm_radix8_butterfly_f32+0x25e>
 800bce8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	46d9      	mov	r9, fp
 800bcf0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf2:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800bcf6:	e554      	b.n	800b7a2 <arm_radix8_butterfly_f32+0x1e>
 800bcf8:	b015      	add	sp, #84	@ 0x54
 800bcfa:	ecbd 8b10 	vpop	{d8-d15}
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	bf00      	nop

0800bd04 <_ZdlPvj>:
 800bd04:	f000 b875 	b.w	800bdf2 <_ZdlPv>

0800bd08 <_Znwj>:
 800bd08:	2801      	cmp	r0, #1
 800bd0a:	bf38      	it	cc
 800bd0c:	2001      	movcc	r0, #1
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	4604      	mov	r4, r0
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 f8a0 	bl	800be58 <malloc>
 800bd18:	b100      	cbz	r0, 800bd1c <_Znwj+0x14>
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	f000 f86c 	bl	800bdf8 <_ZSt15get_new_handlerv>
 800bd20:	b908      	cbnz	r0, 800bd26 <_Znwj+0x1e>
 800bd22:	f000 f892 	bl	800be4a <abort>
 800bd26:	4780      	blx	r0
 800bd28:	e7f3      	b.n	800bd12 <_Znwj+0xa>

0800bd2a <_ZNSaIcEC1Ev>:
 800bd2a:	4770      	bx	lr

0800bd2c <_ZNSaIcED1Ev>:
 800bd2c:	4770      	bx	lr

0800bd2e <_ZSt17__throw_bad_allocv>:
 800bd2e:	b508      	push	{r3, lr}
 800bd30:	f000 f88b 	bl	800be4a <abort>

0800bd34 <_ZSt20__throw_length_errorPKc>:
 800bd34:	b508      	push	{r3, lr}
 800bd36:	f000 f888 	bl	800be4a <abort>

0800bd3a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800bd3a:	b10a      	cbz	r2, 800bd40 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800bd3c:	f000 b94a 	b.w	800bfd4 <memcmp>
 800bd40:	4610      	mov	r0, r2
 800bd42:	4770      	bx	lr

0800bd44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800bd44:	6001      	str	r1, [r0, #0]
 800bd46:	4770      	bx	lr

0800bd48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800bd48:	6800      	ldr	r0, [r0, #0]
 800bd4a:	4770      	bx	lr

0800bd4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800bd4c:	3008      	adds	r0, #8
 800bd4e:	4770      	bx	lr

0800bd50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800bd50:	6081      	str	r1, [r0, #8]
 800bd52:	4770      	bx	lr

0800bd54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800bd54:	6803      	ldr	r3, [r0, #0]
 800bd56:	6041      	str	r1, [r0, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	545a      	strb	r2, [r3, r1]
 800bd5c:	4770      	bx	lr

0800bd5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800bd5e:	f850 3b08 	ldr.w	r3, [r0], #8
 800bd62:	1a1b      	subs	r3, r3, r0
 800bd64:	4258      	negs	r0, r3
 800bd66:	4158      	adcs	r0, r3
 800bd68:	4770      	bx	lr
	...

0800bd6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800bd6c:	b508      	push	{r3, lr}
 800bd6e:	680b      	ldr	r3, [r1, #0]
 800bd70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd74:	d302      	bcc.n	800bd7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bd76:	480d      	ldr	r0, [pc, #52]	@ (800bdac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800bd78:	f7ff ffdc 	bl	800bd34 <_ZSt20__throw_length_errorPKc>
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d90b      	bls.n	800bd98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bd80:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800bd84:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800bd88:	d206      	bcs.n	800bd98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bd8a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800bd8e:	bf2a      	itet	cs
 800bd90:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800bd94:	6008      	strcc	r0, [r1, #0]
 800bd96:	600b      	strcs	r3, [r1, #0]
 800bd98:	6808      	ldr	r0, [r1, #0]
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d501      	bpl.n	800bda2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800bd9e:	f7ff ffc6 	bl	800bd2e <_ZSt17__throw_bad_allocv>
 800bda2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bda6:	f7ff bfaf 	b.w	800bd08 <_Znwj>
 800bdaa:	bf00      	nop
 800bdac:	0800ed7c 	.word	0x0800ed7c

0800bdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	f7ff ffd3 	bl	800bd5e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bdb8:	b920      	cbnz	r0, 800bdc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800bdba:	6820      	ldr	r0, [r4, #0]
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f000 b817 	b.w	800bdf2 <_ZdlPv>
 800bdc4:	bd10      	pop	{r4, pc}

0800bdc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	4604      	mov	r4, r0
 800bdca:	f7ff fff1 	bl	800bdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	bd10      	pop	{r4, pc}

0800bdd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800bdd2:	b538      	push	{r3, r4, r5, lr}
 800bdd4:	6845      	ldr	r5, [r0, #4]
 800bdd6:	684c      	ldr	r4, [r1, #4]
 800bdd8:	6800      	ldr	r0, [r0, #0]
 800bdda:	6809      	ldr	r1, [r1, #0]
 800bddc:	42a5      	cmp	r5, r4
 800bdde:	462a      	mov	r2, r5
 800bde0:	bf28      	it	cs
 800bde2:	4622      	movcs	r2, r4
 800bde4:	f7ff ffa9 	bl	800bd3a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800bde8:	b900      	cbnz	r0, 800bdec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800bdea:	1b28      	subs	r0, r5, r4
 800bdec:	bd38      	pop	{r3, r4, r5, pc}

0800bdee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800bdee:	6001      	str	r1, [r0, #0]
 800bdf0:	4770      	bx	lr

0800bdf2 <_ZdlPv>:
 800bdf2:	f000 b839 	b.w	800be68 <free>
	...

0800bdf8 <_ZSt15get_new_handlerv>:
 800bdf8:	4b02      	ldr	r3, [pc, #8]	@ (800be04 <_ZSt15get_new_handlerv+0xc>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	f3bf 8f5b 	dmb	ish
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20001f18 	.word	0x20001f18

0800be08 <sqrtf>:
 800be08:	b508      	push	{r3, lr}
 800be0a:	ed2d 8b02 	vpush	{d8}
 800be0e:	eeb0 8a40 	vmov.f32	s16, s0
 800be12:	f000 f817 	bl	800be44 <__ieee754_sqrtf>
 800be16:	eeb4 8a48 	vcmp.f32	s16, s16
 800be1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be1e:	d60c      	bvs.n	800be3a <sqrtf+0x32>
 800be20:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800be40 <sqrtf+0x38>
 800be24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2c:	d505      	bpl.n	800be3a <sqrtf+0x32>
 800be2e:	f000 f93d 	bl	800c0ac <__errno>
 800be32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800be36:	2321      	movs	r3, #33	@ 0x21
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	ecbd 8b02 	vpop	{d8}
 800be3e:	bd08      	pop	{r3, pc}
 800be40:	00000000 	.word	0x00000000

0800be44 <__ieee754_sqrtf>:
 800be44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be48:	4770      	bx	lr

0800be4a <abort>:
 800be4a:	b508      	push	{r3, lr}
 800be4c:	2006      	movs	r0, #6
 800be4e:	f000 f901 	bl	800c054 <raise>
 800be52:	2001      	movs	r0, #1
 800be54:	f7f6 fe54 	bl	8002b00 <_exit>

0800be58 <malloc>:
 800be58:	4b02      	ldr	r3, [pc, #8]	@ (800be64 <malloc+0xc>)
 800be5a:	4601      	mov	r1, r0
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	f000 b82d 	b.w	800bebc <_malloc_r>
 800be62:	bf00      	nop
 800be64:	20000018 	.word	0x20000018

0800be68 <free>:
 800be68:	4b02      	ldr	r3, [pc, #8]	@ (800be74 <free+0xc>)
 800be6a:	4601      	mov	r1, r0
 800be6c:	6818      	ldr	r0, [r3, #0]
 800be6e:	f000 b949 	b.w	800c104 <_free_r>
 800be72:	bf00      	nop
 800be74:	20000018 	.word	0x20000018

0800be78 <sbrk_aligned>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	4e0f      	ldr	r6, [pc, #60]	@ (800beb8 <sbrk_aligned+0x40>)
 800be7c:	460c      	mov	r4, r1
 800be7e:	6831      	ldr	r1, [r6, #0]
 800be80:	4605      	mov	r5, r0
 800be82:	b911      	cbnz	r1, 800be8a <sbrk_aligned+0x12>
 800be84:	f000 f902 	bl	800c08c <_sbrk_r>
 800be88:	6030      	str	r0, [r6, #0]
 800be8a:	4621      	mov	r1, r4
 800be8c:	4628      	mov	r0, r5
 800be8e:	f000 f8fd 	bl	800c08c <_sbrk_r>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d103      	bne.n	800be9e <sbrk_aligned+0x26>
 800be96:	f04f 34ff 	mov.w	r4, #4294967295
 800be9a:	4620      	mov	r0, r4
 800be9c:	bd70      	pop	{r4, r5, r6, pc}
 800be9e:	1cc4      	adds	r4, r0, #3
 800bea0:	f024 0403 	bic.w	r4, r4, #3
 800bea4:	42a0      	cmp	r0, r4
 800bea6:	d0f8      	beq.n	800be9a <sbrk_aligned+0x22>
 800bea8:	1a21      	subs	r1, r4, r0
 800beaa:	4628      	mov	r0, r5
 800beac:	f000 f8ee 	bl	800c08c <_sbrk_r>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d1f2      	bne.n	800be9a <sbrk_aligned+0x22>
 800beb4:	e7ef      	b.n	800be96 <sbrk_aligned+0x1e>
 800beb6:	bf00      	nop
 800beb8:	20001f1c 	.word	0x20001f1c

0800bebc <_malloc_r>:
 800bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec0:	1ccd      	adds	r5, r1, #3
 800bec2:	f025 0503 	bic.w	r5, r5, #3
 800bec6:	3508      	adds	r5, #8
 800bec8:	2d0c      	cmp	r5, #12
 800beca:	bf38      	it	cc
 800becc:	250c      	movcc	r5, #12
 800bece:	2d00      	cmp	r5, #0
 800bed0:	4606      	mov	r6, r0
 800bed2:	db01      	blt.n	800bed8 <_malloc_r+0x1c>
 800bed4:	42a9      	cmp	r1, r5
 800bed6:	d904      	bls.n	800bee2 <_malloc_r+0x26>
 800bed8:	230c      	movs	r3, #12
 800beda:	6033      	str	r3, [r6, #0]
 800bedc:	2000      	movs	r0, #0
 800bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfb8 <_malloc_r+0xfc>
 800bee6:	f000 f869 	bl	800bfbc <__malloc_lock>
 800beea:	f8d8 3000 	ldr.w	r3, [r8]
 800beee:	461c      	mov	r4, r3
 800bef0:	bb44      	cbnz	r4, 800bf44 <_malloc_r+0x88>
 800bef2:	4629      	mov	r1, r5
 800bef4:	4630      	mov	r0, r6
 800bef6:	f7ff ffbf 	bl	800be78 <sbrk_aligned>
 800befa:	1c43      	adds	r3, r0, #1
 800befc:	4604      	mov	r4, r0
 800befe:	d158      	bne.n	800bfb2 <_malloc_r+0xf6>
 800bf00:	f8d8 4000 	ldr.w	r4, [r8]
 800bf04:	4627      	mov	r7, r4
 800bf06:	2f00      	cmp	r7, #0
 800bf08:	d143      	bne.n	800bf92 <_malloc_r+0xd6>
 800bf0a:	2c00      	cmp	r4, #0
 800bf0c:	d04b      	beq.n	800bfa6 <_malloc_r+0xea>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	4639      	mov	r1, r7
 800bf12:	4630      	mov	r0, r6
 800bf14:	eb04 0903 	add.w	r9, r4, r3
 800bf18:	f000 f8b8 	bl	800c08c <_sbrk_r>
 800bf1c:	4581      	cmp	r9, r0
 800bf1e:	d142      	bne.n	800bfa6 <_malloc_r+0xea>
 800bf20:	6821      	ldr	r1, [r4, #0]
 800bf22:	1a6d      	subs	r5, r5, r1
 800bf24:	4629      	mov	r1, r5
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7ff ffa6 	bl	800be78 <sbrk_aligned>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d03a      	beq.n	800bfa6 <_malloc_r+0xea>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	442b      	add	r3, r5
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	f8d8 3000 	ldr.w	r3, [r8]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	bb62      	cbnz	r2, 800bf98 <_malloc_r+0xdc>
 800bf3e:	f8c8 7000 	str.w	r7, [r8]
 800bf42:	e00f      	b.n	800bf64 <_malloc_r+0xa8>
 800bf44:	6822      	ldr	r2, [r4, #0]
 800bf46:	1b52      	subs	r2, r2, r5
 800bf48:	d420      	bmi.n	800bf8c <_malloc_r+0xd0>
 800bf4a:	2a0b      	cmp	r2, #11
 800bf4c:	d917      	bls.n	800bf7e <_malloc_r+0xc2>
 800bf4e:	1961      	adds	r1, r4, r5
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	6025      	str	r5, [r4, #0]
 800bf54:	bf18      	it	ne
 800bf56:	6059      	strne	r1, [r3, #4]
 800bf58:	6863      	ldr	r3, [r4, #4]
 800bf5a:	bf08      	it	eq
 800bf5c:	f8c8 1000 	streq.w	r1, [r8]
 800bf60:	5162      	str	r2, [r4, r5]
 800bf62:	604b      	str	r3, [r1, #4]
 800bf64:	4630      	mov	r0, r6
 800bf66:	f000 f82f 	bl	800bfc8 <__malloc_unlock>
 800bf6a:	f104 000b 	add.w	r0, r4, #11
 800bf6e:	1d23      	adds	r3, r4, #4
 800bf70:	f020 0007 	bic.w	r0, r0, #7
 800bf74:	1ac2      	subs	r2, r0, r3
 800bf76:	bf1c      	itt	ne
 800bf78:	1a1b      	subne	r3, r3, r0
 800bf7a:	50a3      	strne	r3, [r4, r2]
 800bf7c:	e7af      	b.n	800bede <_malloc_r+0x22>
 800bf7e:	6862      	ldr	r2, [r4, #4]
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	bf0c      	ite	eq
 800bf84:	f8c8 2000 	streq.w	r2, [r8]
 800bf88:	605a      	strne	r2, [r3, #4]
 800bf8a:	e7eb      	b.n	800bf64 <_malloc_r+0xa8>
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	6864      	ldr	r4, [r4, #4]
 800bf90:	e7ae      	b.n	800bef0 <_malloc_r+0x34>
 800bf92:	463c      	mov	r4, r7
 800bf94:	687f      	ldr	r7, [r7, #4]
 800bf96:	e7b6      	b.n	800bf06 <_malloc_r+0x4a>
 800bf98:	461a      	mov	r2, r3
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d1fb      	bne.n	800bf98 <_malloc_r+0xdc>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	6053      	str	r3, [r2, #4]
 800bfa4:	e7de      	b.n	800bf64 <_malloc_r+0xa8>
 800bfa6:	230c      	movs	r3, #12
 800bfa8:	6033      	str	r3, [r6, #0]
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f000 f80c 	bl	800bfc8 <__malloc_unlock>
 800bfb0:	e794      	b.n	800bedc <_malloc_r+0x20>
 800bfb2:	6005      	str	r5, [r0, #0]
 800bfb4:	e7d6      	b.n	800bf64 <_malloc_r+0xa8>
 800bfb6:	bf00      	nop
 800bfb8:	20001f20 	.word	0x20001f20

0800bfbc <__malloc_lock>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	@ (800bfc4 <__malloc_lock+0x8>)
 800bfbe:	f000 b89f 	b.w	800c100 <__retarget_lock_acquire_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	20002060 	.word	0x20002060

0800bfc8 <__malloc_unlock>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	@ (800bfd0 <__malloc_unlock+0x8>)
 800bfca:	f000 b89a 	b.w	800c102 <__retarget_lock_release_recursive>
 800bfce:	bf00      	nop
 800bfd0:	20002060 	.word	0x20002060

0800bfd4 <memcmp>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	3901      	subs	r1, #1
 800bfd8:	4402      	add	r2, r0
 800bfda:	4290      	cmp	r0, r2
 800bfdc:	d101      	bne.n	800bfe2 <memcmp+0xe>
 800bfde:	2000      	movs	r0, #0
 800bfe0:	e005      	b.n	800bfee <memcmp+0x1a>
 800bfe2:	7803      	ldrb	r3, [r0, #0]
 800bfe4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bfe8:	42a3      	cmp	r3, r4
 800bfea:	d001      	beq.n	800bff0 <memcmp+0x1c>
 800bfec:	1b18      	subs	r0, r3, r4
 800bfee:	bd10      	pop	{r4, pc}
 800bff0:	3001      	adds	r0, #1
 800bff2:	e7f2      	b.n	800bfda <memcmp+0x6>

0800bff4 <memset>:
 800bff4:	4402      	add	r2, r0
 800bff6:	4603      	mov	r3, r0
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d100      	bne.n	800bffe <memset+0xa>
 800bffc:	4770      	bx	lr
 800bffe:	f803 1b01 	strb.w	r1, [r3], #1
 800c002:	e7f9      	b.n	800bff8 <memset+0x4>

0800c004 <_raise_r>:
 800c004:	291f      	cmp	r1, #31
 800c006:	b538      	push	{r3, r4, r5, lr}
 800c008:	4605      	mov	r5, r0
 800c00a:	460c      	mov	r4, r1
 800c00c:	d904      	bls.n	800c018 <_raise_r+0x14>
 800c00e:	2316      	movs	r3, #22
 800c010:	6003      	str	r3, [r0, #0]
 800c012:	f04f 30ff 	mov.w	r0, #4294967295
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c01a:	b112      	cbz	r2, 800c022 <_raise_r+0x1e>
 800c01c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c020:	b94b      	cbnz	r3, 800c036 <_raise_r+0x32>
 800c022:	4628      	mov	r0, r5
 800c024:	f000 f830 	bl	800c088 <_getpid_r>
 800c028:	4622      	mov	r2, r4
 800c02a:	4601      	mov	r1, r0
 800c02c:	4628      	mov	r0, r5
 800c02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c032:	f000 b817 	b.w	800c064 <_kill_r>
 800c036:	2b01      	cmp	r3, #1
 800c038:	d00a      	beq.n	800c050 <_raise_r+0x4c>
 800c03a:	1c59      	adds	r1, r3, #1
 800c03c:	d103      	bne.n	800c046 <_raise_r+0x42>
 800c03e:	2316      	movs	r3, #22
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	2001      	movs	r0, #1
 800c044:	e7e7      	b.n	800c016 <_raise_r+0x12>
 800c046:	2100      	movs	r1, #0
 800c048:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c04c:	4620      	mov	r0, r4
 800c04e:	4798      	blx	r3
 800c050:	2000      	movs	r0, #0
 800c052:	e7e0      	b.n	800c016 <_raise_r+0x12>

0800c054 <raise>:
 800c054:	4b02      	ldr	r3, [pc, #8]	@ (800c060 <raise+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f7ff bfd3 	b.w	800c004 <_raise_r>
 800c05e:	bf00      	nop
 800c060:	20000018 	.word	0x20000018

0800c064 <_kill_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	@ (800c084 <_kill_r+0x20>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	f7f6 fd35 	bl	8002ae0 <_kill>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d102      	bne.n	800c080 <_kill_r+0x1c>
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	b103      	cbz	r3, 800c080 <_kill_r+0x1c>
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	2000205c 	.word	0x2000205c

0800c088 <_getpid_r>:
 800c088:	f7f6 bd22 	b.w	8002ad0 <_getpid>

0800c08c <_sbrk_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d06      	ldr	r5, [pc, #24]	@ (800c0a8 <_sbrk_r+0x1c>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	f7f6 fd3e 	bl	8002b18 <_sbrk>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_sbrk_r+0x1a>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_sbrk_r+0x1a>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	2000205c 	.word	0x2000205c

0800c0ac <__errno>:
 800c0ac:	4b01      	ldr	r3, [pc, #4]	@ (800c0b4 <__errno+0x8>)
 800c0ae:	6818      	ldr	r0, [r3, #0]
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20000018 	.word	0x20000018

0800c0b8 <__libc_init_array>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4d0d      	ldr	r5, [pc, #52]	@ (800c0f0 <__libc_init_array+0x38>)
 800c0bc:	4c0d      	ldr	r4, [pc, #52]	@ (800c0f4 <__libc_init_array+0x3c>)
 800c0be:	1b64      	subs	r4, r4, r5
 800c0c0:	10a4      	asrs	r4, r4, #2
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	42a6      	cmp	r6, r4
 800c0c6:	d109      	bne.n	800c0dc <__libc_init_array+0x24>
 800c0c8:	4d0b      	ldr	r5, [pc, #44]	@ (800c0f8 <__libc_init_array+0x40>)
 800c0ca:	4c0c      	ldr	r4, [pc, #48]	@ (800c0fc <__libc_init_array+0x44>)
 800c0cc:	f000 f864 	bl	800c198 <_init>
 800c0d0:	1b64      	subs	r4, r4, r5
 800c0d2:	10a4      	asrs	r4, r4, #2
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	42a6      	cmp	r6, r4
 800c0d8:	d105      	bne.n	800c0e6 <__libc_init_array+0x2e>
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e0:	4798      	blx	r3
 800c0e2:	3601      	adds	r6, #1
 800c0e4:	e7ee      	b.n	800c0c4 <__libc_init_array+0xc>
 800c0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ea:	4798      	blx	r3
 800c0ec:	3601      	adds	r6, #1
 800c0ee:	e7f2      	b.n	800c0d6 <__libc_init_array+0x1e>
 800c0f0:	0800ed9c 	.word	0x0800ed9c
 800c0f4:	0800ed9c 	.word	0x0800ed9c
 800c0f8:	0800ed9c 	.word	0x0800ed9c
 800c0fc:	0800eda4 	.word	0x0800eda4

0800c100 <__retarget_lock_acquire_recursive>:
 800c100:	4770      	bx	lr

0800c102 <__retarget_lock_release_recursive>:
 800c102:	4770      	bx	lr

0800c104 <_free_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4605      	mov	r5, r0
 800c108:	2900      	cmp	r1, #0
 800c10a:	d041      	beq.n	800c190 <_free_r+0x8c>
 800c10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c110:	1f0c      	subs	r4, r1, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	bfb8      	it	lt
 800c116:	18e4      	addlt	r4, r4, r3
 800c118:	f7ff ff50 	bl	800bfbc <__malloc_lock>
 800c11c:	4a1d      	ldr	r2, [pc, #116]	@ (800c194 <_free_r+0x90>)
 800c11e:	6813      	ldr	r3, [r2, #0]
 800c120:	b933      	cbnz	r3, 800c130 <_free_r+0x2c>
 800c122:	6063      	str	r3, [r4, #4]
 800c124:	6014      	str	r4, [r2, #0]
 800c126:	4628      	mov	r0, r5
 800c128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c12c:	f7ff bf4c 	b.w	800bfc8 <__malloc_unlock>
 800c130:	42a3      	cmp	r3, r4
 800c132:	d908      	bls.n	800c146 <_free_r+0x42>
 800c134:	6820      	ldr	r0, [r4, #0]
 800c136:	1821      	adds	r1, r4, r0
 800c138:	428b      	cmp	r3, r1
 800c13a:	bf01      	itttt	eq
 800c13c:	6819      	ldreq	r1, [r3, #0]
 800c13e:	685b      	ldreq	r3, [r3, #4]
 800c140:	1809      	addeq	r1, r1, r0
 800c142:	6021      	streq	r1, [r4, #0]
 800c144:	e7ed      	b.n	800c122 <_free_r+0x1e>
 800c146:	461a      	mov	r2, r3
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	b10b      	cbz	r3, 800c150 <_free_r+0x4c>
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	d9fa      	bls.n	800c146 <_free_r+0x42>
 800c150:	6811      	ldr	r1, [r2, #0]
 800c152:	1850      	adds	r0, r2, r1
 800c154:	42a0      	cmp	r0, r4
 800c156:	d10b      	bne.n	800c170 <_free_r+0x6c>
 800c158:	6820      	ldr	r0, [r4, #0]
 800c15a:	4401      	add	r1, r0
 800c15c:	1850      	adds	r0, r2, r1
 800c15e:	4283      	cmp	r3, r0
 800c160:	6011      	str	r1, [r2, #0]
 800c162:	d1e0      	bne.n	800c126 <_free_r+0x22>
 800c164:	6818      	ldr	r0, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	6053      	str	r3, [r2, #4]
 800c16a:	4408      	add	r0, r1
 800c16c:	6010      	str	r0, [r2, #0]
 800c16e:	e7da      	b.n	800c126 <_free_r+0x22>
 800c170:	d902      	bls.n	800c178 <_free_r+0x74>
 800c172:	230c      	movs	r3, #12
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	e7d6      	b.n	800c126 <_free_r+0x22>
 800c178:	6820      	ldr	r0, [r4, #0]
 800c17a:	1821      	adds	r1, r4, r0
 800c17c:	428b      	cmp	r3, r1
 800c17e:	bf04      	itt	eq
 800c180:	6819      	ldreq	r1, [r3, #0]
 800c182:	685b      	ldreq	r3, [r3, #4]
 800c184:	6063      	str	r3, [r4, #4]
 800c186:	bf04      	itt	eq
 800c188:	1809      	addeq	r1, r1, r0
 800c18a:	6021      	streq	r1, [r4, #0]
 800c18c:	6054      	str	r4, [r2, #4]
 800c18e:	e7ca      	b.n	800c126 <_free_r+0x22>
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	bf00      	nop
 800c194:	20001f20 	.word	0x20001f20

0800c198 <_init>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	bf00      	nop
 800c19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19e:	bc08      	pop	{r3}
 800c1a0:	469e      	mov	lr, r3
 800c1a2:	4770      	bx	lr

0800c1a4 <_fini>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr
