
EZ_simulation_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be4  0800d38c  0800d38c  0000e38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff70  0800ff70  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff70  0800ff70  00010f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff78  0800ff78  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800ff78  0800ff78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ff84  0800ff84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ff8c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c8  20000068  0800fff4  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002130  0800fff4  00011130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   002ada2e  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071eb  00000000  00000000  002beac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000b678  00000000  00000000  002c5cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000089bd  00000000  00000000  002d1330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033962  00000000  00000000  002d9ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005676a  00000000  00000000  0030d64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00a8bff9  00000000  00000000  00363db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00defdb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00036b28  00000000  00000000  00defe6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00e26994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000399c  00000000  00000000  00e269fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00e2a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d374 	.word	0x0800d374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800d374 	.word	0x0800d374

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_frsub>:
 8000aa4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	e002      	b.n	8000ab0 <__addsf3>
 8000aaa:	bf00      	nop

08000aac <__aeabi_fsub>:
 8000aac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ab0 <__addsf3>:
 8000ab0:	0042      	lsls	r2, r0, #1
 8000ab2:	bf1f      	itttt	ne
 8000ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab8:	ea92 0f03 	teqne	r2, r3
 8000abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac4:	d06a      	beq.n	8000b9c <__addsf3+0xec>
 8000ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ace:	bfc1      	itttt	gt
 8000ad0:	18d2      	addgt	r2, r2, r3
 8000ad2:	4041      	eorgt	r1, r0
 8000ad4:	4048      	eorgt	r0, r1
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	bfb8      	it	lt
 8000ada:	425b      	neglt	r3, r3
 8000adc:	2b19      	cmp	r3, #25
 8000ade:	bf88      	it	hi
 8000ae0:	4770      	bxhi	lr
 8000ae2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000af6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000afa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4249      	negne	r1, r1
 8000b02:	ea92 0f03 	teq	r2, r3
 8000b06:	d03f      	beq.n	8000b88 <__addsf3+0xd8>
 8000b08:	f1a2 0201 	sub.w	r2, r2, #1
 8000b0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b10:	eb10 000c 	adds.w	r0, r0, ip
 8000b14:	f1c3 0320 	rsb	r3, r3, #32
 8000b18:	fa01 f103 	lsl.w	r1, r1, r3
 8000b1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__addsf3+0x78>
 8000b22:	4249      	negs	r1, r1
 8000b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b2c:	d313      	bcc.n	8000b56 <__addsf3+0xa6>
 8000b2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b32:	d306      	bcc.n	8000b42 <__addsf3+0x92>
 8000b34:	0840      	lsrs	r0, r0, #1
 8000b36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3a:	f102 0201 	add.w	r2, r2, #1
 8000b3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b40:	d251      	bcs.n	8000be6 <__addsf3+0x136>
 8000b42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	ea40 0003 	orr.w	r0, r0, r3
 8000b54:	4770      	bx	lr
 8000b56:	0049      	lsls	r1, r1, #1
 8000b58:	eb40 0000 	adc.w	r0, r0, r0
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b64:	d2ed      	bcs.n	8000b42 <__addsf3+0x92>
 8000b66:	fab0 fc80 	clz	ip, r0
 8000b6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b76:	bfaa      	itet	ge
 8000b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b7c:	4252      	neglt	r2, r2
 8000b7e:	4318      	orrge	r0, r3
 8000b80:	bfbc      	itt	lt
 8000b82:	40d0      	lsrlt	r0, r2
 8000b84:	4318      	orrlt	r0, r3
 8000b86:	4770      	bx	lr
 8000b88:	f092 0f00 	teq	r2, #0
 8000b8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b90:	bf06      	itte	eq
 8000b92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b96:	3201      	addeq	r2, #1
 8000b98:	3b01      	subne	r3, #1
 8000b9a:	e7b5      	b.n	8000b08 <__addsf3+0x58>
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d021      	beq.n	8000bf0 <__addsf3+0x140>
 8000bac:	ea92 0f03 	teq	r2, r3
 8000bb0:	d004      	beq.n	8000bbc <__addsf3+0x10c>
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	4608      	moveq	r0, r1
 8000bba:	4770      	bx	lr
 8000bbc:	ea90 0f01 	teq	r0, r1
 8000bc0:	bf1c      	itt	ne
 8000bc2:	2000      	movne	r0, #0
 8000bc4:	4770      	bxne	lr
 8000bc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bca:	d104      	bne.n	8000bd6 <__addsf3+0x126>
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bda:	bf3c      	itt	cc
 8000bdc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000be0:	4770      	bxcc	lr
 8000be2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	4770      	bx	lr
 8000bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf4:	bf16      	itet	ne
 8000bf6:	4608      	movne	r0, r1
 8000bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bfc:	4601      	movne	r1, r0
 8000bfe:	0242      	lsls	r2, r0, #9
 8000c00:	bf06      	itte	eq
 8000c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c06:	ea90 0f01 	teqeq	r0, r1
 8000c0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_ui2f>:
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e004      	b.n	8000c20 <__aeabi_i2f+0x8>
 8000c16:	bf00      	nop

08000c18 <__aeabi_i2f>:
 8000c18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	bf48      	it	mi
 8000c1e:	4240      	negmi	r0, r0
 8000c20:	ea5f 0c00 	movs.w	ip, r0
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0000 	mov.w	r0, #0
 8000c32:	e01c      	b.n	8000c6e <__aeabi_l2f+0x2a>

08000c34 <__aeabi_ul2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e00a      	b.n	8000c58 <__aeabi_l2f+0x14>
 8000c42:	bf00      	nop

08000c44 <__aeabi_l2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__aeabi_l2f+0x14>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	ea5f 0c01 	movs.w	ip, r1
 8000c5c:	bf02      	ittt	eq
 8000c5e:	4684      	moveq	ip, r0
 8000c60:	4601      	moveq	r1, r0
 8000c62:	2000      	moveq	r0, #0
 8000c64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c68:	bf08      	it	eq
 8000c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c72:	fabc f28c 	clz	r2, ip
 8000c76:	3a08      	subs	r2, #8
 8000c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c7c:	db10      	blt.n	8000ca0 <__aeabi_l2f+0x5c>
 8000c7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c82:	4463      	add	r3, ip
 8000c84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c90:	fa20 f202 	lsr.w	r2, r0, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	f020 0001 	biceq.w	r0, r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	f102 0220 	add.w	r2, r2, #32
 8000ca4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_ldivmod>:
 8000cc0:	b97b      	cbnz	r3, 8000ce2 <__aeabi_ldivmod+0x22>
 8000cc2:	b972      	cbnz	r2, 8000ce2 <__aeabi_ldivmod+0x22>
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	bfbe      	ittt	lt
 8000cc8:	2000      	movlt	r0, #0
 8000cca:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cce:	e006      	blt.n	8000cde <__aeabi_ldivmod+0x1e>
 8000cd0:	bf08      	it	eq
 8000cd2:	2800      	cmpeq	r0, #0
 8000cd4:	bf1c      	itt	ne
 8000cd6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cda:	f04f 30ff 	movne.w	r0, #4294967295
 8000cde:	f000 b9b5 	b.w	800104c <__aeabi_idiv0>
 8000ce2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cea:	2900      	cmp	r1, #0
 8000cec:	db09      	blt.n	8000d02 <__aeabi_ldivmod+0x42>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db1a      	blt.n	8000d28 <__aeabi_ldivmod+0x68>
 8000cf2:	f000 f84d 	bl	8000d90 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4770      	bx	lr
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db1b      	blt.n	8000d44 <__aeabi_ldivmod+0x84>
 8000d0c:	f000 f840 	bl	8000d90 <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	f000 f82f 	bl	8000d90 <__udivmoddi4>
 8000d32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3a:	b004      	add	sp, #16
 8000d3c:	4240      	negs	r0, r0
 8000d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d42:	4770      	bx	lr
 8000d44:	4252      	negs	r2, r2
 8000d46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4a:	f000 f821 	bl	8000d90 <__udivmoddi4>
 8000d4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d56:	b004      	add	sp, #16
 8000d58:	4252      	negs	r2, r2
 8000d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_uldivmod>:
 8000d60:	b953      	cbnz	r3, 8000d78 <__aeabi_uldivmod+0x18>
 8000d62:	b94a      	cbnz	r2, 8000d78 <__aeabi_uldivmod+0x18>
 8000d64:	2900      	cmp	r1, #0
 8000d66:	bf08      	it	eq
 8000d68:	2800      	cmpeq	r0, #0
 8000d6a:	bf1c      	itt	ne
 8000d6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d70:	f04f 30ff 	movne.w	r0, #4294967295
 8000d74:	f000 b96a 	b.w	800104c <__aeabi_idiv0>
 8000d78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d80:	f000 f806 	bl	8000d90 <__udivmoddi4>
 8000d84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d8c:	b004      	add	sp, #16
 8000d8e:	4770      	bx	lr

08000d90 <__udivmoddi4>:
 8000d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d94:	9d08      	ldr	r5, [sp, #32]
 8000d96:	460c      	mov	r4, r1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d14e      	bne.n	8000e3a <__udivmoddi4+0xaa>
 8000d9c:	4694      	mov	ip, r2
 8000d9e:	458c      	cmp	ip, r1
 8000da0:	4686      	mov	lr, r0
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	d962      	bls.n	8000e6e <__udivmoddi4+0xde>
 8000da8:	b14a      	cbz	r2, 8000dbe <__udivmoddi4+0x2e>
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	4091      	lsls	r1, r2
 8000db0:	fa20 f303 	lsr.w	r3, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	4319      	orrs	r1, r3
 8000dba:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f f68c 	uxth.w	r6, ip
 8000dc6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd6:	fb04 f106 	mul.w	r1, r4, r6
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x64>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000de6:	f080 8112 	bcs.w	800100e <__udivmoddi4+0x27e>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 810f 	bls.w	800100e <__udivmoddi4+0x27e>
 8000df0:	3c02      	subs	r4, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a59      	subs	r1, r3, r1
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfe:	fb07 1110 	mls	r1, r7, r0, r1
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f606 	mul.w	r6, r0, r6
 8000e0a:	429e      	cmp	r6, r3
 8000e0c:	d90a      	bls.n	8000e24 <__udivmoddi4+0x94>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e16:	f080 80fc 	bcs.w	8001012 <__udivmoddi4+0x282>
 8000e1a:	429e      	cmp	r6, r3
 8000e1c:	f240 80f9 	bls.w	8001012 <__udivmoddi4+0x282>
 8000e20:	4463      	add	r3, ip
 8000e22:	3802      	subs	r0, #2
 8000e24:	1b9b      	subs	r3, r3, r6
 8000e26:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	b11d      	cbz	r5, 8000e36 <__udivmoddi4+0xa6>
 8000e2e:	40d3      	lsrs	r3, r2
 8000e30:	2200      	movs	r2, #0
 8000e32:	e9c5 3200 	strd	r3, r2, [r5]
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d905      	bls.n	8000e4a <__udivmoddi4+0xba>
 8000e3e:	b10d      	cbz	r5, 8000e44 <__udivmoddi4+0xb4>
 8000e40:	e9c5 0100 	strd	r0, r1, [r5]
 8000e44:	2100      	movs	r1, #0
 8000e46:	4608      	mov	r0, r1
 8000e48:	e7f5      	b.n	8000e36 <__udivmoddi4+0xa6>
 8000e4a:	fab3 f183 	clz	r1, r3
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d146      	bne.n	8000ee0 <__udivmoddi4+0x150>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d302      	bcc.n	8000e5c <__udivmoddi4+0xcc>
 8000e56:	4290      	cmp	r0, r2
 8000e58:	f0c0 80f0 	bcc.w	800103c <__udivmoddi4+0x2ac>
 8000e5c:	1a86      	subs	r6, r0, r2
 8000e5e:	eb64 0303 	sbc.w	r3, r4, r3
 8000e62:	2001      	movs	r0, #1
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d0e6      	beq.n	8000e36 <__udivmoddi4+0xa6>
 8000e68:	e9c5 6300 	strd	r6, r3, [r5]
 8000e6c:	e7e3      	b.n	8000e36 <__udivmoddi4+0xa6>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x204>
 8000e74:	eba1 040c 	sub.w	r4, r1, ip
 8000e78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e7c:	fa1f f78c 	uxth.w	r7, ip
 8000e80:	2101      	movs	r1, #1
 8000e82:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb07 f006 	mul.w	r0, r7, r6
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x11c>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x11a>
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	f200 80cd 	bhi.w	8001044 <__udivmoddi4+0x2b4>
 8000eaa:	4626      	mov	r6, r4
 8000eac:	1a1c      	subs	r4, r3, r0
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb6:	fb08 4410 	mls	r4, r8, r0, r4
 8000eba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ebe:	fb00 f707 	mul.w	r7, r0, r7
 8000ec2:	429f      	cmp	r7, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x148>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0x146>
 8000ed0:	429f      	cmp	r7, r3
 8000ed2:	f200 80b0 	bhi.w	8001036 <__udivmoddi4+0x2a6>
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	1bdb      	subs	r3, r3, r7
 8000eda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ede:	e7a5      	b.n	8000e2c <__udivmoddi4+0x9c>
 8000ee0:	f1c1 0620 	rsb	r6, r1, #32
 8000ee4:	408b      	lsls	r3, r1
 8000ee6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eea:	431f      	orrs	r7, r3
 8000eec:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef4:	ea43 030c 	orr.w	r3, r3, ip
 8000ef8:	40f4      	lsrs	r4, r6
 8000efa:	fa00 f801 	lsl.w	r8, r0, r1
 8000efe:	0c38      	lsrs	r0, r7, #16
 8000f00:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f04:	fbb4 fef0 	udiv	lr, r4, r0
 8000f08:	fa1f fc87 	uxth.w	ip, r7
 8000f0c:	fb00 441e 	mls	r4, r0, lr, r4
 8000f10:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f14:	fb0e f90c 	mul.w	r9, lr, ip
 8000f18:	45a1      	cmp	r9, r4
 8000f1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f1e:	d90a      	bls.n	8000f36 <__udivmoddi4+0x1a6>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f26:	f080 8084 	bcs.w	8001032 <__udivmoddi4+0x2a2>
 8000f2a:	45a1      	cmp	r9, r4
 8000f2c:	f240 8081 	bls.w	8001032 <__udivmoddi4+0x2a2>
 8000f30:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	eba4 0409 	sub.w	r4, r4, r9
 8000f3a:	fa1f f983 	uxth.w	r9, r3
 8000f3e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f42:	fb00 4413 	mls	r4, r0, r3, r4
 8000f46:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x1d2>
 8000f52:	193c      	adds	r4, r7, r4
 8000f54:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f58:	d267      	bcs.n	800102a <__udivmoddi4+0x29a>
 8000f5a:	45a4      	cmp	ip, r4
 8000f5c:	d965      	bls.n	800102a <__udivmoddi4+0x29a>
 8000f5e:	3b02      	subs	r3, #2
 8000f60:	443c      	add	r4, r7
 8000f62:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f66:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6a:	eba4 040c 	sub.w	r4, r4, ip
 8000f6e:	429c      	cmp	r4, r3
 8000f70:	46ce      	mov	lr, r9
 8000f72:	469c      	mov	ip, r3
 8000f74:	d351      	bcc.n	800101a <__udivmoddi4+0x28a>
 8000f76:	d04e      	beq.n	8001016 <__udivmoddi4+0x286>
 8000f78:	b155      	cbz	r5, 8000f90 <__udivmoddi4+0x200>
 8000f7a:	ebb8 030e 	subs.w	r3, r8, lr
 8000f7e:	eb64 040c 	sbc.w	r4, r4, ip
 8000f82:	fa04 f606 	lsl.w	r6, r4, r6
 8000f86:	40cb      	lsrs	r3, r1
 8000f88:	431e      	orrs	r6, r3
 8000f8a:	40cc      	lsrs	r4, r1
 8000f8c:	e9c5 6400 	strd	r6, r4, [r5]
 8000f90:	2100      	movs	r1, #0
 8000f92:	e750      	b.n	8000e36 <__udivmoddi4+0xa6>
 8000f94:	f1c2 0320 	rsb	r3, r2, #32
 8000f98:	fa20 f103 	lsr.w	r1, r0, r3
 8000f9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa0:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa4:	4094      	lsls	r4, r2
 8000fa6:	430c      	orrs	r4, r1
 8000fa8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fac:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb0:	fa1f f78c 	uxth.w	r7, ip
 8000fb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fb8:	fb08 3110 	mls	r1, r8, r0, r3
 8000fbc:	0c23      	lsrs	r3, r4, #16
 8000fbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc2:	fb00 f107 	mul.w	r1, r0, r7
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x24c>
 8000fca:	eb1c 0303 	adds.w	r3, ip, r3
 8000fce:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd2:	d22c      	bcs.n	800102e <__udivmoddi4+0x29e>
 8000fd4:	4299      	cmp	r1, r3
 8000fd6:	d92a      	bls.n	800102e <__udivmoddi4+0x29e>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	1a5b      	subs	r3, r3, r1
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe4:	fb08 3311 	mls	r3, r8, r1, r3
 8000fe8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fec:	fb01 f307 	mul.w	r3, r1, r7
 8000ff0:	42a3      	cmp	r3, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x276>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ffc:	d213      	bcs.n	8001026 <__udivmoddi4+0x296>
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	d911      	bls.n	8001026 <__udivmoddi4+0x296>
 8001002:	3902      	subs	r1, #2
 8001004:	4464      	add	r4, ip
 8001006:	1ae4      	subs	r4, r4, r3
 8001008:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800100c:	e739      	b.n	8000e82 <__udivmoddi4+0xf2>
 800100e:	4604      	mov	r4, r0
 8001010:	e6f0      	b.n	8000df4 <__udivmoddi4+0x64>
 8001012:	4608      	mov	r0, r1
 8001014:	e706      	b.n	8000e24 <__udivmoddi4+0x94>
 8001016:	45c8      	cmp	r8, r9
 8001018:	d2ae      	bcs.n	8000f78 <__udivmoddi4+0x1e8>
 800101a:	ebb9 0e02 	subs.w	lr, r9, r2
 800101e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001022:	3801      	subs	r0, #1
 8001024:	e7a8      	b.n	8000f78 <__udivmoddi4+0x1e8>
 8001026:	4631      	mov	r1, r6
 8001028:	e7ed      	b.n	8001006 <__udivmoddi4+0x276>
 800102a:	4603      	mov	r3, r0
 800102c:	e799      	b.n	8000f62 <__udivmoddi4+0x1d2>
 800102e:	4630      	mov	r0, r6
 8001030:	e7d4      	b.n	8000fdc <__udivmoddi4+0x24c>
 8001032:	46d6      	mov	lr, sl
 8001034:	e77f      	b.n	8000f36 <__udivmoddi4+0x1a6>
 8001036:	4463      	add	r3, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e74d      	b.n	8000ed8 <__udivmoddi4+0x148>
 800103c:	4606      	mov	r6, r0
 800103e:	4623      	mov	r3, r4
 8001040:	4608      	mov	r0, r1
 8001042:	e70f      	b.n	8000e64 <__udivmoddi4+0xd4>
 8001044:	3e02      	subs	r6, #2
 8001046:	4463      	add	r3, ip
 8001048:	e730      	b.n	8000eac <__udivmoddi4+0x11c>
 800104a:	bf00      	nop

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <set_n_freq>:
#include "dds.h"


void set_n_freq(void (*send_9834)(uint16_t),void (*send_9833)(uint16_t),
		long long int freq, int n, int rad)
{
 8001050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001054:	b098      	sub	sp, #96	@ 0x60
 8001056:	af00      	add	r7, sp, #0
 8001058:	61f8      	str	r0, [r7, #28]
 800105a:	61b9      	str	r1, [r7, #24]
 800105c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	long long int temp_1 = (freq * 268435456 / 25000560);// - 6 - 3 * (freq / 1e4 - 2);
 8001060:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	0719      	lsls	r1, r3, #28
 800106e:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001072:	0710      	lsls	r0, r2, #28
 8001074:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001308 <set_n_freq+0x2b8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fe21 	bl	8000cc0 <__aeabi_ldivmod>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	uint32_t fr = temp_1;
 8001086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001088:	637b      	str	r3, [r7, #52]	@ 0x34
	uint16_t lsb = 0x4000;
 800108a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800108e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	uint16_t msb = 0x4000;
 8001092:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001096:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	int rad_t = rad - 8 * freq * n * 0.36 / 1000;
 800109a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800109e:	f7ff fa0d 	bl	80004bc <__aeabi_i2d>
 80010a2:	e9c7 0100 	strd	r0, r1, [r7]
 80010a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010aa:	17da      	asrs	r2, r3, #31
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	60fa      	str	r2, [r7, #12]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b6:	460a      	mov	r2, r1
 80010b8:	fb02 f203 	mul.w	r2, r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80010c2:	4601      	mov	r1, r0
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	fba2 4501 	umull	r4, r5, r2, r1
 80010d2:	442b      	add	r3, r5
 80010d4:	461d      	mov	r5, r3
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	00eb      	lsls	r3, r5, #3
 80010e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010e4:	00e2      	lsls	r2, r4, #3
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fa23 	bl	8000534 <__aeabi_l2d>
 80010ee:	a388      	add	r3, pc, #544	@ (adr r3, 8001310 <set_n_freq+0x2c0>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa4c 	bl	8000590 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <set_n_freq+0x2b0>)
 8001106:	f7ff fb6d 	bl	80007e4 <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001112:	f7ff f885 	bl	8000220 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc49 	bl	80009b4 <__aeabi_d2iz>
 8001122:	4603      	mov	r3, r0
 8001124:	65bb      	str	r3, [r7, #88]	@ 0x58
    if(rad_t < 0) rad_t += 360;
 8001126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001128:	2b00      	cmp	r3, #0
 800112a:	da03      	bge.n	8001134 <set_n_freq+0xe4>
 800112c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800112e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001132:	65bb      	str	r3, [r7, #88]	@ 0x58
    if(rad_t > 360) rad_t -= 360;
 8001134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001136:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800113a:	dd03      	ble.n	8001144 <set_n_freq+0xf4>
 800113c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001142:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint16_t phase = rad_t * 512 / 45;
 8001144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	4a6e      	ldr	r2, [pc, #440]	@ (8001304 <set_n_freq+0x2b4>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	441a      	add	r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t ph_reg = 0xc001;
 8001158:	f24c 0301 	movw	r3, #49153	@ 0xc001
 800115c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	for (int i = 0; i < 12; ++i)
 8001160:	2300      	movs	r3, #0
 8001162:	653b      	str	r3, [r7, #80]	@ 0x50
 8001164:	e015      	b.n	8001192 <set_n_freq+0x142>
	{
	    if (phase & (1 << i)) {
 8001166:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800116a:	fa42 f303 	asr.w	r3, r2, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00a      	beq.n	800118c <set_n_freq+0x13c>
	        ph_reg |= (1 << i);
 8001176:	2201      	movs	r2, #1
 8001178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	for (int i = 0; i < 12; ++i)
 800118c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800118e:	3301      	adds	r3, #1
 8001190:	653b      	str	r3, [r7, #80]	@ 0x50
 8001192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001194:	2b0b      	cmp	r3, #11
 8001196:	dde6      	ble.n	8001166 <set_n_freq+0x116>
	    }
	}
	for (int i = 0; i < 14; ++i)
 8001198:	2300      	movs	r3, #0
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800119c:	e02b      	b.n	80011f6 <set_n_freq+0x1a6>
	{
	    if (fr & (1 << i)) {
 800119e:	2201      	movs	r2, #1
 80011a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <set_n_freq+0x176>
	        lsb |= (1 << i);
 80011b0:	2201      	movs	r2, #1
 80011b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	    }
	    if (fr & (1 << (i + 14))) {
 80011c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011c8:	330e      	adds	r3, #14
 80011ca:	2201      	movs	r2, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <set_n_freq+0x1a0>
	        msb |= (1 << i);
 80011da:	2201      	movs	r2, #1
 80011dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	for (int i = 0; i < 14; ++i)
 80011f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f2:	3301      	adds	r3, #1
 80011f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f8:	2b0d      	cmp	r3, #13
 80011fa:	ddd0      	ble.n	800119e <set_n_freq+0x14e>
	    }
	}

	long long int temp_2 = n * temp_1;
 80011fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001200:	17da      	asrs	r2, r3, #31
 8001202:	469a      	mov	sl, r3
 8001204:	4693      	mov	fp, r2
 8001206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001208:	fb0a f203 	mul.w	r2, sl, r3
 800120c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800120e:	fb0b f303 	mul.w	r3, fp, r3
 8001212:	4413      	add	r3, r2
 8001214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001216:	fba2 890a 	umull	r8, r9, r2, sl
 800121a:	444b      	add	r3, r9
 800121c:	4699      	mov	r9, r3
 800121e:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
 8001222:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	uint32_t fr_2 = temp_2;
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t lsb2 = 0x4000;
 800122a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800122e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t msb2 = 0x4000;
 8001232:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001236:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	for (int i = 0; i < 14; ++i) {
 800123a:	2300      	movs	r3, #0
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
 800123e:	e02b      	b.n	8001298 <set_n_freq+0x248>
		if (fr_2 & (1 << i)) {
 8001240:	2201      	movs	r2, #1
 8001242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	461a      	mov	r2, r3
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00a      	beq.n	8001268 <set_n_freq+0x218>
			lsb2 |= (1 << i);
 8001252:	2201      	movs	r2, #1
 8001254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	b21a      	sxth	r2, r3
 800125c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		}
		if (fr_2 & (1 << (i + 14))) {
 8001268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800126a:	330e      	adds	r3, #14
 800126c:	2201      	movs	r2, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	461a      	mov	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00a      	beq.n	8001292 <set_n_freq+0x242>
			msb2 |= (1 << i);
 800127c:	2201      	movs	r2, #1
 800127e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	b21a      	sxth	r2, r3
 8001286:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	for (int i = 0; i < 14; ++i) {
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001294:	3301      	adds	r3, #1
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
 8001298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129a:	2b0d      	cmp	r3, #13
 800129c:	ddd0      	ble.n	8001240 <set_n_freq+0x1f0>
		}
	}

	send_9834(0x2100);//send_data(0x2300);
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80012a4:	4798      	blx	r3
	send_9834(lsb);//freq0
 80012a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4610      	mov	r0, r2
 80012ae:	4798      	blx	r3
	send_9834(msb);
 80012b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4610      	mov	r0, r2
 80012b8:	4798      	blx	r3
	send_9834(0xc001);
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f24c 0001 	movw	r0, #49153	@ 0xc001
 80012c0:	4798      	blx	r3


	send_9833(0x2100);//send_data(0x2300);
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80012c8:	4798      	blx	r3
	send_9833(lsb2);//freq0
 80012ca:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4610      	mov	r0, r2
 80012d2:	4798      	blx	r3
	send_9833(msb2);
 80012d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4610      	mov	r0, r2
 80012dc:	4798      	blx	r3
	send_9833(ph_reg);
 80012de:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4610      	mov	r0, r2
 80012e6:	4798      	blx	r3

	send_9833(0x2000);//send_data(0x0200);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ee:	4798      	blx	r3
    send_9834(0x0000);//sine wave;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2000      	movs	r0, #0
 80012f4:	4798      	blx	r3

}
 80012f6:	bf00      	nop
 80012f8:	3760      	adds	r7, #96	@ 0x60
 80012fa:	46bd      	mov	sp, r7
 80012fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001300:	408f4000 	.word	0x408f4000
 8001304:	b60b60b7 	.word	0xb60b60b7
 8001308:	017d7a70 	.word	0x017d7a70
 800130c:	00000000 	.word	0x00000000
 8001310:	70a3d70a 	.word	0x70a3d70a
 8001314:	3fd70a3d 	.word	0x3fd70a3d

08001318 <set_freq>:

//0: sine    1:triangle    2:square /out:sqr
void set_freq(void (*send_data)(uint16_t), long long int freq, int c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	e9c7 2300 	strd	r2, r3, [r7]
	//9834
	//20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100
	//-6,-6,-9,

	//9833
	long long int temp = (freq * 268435456 / 25000560) ;
 8001324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001328:	f04f 0000 	mov.w	r0, #0
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	0719      	lsls	r1, r3, #28
 8001332:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8001336:	0710      	lsls	r0, r2, #28
 8001338:	a337      	add	r3, pc, #220	@ (adr r3, 8001418 <set_freq+0x100>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff fcbf 	bl	8000cc0 <__aeabi_ldivmod>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//long long int temp = (freq * 268435456 / 25000000) - 5 - 3 * (freq / 1e4 - 2);
	uint32_t fr = temp;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 800134e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001352:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 8001354:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001358:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	e029      	b.n	80013b4 <set_freq+0x9c>
	    // 对于lsb，直接取fr对应�?????
	    if (fr & (1 << i)) {
 8001360:	2201      	movs	r2, #1
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	461a      	mov	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	4013      	ands	r3, r2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <set_freq+0x6e>
	        lsb |= (1 << i);
 8001372:	2201      	movs	r2, #1
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	b21a      	sxth	r2, r3
 800137c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001380:	4313      	orrs	r3, r2
 8001382:	b21b      	sxth	r3, r3
 8001384:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	330e      	adds	r3, #14
 800138a:	2201      	movs	r2, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	461a      	mov	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <set_freq+0x96>
	        msb |= (1 << i);
 800139a:	2201      	movs	r2, #1
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	3301      	adds	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2b0d      	cmp	r3, #13
 80013b8:	ddd2      	ble.n	8001360 <set_freq+0x48>
	    }
	}
	send_data(0x2100);//send_data(0x2300);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80013c0:	4798      	blx	r3
	send_data(lsb);//freq0
 80013c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4610      	mov	r0, r2
 80013c8:	4798      	blx	r3
	send_data(msb);
 80013ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4610      	mov	r0, r2
 80013d0:	4798      	blx	r3
	send_data(0xc001);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f24c 0001 	movw	r0, #49153	@ 0xc001
 80013d8:	4798      	blx	r3
//	send_data(0x2100);
//	send_data(0x8000);//freq1
//	send_data(0x8432);
//  send_data(0x0028);
	switch(c)
 80013da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d011      	beq.n	8001404 <set_freq+0xec>
 80013e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dc12      	bgt.n	800140c <set_freq+0xf4>
 80013e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <set_freq+0xdc>
 80013ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d004      	beq.n	80013fc <set_freq+0xe4>
		case 0:send_data(0x0000);break;//send_data(0x0200);
		case 1:send_data(0x0002);break;
		case 2:send_data(0x0028);break;
	}
	//send_data(0x2200);
}
 80013f2:	e00b      	b.n	800140c <set_freq+0xf4>
		case 0:send_data(0x0000);break;//send_data(0x0200);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2000      	movs	r0, #0
 80013f8:	4798      	blx	r3
 80013fa:	e007      	b.n	800140c <set_freq+0xf4>
		case 1:send_data(0x0002);break;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2002      	movs	r0, #2
 8001400:	4798      	blx	r3
 8001402:	e003      	b.n	800140c <set_freq+0xf4>
		case 2:send_data(0x0028);break;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2028      	movs	r0, #40	@ 0x28
 8001408:	4798      	blx	r3
 800140a:	bf00      	nop
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	017d7a70 	.word	0x017d7a70
 800141c:	00000000 	.word	0x00000000

08001420 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	bf00      	nop
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f813 	bl	80014ae <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8001488:	4604      	mov	r4, r0
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f818 	bl	80014c4 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8001494:	f107 020c 	add.w	r2, r7, #12
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4621      	mov	r1, r4
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f81b 	bl	80014da <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 80014a4:	bf00      	nop
 80014a6:	4628      	mov	r0, r5
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdb0      	pop	{r4, r5, r7, pc}

080014ae <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>:
  FixedInt() {}
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>:
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>:
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <_Z41__static_initialization_and_destruction_0ii>:
      }
  //Vector2f x = A.colPivHouseholderQr().solve(b);
      Vector3f x = A.householderQr().solve(b);
  auto mag =  x(0)* x(0) + x(1)*x(1);
  return mag;
}
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d11d      	bne.n	8001584 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154e:	4293      	cmp	r3, r2
 8001550:	d118      	bne.n	8001584 <_Z41__static_initialization_and_destruction_0ii+0x4c>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001554:	f7ff ff6f 	bl	8001436 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8001558:	480d      	ldr	r0, [pc, #52]	@ (8001590 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800155a:	f7ff ff77 	bl	800144c <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 800155e:	480c      	ldr	r0, [pc, #48]	@ (8001590 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001560:	f7ff ff7f 	bl	8001462 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8001564:	4621      	mov	r1, r4
 8001566:	4809      	ldr	r0, [pc, #36]	@ (800158c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001568:	f7ff ff86 	bl	8001478 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800156e:	f7ff ff57 	bl	8001420 <_ZN5Eigen8internal5all_tC1Ev>
 8001572:	4809      	ldr	r0, [pc, #36]	@ (8001598 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001574:	f7ff ffbe 	bl	80014f4 <_ZN5Eigen8internal8FixedIntILi0EEC1Ev>
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800157a:	f7ff ffc6 	bl	800150a <_ZN5Eigen8internal8FixedIntILi2EEC1Ev>
 800157e:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001580:	f7ff ffce 	bl	8001520 <_ZN5Eigen8internal8FixedIntILi3EEC1Ev>
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	20000084 	.word	0x20000084
 8001590:	2000008c 	.word	0x2000008c
 8001594:	20000088 	.word	0x20000088
 8001598:	20000090 	.word	0x20000090
 800159c:	20000094 	.word	0x20000094
 80015a0:	20000098 	.word	0x20000098

080015a4 <_GLOBAL__sub_I_ic_fitting>:
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff ffc3 	bl	8001538 <_Z41__static_initialization_and_destruction_0ii>
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if (hadc != &hadc1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_ConvCpltCallback+0x24>
		return;
	adc_ongoing = 0;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f003 fe92 	bl	80052f4 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim6);
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80015d2:	f008 f96b 	bl	80098ac <HAL_TIM_Base_Stop>
 80015d6:	e000      	b.n	80015da <HAL_ADC_ConvCpltCallback+0x26>
		return;
 80015d8:	bf00      	nop
}
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000009c 	.word	0x2000009c
 80015e4:	20001db8 	.word	0x20001db8
 80015e8:	20000378 	.word	0x20000378

080015ec <send_ad9834>:

void send_ad9834(uint16_t cmd)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
	//SPI3->CR1 |= 1<<1;
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001600:	f006 fb48 	bl	8007c94 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8001604:	1db9      	adds	r1, r7, #6
 8001606:	230a      	movs	r3, #10
 8001608:	2201      	movs	r2, #1
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <send_ad9834+0x3c>)
 800160c:	f007 fdad 	bl	800916a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9834_EN_GPIO_Port, AD9834_EN_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161a:	f006 fb3b 	bl	8007c94 <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000027c 	.word	0x2000027c

0800162c <send_ad9833>:
void send_ad9833(uint16_t cmd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	//SPI3->CR1 |= 1<<1;
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f006 fb28 	bl	8007c94 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8001644:	1db9      	adds	r1, r7, #6
 8001646:	230a      	movs	r3, #10
 8001648:	2201      	movs	r2, #1
 800164a:	4807      	ldr	r0, [pc, #28]	@ (8001668 <send_ad9833+0x3c>)
 800164c:	f007 fd8d 	bl	800916a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(AD9833_EN_GPIO_Port, AD9833_EN_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f006 fb1b 	bl	8007c94 <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000027c 	.word	0x2000027c

0800166c <AFE_Offset_LDAC_Init>:
		return;
	set_freqset_freq(send_ad9833, freq_small, 0);
}

void AFE_Offset_LDAC_Init()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  uint16_t cmd=0x9000;
 8001672:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001676:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800167e:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <AFE_Offset_LDAC_Init+0x38>)
 8001680:	f006 fb08 	bl	8007c94 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 10);
 8001684:	1db9      	adds	r1, r7, #6
 8001686:	230a      	movs	r3, #10
 8001688:	2201      	movs	r2, #1
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <AFE_Offset_LDAC_Init+0x3c>)
 800168c:	f007 fd6d 	bl	800916a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001696:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <AFE_Offset_LDAC_Init+0x38>)
 8001698:	f006 fafc 	bl	8007c94 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	48000400 	.word	0x48000400
 80016a8:	2000027c 	.word	0x2000027c

080016ac <AFE_Gain>:
/**
  * @brief  set AFE gain
  * @param  gain_level uint8_t from 1 to 6, bigger number bigger gain, gain is 1/3, 1, 3, 9.5, 19, 39,
  *                    with a extra 1/5 decrease
  */
void AFE_Gain(uint8_t gain_level){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]

	if (gain_level<=0 || gain_level>6){
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d02d      	beq.n	8001718 <AFE_Gain+0x6c>
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d82a      	bhi.n	8001718 <AFE_Gain+0x6c>
        return;
    }
    else {
    uint8_t Gain_Levels[6]={
 80016c2:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <AFE_Gain+0x74>)
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016cc:	6018      	str	r0, [r3, #0]
 80016ce:	3304      	adds	r3, #4
 80016d0:	8019      	strh	r1, [r3, #0]
        AFE_GAIN_1, AFE_GAIN_2, AFE_GAIN_3,
        AFE_GAIN_4, AFE_GAIN_5, AFE_GAIN_6
    };
    gain_state |= Gain_Levels[gain_level-1];
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	3318      	adds	r3, #24
 80016d8:	443b      	add	r3, r7
 80016da:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <AFE_Gain+0x78>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <AFE_Gain+0x78>)
 80016e8:	701a      	strb	r2, [r3, #0]
    uint16_t state=gain_state;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <AFE_Gain+0x78>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f6:	480c      	ldr	r0, [pc, #48]	@ (8001728 <AFE_Gain+0x7c>)
 80016f8:	f006 facc 	bl	8007c94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&state, 1, 10);
 80016fc:	f107 010e 	add.w	r1, r7, #14
 8001700:	230a      	movs	r3, #10
 8001702:	2201      	movs	r2, #1
 8001704:	4809      	ldr	r0, [pc, #36]	@ (800172c <AFE_Gain+0x80>)
 8001706:	f007 fd30 	bl	800916a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <AFE_Gain+0x7c>)
 8001712:	f006 fabf 	bl	8007c94 <HAL_GPIO_WritePin>
 8001716:	e000      	b.n	800171a <AFE_Gain+0x6e>
        return;
 8001718:	bf00      	nop
    }
}
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	0800d38c 	.word	0x0800d38c
 8001724:	20000db2 	.word	0x20000db2
 8001728:	48000400 	.word	0x48000400
 800172c:	2000027c 	.word	0x2000027c

08001730 <AFE_Offset>:
/**
  * @brief  set AFE offset
  * @param  offset_level uint16_t from 0 to 4095, 12bit DAC with Vref is 5V
  */
void AFE_Offset(uint16_t offset_level){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  if (offset_level <0 || offset_level >= 4096) {
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001740:	d220      	bcs.n	8001784 <AFE_Offset+0x54>
    return ;
  }
  else {
    uint16_t AFE_cmd=((DAC_AFE_OFF2*16+offset_level/256)<<8)+offset_level%256;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	3310      	adds	r3, #16
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	81fb      	strh	r3, [r7, #14]
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001762:	480a      	ldr	r0, [pc, #40]	@ (800178c <AFE_Offset+0x5c>)
 8001764:	f006 fa96 	bl	8007c94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&AFE_cmd, 1, 10);
 8001768:	f107 010e 	add.w	r1, r7, #14
 800176c:	230a      	movs	r3, #10
 800176e:	2201      	movs	r2, #1
 8001770:	4807      	ldr	r0, [pc, #28]	@ (8001790 <AFE_Offset+0x60>)
 8001772:	f007 fcfa 	bl	800916a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <AFE_Offset+0x5c>)
 800177e:	f006 fa89 	bl	8007c94 <HAL_GPIO_WritePin>
 8001782:	e000      	b.n	8001786 <AFE_Offset+0x56>
    return ;
 8001784:	bf00      	nop
  }
}
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	48000400 	.word	0x48000400
 8001790:	2000027c 	.word	0x2000027c

08001794 <roundToNearest5>:

int roundToNearest5(int num)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    int remainder = num % 5;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <roundToNearest5+0x44>)
 80017a0:	fb83 1302 	smull	r1, r3, r3, r2
 80017a4:	1059      	asrs	r1, r3, #1
 80017a6:	17d3      	asrs	r3, r2, #31
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	60fb      	str	r3, [r7, #12]
    if (remainder >= 2.5) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	dd05      	ble.n	80017c6 <roundToNearest5+0x32>
        return num + (5 - remainder);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1c3 0205 	rsb	r2, r3, #5
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	e002      	b.n	80017cc <roundToNearest5+0x38>
    }
    else {
        return num - remainder;
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
    }
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	66666667 	.word	0x66666667
 80017dc:	00000000 	.word	0x00000000

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	f5ad 5d64 	sub.w	sp, sp, #14592	@ 0x3900
 80017e8:	b082      	sub	sp, #8
 80017ea:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f003 f815 	bl	800481a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f001 f8f6 	bl	80029e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f001 fd1e 	bl	8003234 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f8:	f001 fcd6 	bl	80031a8 <MX_DMA_Init>
  MX_CRC_Init();
 80017fc:	f001 f9e0 	bl	8002bc0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8001800:	f001 fc86 	bl	8003110 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001804:	f001 f93e 	bl	8002a84 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001808:	f001 fabe 	bl	8002d88 <MX_SPI3_Init>
  MX_TIM6_Init();
 800180c:	f001 fbc2 	bl	8002f94 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001810:	f001 fa3c 	bl	8002c8c <MX_I2C1_Init>
  MX_DAC1_Init();
 8001814:	f001 fa00 	bl	8002c18 <MX_DAC1_Init>
  MX_COMP3_Init();
 8001818:	f001 f9ac 	bl	8002b74 <MX_COMP3_Init>
  MX_TIM3_Init();
 800181c:	f001 fb6c 	bl	8002ef8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001820:	f001 faf0 	bl	8002e04 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001824:	f001 fbec 	bl	8003000 <MX_TIM7_Init>
  MX_TIM15_Init();
 8001828:	f001 fc20 	bl	800306c <MX_TIM15_Init>
  MX_SPI1_Init();
 800182c:	f001 fa6e 	bl	8002d0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < N; ++i)
 8001830:	2300      	movs	r3, #0
 8001832:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001836:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e03c      	b.n	80018b8 <main+0xd8>
  {
	  window[i] = 0.5 - 0.5 * arm_cos_f32(i * (2 * PI / (N - 1)));
 800183e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001842:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001850:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001b1c <main+0x33c>
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f00b f836 	bl	800c8cc <arm_cos_f32>
 8001860:	ee10 3a10 	vmov	r3, s0
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe3b 	bl	80004e0 <__aeabi_f2d>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4bac      	ldr	r3, [pc, #688]	@ (8001b20 <main+0x340>)
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	49a8      	ldr	r1, [pc, #672]	@ (8001b20 <main+0x340>)
 800187e:	f7fe fccf 	bl	8000220 <__aeabi_dsub>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f8bb 	bl	8000a04 <__aeabi_d2f>
 800188e:	4601      	mov	r1, r0
 8001890:	4aa4      	ldr	r2, [pc, #656]	@ (8001b24 <main+0x344>)
 8001892:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001896:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < N; ++i)
 80018a2:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80018a6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80018b2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80018bc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c6:	dbba      	blt.n	800183e <main+0x5e>
  }

	SPI3->CR1 &= ~(1<<1);
 80018c8:	4b97      	ldr	r3, [pc, #604]	@ (8001b28 <main+0x348>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <main+0x348>)
 80018ce:	f023 0302 	bic.w	r3, r3, #2
 80018d2:	6013      	str	r3, [r2, #0]
    //SPI3->CR2 &= ~(1<<11);
	AFE_Offset_LDAC_Init();
 80018d4:	f7ff feca 	bl	800166c <AFE_Offset_LDAC_Init>
	AFE_Gain(3);
 80018d8:	2003      	movs	r0, #3
 80018da:	f7ff fee7 	bl	80016ac <AFE_Gain>
	AFE_Offset(256);
 80018de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80018e2:	f7ff ff25 	bl	8001730 <AFE_Offset>
	SPI3->CR1 |= 1<<1;
 80018e6:	4b90      	ldr	r3, [pc, #576]	@ (8001b28 <main+0x348>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a8f      	ldr	r2, [pc, #572]	@ (8001b28 <main+0x348>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6013      	str	r3, [r2, #0]
	//SPI3->CR2 |= 1<<11;

	//setup();
  float fft_in[N] = {0};
 80018f2:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80018f6:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 80018fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fe:	461a      	mov	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	f00b fc65 	bl	800d1d0 <memset>
  float fft_out[N] = {0};
 8001906:	f507 53c8 	add.w	r3, r7, #6400	@ 0x1900
 800190a:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 800190e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001912:	461a      	mov	r2, r3
 8001914:	2100      	movs	r1, #0
 8001916:	f00b fc5b 	bl	800d1d0 <memset>
  float deal_mag[N] = {0};
 800191a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800191e:	f1a3 0080 	sub.w	r0, r3, #128	@ 0x80
 8001922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001926:	461a      	mov	r2, r3
 8001928:	2100      	movs	r1, #0
 800192a:	f00b fc51 	bl	800d1d0 <memset>
  int counter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001934:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001938:	6013      	str	r3, [r2, #0]
  GPIO_PinState prev_1 = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001940:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8001944:	7013      	strb	r3, [r2, #0]
  GPIO_PinState prev_2 = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800194c:	f102 0236 	add.w	r2, r2, #54	@ 0x36
 8001950:	7013      	strb	r3, [r2, #0]
  long long int freq_test = 10000;
 8001952:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f507 5162 	add.w	r1, r7, #14464	@ 0x3880
 800195e:	f101 0120 	add.w	r1, r1, #32
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPIO_PinState curr_1 = HAL_GPIO_ReadPin(UI_SW0_GPIO_Port, UI_SW0_Pin);
 8001966:	2104      	movs	r1, #4
 8001968:	4870      	ldr	r0, [pc, #448]	@ (8001b2c <main+0x34c>)
 800196a:	f006 f97b 	bl	8007c64 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8001974:	f102 021f 	add.w	r2, r2, #31
 8001978:	7013      	strb	r3, [r2, #0]
	  GPIO_PinState curr_2 = HAL_GPIO_ReadPin(UI_SW3_GPIO_Port, UI_SW3_Pin);
 800197a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197e:	486c      	ldr	r0, [pc, #432]	@ (8001b30 <main+0x350>)
 8001980:	f006 f970 	bl	8007c64 <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800198a:	f102 021e 	add.w	r2, r2, #30
 800198e:	7013      	strb	r3, [r2, #0]
      if(curr_1 && !prev_1)
 8001990:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8001994:	f103 031f 	add.w	r3, r3, #31
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8563 	beq.w	8002466 <main+0xc86>
 80019a0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80019a4:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 855b 	bne.w	8002466 <main+0xc86>
      {
		  set_sm_freq(1e6 , &htim6);
 80019b0:	4960      	ldr	r1, [pc, #384]	@ (8001b34 <main+0x354>)
 80019b2:	4861      	ldr	r0, [pc, #388]	@ (8001b38 <main+0x358>)
 80019b4:	f001 fd5e 	bl	8003474 <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 80019b8:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <main+0x35c>)
 80019ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001b34 <main+0x354>)
 80019bc:	f240 4101 	movw	r1, #1025	@ 0x401
 80019c0:	485f      	ldr	r0, [pc, #380]	@ (8001b40 <main+0x360>)
 80019c2:	f001 fd39 	bl	8003438 <samp>
		  uint16_t temp_buffer[1025];
		  make_8to16(adc_buffer, 2050, temp_buffer);
 80019c6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80019ca:	3b3c      	subs	r3, #60	@ 0x3c
 80019cc:	461a      	mov	r2, r3
 80019ce:	f640 0102 	movw	r1, #2050	@ 0x802
 80019d2:	485b      	ldr	r0, [pc, #364]	@ (8001b40 <main+0x360>)
 80019d4:	f001 fcfa 	bl	80033cc <make_8to16>
		  int_to_float(temp_buffer + 1, fft_in);
 80019d8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80019dc:	3a3c      	subs	r2, #60	@ 0x3c
 80019de:	3202      	adds	r2, #2
 80019e0:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f001 fd62 	bl	80034b0 <int_to_float>
		  for (int i = 0; i < N; ++i)
 80019ec:	2300      	movs	r3, #0
 80019ee:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80019f2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e030      	b.n	8001a5c <main+0x27c>
		  {
			  fft_in[i] *= window[i];
 80019fa:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80019fe:	461a      	mov	r2, r3
 8001a00:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a04:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b80      	subs	r3, #128	@ 0x80
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	4a43      	ldr	r2, [pc, #268]	@ (8001b24 <main+0x344>)
 8001a16:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a1a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 8001a30:	461a      	mov	r2, r3
 8001a32:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a36:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b80      	subs	r3, #128	@ 0x80
 8001a42:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8001a46:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a4a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001a56:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001a60:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6a:	dbc6      	blt.n	80019fa <main+0x21a>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 8001a6c:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 8001a70:	f507 51c4 	add.w	r1, r7, #6272	@ 0x1880
 8001a74:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 fd3e 	bl	80034fa <fft_transfer>

		  int freq_1 = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001a84:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001a88:	6013      	str	r3, [r2, #0]
		  int freq_2 = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001a90:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001a94:	6013      	str	r3, [r2, #0]
		  int waveform_1 = 0;//waveform = 0: sine, waveform = 1: triangle
 8001a96:	2300      	movs	r3, #0
 8001a98:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001a9c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001aa0:	6013      	str	r3, [r2, #0]
		  int waveform_2 = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001aa8:	f102 0220 	add.w	r2, r2, #32
 8001aac:	6013      	str	r3, [r2, #0]

		  float max = 0;
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ab6:	f102 021c 	add.w	r2, r2, #28
 8001aba:	6013      	str	r3, [r2, #0]
		  float sec = 0;
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ac4:	f102 0218 	add.w	r2, r2, #24
 8001ac8:	6013      	str	r3, [r2, #0]
		  /*set_freq_wave(deal_mag);*/
		  uint32_t big_mag[6] = {0};
 8001aca:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ace:	f1a3 0298 	sub.w	r2, r3, #152	@ 0x98
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	6053      	str	r3, [r2, #4]
 8001ad8:	6093      	str	r3, [r2, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
 8001adc:	6113      	str	r3, [r2, #16]
 8001ade:	6153      	str	r3, [r2, #20]
		  int index[6] = {0};
 8001ae0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ae4:	f1a3 02b0 	sub.w	r2, r3, #176	@ 0xb0
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	6053      	str	r3, [r2, #4]
 8001aee:	6093      	str	r3, [r2, #8]
 8001af0:	60d3      	str	r3, [r2, #12]
 8001af2:	6113      	str	r3, [r2, #16]
 8001af4:	6153      	str	r3, [r2, #20]
		  int freq_counter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001afc:	f102 0214 	add.w	r2, r2, #20
 8001b00:	6013      	str	r3, [r2, #0]
		  uint8_t k = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001b08:	f102 0213 	add.w	r2, r2, #19
 8001b0c:	7013      	strb	r3, [r2, #0]
		  for(int i = 2; i < 512; ++i)
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001b14:	f102 020c 	add.w	r2, r2, #12
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e0b3      	b.n	8001c84 <main+0x4a4>
 8001b1c:	3bc9422c 	.word	0x3bc9422c
 8001b20:	3fe00000 	.word	0x3fe00000
 8001b24:	20000db4 	.word	0x20000db4
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48000800 	.word	0x48000800
 8001b34:	20000378 	.word	0x20000378
 8001b38:	000f4240 	.word	0x000f4240
 8001b3c:	2000009c 	.word	0x2000009c
 8001b40:	200005b0 	.word	0x200005b0
 8001b44:	45160000 	.word	0x45160000
		  {
			  if((deal_mag[i]) > 2400)
 8001b48:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001b52:	f103 030c 	add.w	r3, r3, #12
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b80      	subs	r3, #128	@ 0x80
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001b44 <main+0x364>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd77      	ble.n	8001c60 <main+0x480>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 8001b70:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001b74:	461a      	mov	r2, r3
 8001b76:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001b7a:	f103 030c 	add.w	r3, r3, #12
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b80      	subs	r3, #128	@ 0x80
 8001b86:	ed93 7a00 	vldr	s14, [r3]
 8001b8a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001b8e:	f103 030c 	add.w	r3, r3, #12
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	0093      	lsls	r3, r2, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3b80      	subs	r3, #128	@ 0x80
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	dd57      	ble.n	8001c60 <main+0x480>
 8001bb0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001bba:	f103 030c 	add.w	r3, r3, #12
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b80      	subs	r3, #128	@ 0x80
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001bce:	f103 030c 	add.w	r3, r3, #12
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001bda:	4619      	mov	r1, r3
 8001bdc:	0093      	lsls	r3, r2, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3b80      	subs	r3, #128	@ 0x80
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	dd37      	ble.n	8001c60 <main+0x480>
				  {
					  big_mag[k] = deal_mag[i];
 8001bf0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001bfa:	f103 030c 	add.w	r3, r3, #12
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b80      	subs	r3, #128	@ 0x80
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c0e:	f103 0313 	add.w	r3, r3, #19
 8001c12:	7819      	ldrb	r1, [r3, #0]
 8001c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c18:	ee17 0a90 	vmov	r0, s15
 8001c1c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001c20:	461a      	mov	r2, r3
 8001c22:	008b      	lsls	r3, r1, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	f843 0c98 	str.w	r0, [r3, #-152]
					  index[k] = i;
 8001c2a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c2e:	f103 0313 	add.w	r3, r3, #19
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	441a      	add	r2, r3
 8001c3c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c40:	f103 030c 	add.w	r3, r3, #12
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f842 3cb0 	str.w	r3, [r2, #-176]
					  k++;
 8001c4a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c4e:	f103 0313 	add.w	r3, r3, #19
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001c5a:	f102 0213 	add.w	r2, r2, #19
 8001c5e:	7013      	strb	r3, [r2, #0]
				  }
			  }
			  if(k == 6) break;
 8001c60:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c64:	f103 0313 	add.w	r3, r3, #19
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d014      	beq.n	8001c98 <main+0x4b8>
		  for(int i = 2; i < 512; ++i)
 8001c6e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c72:	f103 030c 	add.w	r3, r3, #12
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001c7e:	f102 020c 	add.w	r2, r2, #12
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001c88:	f103 030c 	add.w	r3, r3, #12
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c92:	f6ff af59 	blt.w	8001b48 <main+0x368>
 8001c96:	e000      	b.n	8001c9a <main+0x4ba>
			  if(k == 6) break;
 8001c98:	bf00      	nop
		  }
		  for(int i = 0;i < 6; ++i)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ca0:	f102 0208 	add.w	r2, r2, #8
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e078      	b.n	8001d9a <main+0x5ba>
		  {
			  index[i] = ((index[i] * 0.97656) / 5) * 5;
 8001ca8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001cac:	461a      	mov	r2, r3
 8001cae:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001cb2:	f103 0308 	add.w	r3, r3, #8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbfb 	bl	80004bc <__aeabi_i2d>
 8001cc6:	a3b1      	add	r3, pc, #708	@ (adr r3, 8001f8c <main+0x7ac>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc60 	bl	8000590 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4baa      	ldr	r3, [pc, #680]	@ (8001f88 <main+0x7a8>)
 8001cde:	f7fe fd81 	bl	80007e4 <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4ba6      	ldr	r3, [pc, #664]	@ (8001f88 <main+0x7a8>)
 8001cf0:	f7fe fc4e 	bl	8000590 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe fe5a 	bl	80009b4 <__aeabi_d2iz>
 8001d00:	4601      	mov	r1, r0
 8001d02:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d06:	461a      	mov	r2, r3
 8001d08:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d0c:	f103 0308 	add.w	r3, r3, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	f843 1cb0 	str.w	r1, [r3, #-176]
			  index[i] = roundToNearest5(index[i]);
 8001d1a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d24:	f103 0308 	add.w	r3, r3, #8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fd2e 	bl	8001794 <roundToNearest5>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d44:	f103 0308 	add.w	r3, r3, #8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f843 1cb0 	str.w	r1, [r3, #-176]
			  if(index[i] > 0) freq_counter ++;
 8001d52:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001d56:	461a      	mov	r2, r3
 8001d58:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d5c:	f103 0308 	add.w	r3, r3, #8
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	dd0a      	ble.n	8001d84 <main+0x5a4>
 8001d6e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d72:	f103 0314 	add.w	r3, r3, #20
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001d7e:	f102 0214 	add.w	r2, r2, #20
 8001d82:	6013      	str	r3, [r2, #0]
		  for(int i = 0;i < 6; ++i)
 8001d84:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d88:	f103 0308 	add.w	r3, r3, #8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001d94:	f102 0208 	add.w	r2, r2, #8
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001d9e:	f103 0308 	add.w	r3, r3, #8
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	f77f af7f 	ble.w	8001ca8 <main+0x4c8>
		  }

		  switch(freq_counter)
 8001daa:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001dae:	f103 0314 	add.w	r3, r3, #20
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	f200 8327 	bhi.w	800240a <main+0xc2a>
 8001dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <main+0x5e4>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001ddd 	.word	0x08001ddd
 8001dc8:	08001e1b 	.word	0x08001e1b
 8001dcc:	08001ed5 	.word	0x08001ed5
 8001dd0:	08002085 	.word	0x08002085
 8001dd4:	0800225b 	.word	0x0800225b
 8001dd8:	0800225b 	.word	0x0800225b
		  {
			  case 1:
			  {
				  waveform_1 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001de2:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001de6:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001dee:	f102 0220 	add.w	r2, r2, #32
 8001df2:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 8001df4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001df8:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001dfc:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e00:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001e04:	6013      	str	r3, [r2, #0]
				  freq_2 = index[0];
 8001e06:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e0a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001e0e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e12:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001e16:	6013      	str	r3, [r2, #0]
				  break;
 8001e18:	e2f7      	b.n	800240a <main+0xc2a>
			  }
			  case 2 :
			  {
				  if(index[0] == 100 && index[1] ==300)
 8001e1a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e1e:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d125      	bne.n	8001e72 <main+0x692>
 8001e26:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e2a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8001e2e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e32:	d11e      	bne.n	8001e72 <main+0x692>
				  {
					  waveform_1 = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e3a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001e3e:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e46:	f102 0220 	add.w	r2, r2, #32
 8001e4a:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 8001e4c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e50:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001e54:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e58:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001e5c:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 8001e5e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e62:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001e66:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e6a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001e6e:	6013      	str	r3, [r2, #0]
					  break;
 8001e70:	e2cb      	b.n	800240a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e78:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001e7c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e84:	f102 0220 	add.w	r2, r2, #32
 8001e88:	6013      	str	r3, [r2, #0]
				  freq_1 = index[0];
 8001e8a:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001e8e:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001e92:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001e96:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001e9a:	6013      	str	r3, [r2, #0]
				  if(big_mag[1] < 10000)
 8001e9c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ea0:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001ea4:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d809      	bhi.n	8001ec0 <main+0x6e0>
				  {
					  freq_2 = index[0];
 8001eac:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001eb0:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001eb4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001eb8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001ebc:	6013      	str	r3, [r2, #0]
				  }
				  else
				  {
					  freq_2 = index[1];
				  }
				  break;
 8001ebe:	e2a4      	b.n	800240a <main+0xc2a>
					  freq_2 = index[1];
 8001ec0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ec4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8001ec8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001ecc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001ed0:	6013      	str	r3, [r2, #0]
				  break;
 8001ed2:	e29a      	b.n	800240a <main+0xc2a>
			  }
			  case 3:
			  {
				  if(big_mag[1]>13000 && big_mag[1]<50000 && big_mag[1]>3000 && big_mag[1]<50000)
 8001ed4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ed8:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001edc:	f243 23c8 	movw	r3, #13000	@ 0x32c8
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d936      	bls.n	8001f52 <main+0x772>
 8001ee4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ee8:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001eec:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d82e      	bhi.n	8001f52 <main+0x772>
 8001ef4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ef8:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001efc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d926      	bls.n	8001f52 <main+0x772>
 8001f04:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f08:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001f0c:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d81e      	bhi.n	8001f52 <main+0x772>
				  {
					  waveform_1 = 1;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f1a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001f1e:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f26:	f102 0220 	add.w	r2, r2, #32
 8001f2a:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 8001f2c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f30:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001f34:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f38:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001f3c:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 8001f3e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f42:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8001f46:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f4a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f4e:	6013      	str	r3, [r2, #0]
					  break;
 8001f50:	e25b      	b.n	800240a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f58:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001f5c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f64:	f102 0220 	add.w	r2, r2, #32
 8001f68:	6013      	str	r3, [r2, #0]
				  freq_2 = 100;
 8001f6a:	2364      	movs	r3, #100	@ 0x64
 8001f6c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f70:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001f74:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 8001f76:	2300      	movs	r3, #0
 8001f78:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8001f7c:	f102 0204 	add.w	r2, r2, #4
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e077      	b.n	8002074 <main+0x894>
 8001f84:	f3af 8000 	nop.w
 8001f88:	40140000 	.word	0x40140000
 8001f8c:	c1d29dc7 	.word	0xc1d29dc7
 8001f90:	3fef3ffa 	.word	0x3fef3ffa
				  {
					  if(big_mag[i] > max)
 8001f94:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001f9e:	f103 0304 	add.w	r3, r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fb8:	f103 031c 	add.w	r3, r3, #28
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d526      	bpl.n	8002018 <main+0x838>
					  {
						  max = big_mag[i];
 8001fca:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fd4:	f103 0304 	add.w	r3, r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8001fee:	f103 031c 	add.w	r3, r3, #28
 8001ff2:	edc3 7a00 	vstr	s15, [r3]
						  freq_1 = index[i];
 8001ff6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002000:	f103 0304 	add.w	r3, r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800200e:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002012:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002016:	6013      	str	r3, [r2, #0]
					  }
					  if(index[0] * 3 == index[1] && index[0] * 5 == index[2])
 8002018:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800201c:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	441a      	add	r2, r3
 8002026:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800202a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800202e:	429a      	cmp	r2, r3
 8002030:	d115      	bne.n	800205e <main+0x87e>
 8002032:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002036:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	441a      	add	r2, r3
 8002040:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002044:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8002048:	429a      	cmp	r2, r3
 800204a:	d108      	bne.n	800205e <main+0x87e>
					  {
						  freq_2 = index[0];
 800204c:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002050:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002054:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002058:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800205c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800205e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002062:	f103 0304 	add.w	r3, r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800206e:	f102 0204 	add.w	r2, r2, #4
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002078:	f103 0304 	add.w	r3, r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b05      	cmp	r3, #5
 8002080:	dd88      	ble.n	8001f94 <main+0x7b4>
					  }
				  }
				  break;
 8002082:	e1c2      	b.n	800240a <main+0xc2a>
			  }
			  case 4 :
			  {
				  if(index[0] * 3 == index[1] && index[0] * 5 == index[2] && 100 < index[3])
 8002084:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002088:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	441a      	add	r2, r3
 8002092:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002096:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800209a:	429a      	cmp	r2, r3
 800209c:	d131      	bne.n	8002102 <main+0x922>
 800209e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020a2:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	441a      	add	r2, r3
 80020ac:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020b0:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d124      	bne.n	8002102 <main+0x922>
 80020b8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020bc:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 80020c0:	2b64      	cmp	r3, #100	@ 0x64
 80020c2:	dd1e      	ble.n	8002102 <main+0x922>
				  {
					  waveform_1 = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020ca:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80020ce:	6013      	str	r3, [r2, #0]
					  waveform_2 = 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020d6:	f102 0220 	add.w	r2, r2, #32
 80020da:	6013      	str	r3, [r2, #0]
					  freq_1 = index[0];
 80020dc:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020e0:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80020e4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020e8:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80020ec:	6013      	str	r3, [r2, #0]
					  freq_2 = index[0];
 80020ee:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80020f2:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80020f6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80020fa:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80020fe:	6013      	str	r3, [r2, #0]
					  break;
 8002100:	e183      	b.n	800240a <main+0xc2a>
				  }
				  waveform_1 = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002108:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800210c:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002114:	f102 0220 	add.w	r2, r2, #32
 8002118:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800211a:	2300      	movs	r3, #0
 800211c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e093      	b.n	800224c <main+0xa6c>
				  {
					  if(big_mag[i] > sec)
 8002124:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002128:	461a      	mov	r2, r3
 800212a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002144:	f103 0318 	add.w	r3, r3, #24
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	d573      	bpl.n	800223e <main+0xa5e>
					  {
						  if(big_mag[i] > max)
 8002156:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800215a:	461a      	mov	r2, r3
 800215c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002172:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002176:	f103 031c 	add.w	r3, r3, #28
 800217a:	ed93 7a00 	vldr	s14, [r3]
 800217e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	d537      	bpl.n	80021f8 <main+0xa18>
						  {
							  sec = max;
 8002188:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800218c:	f103 031c 	add.w	r3, r3, #28
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002196:	f102 0218 	add.w	r2, r2, #24
 800219a:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 800219c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021a0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80021aa:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80021ae:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 80021b0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80021b4:	461a      	mov	r2, r3
 80021b6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021cc:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021d0:	f103 031c 	add.w	r3, r3, #28
 80021d4:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 80021d8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80021dc:	461a      	mov	r2, r3
 80021de:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80021ec:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80021f0:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e022      	b.n	800223e <main+0xa5e>
						  }
						  else
						  {
							  sec = big_mag[i];
 80021f8:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80021fc:	461a      	mov	r2, r3
 80021fe:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002214:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002218:	f103 0318 	add.w	r3, r3, #24
 800221c:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8002220:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002224:	461a      	mov	r2, r3
 8002226:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002234:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002238:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800223c:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 800223e:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b05      	cmp	r3, #5
 8002254:	f77f af66 	ble.w	8002124 <main+0x944>
						  }
					  }
				  }
				  break;
 8002258:	e0d7      	b.n	800240a <main+0xc2a>
			  }
			  case 5 : case 6:
			  {
				  waveform_1 = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002260:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002264:	6013      	str	r3, [r2, #0]
				  waveform_2 = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800226c:	f102 0220 	add.w	r2, r2, #32
 8002270:	6013      	str	r3, [r2, #0]
//				  {
//					  freq_1 = index[0];
//					  freq_2 = index[0];
//					  break;
//				  }
				  for(int i = 0;i < 6; ++i)
 8002272:	2300      	movs	r3, #0
 8002274:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002278:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e0a3      	b.n	80023c8 <main+0xbe8>
				  {
					  if(big_mag[i] > sec)
 8002280:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002284:	461a      	mov	r2, r3
 8002286:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800228a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a0:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80022a4:	f103 0318 	add.w	r3, r3, #24
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d57d      	bpl.n	80023b2 <main+0xbd2>
					  {
						  if(big_mag[i] > max)
 80022b6:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80022ba:	461a      	mov	r2, r3
 80022bc:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80022c0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d6:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80022da:	f103 031c 	add.w	r3, r3, #28
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d53b      	bpl.n	8002364 <main+0xb84>
						  {
							  sec = max;
 80022ec:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80022f0:	f103 031c 	add.w	r3, r3, #28
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80022fa:	f102 0218 	add.w	r2, r2, #24
 80022fe:	6013      	str	r3, [r2, #0]
							  freq_2 = freq_1;
 8002300:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002304:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800230e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002312:	6013      	str	r3, [r2, #0]
							  max = big_mag[i];
 8002314:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002318:	461a      	mov	r2, r3
 800231a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800231e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002334:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002338:	f103 031c 	add.w	r3, r3, #28
 800233c:	edc3 7a00 	vstr	s15, [r3]
							  freq_1 = index[i];
 8002340:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002344:	461a      	mov	r2, r3
 8002346:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800234a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8002358:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800235c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e026      	b.n	80023b2 <main+0xbd2>
						  }
						  else
						  {
							  sec = big_mag[i];
 8002364:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002368:	461a      	mov	r2, r3
 800236a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800236e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	f853 3c98 	ldr.w	r3, [r3, #-152]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002388:	f103 0318 	add.w	r3, r3, #24
 800238c:	edc3 7a00 	vstr	s15, [r3]
							  freq_2 = index[i];
 8002390:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002394:	461a      	mov	r2, r3
 8002396:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800239a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80023a8:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80023ac:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80023b0:	6013      	str	r3, [r2, #0]
				  for(int i = 0;i < 6; ++i)
 80023b2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80023b6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80023c2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80023cc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	f77f af54 	ble.w	8002280 <main+0xaa0>
						  }
					  }
				  }
				  if(sec < 50000) freq_2 = freq_1;
 80023d8:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023dc:	f103 0318 	add.w	r3, r3, #24
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ed9f 7ad4 	vldr	s14, [pc, #848]	@ 8002738 <main+0xf58>
 80023e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f0:	d400      	bmi.n	80023f4 <main+0xc14>
				  break;
 80023f2:	e009      	b.n	8002408 <main+0xc28>
				  if(sec < 50000) freq_2 = freq_1;
 80023f4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80023f8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002402:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002406:	6013      	str	r3, [r2, #0]
				  break;
 8002408:	bf00      	nop
			  }
		  }
		  set_freq(send_ad9833, freq_1 * 1000, waveform_1);
 800240a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800240e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	17da      	asrs	r2, r3, #31
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002420:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002422:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002426:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002432:	48c2      	ldr	r0, [pc, #776]	@ (800273c <main+0xf5c>)
 8002434:	f7fe ff70 	bl	8001318 <set_freq>
		  set_freq(send_ad9834, freq_2 * 1000, waveform_2);
 8002438:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800243c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	17da      	asrs	r2, r3, #31
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002450:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 8002454:	f103 0320 	add.w	r3, r3, #32
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002460:	48b7      	ldr	r0, [pc, #732]	@ (8002740 <main+0xf60>)
 8002462:	f7fe ff59 	bl	8001318 <set_freq>
	  }
      prev_1 = curr_1;
 8002466:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800246a:	f103 031f 	add.w	r3, r3, #31
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002474:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8002478:	7013      	strb	r3, [r2, #0]

      if(curr_2 && !prev_2)
 800247a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800247e:	f103 031e 	add.w	r3, r3, #30
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8290 	beq.w	80029aa <main+0x11ca>
 800248a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800248e:	f103 0336 	add.w	r3, r3, #54	@ 0x36
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 8288 	bne.w	80029aa <main+0x11ca>
      {
          set_sm_freq(1e6 , &htim6);
 800249a:	49aa      	ldr	r1, [pc, #680]	@ (8002744 <main+0xf64>)
 800249c:	48aa      	ldr	r0, [pc, #680]	@ (8002748 <main+0xf68>)
 800249e:	f000 ffe9 	bl	8003474 <set_sm_freq>
          samp(adc_buffer, 1025, &htim6, &hadc1);
 80024a2:	4baa      	ldr	r3, [pc, #680]	@ (800274c <main+0xf6c>)
 80024a4:	4aa7      	ldr	r2, [pc, #668]	@ (8002744 <main+0xf64>)
 80024a6:	f240 4101 	movw	r1, #1025	@ 0x401
 80024aa:	48a9      	ldr	r0, [pc, #676]	@ (8002750 <main+0xf70>)
 80024ac:	f000 ffc4 	bl	8003438 <samp>
          uint16_t temp_buffer[1025];
    	  make_8to16(adc_buffer, 2050, temp_buffer);
 80024b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80024b4:	3b3c      	subs	r3, #60	@ 0x3c
 80024b6:	461a      	mov	r2, r3
 80024b8:	f640 0102 	movw	r1, #2050	@ 0x802
 80024bc:	48a4      	ldr	r0, [pc, #656]	@ (8002750 <main+0xf70>)
 80024be:	f000 ff85 	bl	80033cc <make_8to16>
    	  int_to_float(temp_buffer + 1, fft_in);
 80024c2:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80024c6:	3a3c      	subs	r2, #60	@ 0x3c
 80024c8:	3202      	adds	r2, #2
 80024ca:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f000 ffed 	bl	80034b0 <int_to_float>
		  for (int i = 0; i < N; ++i)
 80024d6:	2300      	movs	r3, #0
 80024d8:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80024dc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e030      	b.n	8002546 <main+0xd66>
		  {
			  fft_in[i] *= window[i];
 80024e4:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 80024e8:	461a      	mov	r2, r3
 80024ea:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80024ee:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	3b80      	subs	r3, #128	@ 0x80
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	4a95      	ldr	r2, [pc, #596]	@ (8002754 <main+0xf74>)
 8002500:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002504:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	f507 5324 	add.w	r3, r7, #10496	@ 0x2900
 800251a:	461a      	mov	r2, r3
 800251c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002520:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b80      	subs	r3, #128	@ 0x80
 800252c:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < N; ++i)
 8002530:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002534:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002540:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800254a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002554:	dbc6      	blt.n	80024e4 <main+0xd04>
		  }
		  fft_transfer(fft_in, fft_out, deal_mag);
 8002556:	f507 6208 	add.w	r2, r7, #2176	@ 0x880
 800255a:	f507 51c4 	add.w	r1, r7, #6272	@ 0x1880
 800255e:	f507 5322 	add.w	r3, r7, #10368	@ 0x2880
 8002562:	4618      	mov	r0, r3
 8002564:	f000 ffc9 	bl	80034fa <fft_transfer>

    	  long long int freq_small = 0;
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f507 5162 	add.w	r1, r7, #14464	@ 0x3880
 8002574:	f101 0110 	add.w	r1, r1, #16
 8002578:	e9c1 2300 	strd	r2, r3, [r1]
    	  int m = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002582:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002586:	6013      	str	r3, [r2, #0]
    	  int target[2];
		  for(int i = 2; i < 512; ++i)
 8002588:	2302      	movs	r3, #2
 800258a:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800258e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e081      	b.n	800269a <main+0xeba>
		  {
			  if((deal_mag[i]) > 40000)
 8002596:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 800259a:	461a      	mov	r2, r3
 800259c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025a0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b80      	subs	r3, #128	@ 0x80
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002758 <main+0xf78>
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	dd5b      	ble.n	8002676 <main+0xe96>
			  {
				  if(deal_mag[i] > deal_mag[i-1] && deal_mag[i] > deal_mag[i+1])
 80025be:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80025c2:	461a      	mov	r2, r3
 80025c4:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025c8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b80      	subs	r3, #128	@ 0x80
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80025dc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80025e8:	4619      	mov	r1, r3
 80025ea:	0093      	lsls	r3, r2, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3b80      	subs	r3, #128	@ 0x80
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd3b      	ble.n	8002676 <main+0xe96>
 80025fe:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002602:	461a      	mov	r2, r3
 8002604:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002608:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3b80      	subs	r3, #128	@ 0x80
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800261c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002628:	4619      	mov	r1, r3
 800262a:	0093      	lsls	r3, r2, #2
 800262c:	440b      	add	r3, r1
 800262e:	3b80      	subs	r3, #128	@ 0x80
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	dd1b      	ble.n	8002676 <main+0xe96>
				  {
					  target[m] = i;
 800263e:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002642:	4619      	mov	r1, r3
 8002644:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002648:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	440a      	add	r2, r1
 8002652:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002656:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f842 3cb8 	str.w	r3, [r2, #-184]
					  m++;
 8002660:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002664:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002670:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002674:	6013      	str	r3, [r2, #0]
				  }
			  }
			  if(m == 2) break;
 8002676:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800267a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d014      	beq.n	80026ae <main+0xece>
		  for(int i = 2; i < 512; ++i)
 8002684:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002688:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002694:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800269e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a8:	f6ff af75 	blt.w	8002596 <main+0xdb6>
 80026ac:	e000      	b.n	80026b0 <main+0xed0>
			  if(m == 2) break;
 80026ae:	bf00      	nop
		  }
    	  int freq_about = target[0] * 0.9766;
 80026b0:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 80026b4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd feff 	bl	80004bc <__aeabi_i2d>
 80026be:	a31c      	add	r3, pc, #112	@ (adr r3, 8002730 <main+0xf50>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ff64 	bl	8000590 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe f970 	bl	80009b4 <__aeabi_d2iz>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80026da:	f102 020c 	add.w	r2, r2, #12
 80026de:	6013      	str	r3, [r2, #0]
    	  freq_small = roundToNearest5(freq_about);
 80026e0:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80026e4:	f103 030c 	add.w	r3, r3, #12
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f7ff f853 	bl	8001794 <roundToNearest5>
 80026ee:	4603      	mov	r3, r0
 80026f0:	17da      	asrs	r2, r3, #31
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80026fa:	f102 0210 	add.w	r2, r2, #16
 80026fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002702:	e9c2 3400 	strd	r3, r4, [r2]
          //get_LIA_freq(fft_in, freq_about, &freq_small);
		  int times;
		  float freq_big = freq_small;
 8002706:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800270a:	f103 0310 	add.w	r3, r3, #16
 800270e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002712:	f7fe fa97 	bl	8000c44 <__aeabi_l2f>
 8002716:	4603      	mov	r3, r0
 8002718:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 800271c:	f102 0208 	add.w	r2, r2, #8
 8002720:	6013      	str	r3, [r2, #0]
		  for(int i = 2; i < (512 / freq_small); ++i)
 8002722:	2302      	movs	r3, #2
 8002724:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002728:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e0c0      	b.n	80028b2 <main+0x10d2>
 8002730:	a4a8c155 	.word	0xa4a8c155
 8002734:	3fef404e 	.word	0x3fef404e
 8002738:	47435000 	.word	0x47435000
 800273c:	0800162d 	.word	0x0800162d
 8002740:	080015ed 	.word	0x080015ed
 8002744:	20000378 	.word	0x20000378
 8002748:	000f4240 	.word	0x000f4240
 800274c:	2000009c 	.word	0x2000009c
 8002750:	200005b0 	.word	0x200005b0
 8002754:	20000db4 	.word	0x20000db4
 8002758:	471c4000 	.word	0x471c4000
		  {
			  float ntimes = i * freq_small * 1.024;
 800275c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002760:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	17da      	asrs	r2, r3, #31
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	61fa      	str	r2, [r7, #28]
 800276c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002770:	f103 0310 	add.w	r3, r3, #16
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800277a:	462a      	mov	r2, r5
 800277c:	fb02 f203 	mul.w	r2, r2, r3
 8002780:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002784:	f103 0314 	add.w	r3, r3, #20
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4621      	mov	r1, r4
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	441a      	add	r2, r3
 8002792:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002796:	f103 0310 	add.w	r3, r3, #16
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4621      	mov	r1, r4
 800279e:	fba3 1301 	umull	r1, r3, r3, r1
 80027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a4:	460b      	mov	r3, r1
 80027a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80027b2:	f7fd febf 	bl	8000534 <__aeabi_l2d>
 80027b6:	a388      	add	r3, pc, #544	@ (adr r3, 80029d8 <main+0x11f8>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fee8 	bl	8000590 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f91c 	bl	8000a04 <__aeabi_d2f>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80027d2:	f102 0204 	add.w	r2, r2, #4
 80027d6:	6013      	str	r3, [r2, #0]
			  int ntime = ntimes;
 80027d8:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80027dc:	f103 0304 	add.w	r3, r3, #4
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e8:	ee17 3a90 	vmov	r3, s15
 80027ec:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80027f0:	6013      	str	r3, [r2, #0]
			  if(ntime > 512) break;
 80027f2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027fc:	dc79      	bgt.n	80028f2 <main+0x1112>
			  if((deal_mag[ntime]) > 20000)
 80027fe:	f507 6310 	add.w	r3, r7, #2304	@ 0x900
 8002802:	461a      	mov	r2, r3
 8002804:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b80      	subs	r3, #128	@ 0x80
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80029c8 <main+0x11e8>
 8002818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002820:	dd3c      	ble.n	800289c <main+0x10bc>
			  {
                  freq_big = freq_small * i;
 8002822:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002826:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	17da      	asrs	r2, r3, #31
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	617a      	str	r2, [r7, #20]
 8002832:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002836:	f103 0310 	add.w	r3, r3, #16
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002840:	462a      	mov	r2, r5
 8002842:	fb02 f203 	mul.w	r2, r2, r3
 8002846:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800284a:	f103 0314 	add.w	r3, r3, #20
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4621      	mov	r1, r4
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	441a      	add	r2, r3
 8002858:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800285c:	f103 0310 	add.w	r3, r3, #16
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4621      	mov	r1, r4
 8002864:	fba3 1301 	umull	r1, r3, r3, r1
 8002868:	637b      	str	r3, [r7, #52]	@ 0x34
 800286a:	460b      	mov	r3, r1
 800286c:	633b      	str	r3, [r7, #48]	@ 0x30
 800286e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002870:	18d3      	adds	r3, r2, r3
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
 8002874:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002878:	f7fe f9e4 	bl	8000c44 <__aeabi_l2f>
 800287c:	4603      	mov	r3, r0
 800287e:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002882:	f102 0208 	add.w	r2, r2, #8
 8002886:	6013      	str	r3, [r2, #0]
                  times = i;
 8002888:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 800288c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 8002896:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800289a:	6013      	str	r3, [r2, #0]
		  for(int i = 2; i < (512 / freq_small); ++i)
 800289c:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80028a0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	f507 5262 	add.w	r2, r7, #14464	@ 0x3880
 80028ac:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80028b6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	17da      	asrs	r2, r3, #31
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	60fa      	str	r2, [r7, #12]
 80028c2:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80028c6:	f103 0310 	add.w	r3, r3, #16
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f7fe f9f3 	bl	8000cc0 <__aeabi_ldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028e2:	4621      	mov	r1, r4
 80028e4:	4291      	cmp	r1, r2
 80028e6:	4629      	mov	r1, r5
 80028e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80028ec:	f6ff af36 	blt.w	800275c <main+0xf7c>
 80028f0:	e000      	b.n	80028f4 <main+0x1114>
			  if(ntime > 512) break;
 80028f2:	bf00      	nop
			  }
		  }
		  counter += 5;
 80028f4:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 80028f8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3305      	adds	r3, #5
 8002900:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 8002904:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002908:	6013      	str	r3, [r2, #0]
		  if(counter == 180) counter = 0;
 800290a:	f507 5363 	add.w	r3, r7, #14528	@ 0x38c0
 800290e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2bb4      	cmp	r3, #180	@ 0xb4
 8002916:	d105      	bne.n	8002924 <main+0x1144>
 8002918:	2300      	movs	r3, #0
 800291a:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 800291e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002922:	6013      	str	r3, [r2, #0]
          set_n_freq(send_ad9834, send_ad9833, freq_small * 1000, times, phase_set);
 8002924:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002928:	f103 0310 	add.w	r3, r3, #16
 800292c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002930:	4622      	mov	r2, r4
 8002932:	462b      	mov	r3, r5
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	0159      	lsls	r1, r3, #5
 800293e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002942:	0150      	lsls	r0, r2, #5
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	ebb2 0804 	subs.w	r8, r2, r4
 800294c:	eb63 0905 	sbc.w	r9, r3, r5
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800295c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8002960:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002964:	4690      	mov	r8, r2
 8002966:	4699      	mov	r9, r3
 8002968:	eb18 0a04 	adds.w	sl, r8, r4
 800296c:	eb49 0b05 	adc.w	fp, r9, r5
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800297c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002984:	4692      	mov	sl, r2
 8002986:	469b      	mov	fp, r3
 8002988:	4650      	mov	r0, sl
 800298a:	4659      	mov	r1, fp
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <main+0x11ec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 8002996:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	490b      	ldr	r1, [pc, #44]	@ (80029d0 <main+0x11f0>)
 80029a4:	480b      	ldr	r0, [pc, #44]	@ (80029d4 <main+0x11f4>)
 80029a6:	f7fe fb53 	bl	8001050 <set_n_freq>
      }
      prev_2 = curr_2;
 80029aa:	f507 5362 	add.w	r3, r7, #14464	@ 0x3880
 80029ae:	f103 031e 	add.w	r3, r3, #30
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f507 5263 	add.w	r2, r7, #14528	@ 0x38c0
 80029b8:	f102 0236 	add.w	r2, r2, #54	@ 0x36
 80029bc:	7013      	strb	r3, [r2, #0]
  {
 80029be:	f7fe bfd2 	b.w	8001966 <main+0x186>
 80029c2:	bf00      	nop
 80029c4:	f3af 8000 	nop.w
 80029c8:	469c4000 	.word	0x469c4000
 80029cc:	20001db4 	.word	0x20001db4
 80029d0:	0800162d 	.word	0x0800162d
 80029d4:	080015ed 	.word	0x080015ed
 80029d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029dc:	3ff0624d 	.word	0x3ff0624d

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b094      	sub	sp, #80	@ 0x50
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	f107 0318 	add.w	r3, r7, #24
 80029ea:	2238      	movs	r2, #56	@ 0x38
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f00a fbee 	bl	800d1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a06:	f005 fa8f 	bl	8007f28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a14:	2302      	movs	r3, #2
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002a20:	233c      	movs	r3, #60	@ 0x3c
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8002a24:	2305      	movs	r3, #5
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 0318 	add.w	r3, r7, #24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 fb2b 	bl	8008090 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002a40:	f000 fcbe 	bl	80033c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 fe29 	bl	80086b4 <HAL_RCC_ClockConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002a68:	f000 fcaa 	bl	80033c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002a72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a76:	f005 ff59 	bl	800892c <HAL_RCC_MCOConfig>
}
 8002a7a:	bf00      	nop
 8002a7c:	3750      	adds	r7, #80	@ 0x50
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	@ 0x30
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2220      	movs	r2, #32
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00a fb97 	bl	800d1d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002aa2:	4b32      	ldr	r3, [pc, #200]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002aa4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002aa8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aaa:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002abc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ac8:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002aca:	2204      	movs	r2, #4
 8002acc:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8002ae8:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002aea:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002b06:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b0e:	4817      	ldr	r0, [pc, #92]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002b10:	f002 f960 	bl	8004dd4 <HAL_ADC_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8002b1a:	f000 fc51 	bl	80033c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	4810      	ldr	r0, [pc, #64]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002b2a:	f003 fb05 	bl	8006138 <HAL_ADCEx_MultiModeConfigChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002b34:	f000 fc44 	bl	80033c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <MX_ADC1_Init+0xec>)
 8002b3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b44:	237f      	movs	r3, #127	@ 0x7f
 8002b46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	@ (8002b6c <MX_ADC1_Init+0xe8>)
 8002b56:	f002 fc43 	bl	80053e0 <HAL_ADC_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002b60:	f000 fc2e 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b64:	bf00      	nop
 8002b66:	3730      	adds	r7, #48	@ 0x30
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	2000009c 	.word	0x2000009c
 8002b70:	04300002 	.word	0x04300002

08002b74 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <MX_COMP3_Init+0x48>)
 8002b7c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b86:	2250      	movs	r2, #80	@ 0x50
 8002b88:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b92:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002b96:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b98:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8002ba4:	4804      	ldr	r0, [pc, #16]	@ (8002bb8 <MX_COMP3_Init+0x44>)
 8002ba6:	f003 fd1f 	bl	80065e8 <HAL_COMP_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 8002bb0:	f000 fc06 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000168 	.word	0x20000168
 8002bbc:	40010208 	.word	0x40010208

08002bc0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002bc4:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bc6:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <MX_CRC_Init+0x54>)
 8002bc8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bd8:	f241 0221 	movw	r2, #4129	@ 0x1021
 8002bdc:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002be0:	2208      	movs	r2, #8
 8002be2:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002bfc:	4804      	ldr	r0, [pc, #16]	@ (8002c10 <MX_CRC_Init+0x50>)
 8002bfe:	f003 ff9d 	bl	8006b3c <HAL_CRC_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002c08:	f000 fbda 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000018c 	.word	0x2000018c
 8002c14:	40023000 	.word	0x40023000

08002c18 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	@ 0x30
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c1e:	463b      	mov	r3, r7
 8002c20:	2230      	movs	r2, #48	@ 0x30
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00a fad3 	bl	800d1d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <MX_DAC1_Init+0x6c>)
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <MX_DAC1_Init+0x70>)
 8002c2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002c30:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <MX_DAC1_Init+0x6c>)
 8002c32:	f004 f989 	bl	8006f48 <HAL_DAC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002c3c:	f000 fbc0 	bl	80033c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002c40:	2302      	movs	r3, #2
 8002c42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c64:	463b      	mov	r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <MX_DAC1_Init+0x6c>)
 8002c6c:	f004 f98e 	bl	8006f8c <HAL_DAC_ConfigChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002c76:	f000 fba3 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	3730      	adds	r7, #48	@ 0x30
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200001b0 	.word	0x200001b0
 8002c88:	50000800 	.word	0x50000800

08002c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002c92:	4a1c      	ldr	r2, [pc, #112]	@ (8002d04 <MX_I2C1_Init+0x78>)
 8002c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002c98:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <MX_I2C1_Init+0x7c>)
 8002c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c9c:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ca2:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cc6:	480e      	ldr	r0, [pc, #56]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cc8:	f004 fffc 	bl	8007cc4 <HAL_I2C_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cd2:	f000 fb75 	bl	80033c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4809      	ldr	r0, [pc, #36]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cda:	f005 f88e 	bl	8007dfa <HAL_I2CEx_ConfigAnalogFilter>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ce4:	f000 fb6c 	bl	80033c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4805      	ldr	r0, [pc, #20]	@ (8002d00 <MX_I2C1_Init+0x74>)
 8002cec:	f005 f8d0 	bl	8007e90 <HAL_I2CEx_ConfigDigitalFilter>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cf6:	f000 fb63 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200001c4 	.word	0x200001c4
 8002d04:	40005400 	.word	0x40005400
 8002d08:	10e32879 	.word	0x10e32879

08002d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d12:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <MX_SPI1_Init+0x78>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d32:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d38:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d42:	2220      	movs	r2, #32
 8002d44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d66:	2208      	movs	r2, #8
 8002d68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_SPI1_Init+0x74>)
 8002d6c:	f006 f952 	bl	8009014 <HAL_SPI_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f000 fb23 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000218 	.word	0x20000218
 8002d84:	40013000 	.word	0x40013000

08002d88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <MX_SPI3_Init+0x78>)
 8002d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002da0:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002da2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002da6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002daa:	2202      	movs	r2, #2
 8002dac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002dbe:	2218      	movs	r2, #24
 8002dc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002de2:	2208      	movs	r2, #8
 8002de4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <MX_SPI3_Init+0x74>)
 8002de8:	f006 f914 	bl	8009014 <HAL_SPI_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002df2:	f000 fae5 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000027c 	.word	0x2000027c
 8002e00:	40003c00 	.word	0x40003c00

08002e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	@ 0x30
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e46:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e52:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e58:	4826      	ldr	r0, [pc, #152]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e5a:	f006 fc5f 	bl	800971c <HAL_TIM_Base_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002e64:	f000 faac 	bl	80033c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e6e:	f107 0320 	add.w	r3, r7, #32
 8002e72:	4619      	mov	r1, r3
 8002e74:	481f      	ldr	r0, [pc, #124]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e76:	f006 fe3d 	bl	8009af4 <HAL_TIM_ConfigClockSource>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002e80:	f000 fa9e 	bl	80033c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e84:	481b      	ldr	r0, [pc, #108]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002e86:	f006 fd38 	bl	80098fa <HAL_TIM_IC_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002e90:	f000 fa96 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4814      	ldr	r0, [pc, #80]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002ea4:	f007 f9b6 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002eae:	f000 fa87 	bl	80033c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480a      	ldr	r0, [pc, #40]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002eca:	f006 fd77 	bl	80099bc <HAL_TIM_IC_ConfigChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002ed4:	f000 fa74 	bl	80033c0 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2103      	movs	r1, #3
 8002edc:	4805      	ldr	r0, [pc, #20]	@ (8002ef4 <MX_TIM2_Init+0xf0>)
 8002ede:	f007 fa2f 	bl	800a340 <HAL_TIMEx_TISelection>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002ee8:	f000 fa6a 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	3730      	adds	r7, #48	@ 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200002e0 	.word	0x200002e0

08002ef8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f18:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <MX_TIM3_Init+0x98>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f28:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f3c:	4813      	ldr	r0, [pc, #76]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f3e:	f006 fbed 	bl	800971c <HAL_TIM_Base_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f48:	f000 fa3a 	bl	80033c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	4619      	mov	r1, r3
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f5a:	f006 fdcb 	bl	8009af4 <HAL_TIM_ConfigClockSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002f64:	f000 fa2c 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <MX_TIM3_Init+0x94>)
 8002f76:	f007 f94d 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f80:	f000 fa1e 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000032c 	.word	0x2000032c
 8002f90:	40000400 	.word	0x40000400

08002f94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fa6:	4a15      	ldr	r2, [pc, #84]	@ (8002ffc <MX_TIM6_Init+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002faa:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fb8:	2295      	movs	r2, #149	@ 0x95
 8002fba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fc2:	480d      	ldr	r0, [pc, #52]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fc4:	f006 fbaa 	bl	800971c <HAL_TIM_Base_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002fce:	f000 f9f7 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4806      	ldr	r0, [pc, #24]	@ (8002ff8 <MX_TIM6_Init+0x64>)
 8002fe0:	f007 f918 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fea:	f000 f9e9 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000378 	.word	0x20000378
 8002ffc:	40001000 	.word	0x40001000

08003000 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003010:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <MX_TIM7_Init+0x64>)
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <MX_TIM7_Init+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003016:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <MX_TIM7_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301c:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <MX_TIM7_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <MX_TIM7_Init+0x64>)
 8003024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003028:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302a:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <MX_TIM7_Init+0x64>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003030:	480c      	ldr	r0, [pc, #48]	@ (8003064 <MX_TIM7_Init+0x64>)
 8003032:	f006 fb73 	bl	800971c <HAL_TIM_Base_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800303c:	f000 f9c0 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	@ (8003064 <MX_TIM7_Init+0x64>)
 800304e:	f007 f8e1 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003058:	f000 f9b2 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200003c4 	.word	0x200003c4
 8003068:	40001400 	.word	0x40001400

0800306c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800308a:	4b1f      	ldr	r3, [pc, #124]	@ (8003108 <MX_TIM15_Init+0x9c>)
 800308c:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <MX_TIM15_Init+0xa0>)
 800308e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <MX_TIM15_Init+0x9c>)
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <MX_TIM15_Init+0x9c>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800309c:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <MX_TIM15_Init+0x9c>)
 800309e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030a2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a4:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80030aa:	4b17      	ldr	r3, [pc, #92]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b0:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80030b6:	4814      	ldr	r0, [pc, #80]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030b8:	f006 fb30 	bl	800971c <HAL_TIM_Base_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80030c2:	f000 f97d 	bl	80033c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	4619      	mov	r1, r3
 80030d2:	480d      	ldr	r0, [pc, #52]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030d4:	f006 fd0e 	bl	8009af4 <HAL_TIM_ConfigClockSource>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80030de:	f000 f96f 	bl	80033c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030e2:	2320      	movs	r3, #32
 80030e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4806      	ldr	r0, [pc, #24]	@ (8003108 <MX_TIM15_Init+0x9c>)
 80030f0:	f007 f890 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80030fa:	f000 f961 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000410 	.word	0x20000410
 800310c:	40014000 	.word	0x40014000

08003110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003116:	4a23      	ldr	r2, [pc, #140]	@ (80031a4 <MX_USART2_UART_Init+0x94>)
 8003118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800311a:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800311c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003128:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312e:	4b1c      	ldr	r3, [pc, #112]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003136:	220c      	movs	r2, #12
 8003138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313a:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003158:	4811      	ldr	r0, [pc, #68]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800315a:	f007 f97f 	bl	800a45c <HAL_UART_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003164:	f000 f92c 	bl	80033c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003168:	2100      	movs	r1, #0
 800316a:	480d      	ldr	r0, [pc, #52]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800316c:	f008 fcc0 	bl	800baf0 <HAL_UARTEx_SetTxFifoThreshold>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003176:	f000 f923 	bl	80033c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800317a:	2100      	movs	r1, #0
 800317c:	4808      	ldr	r0, [pc, #32]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800317e:	f008 fcf5 	bl	800bb6c <HAL_UARTEx_SetRxFifoThreshold>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003188:	f000 f91a 	bl	80033c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800318c:	4804      	ldr	r0, [pc, #16]	@ (80031a0 <MX_USART2_UART_Init+0x90>)
 800318e:	f008 fc76 	bl	800ba7e <HAL_UARTEx_DisableFifoMode>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003198:	f000 f912 	bl	80033c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200004bc 	.word	0x200004bc
 80031a4:	40004400 	.word	0x40004400

080031a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <MX_DMA_Init+0x88>)
 80031b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003230 <MX_DMA_Init+0x88>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80031ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <MX_DMA_Init+0x88>)
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <MX_DMA_Init+0x88>)
 80031c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ca:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <MX_DMA_Init+0x88>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80031d2:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <MX_DMA_Init+0x88>)
 80031d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_DMA_Init+0x88>)
 80031e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e2:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <MX_DMA_Init+0x88>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <MX_DMA_Init+0x88>)
 80031ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	200b      	movs	r0, #11
 80031fc:	f003 fc69 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003200:	200b      	movs	r0, #11
 8003202:	f003 fc80 	bl	8006b06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	200c      	movs	r0, #12
 800320c:	f003 fc61 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003210:	200c      	movs	r0, #12
 8003212:	f003 fc78 	bl	8006b06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2063      	movs	r0, #99	@ 0x63
 800321c:	f003 fc59 	bl	8006ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8003220:	2063      	movs	r0, #99	@ 0x63
 8003222:	f003 fc70 	bl	8006b06 <HAL_NVIC_EnableIRQ>

}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003256:	4b56      	ldr	r3, [pc, #344]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003262:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003268:	f043 0320 	orr.w	r3, r3, #32
 800326c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326e:	4b50      	ldr	r3, [pc, #320]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b4d      	ldr	r3, [pc, #308]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	4a4c      	ldr	r2, [pc, #304]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003286:	4b4a      	ldr	r3, [pc, #296]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	4a46      	ldr	r2, [pc, #280]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 8003298:	f043 0308 	orr.w	r3, r3, #8
 800329c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329e:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b6:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <MX_GPIO_Init+0x17c>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, con_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	f640 0101 	movw	r1, #2049	@ 0x801
 80032c8:	483a      	ldr	r0, [pc, #232]	@ (80033b4 <MX_GPIO_Init+0x180>)
 80032ca:	f004 fce3 	bl	8007c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9833_EN_Pin|AD9834_EN_Pin, GPIO_PIN_RESET);
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d8:	f004 fcdc 	bl	8007c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIPO_CS_GPIO_Port, SIPO_CS_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032e2:	4835      	ldr	r0, [pc, #212]	@ (80033b8 <MX_GPIO_Init+0x184>)
 80032e4:	f004 fcd6 	bl	8007c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDAC_CS_GPIO_Port, XDAC_CS_Pin, GPIO_PIN_SET);
 80032e8:	2201      	movs	r2, #1
 80032ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032ee:	4832      	ldr	r0, [pc, #200]	@ (80033b8 <MX_GPIO_Init+0x184>)
 80032f0:	f004 fcd0 	bl	8007c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UI_SW3_Pin */
  GPIO_InitStruct.Pin = UI_SW3_Pin;
 80032f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032fe:	2301      	movs	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW3_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	4619      	mov	r1, r3
 8003308:	482a      	ldr	r0, [pc, #168]	@ (80033b4 <MX_GPIO_Init+0x180>)
 800330a:	f004 fb29 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : con_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = con_Pin|LCD_DC_Pin;
 800330e:	f640 0301 	movw	r3, #2049	@ 0x801
 8003312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003314:	2301      	movs	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	4823      	ldr	r0, [pc, #140]	@ (80033b4 <MX_GPIO_Init+0x180>)
 8003328:	f004 fb1a 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800332c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800333a:	2302      	movs	r3, #2
 800333c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4619      	mov	r1, r3
 8003348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800334c:	f004 fb08 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833_EN_Pin AD9834_EN_Pin */
  GPIO_InitStruct.Pin = AD9833_EN_Pin|AD9834_EN_Pin;
 8003350:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800336c:	f004 faf8 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_SW0_Pin */
  GPIO_InitStruct.Pin = UI_SW0_Pin;
 8003370:	2304      	movs	r3, #4
 8003372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UI_SW0_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4619      	mov	r1, r3
 8003382:	480e      	ldr	r0, [pc, #56]	@ (80033bc <MX_GPIO_Init+0x188>)
 8003384:	f004 faec 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8003388:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800338c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <MX_GPIO_Init+0x184>)
 80033a2:	f004 fadd 	bl	8007960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033a6:	bf00      	nop
 80033a8:	3728      	adds	r7, #40	@ 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48000800 	.word	0x48000800
 80033b8:	48000400 	.word	0x48000400
 80033bc:	48000c00 	.word	0x48000c00

080033c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c4:	b672      	cpsid	i
}
 80033c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <Error_Handler+0x8>

080033cc <make_8to16>:
volatile uint32_t yichu_counter = 0;
uint32_t sys_clock = 150e6;
#define N 1024

uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
	if (size % 2 != 0)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01b      	beq.n	800341e <make_8to16+0x52>
		return 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e01f      	b.n	800342a <make_8to16+0x5e>
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	3301      	adds	r3, #1
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	440b      	add	r3, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b21b      	sxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b219      	sxth	r1, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	b28a      	uxth	r2, r1
 8003416:	801a      	strh	r2, [r3, #0]
		++i;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
	while (i < size / 2)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	085a      	lsrs	r2, r3, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	d8e0      	bhi.n	80033ea <make_8to16+0x1e>
	}
	return new_buffer;
 8003428:	687b      	ldr	r3, [r7, #4]
}
 800342a:	4618      	mov	r0, r3
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <samp>:
	uint16_t ampl = max - min;
	return ampl;
}

void samp(uint8_t *buffer, size_t size, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
	HAL_TIM_Base_Start(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f006 f9c0 	bl	80097cc <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)buffer, size);
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	f001 fe7b 	bl	800514c <HAL_ADC_Start_DMA>
    adc_ongoing = 1;
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <samp+0x38>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <samp+0x38>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d000      	beq.n	8003466 <samp+0x2e>
 8003464:	e7fa      	b.n	800345c <samp+0x24>
    		break;
 8003466:	bf00      	nop
    }
    return;
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20001db8 	.word	0x20001db8

08003474 <set_sm_freq>:

void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	uint32_t set = sys_clock / freq - 1;
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <set_sm_freq+0x38>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
	if (set <38)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b25      	cmp	r3, #37	@ 0x25
 8003490:	d801      	bhi.n	8003496 <set_sm_freq+0x22>
		set = 38;
 8003492:	2326      	movs	r3, #38	@ 0x26
 8003494:	60fb      	str	r3, [r7, #12]
	htim->Instance->ARR = set;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000000 	.word	0x20000000

080034b0 <int_to_float>:
	uint32_t a = freq ;
	return a*1e3/4;
}

void int_to_float(uint16_t* buffer, float* fft_in)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	for(int i = 0;i != N;i++){
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e011      	b.n	80034e4 <int_to_float+0x34>
		fft_in[i] = buffer[i];
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	8819      	ldrh	r1, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	ee07 1a90 	vmov	s15, r1
 80034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034da:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i != N;i++){
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	d1e9      	bne.n	80034c0 <int_to_float+0x10>
	}
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <fft_transfer>:
void fft_transfer(float* fft_in, float* fft_out, float* fft_mag)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08a      	sub	sp, #40	@ 0x28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
	//float fft_in[N];
	//float fft_out[N];
	//float fft_mag[N];
	arm_rfft_fast_instance_f32 S;
	arm_rfft_1024_fast_init_f32(&S);
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	4618      	mov	r0, r3
 800350c:	f008 fc0e 	bl	800bd2c <arm_rfft_1024_fast_init_f32>
	arm_rfft_fast_f32(&S, fft_in, fft_out, 0);
 8003510:	f107 0010 	add.w	r0, r7, #16
 8003514:	2300      	movs	r3, #0
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	f008 fcd5 	bl	800bec8 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, N);
 800351e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f009 f8ad 	bl	800c684 <arm_cmplx_mag_f32>
}
 800352a:	bf00      	nop
 800352c:	3728      	adds	r7, #40	@ 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <HAL_MspInit+0x44>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	4a0e      	ldr	r2, [pc, #56]	@ (8003578 <HAL_MspInit+0x44>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6613      	str	r3, [r2, #96]	@ 0x60
 8003546:	4b0c      	ldr	r3, [pc, #48]	@ (8003578 <HAL_MspInit+0x44>)
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_MspInit+0x44>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <HAL_MspInit+0x44>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	@ 0x58
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_MspInit+0x44>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800356a:	f004 fd81 	bl	8008070 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b09e      	sub	sp, #120	@ 0x78
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	2254      	movs	r2, #84	@ 0x54
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f009 fe17 	bl	800d1d0 <memset>
  if(hadc->Instance==ADC1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035aa:	d15f      	bne.n	800366c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80035ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80035b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80035b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f005 fadb 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80035c8:	f7ff fefa 	bl	80033c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035cc:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d0:	4a28      	ldr	r2, [pc, #160]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f0:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_ADC_MspInit+0xf8>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035fc:	2301      	movs	r3, #1
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003600:	2303      	movs	r3, #3
 8003602:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003612:	f004 f9a5 	bl	8007960 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <HAL_ADC_MspInit+0x100>)
 800361a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800361c:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 800361e:	2205      	movs	r2, #5
 8003620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800362e:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800363a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 800363e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003642:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 800364c:	2200      	movs	r2, #0
 800364e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003650:	4809      	ldr	r0, [pc, #36]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003652:	f003 fe53 	bl	80072fc <HAL_DMA_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800365c:	f7ff feb0 	bl	80033c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
 8003666:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_ADC_MspInit+0xfc>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800366c:	bf00      	nop
 800366e:	3778      	adds	r7, #120	@ 0x78
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	20000108 	.word	0x20000108
 800367c:	40020008 	.word	0x40020008

08003680 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <HAL_COMP_MspInit+0x94>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d134      	bne.n	800370c <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ba:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	4a16      	ldr	r2, [pc, #88]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c6:	4b14      	ldr	r3, [pc, #80]	@ (8003718 <HAL_COMP_MspInit+0x98>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036d2:	2304      	movs	r3, #4
 80036d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 80036e2:	2303      	movs	r3, #3
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	480b      	ldr	r0, [pc, #44]	@ (800371c <HAL_COMP_MspInit+0x9c>)
 80036ee:	f004 f937 	bl	8007960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003708:	f004 f92a 	bl	8007960 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 800370c:	bf00      	nop
 800370e:	3728      	adds	r7, #40	@ 0x28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40010208 	.word	0x40010208
 8003718:	40021000 	.word	0x40021000
 800371c:	48000800 	.word	0x48000800

08003720 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <HAL_CRC_MspInit+0x38>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10b      	bne.n	800374a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003732:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <HAL_CRC_MspInit+0x3c>)
 8003734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003736:	4a09      	ldr	r2, [pc, #36]	@ (800375c <HAL_CRC_MspInit+0x3c>)
 8003738:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800373c:	6493      	str	r3, [r2, #72]	@ 0x48
 800373e:	4b07      	ldr	r3, [pc, #28]	@ (800375c <HAL_CRC_MspInit+0x3c>)
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40023000 	.word	0x40023000
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <HAL_DAC_MspInit+0x38>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10b      	bne.n	800378a <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_DAC_MspInit+0x3c>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	4a09      	ldr	r2, [pc, #36]	@ (800379c <HAL_DAC_MspInit+0x3c>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <HAL_DAC_MspInit+0x3c>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	50000800 	.word	0x50000800
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0a0      	sub	sp, #128	@ 0x80
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b8:	f107 0318 	add.w	r3, r7, #24
 80037bc:	2254      	movs	r2, #84	@ 0x54
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f009 fd05 	bl	800d1d0 <memset>
  if(hi2c->Instance==I2C1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003880 <HAL_I2C_MspInit+0xe0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d153      	bne.n	8003878 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037d0:	2340      	movs	r3, #64	@ 0x40
 80037d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037d4:	2300      	movs	r3, #0
 80037d6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d8:	f107 0318 	add.w	r3, r7, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f005 f9cb 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80037e8:	f7ff fdea 	bl	80033c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	4a24      	ldr	r2, [pc, #144]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f8:	4b22      	ldr	r3, [pc, #136]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003810:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800381c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003820:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003822:	2312      	movs	r3, #18
 8003824:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800382e:	2304      	movs	r3, #4
 8003830:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003832:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003836:	4619      	mov	r1, r3
 8003838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800383c:	f004 f890 	bl	8007960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003844:	2312      	movs	r3, #18
 8003846:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003850:	2304      	movs	r3, #4
 8003852:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003854:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003858:	4619      	mov	r1, r3
 800385a:	480b      	ldr	r0, [pc, #44]	@ (8003888 <HAL_I2C_MspInit+0xe8>)
 800385c:	f004 f880 	bl	8007960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003860:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4a07      	ldr	r2, [pc, #28]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 8003866:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800386a:	6593      	str	r3, [r2, #88]	@ 0x58
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_I2C_MspInit+0xe4>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003878:	bf00      	nop
 800387a:	3780      	adds	r7, #128	@ 0x80
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40005400 	.word	0x40005400
 8003884:	40021000 	.word	0x40021000
 8003888:	48000400 	.word	0x48000400

0800388c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	@ 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003968 <HAL_SPI_MspInit+0xdc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d129      	bne.n	8003902 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038ae:	4b2f      	ldr	r3, [pc, #188]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b2:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ba:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	4a28      	ldr	r2, [pc, #160]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d2:	4b26      	ldr	r3, [pc, #152]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80038de:	23a0      	movs	r3, #160	@ 0xa0
 80038e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ee:	2305      	movs	r3, #5
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038fc:	f004 f830 	bl	8007960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003900:	e02d      	b.n	800395e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_SPI_MspInit+0xe4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d128      	bne.n	800395e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003910:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 8003912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003916:	6593      	str	r3, [r2, #88]	@ 0x58
 8003918:	4b14      	ldr	r3, [pc, #80]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 8003926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003928:	4a10      	ldr	r2, [pc, #64]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <HAL_SPI_MspInit+0xe0>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800393c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800394e:	2306      	movs	r3, #6
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003952:	f107 031c 	add.w	r3, r7, #28
 8003956:	4619      	mov	r1, r3
 8003958:	4806      	ldr	r0, [pc, #24]	@ (8003974 <HAL_SPI_MspInit+0xe8>)
 800395a:	f004 f801 	bl	8007960 <HAL_GPIO_Init>
}
 800395e:	bf00      	nop
 8003960:	3730      	adds	r7, #48	@ 0x30
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40013000 	.word	0x40013000
 800396c:	40021000 	.word	0x40021000
 8003970:	40003c00 	.word	0x40003c00
 8003974:	48000800 	.word	0x48000800

08003978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d138      	bne.n	80039fc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800398a:	4b42      	ldr	r3, [pc, #264]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a41      	ldr	r2, [pc, #260]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6593      	str	r3, [r2, #88]	@ 0x58
 8003996:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 80039a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039a4:	4a3d      	ldr	r2, [pc, #244]	@ (8003a9c <HAL_TIM_Base_MspInit+0x124>)
 80039a6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039aa:	2238      	movs	r2, #56	@ 0x38
 80039ac:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b4:	4b38      	ldr	r3, [pc, #224]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039ba:	4b37      	ldr	r3, [pc, #220]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039bc:	2280      	movs	r2, #128	@ 0x80
 80039be:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039c0:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039c8:	4b33      	ldr	r3, [pc, #204]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80039d0:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80039d6:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80039de:	482e      	ldr	r0, [pc, #184]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039e0:	f003 fc8c 	bl	80072fc <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80039ea:	f7ff fce9 	bl	80033c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a29      	ldr	r2, [pc, #164]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80039f4:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_TIM_Base_MspInit+0x120>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80039fa:	e046      	b.n	8003a8a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <HAL_TIM_Base_MspInit+0x128>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10c      	bne.n	8003a20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a06:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	4a22      	ldr	r2, [pc, #136]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
}
 8003a1e:	e034      	b.n	8003a8a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM6)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10c      	bne.n	8003a44 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a30:	f043 0310 	orr.w	r3, r3, #16
 8003a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
}
 8003a42:	e022      	b.n	8003a8a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM7)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x130>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10c      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a4e:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
}
 8003a66:	e010      	b.n	8003a8a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003aac <HAL_TIM_Base_MspInit+0x134>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10b      	bne.n	8003a8a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_TIM_Base_MspInit+0x11c>)
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	2000045c 	.word	0x2000045c
 8003a9c:	4002001c 	.word	0x4002001c
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40001000 	.word	0x40001000
 8003aa8:	40001400 	.word	0x40001400
 8003aac:	40014000 	.word	0x40014000

08003ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b09e      	sub	sp, #120	@ 0x78
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	2254      	movs	r2, #84	@ 0x54
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f009 fb7d 	bl	800d1d0 <memset>
  if(huart->Instance==USART2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a37      	ldr	r2, [pc, #220]	@ (8003bb8 <HAL_UART_MspInit+0x108>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d167      	bne.n	8003bb0 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae8:	f107 0310 	add.w	r3, r7, #16
 8003aec:	4618      	mov	r0, r3
 8003aee:	f005 f843 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003af8:	f7ff fc62 	bl	80033c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003afc:	4b2f      	ldr	r3, [pc, #188]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	4b2c      	ldr	r3, [pc, #176]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b14:	4b29      	ldr	r3, [pc, #164]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b18:	4a28      	ldr	r2, [pc, #160]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b20:	4b26      	ldr	r3, [pc, #152]	@ (8003bbc <HAL_UART_MspInit+0x10c>)
 8003b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003b2c:	2318      	movs	r3, #24
 8003b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b44:	4619      	mov	r1, r3
 8003b46:	481e      	ldr	r0, [pc, #120]	@ (8003bc0 <HAL_UART_MspInit+0x110>)
 8003b48:	f003 ff0a 	bl	8007960 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <HAL_UART_MspInit+0x118>)
 8003b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003b52:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b54:	221a      	movs	r2, #26
 8003b56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b58:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b5e:	4b19      	ldr	r3, [pc, #100]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b64:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b6a:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b70:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b76:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b82:	4810      	ldr	r0, [pc, #64]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b84:	f003 fbba 	bl	80072fc <HAL_DMA_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003b8e:	f7ff fc17 	bl	80033c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <HAL_UART_MspInit+0x114>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	210e      	movs	r1, #14
 8003ba4:	2026      	movs	r0, #38	@ 0x26
 8003ba6:	f002 ff94 	bl	8006ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003baa:	2026      	movs	r0, #38	@ 0x26
 8003bac:	f002 ffab 	bl	8006b06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003bb0:	bf00      	nop
 8003bb2:	3778      	adds	r7, #120	@ 0x78
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	48000400 	.word	0x48000400
 8003bc4:	20000550 	.word	0x20000550
 8003bc8:	40020494 	.word	0x40020494

08003bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <NMI_Handler+0x4>

08003bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <HardFault_Handler+0x4>

08003bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <MemManage_Handler+0x4>

08003be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <BusFault_Handler+0x4>

08003bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <UsageFault_Handler+0x4>

08003bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c22:	f000 fe4d 	bl	80048c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <DMA1_Channel1_IRQHandler+0x10>)
 8003c32:	f003 fd46 	bl	80076c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000108 	.word	0x20000108

08003c40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003c44:	4802      	ldr	r0, [pc, #8]	@ (8003c50 <DMA1_Channel2_IRQHandler+0x10>)
 8003c46:	f003 fd3c 	bl	80076c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000045c 	.word	0x2000045c

08003c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <USART2_IRQHandler+0x10>)
 8003c5a:	f006 fc4f 	bl	800a4fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200004bc 	.word	0x200004bc

08003c68 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <DMA2_Channel8_IRQHandler+0x10>)
 8003c6e:	f003 fd28 	bl	80076c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000550 	.word	0x20000550

08003c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return 1;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_kill>:

int _kill(int pid, int sig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c96:	f009 faf7 	bl	800d288 <__errno>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2216      	movs	r2, #22
 8003c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_exit>:

void _exit (int status)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ffe7 	bl	8003c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cbe:	bf00      	nop
 8003cc0:	e7fd      	b.n	8003cbe <_exit+0x12>
	...

08003cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ccc:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <_sbrk+0x5c>)
 8003cce:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <_sbrk+0x60>)
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <_sbrk+0x64>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <_sbrk+0x64>)
 8003ce2:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <_sbrk+0x68>)
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <_sbrk+0x64>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d207      	bcs.n	8003d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf4:	f009 fac8 	bl	800d288 <__errno>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	e009      	b.n	8003d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d04:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d0a:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <_sbrk+0x64>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	4a05      	ldr	r2, [pc, #20]	@ (8003d28 <_sbrk+0x64>)
 8003d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20020000 	.word	0x20020000
 8003d24:	00000400 	.word	0x00000400
 8003d28:	20001dbc 	.word	0x20001dbc
 8003d2c:	20002130 	.word	0x20002130

08003d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <SystemInit+0x20>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <SystemInit+0x20>)
 8003d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	701a      	strb	r2, [r3, #0]
      }
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f805 	bl	8003d90 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
    }
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f940 	bl	800404a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f91e 	bl	8004020 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ffeb 	bl	8003dd4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b090      	sub	sp, #64	@ 0x40
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b07      	cmp	r3, #7
 8003e1a:	dc02      	bgt.n	8003e22 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	e0aa      	b.n	8003f78 <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b55      	cmp	r3, #85	@ 0x55
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <_ZL12uart_managerPhS_+0x36>
    return -1;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	e09c      	b.n	8003f78 <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2ba5      	cmp	r3, #165	@ 0xa5
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <_ZL12uart_managerPhS_+0x52>
    return -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e08e      	b.n	8003f78 <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e70:	4413      	add	r3, r2
 8003e72:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	dc02      	bgt.n	8003e88 <_ZL12uart_managerPhS_+0x80>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	dc02      	bgt.n	8003e8e <_ZL12uart_managerPhS_+0x86>
    return -1;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	e074      	b.n	8003f78 <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	440b      	add	r3, r1
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4834      	ldr	r0, [pc, #208]	@ (8003f80 <_ZL12uart_managerPhS_+0x178>)
 8003eb0:	f002 fea8 	bl	8006c04 <HAL_CRC_Calculate>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d002      	beq.n	8003ec6 <_ZL12uart_managerPhS_+0xbe>
    return -1;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	e058      	b.n	8003f78 <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	603b      	str	r3, [r7, #0]
  auto p = begin;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 8003ed2:	e006      	b.n	8003ee2 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b3a      	cmp	r3, #58	@ 0x3a
 8003eda:	d007      	beq.n	8003eec <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 8003edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ede:	3301      	adds	r3, #1
 8003ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d1f4      	bne.n	8003ed4 <_ZL12uart_managerPhS_+0xcc>
 8003eea:	e000      	b.n	8003eee <_ZL12uart_managerPhS_+0xe6>
      break;
 8003eec:	bf00      	nop
  }

  if (p != end)
 8003eee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d03e      	beq.n	8003f74 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 8003ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003efa:	4618      	mov	r0, r3
 8003efc:	f009 f803 	bl	800cf06 <_ZNSaIcEC1Ev>
 8003f00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f04:	f107 0010 	add.w	r0, r7, #16
 8003f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	f000 f8be 	bl	800408c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8003f10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f14:	4618      	mov	r0, r3
 8003f16:	f008 fff7 	bl	800cf08 <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4818      	ldr	r0, [pc, #96]	@ (8003f84 <_ZL12uart_managerPhS_+0x17c>)
 8003f22:	f000 f8d8 	bl	80040d6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 8003f26:	4603      	mov	r3, r0
 8003f28:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 8003f2a:	4816      	ldr	r0, [pc, #88]	@ (8003f84 <_ZL12uart_managerPhS_+0x17c>)
 8003f2c:	f000 f8e2 	bl	80040f4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8003f30:	4603      	mov	r3, r0
 8003f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f34:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f8e5 	bl	800410e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00f      	beq.n	8003f6a <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f8ee 	bl	8004136 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f62:	1a8a      	subs	r2, r1, r2
 8003f64:	4611      	mov	r1, r2
 8003f66:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003f68:	4798      	blx	r3
    }
  }
 8003f6a:	f107 0310 	add.w	r3, r7, #16
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f009 f817 	bl	800cfa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8003f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f76:	3306      	adds	r3, #6
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3740      	adds	r7, #64	@ 0x40
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	2000018c 	.word	0x2000018c
 8003f84:	20001fc8 	.word	0x20001fc8

08003f88 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_UARTEx_RxEventCallback+0x58>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11b      	bne.n	8003fd6 <HAL_UARTEx_RxEventCallback+0x4e>
    return;
  auto end = rx_buf + Size;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	4a10      	ldr	r2, [pc, #64]	@ (8003fe4 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <HAL_UARTEx_RxEventCallback+0x5c>)
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e00b      	b.n	8003fc4 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 8003fac:	6939      	ldr	r1, [r7, #16]
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff ff2a 	bl	8003e08 <_ZL12uart_managerPhS_>
 8003fb4:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	db08      	blt.n	8003fce <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3ef      	bcc.n	8003fac <HAL_UARTEx_RxEventCallback+0x24>
 8003fcc:	e000      	b.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 8003fce:	bf00      	nop
  }

  uart_receive_start();
 8003fd0:	f000 f80a 	bl	8003fe8 <_ZL18uart_receive_startv>
 8003fd4:	e000      	b.n	8003fd8 <HAL_UARTEx_RxEventCallback+0x50>
    return;
 8003fd6:	bf00      	nop
}
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000008 	.word	0x20000008
 8003fe4:	20001dc0 	.word	0x20001dc0

08003fe8 <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <_ZL18uart_receive_startv+0x2c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8003ff4:	4908      	ldr	r1, [pc, #32]	@ (8004018 <_ZL18uart_receive_startv+0x30>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f007 fdf6 	bl	800bbe8 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <_ZL18uart_receive_startv+0x34>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <_ZL18uart_receive_startv+0x34>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000008 	.word	0x20000008
 8004018:	20001dc0 	.word	0x20001dc0
 800401c:	2000000c 	.word	0x2000000c

08004020 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f892 	bl	8004152 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f89a 	bl	800416a <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fe99 	bl	8003d72 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f894 	bl	8004180 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8b3 	bl	80041d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8004070:	4603      	mov	r3, r0
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f88e 	bl	8004196 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fe9d 	bl	8003dbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 800409a:	68fc      	ldr	r4, [r7, #12]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f008 ff43 	bl	800cf28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4620      	mov	r0, r4
 80040aa:	f008 ff8e 	bl	800cfca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 80040b4:	68bc      	ldr	r4, [r7, #8]
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f8ba 	bl	8004234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80040c0:	462b      	mov	r3, r5
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4621      	mov	r1, r4
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8e0 	bl	800428c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}

080040d6 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f917 	bl	8004318 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f946 	bl	8004390 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8004104:	4603      	mov	r3, r0
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f935 	bl	80043b2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f937 	bl	80043ce <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
      { }
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80041a0:	e011      	b.n	80041c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	f000 f91e 	bl	80043e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fff2 	bl	8004196 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	f000 f922 	bl	80043fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80041b8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f929 	bl	8004414 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ea      	bne.n	80041a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f929 	bl	8004436 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	68b8      	ldr	r0, [r7, #8]
 8004226:	f000 f912 	bl	800444e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 800422a:	4603      	mov	r3, r0
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800423c:	bf00      	nop
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f008 fe85 	bl	800cf8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68b8      	ldr	r0, [r7, #8]
 800429e:	f000 f8f5 	bl	800448c <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80042a2:	4603      	mov	r3, r0
 80042a4:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d911      	bls.n	80042d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80042ac:	f107 0318 	add.w	r3, r7, #24
 80042b0:	2200      	movs	r2, #0
 80042b2:	4619      	mov	r1, r3
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f008 fe47 	bl	800cf48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4619      	mov	r1, r3
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f008 fe2e 	bl	800cf20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f008 fe2f 	bl	800cf2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80042ce:	e005      	b.n	80042dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80042d4:	69f8      	ldr	r0, [r7, #28]
 80042d6:	f008 fe27 	bl	800cf28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80042da:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ffb1 	bl	800424a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f008 fe1b 	bl	800cf24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f8dd 	bl	80044b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f008 fe14 	bl	800cf30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffab 	bl	8004268 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff57 	bl	80041d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8004328:	4604      	mov	r4, r0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8e1 	bl	80044f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8004330:	4602      	mov	r2, r0
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4621      	mov	r1, r4
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8e7 	bl	800450a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 800433c:	4603      	mov	r3, r0
 800433e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f825 	bl	8004390 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8004346:	4603      	mov	r3, r0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	f107 020c 	add.w	r2, r7, #12
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff4a 	bl	80041ee <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 800435a:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004360:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004362:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f901 	bl	800456c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	4620      	mov	r0, r4
 8004372:	f7ff ff50 	bl	8004216 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f807 	bl	8004390 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8004382:	4603      	mov	r3, r0
 8004384:	e000      	b.n	8004388 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 8004386:	68bb      	ldr	r3, [r7, #8]
    }
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1d1a      	adds	r2, r3, #4
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f863 	bl	800446e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3310      	adds	r3, #16
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8e0 	bl	8004584 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8bb 	bl	800459c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f8cc 	bl	80045c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f008 fda7 	bl	800cfae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8004460:	4603      	mov	r3, r0
 8004462:	0fdb      	lsrs	r3, r3, #31
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800448c:	b5b0      	push	{r4, r5, r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004496:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff feca 	bl	8004234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80044a0:	462a      	mov	r2, r5
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	4620      	mov	r0, r4
 80044a6:	f000 f8b3 	bl	8004610 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80044aa:	4603      	mov	r3, r0
    }
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdb0      	pop	{r4, r5, r7, pc}

080044b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80044c0:	e00e      	b.n	80044e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	75fb      	strb	r3, [r7, #23]
 80044c8:	f107 0317 	add.w	r3, r7, #23
 80044cc:	4619      	mov	r1, r3
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fc40 	bl	8003d54 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1ec      	bne.n	80044c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800450a:	b590      	push	{r4, r7, lr}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004518:	e01a      	b.n	8004550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800451a:	68fc      	ldr	r4, [r7, #12]
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f000 f864 	bl	80045ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8004522:	4603      	mov	r3, r0
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4620      	mov	r0, r4
 800452a:	f7ff fe74 	bl	8004216 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800452e:	4603      	mov	r3, r0
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	68b8      	ldr	r0, [r7, #8]
 8004540:	f7ff ff5c 	bl	80043fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004544:	60b8      	str	r0, [r7, #8]
 8004546:	e003      	b.n	8004550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f7ff ff4b 	bl	80043e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 800454e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e1      	bne.n	800451a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff86 	bl	800446e <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8004562:	697b      	ldr	r3, [r7, #20]
    }
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bd90      	pop	{r4, r7, pc}

0800456c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f838 	bl	80045ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 800457a:	4603      	mov	r3, r0
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f84e 	bl	800462e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8004592:	4603      	mov	r3, r0
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f84c 	bl	8004644 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80045ac:	4604      	mov	r4, r0
 80045ae:	6838      	ldr	r0, [r7, #0]
 80045b0:	f7ff feff 	bl	80043b2 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f84e 	bl	800465a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}

080045c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f837 	bl	8004644 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2201      	movs	r2, #1
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f849 	bl	8004674 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f84d 	bl	8004692 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f854 	bl	80046ae <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 8004606:	4603      	mov	r3, r0
      }
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
    }
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f83a 	bl	80046e0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f837 	bl	80046f8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3310      	adds	r3, #16
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f83c 	bl	800471c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f008 fc66 	bl	800cfa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f7ff ffeb 	bl	80046c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	222c      	movs	r2, #44	@ 0x2c
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	4619      	mov	r1, r3
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f008 fbe6 	bl	800cee0 <_ZdlPvj>
      }
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f805 	bl	8004734 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 800472a:	4603      	mov	r3, r0
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fc84 	bl	8004062 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800477a:	4293      	cmp	r3, r2
 800477c:	d102      	bne.n	8004784 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 800477e:	4809      	ldr	r0, [pc, #36]	@ (80047a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004780:	f7ff fb35 	bl	8003dee <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004790:	4293      	cmp	r3, r2
 8004792:	d102      	bne.n	800479a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004794:	4803      	ldr	r0, [pc, #12]	@ (80047a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004796:	f7ff ffd8 	bl	800474a <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20001fc8 	.word	0x20001fc8

080047a8 <_GLOBAL__sub_I_huart_reg>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047b0:	2001      	movs	r0, #1
 80047b2:	f7ff ffd7 	bl	8004764 <_Z41__static_initialization_and_destruction_0ii>
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <_GLOBAL__sub_D_huart_reg>:
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047c0:	2000      	movs	r0, #0
 80047c2:	f7ff ffcf 	bl	8004764 <_Z41__static_initialization_and_destruction_0ii>
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <Reset_Handler>:
 80047c8:	480d      	ldr	r0, [pc, #52]	@ (8004800 <LoopForever+0x2>)
 80047ca:	4685      	mov	sp, r0
 80047cc:	f7ff fab0 	bl	8003d30 <SystemInit>
 80047d0:	480c      	ldr	r0, [pc, #48]	@ (8004804 <LoopForever+0x6>)
 80047d2:	490d      	ldr	r1, [pc, #52]	@ (8004808 <LoopForever+0xa>)
 80047d4:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <LoopForever+0xe>)
 80047d6:	2300      	movs	r3, #0
 80047d8:	e002      	b.n	80047e0 <LoopCopyDataInit>

080047da <CopyDataInit>:
 80047da:	58d4      	ldr	r4, [r2, r3]
 80047dc:	50c4      	str	r4, [r0, r3]
 80047de:	3304      	adds	r3, #4

080047e0 <LoopCopyDataInit>:
 80047e0:	18c4      	adds	r4, r0, r3
 80047e2:	428c      	cmp	r4, r1
 80047e4:	d3f9      	bcc.n	80047da <CopyDataInit>
 80047e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004810 <LoopForever+0x12>)
 80047e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004814 <LoopForever+0x16>)
 80047ea:	2300      	movs	r3, #0
 80047ec:	e001      	b.n	80047f2 <LoopFillZerobss>

080047ee <FillZerobss>:
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	3204      	adds	r2, #4

080047f2 <LoopFillZerobss>:
 80047f2:	42a2      	cmp	r2, r4
 80047f4:	d3fb      	bcc.n	80047ee <FillZerobss>
 80047f6:	f008 fd4d 	bl	800d294 <__libc_init_array>
 80047fa:	f7fc fff1 	bl	80017e0 <main>

080047fe <LoopForever>:
 80047fe:	e7fe      	b.n	80047fe <LoopForever>
 8004800:	20020000 	.word	0x20020000
 8004804:	20000000 	.word	0x20000000
 8004808:	20000068 	.word	0x20000068
 800480c:	0800ff8c 	.word	0x0800ff8c
 8004810:	20000068 	.word	0x20000068
 8004814:	20002130 	.word	0x20002130

08004818 <ADC1_2_IRQHandler>:
 8004818:	e7fe      	b.n	8004818 <ADC1_2_IRQHandler>

0800481a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004824:	2003      	movs	r0, #3
 8004826:	f002 f949 	bl	8006abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800482a:	200f      	movs	r0, #15
 800482c:	f000 f80e 	bl	800484c <HAL_InitTick>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	71fb      	strb	r3, [r7, #7]
 800483a:	e001      	b.n	8004840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800483c:	f7fe fe7a 	bl	8003534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004840:	79fb      	ldrb	r3, [r7, #7]

}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <HAL_InitTick+0x68>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d022      	beq.n	80048a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004860:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <HAL_InitTick+0x6c>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <HAL_InitTick+0x68>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800486c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	4618      	mov	r0, r3
 8004876:	f002 f954 	bl	8006b22 <HAL_SYSTICK_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d809      	bhi.n	800489a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004886:	2200      	movs	r2, #0
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	f04f 30ff 	mov.w	r0, #4294967295
 800488e:	f002 f920 	bl	8006ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <HAL_InitTick+0x70>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e007      	b.n	80048aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e004      	b.n	80048aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	e001      	b.n	80048aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000014 	.word	0x20000014
 80048b8:	20000004 	.word	0x20000004
 80048bc:	20000010 	.word	0x20000010

080048c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <HAL_IncTick+0x1c>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_IncTick+0x20>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	4a03      	ldr	r2, [pc, #12]	@ (80048dc <HAL_IncTick+0x1c>)
 80048d0:	6013      	str	r3, [r2, #0]
}
 80048d2:	bf00      	nop
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20001fe0 	.word	0x20001fe0
 80048e0:	20000014 	.word	0x20000014

080048e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return uwTick;
 80048e8:	4b03      	ldr	r3, [pc, #12]	@ (80048f8 <HAL_GetTick+0x14>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20001fe0 	.word	0x20001fe0

080048fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3360      	adds	r3, #96	@ 0x60
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <LL_ADC_SetOffset+0x44>)
 8004986:	4013      	ands	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	03fff000 	.word	0x03fff000

080049ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3360      	adds	r3, #96	@ 0x60
 80049ba:	461a      	mov	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3360      	adds	r3, #96	@ 0x60
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3360      	adds	r3, #96	@ 0x60
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3360      	adds	r3, #96	@ 0x60
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	615a      	str	r2, [r3, #20]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3330      	adds	r3, #48	@ 0x30
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	4413      	add	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	211f      	movs	r1, #31
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	401a      	ands	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0e9b      	lsrs	r3, r3, #26
 8004afe:	f003 011f 	and.w	r1, r3, #31
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	0e5b      	lsrs	r3, r3, #25
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	4413      	add	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0d1b      	lsrs	r3, r3, #20
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2107      	movs	r1, #7
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	0d1b      	lsrs	r3, r3, #20
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	431a      	orrs	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0318 	and.w	r3, r3, #24
 8004b96:	4908      	ldr	r1, [pc, #32]	@ (8004bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b98:	40d9      	lsrs	r1, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	0007ffff 	.word	0x0007ffff

08004bbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6093      	str	r3, [r2, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c10:	d101      	bne.n	8004c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c60:	d101      	bne.n	8004c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c88:	f043 0201 	orr.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cb0:	f043 0202 	orr.w	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <LL_ADC_IsEnabled+0x18>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <LL_ADC_IsEnabled+0x1a>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d101      	bne.n	8004d02 <LL_ADC_IsDisableOngoing+0x18>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <LL_ADC_IsDisableOngoing+0x1a>
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d4c:	f043 0210 	orr.w	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d101      	bne.n	8004d78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d101      	bne.n	8004dc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b089      	sub	sp, #36	@ 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1a9      	b.n	8005142 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fe fbbd 	bl	800357c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fef1 	bl	8004bfc <LL_ADC_IsDeepPowerDownEnabled>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fed7 	bl	8004bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff ff0c 	bl	8004c4c <LL_ADC_IsInternalRegulatorEnabled>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d115      	bne.n	8004e66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fef0 	bl	8004c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e44:	4b9c      	ldr	r3, [pc, #624]	@ (80050b8 <HAL_ADC_Init+0x2e4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	4a9c      	ldr	r2, [pc, #624]	@ (80050bc <HAL_ADC_Init+0x2e8>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	3301      	adds	r3, #1
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e58:	e002      	b.n	8004e60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f9      	bne.n	8004e5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff feee 	bl	8004c4c <LL_ADC_IsInternalRegulatorEnabled>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7a:	f043 0210 	orr.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff ff62 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 8004e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 8142 	bne.w	8005130 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 813e 	bne.w	8005130 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ebc:	f043 0202 	orr.w	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fefb 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d141      	bne.n	8004f58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004edc:	d004      	beq.n	8004ee8 <HAL_ADC_Init+0x114>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a77      	ldr	r2, [pc, #476]	@ (80050c0 <HAL_ADC_Init+0x2ec>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10f      	bne.n	8004f08 <HAL_ADC_Init+0x134>
 8004ee8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004eec:	f7ff feea 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4873      	ldr	r0, [pc, #460]	@ (80050c0 <HAL_ADC_Init+0x2ec>)
 8004ef4:	f7ff fee6 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4323      	orrs	r3, r4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e012      	b.n	8004f2e <HAL_ADC_Init+0x15a>
 8004f08:	486e      	ldr	r0, [pc, #440]	@ (80050c4 <HAL_ADC_Init+0x2f0>)
 8004f0a:	f7ff fedb 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	486d      	ldr	r0, [pc, #436]	@ (80050c8 <HAL_ADC_Init+0x2f4>)
 8004f12:	f7ff fed7 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	431c      	orrs	r4, r3
 8004f1a:	486c      	ldr	r0, [pc, #432]	@ (80050cc <HAL_ADC_Init+0x2f8>)
 8004f1c:	f7ff fed2 	bl	8004cc4 <LL_ADC_IsEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4323      	orrs	r3, r4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f3a:	d004      	beq.n	8004f46 <HAL_ADC_Init+0x172>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a5f      	ldr	r2, [pc, #380]	@ (80050c0 <HAL_ADC_Init+0x2ec>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_ADC_Init+0x176>
 8004f46:	4a62      	ldr	r2, [pc, #392]	@ (80050d0 <HAL_ADC_Init+0x2fc>)
 8004f48:	e000      	b.n	8004f4c <HAL_ADC_Init+0x178>
 8004f4a:	4a62      	ldr	r2, [pc, #392]	@ (80050d4 <HAL_ADC_Init+0x300>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7ff fcd2 	bl	80048fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7f5b      	ldrb	r3, [r3, #29]
 8004f5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004f68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004f6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d106      	bne.n	8004f94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	045b      	lsls	r3, r3, #17
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	4b48      	ldr	r3, [pc, #288]	@ (80050d8 <HAL_ADC_Init+0x304>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fee5 	bl	8004dae <LL_ADC_INJ_IsConversionOngoing>
 8004fe4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d17f      	bne.n	80050ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d17c      	bne.n	80050ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ff6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ffe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800500e:	f023 0302 	bic.w	r3, r3, #2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	69b9      	ldr	r1, [r7, #24]
 8005018:	430b      	orrs	r3, r1
 800501a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005032:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800503c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6911      	ldr	r1, [r2, #16]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005052:	e013      	b.n	800507c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005062:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005078:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12a      	bne.n	80050dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800509c:	4311      	orrs	r1, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80050a2:	4311      	orrs	r1, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050a8:	430a      	orrs	r2, r1
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0201 	orr.w	r2, r2, #1
 80050b4:	611a      	str	r2, [r3, #16]
 80050b6:	e019      	b.n	80050ec <HAL_ADC_Init+0x318>
 80050b8:	20000004 	.word	0x20000004
 80050bc:	053e2d63 	.word	0x053e2d63
 80050c0:	50000100 	.word	0x50000100
 80050c4:	50000400 	.word	0x50000400
 80050c8:	50000500 	.word	0x50000500
 80050cc:	50000600 	.word	0x50000600
 80050d0:	50000300 	.word	0x50000300
 80050d4:	50000700 	.word	0x50000700
 80050d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10c      	bne.n	800510e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	f023 010f 	bic.w	r1, r3, #15
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
 800510c:	e007      	b.n	800511e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 020f 	bic.w	r2, r2, #15
 800511c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800512e:	e007      	b.n	8005140 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005134:	f043 0210 	orr.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005140:	7ffb      	ldrb	r3, [r7, #31]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3724      	adds	r7, #36	@ 0x24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd90      	pop	{r4, r7, pc}
 800514a:	bf00      	nop

0800514c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005160:	d004      	beq.n	800516c <HAL_ADC_Start_DMA+0x20>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5a      	ldr	r2, [pc, #360]	@ (80052d0 <HAL_ADC_Start_DMA+0x184>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_ADC_Start_DMA+0x24>
 800516c:	4b59      	ldr	r3, [pc, #356]	@ (80052d4 <HAL_ADC_Start_DMA+0x188>)
 800516e:	e000      	b.n	8005172 <HAL_ADC_Start_DMA+0x26>
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_ADC_Start_DMA+0x18c>)
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fd22 	bl	8004bbc <LL_ADC_GetMultimode>
 8005178:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fdee 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 809b 	bne.w	80052c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_ADC_Start_DMA+0x4e>
 8005196:	2302      	movs	r3, #2
 8005198:	e096      	b.n	80052c8 <HAL_ADC_Start_DMA+0x17c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4d      	ldr	r2, [pc, #308]	@ (80052dc <HAL_ADC_Start_DMA+0x190>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d008      	beq.n	80051be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d002      	beq.n	80051be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b09      	cmp	r3, #9
 80051bc:	d17a      	bne.n	80052b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fe0a 	bl	8005dd8 <ADC_Enable>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d16d      	bne.n	80052aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a3a      	ldr	r2, [pc, #232]	@ (80052d0 <HAL_ADC_Start_DMA+0x184>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_ADC_Start_DMA+0xb4>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3b      	ldr	r2, [pc, #236]	@ (80052e0 <HAL_ADC_Start_DMA+0x194>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d002      	beq.n	80051fc <HAL_ADC_Start_DMA+0xb0>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	e003      	b.n	8005204 <HAL_ADC_Start_DMA+0xb8>
 80051fc:	4b39      	ldr	r3, [pc, #228]	@ (80052e4 <HAL_ADC_Start_DMA+0x198>)
 80051fe:	e001      	b.n	8005204 <HAL_ADC_Start_DMA+0xb8>
 8005200:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	4293      	cmp	r3, r2
 800520a:	d002      	beq.n	8005212 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522e:	f023 0206 	bic.w	r2, r3, #6
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	661a      	str	r2, [r3, #96]	@ 0x60
 8005236:	e002      	b.n	800523e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <HAL_ADC_Start_DMA+0x19c>)
 8005244:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524a:	4a28      	ldr	r2, [pc, #160]	@ (80052ec <HAL_ADC_Start_DMA+0x1a0>)
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005252:	4a27      	ldr	r2, [pc, #156]	@ (80052f0 <HAL_ADC_Start_DMA+0x1a4>)
 8005254:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	221c      	movs	r2, #28
 800525c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0210 	orr.w	r2, r2, #16
 8005274:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3340      	adds	r3, #64	@ 0x40
 8005290:	4619      	mov	r1, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f002 f8d9 	bl	800744c <HAL_DMA_Start_IT>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fd34 	bl	8004d10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80052a8:	e00d      	b.n	80052c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80052b2:	e008      	b.n	80052c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80052c0:	e001      	b.n	80052c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	50000100 	.word	0x50000100
 80052d4:	50000300 	.word	0x50000300
 80052d8:	50000700 	.word	0x50000700
 80052dc:	50000600 	.word	0x50000600
 80052e0:	50000500 	.word	0x50000500
 80052e4:	50000400 	.word	0x50000400
 80052e8:	08005fc3 	.word	0x08005fc3
 80052ec:	0800609b 	.word	0x0800609b
 80052f0:	080060b7 	.word	0x080060b7

080052f4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_ADC_Stop_DMA+0x16>
 8005306:	2302      	movs	r3, #2
 8005308:	e051      	b.n	80053ae <HAL_ADC_Stop_DMA+0xba>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005312:	2103      	movs	r1, #3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fca3 	bl	8005c60 <ADC_ConversionStop>
 800531a:	4603      	mov	r3, r0
 800531c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d13f      	bne.n	80053a4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d10f      	bne.n	8005362 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005346:	4618      	mov	r0, r3
 8005348:	f002 f8fb 	bl	8007542 <HAL_DMA_Abort>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0210 	bic.w	r2, r2, #16
 8005370:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fdc3 	bl	8005f04 <ADC_Disable>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]
 8005382:	e002      	b.n	800538a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fdbd 	bl	8005f04 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005394:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b0b6      	sub	sp, #216	@ 0xd8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d102      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x24>
 80053fe:	2302      	movs	r3, #2
 8005400:	f000 bc13 	b.w	8005c2a <HAL_ADC_ConfigChannel+0x84a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fca5 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 83f3 	bne.w	8005c04 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	f7ff fb4b 	bl	8004ac6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fc93 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 800543a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fcb3 	bl	8004dae <LL_ADC_INJ_IsConversionOngoing>
 8005448:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800544c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 81d9 	bne.w	8005808 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 81d4 	bne.w	8005808 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005468:	d10f      	bne.n	800548a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	4619      	mov	r1, r3
 8005476:	f7ff fb52 	bl	8004b1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff faf9 	bl	8004a7a <LL_ADC_SetSamplingTimeCommonConfig>
 8005488:	e00e      	b.n	80054a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	461a      	mov	r2, r3
 8005498:	f7ff fb41 	bl	8004b1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fae9 	bl	8004a7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d022      	beq.n	8005510 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6919      	ldr	r1, [r3, #16]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054da:	f7ff fa43 	bl	8004964 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6919      	ldr	r1, [r3, #16]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7ff fa8f 	bl	8004a0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d102      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x126>
 8005500:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005504:	e000      	b.n	8005508 <HAL_ADC_ConfigChannel+0x128>
 8005506:	2300      	movs	r3, #0
 8005508:	461a      	mov	r2, r3
 800550a:	f7ff fa9b 	bl	8004a44 <LL_ADC_SetOffsetSaturation>
 800550e:	e17b      	b.n	8005808 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fa48 	bl	80049ac <LL_ADC_GetOffsetChannel>
 800551c:	4603      	mov	r3, r0
 800551e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_ADC_ConfigChannel+0x15c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fa3d 	bl	80049ac <LL_ADC_GetOffsetChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	0e9b      	lsrs	r3, r3, #26
 8005536:	f003 021f 	and.w	r2, r3, #31
 800553a:	e01e      	b.n	800557a <HAL_ADC_ConfigChannel+0x19a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fa32 	bl	80049ac <LL_ADC_GetOffsetChannel>
 8005548:	4603      	mov	r3, r0
 800554a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005552:	fa93 f3a3 	rbit	r3, r3
 8005556:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800555a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800555e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800556a:	2320      	movs	r3, #32
 800556c:	e004      	b.n	8005578 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800556e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005572:	fab3 f383 	clz	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x1b2>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	0e9b      	lsrs	r3, r3, #26
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	e018      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x1e4>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800559e:	fa93 f3a3 	rbit	r3, r3
 80055a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80055a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80055ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80055b6:	2320      	movs	r3, #32
 80055b8:	e004      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80055ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055be:	fab3 f383 	clz	r3, r3
 80055c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d106      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fa01 	bl	80049d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2101      	movs	r1, #1
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff f9e5 	bl	80049ac <LL_ADC_GetOffsetChannel>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <HAL_ADC_ConfigChannel+0x222>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff f9da 	bl	80049ac <LL_ADC_GetOffsetChannel>
 80055f8:	4603      	mov	r3, r0
 80055fa:	0e9b      	lsrs	r3, r3, #26
 80055fc:	f003 021f 	and.w	r2, r3, #31
 8005600:	e01e      	b.n	8005640 <HAL_ADC_ConfigChannel+0x260>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff f9cf 	bl	80049ac <LL_ADC_GetOffsetChannel>
 800560e:	4603      	mov	r3, r0
 8005610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e004      	b.n	800563e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005638:	fab3 f383 	clz	r3, r3
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x278>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0e9b      	lsrs	r3, r3, #26
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	e018      	b.n	800568a <HAL_ADC_ConfigChannel+0x2aa>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800566c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e004      	b.n	800568a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800568a:	429a      	cmp	r2, r3
 800568c:	d106      	bne.n	800569c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f99e 	bl	80049d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2102      	movs	r1, #2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff f982 	bl	80049ac <LL_ADC_GetOffsetChannel>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x2e8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2102      	movs	r1, #2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff f977 	bl	80049ac <LL_ADC_GetOffsetChannel>
 80056be:	4603      	mov	r3, r0
 80056c0:	0e9b      	lsrs	r3, r3, #26
 80056c2:	f003 021f 	and.w	r2, r3, #31
 80056c6:	e01e      	b.n	8005706 <HAL_ADC_ConfigChannel+0x326>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2102      	movs	r1, #2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f96c 	bl	80049ac <LL_ADC_GetOffsetChannel>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056de:	fa93 f3a3 	rbit	r3, r3
 80056e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80056e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80056ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80056f6:	2320      	movs	r3, #32
 80056f8:	e004      	b.n	8005704 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80056fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80056fe:	fab3 f383 	clz	r3, r3
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <HAL_ADC_ConfigChannel+0x33e>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	0e9b      	lsrs	r3, r3, #26
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	e016      	b.n	800574c <HAL_ADC_ConfigChannel+0x36c>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800573e:	2320      	movs	r3, #32
 8005740:	e004      	b.n	800574c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005742:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800574c:	429a      	cmp	r2, r3
 800574e:	d106      	bne.n	800575e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f93d 	bl	80049d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2103      	movs	r1, #3
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff f921 	bl	80049ac <LL_ADC_GetOffsetChannel>
 800576a:	4603      	mov	r3, r0
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <HAL_ADC_ConfigChannel+0x3aa>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2103      	movs	r1, #3
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff f916 	bl	80049ac <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	0e9b      	lsrs	r3, r3, #26
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	e017      	b.n	80057ba <HAL_ADC_ConfigChannel+0x3da>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2103      	movs	r1, #3
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff f90b 	bl	80049ac <LL_ADC_GetOffsetChannel>
 8005796:	4603      	mov	r3, r0
 8005798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579c:	fa93 f3a3 	rbit	r3, r3
 80057a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80057a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80057a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80057ac:	2320      	movs	r3, #32
 80057ae:	e003      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80057b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x3f2>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	0e9b      	lsrs	r3, r3, #26
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	e011      	b.n	80057f6 <HAL_ADC_ConfigChannel+0x416>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057da:	fa93 f3a3 	rbit	r3, r3
 80057de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80057e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80057e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80057ea:	2320      	movs	r3, #32
 80057ec:	e003      	b.n	80057f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80057ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f0:	fab3 f383 	clz	r3, r3
 80057f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d106      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	2103      	movs	r1, #3
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff f8e8 	bl	80049d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fa59 	bl	8004cc4 <LL_ADC_IsEnabled>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 813d 	bne.w	8005a94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	461a      	mov	r2, r3
 8005828:	f7ff f9a4 	bl	8004b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4aa2      	ldr	r2, [pc, #648]	@ (8005abc <HAL_ADC_ConfigChannel+0x6dc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	f040 812e 	bne.w	8005a94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x480>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	0e9b      	lsrs	r3, r3, #26
 800584e:	3301      	adds	r3, #1
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	2b09      	cmp	r3, #9
 8005856:	bf94      	ite	ls
 8005858:	2301      	movls	r3, #1
 800585a:	2300      	movhi	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e019      	b.n	8005894 <HAL_ADC_ConfigChannel+0x4b4>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800586e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005870:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005878:	2320      	movs	r3, #32
 800587a:	e003      	b.n	8005884 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800587c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	3301      	adds	r3, #1
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	2b09      	cmp	r3, #9
 800588c:	bf94      	ite	ls
 800588e:	2301      	movls	r3, #1
 8005890:	2300      	movhi	r3, #0
 8005892:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005894:	2b00      	cmp	r3, #0
 8005896:	d079      	beq.n	800598c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x4d4>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	0e9b      	lsrs	r3, r3, #26
 80058aa:	3301      	adds	r3, #1
 80058ac:	069b      	lsls	r3, r3, #26
 80058ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058b2:	e015      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x500>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80058c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80058c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80058cc:	2320      	movs	r3, #32
 80058ce:	e003      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80058d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d2:	fab3 f383 	clz	r3, r3
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	069b      	lsls	r3, r3, #26
 80058dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x520>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	0e9b      	lsrs	r3, r3, #26
 80058f2:	3301      	adds	r3, #1
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	e017      	b.n	8005930 <HAL_ADC_ConfigChannel+0x550>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005908:	fa93 f3a3 	rbit	r3, r3
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800590e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005918:	2320      	movs	r3, #32
 800591a:	e003      	b.n	8005924 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800591c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	3301      	adds	r3, #1
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	ea42 0103 	orr.w	r1, r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x576>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	0e9b      	lsrs	r3, r3, #26
 8005946:	3301      	adds	r3, #1
 8005948:	f003 021f 	and.w	r2, r3, #31
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	051b      	lsls	r3, r3, #20
 8005954:	e018      	b.n	8005988 <HAL_ADC_ConfigChannel+0x5a8>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595e:	fa93 f3a3 	rbit	r3, r3
 8005962:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800596e:	2320      	movs	r3, #32
 8005970:	e003      	b.n	800597a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	fab3 f383 	clz	r3, r3
 8005978:	b2db      	uxtb	r3, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f003 021f 	and.w	r2, r3, #31
 8005980:	4613      	mov	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005988:	430b      	orrs	r3, r1
 800598a:	e07e      	b.n	8005a8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005994:	2b00      	cmp	r3, #0
 8005996:	d107      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x5c8>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	0e9b      	lsrs	r3, r3, #26
 800599e:	3301      	adds	r3, #1
 80059a0:	069b      	lsls	r3, r3, #26
 80059a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059a6:	e015      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x5f4>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80059c0:	2320      	movs	r3, #32
 80059c2:	e003      	b.n	80059cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	fab3 f383 	clz	r3, r3
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	3301      	adds	r3, #1
 80059ce:	069b      	lsls	r3, r3, #26
 80059d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x614>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0e9b      	lsrs	r3, r3, #26
 80059e6:	3301      	adds	r3, #1
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	e017      	b.n	8005a24 <HAL_ADC_ConfigChannel+0x644>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	61fb      	str	r3, [r7, #28]
  return result;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	e003      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_ADC_ConfigChannel+0x670>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	0e9b      	lsrs	r3, r3, #26
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f003 021f 	and.w	r2, r3, #31
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	3b1e      	subs	r3, #30
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a4e:	e01b      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x6a8>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	fa93 f3a3 	rbit	r3, r3
 8005a5c:	613b      	str	r3, [r7, #16]
  return result;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005a68:	2320      	movs	r3, #32
 8005a6a:	e003      	b.n	8005a74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	f003 021f 	and.w	r2, r3, #31
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	3b1e      	subs	r3, #30
 8005a82:	051b      	lsls	r3, r3, #20
 8005a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f7ff f845 	bl	8004b1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x6e0>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80be 	beq.w	8005c1e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aaa:	d004      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0x6d6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	@ (8005ac4 <HAL_ADC_ConfigChannel+0x6e4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10a      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x6ec>
 8005ab6:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <HAL_ADC_ConfigChannel+0x6e8>)
 8005ab8:	e009      	b.n	8005ace <HAL_ADC_ConfigChannel+0x6ee>
 8005aba:	bf00      	nop
 8005abc:	407f0000 	.word	0x407f0000
 8005ac0:	80080000 	.word	0x80080000
 8005ac4:	50000100 	.word	0x50000100
 8005ac8:	50000300 	.word	0x50000300
 8005acc:	4b59      	ldr	r3, [pc, #356]	@ (8005c34 <HAL_ADC_ConfigChannel+0x854>)
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe ff3a 	bl	8004948 <LL_ADC_GetCommonPathInternalCh>
 8005ad4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a56      	ldr	r2, [pc, #344]	@ (8005c38 <HAL_ADC_ConfigChannel+0x858>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_ADC_ConfigChannel+0x70c>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a55      	ldr	r2, [pc, #340]	@ (8005c3c <HAL_ADC_ConfigChannel+0x85c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d13a      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005af0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d134      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b00:	d005      	beq.n	8005b0e <HAL_ADC_ConfigChannel+0x72e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a4e      	ldr	r2, [pc, #312]	@ (8005c40 <HAL_ADC_ConfigChannel+0x860>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	f040 8085 	bne.w	8005c18 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b16:	d004      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x742>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a49      	ldr	r2, [pc, #292]	@ (8005c44 <HAL_ADC_ConfigChannel+0x864>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d101      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x746>
 8005b22:	4a49      	ldr	r2, [pc, #292]	@ (8005c48 <HAL_ADC_ConfigChannel+0x868>)
 8005b24:	e000      	b.n	8005b28 <HAL_ADC_ConfigChannel+0x748>
 8005b26:	4a43      	ldr	r2, [pc, #268]	@ (8005c34 <HAL_ADC_ConfigChannel+0x854>)
 8005b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fef5 	bl	8004922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b38:	4b44      	ldr	r3, [pc, #272]	@ (8005c4c <HAL_ADC_ConfigChannel+0x86c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	099b      	lsrs	r3, r3, #6
 8005b3e:	4a44      	ldr	r2, [pc, #272]	@ (8005c50 <HAL_ADC_ConfigChannel+0x870>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b52:	e002      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f9      	bne.n	8005b54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b60:	e05a      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	@ (8005c54 <HAL_ADC_ConfigChannel+0x874>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d125      	bne.n	8005bb8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11f      	bne.n	8005bb8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a31      	ldr	r2, [pc, #196]	@ (8005c44 <HAL_ADC_ConfigChannel+0x864>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d104      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x7ac>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a34      	ldr	r2, [pc, #208]	@ (8005c58 <HAL_ADC_ConfigChannel+0x878>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d047      	beq.n	8005c1c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b94:	d004      	beq.n	8005ba0 <HAL_ADC_ConfigChannel+0x7c0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c44 <HAL_ADC_ConfigChannel+0x864>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d101      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x7c4>
 8005ba0:	4a29      	ldr	r2, [pc, #164]	@ (8005c48 <HAL_ADC_ConfigChannel+0x868>)
 8005ba2:	e000      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x7c6>
 8005ba4:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <HAL_ADC_ConfigChannel+0x854>)
 8005ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7fe feb6 	bl	8004922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bb6:	e031      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a27      	ldr	r2, [pc, #156]	@ (8005c5c <HAL_ADC_ConfigChannel+0x87c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d12d      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d127      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c44 <HAL_ADC_ConfigChannel+0x864>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d022      	beq.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005be0:	d004      	beq.n	8005bec <HAL_ADC_ConfigChannel+0x80c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a17      	ldr	r2, [pc, #92]	@ (8005c44 <HAL_ADC_ConfigChannel+0x864>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x810>
 8005bec:	4a16      	ldr	r2, [pc, #88]	@ (8005c48 <HAL_ADC_ConfigChannel+0x868>)
 8005bee:	e000      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x812>
 8005bf0:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <HAL_ADC_ConfigChannel+0x854>)
 8005bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe fe90 	bl	8004922 <LL_ADC_SetCommonPathInternalCh>
 8005c02:	e00c      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005c16:	e002      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c18:	bf00      	nop
 8005c1a:	e000      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	37d8      	adds	r7, #216	@ 0xd8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	50000700 	.word	0x50000700
 8005c38:	c3210000 	.word	0xc3210000
 8005c3c:	90c00010 	.word	0x90c00010
 8005c40:	50000600 	.word	0x50000600
 8005c44:	50000100 	.word	0x50000100
 8005c48:	50000300 	.word	0x50000300
 8005c4c:	20000004 	.word	0x20000004
 8005c50:	053e2d63 	.word	0x053e2d63
 8005c54:	c7520000 	.word	0xc7520000
 8005c58:	50000500 	.word	0x50000500
 8005c5c:	cb840000 	.word	0xcb840000

08005c60 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f872 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 8005c7c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff f893 	bl	8004dae <LL_ADC_INJ_IsConversionOngoing>
 8005c88:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8098 	beq.w	8005dc8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02a      	beq.n	8005cfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7f5b      	ldrb	r3, [r3, #29]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d126      	bne.n	8005cfc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7f1b      	ldrb	r3, [r3, #28]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d122      	bne.n	8005cfc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005cba:	e014      	b.n	8005ce6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4a45      	ldr	r2, [pc, #276]	@ (8005dd4 <ADC_ConversionStop+0x174>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d90d      	bls.n	8005ce0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	f043 0210 	orr.w	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e074      	b.n	8005dca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b40      	cmp	r3, #64	@ 0x40
 8005cf2:	d1e3      	bne.n	8005cbc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2240      	movs	r2, #64	@ 0x40
 8005cfa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d014      	beq.n	8005d2c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff f82a 	bl	8004d60 <LL_ADC_REG_IsConversionOngoing>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe ffe7 	bl	8004cea <LL_ADC_IsDisableOngoing>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f806 	bl	8004d38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d014      	beq.n	8005d5c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff f839 	bl	8004dae <LL_ADC_INJ_IsConversionOngoing>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe ffcf 	bl	8004cea <LL_ADC_IsDisableOngoing>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f815 	bl	8004d86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d005      	beq.n	8005d6e <ADC_ConversionStop+0x10e>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d105      	bne.n	8005d74 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005d68:	230c      	movs	r3, #12
 8005d6a:	617b      	str	r3, [r7, #20]
        break;
 8005d6c:	e005      	b.n	8005d7a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005d6e:	2308      	movs	r3, #8
 8005d70:	617b      	str	r3, [r7, #20]
        break;
 8005d72:	e002      	b.n	8005d7a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005d74:	2304      	movs	r3, #4
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005d7a:	f7fe fdb3 	bl	80048e4 <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d80:	e01b      	b.n	8005dba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005d82:	f7fe fdaf 	bl	80048e4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d914      	bls.n	8005dba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da2:	f043 0210 	orr.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1dc      	bne.n	8005d82 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	a33fffff 	.word	0xa33fffff

08005dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe ff6b 	bl	8004cc4 <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d176      	bne.n	8005ee2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8005eec <ADC_Enable+0x114>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e06:	f043 0210 	orr.w	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e062      	b.n	8005ee4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe ff26 	bl	8004c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e30:	d004      	beq.n	8005e3c <ADC_Enable+0x64>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2e      	ldr	r2, [pc, #184]	@ (8005ef0 <ADC_Enable+0x118>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <ADC_Enable+0x68>
 8005e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef4 <ADC_Enable+0x11c>)
 8005e3e:	e000      	b.n	8005e42 <ADC_Enable+0x6a>
 8005e40:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef8 <ADC_Enable+0x120>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fd80 	bl	8004948 <LL_ADC_GetCommonPathInternalCh>
 8005e48:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d013      	beq.n	8005e7a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e52:	4b2a      	ldr	r3, [pc, #168]	@ (8005efc <ADC_Enable+0x124>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	099b      	lsrs	r3, r3, #6
 8005e58:	4a29      	ldr	r2, [pc, #164]	@ (8005f00 <ADC_Enable+0x128>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	099b      	lsrs	r3, r3, #6
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e6c:	e002      	b.n	8005e74 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f9      	bne.n	8005e6e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e7a:	f7fe fd33 	bl	80048e4 <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e80:	e028      	b.n	8005ed4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe ff1c 	bl	8004cc4 <LL_ADC_IsEnabled>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe feec 	bl	8004c74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e9c:	f7fe fd22 	bl	80048e4 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d914      	bls.n	8005ed4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00d      	beq.n	8005ed4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d1cf      	bne.n	8005e82 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	8000003f 	.word	0x8000003f
 8005ef0:	50000100 	.word	0x50000100
 8005ef4:	50000300 	.word	0x50000300
 8005ef8:	50000700 	.word	0x50000700
 8005efc:	20000004 	.word	0x20000004
 8005f00:	053e2d63 	.word	0x053e2d63

08005f04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe feea 	bl	8004cea <LL_ADC_IsDisableOngoing>
 8005f16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fed1 	bl	8004cc4 <LL_ADC_IsEnabled>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d047      	beq.n	8005fb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d144      	bne.n	8005fb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 030d 	and.w	r3, r3, #13
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe feab 	bl	8004c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f4e:	f7fe fcc9 	bl	80048e4 <HAL_GetTick>
 8005f52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f54:	e029      	b.n	8005faa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5a:	f043 0210 	orr.w	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f66:	f043 0201 	orr.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e023      	b.n	8005fba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f72:	f7fe fcb7 	bl	80048e4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d914      	bls.n	8005faa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	f043 0210 	orr.w	r2, r3, #16
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e007      	b.n	8005fba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1dc      	bne.n	8005f72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d14b      	bne.n	8006074 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d021      	beq.n	800603a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fd50 	bl	8004aa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d032      	beq.n	800606c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d12b      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11f      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006038:	e018      	b.n	800606c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d111      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7fb faa1 	bl	80015b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006072:	e00e      	b.n	8006092 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff f9a2 	bl	80053ca <HAL_ADC_ErrorCallback>
}
 8006086:	e004      	b.n	8006092 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff f984 	bl	80053b6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff f974 	bl	80053ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <LL_ADC_IsEnabled>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <LL_ADC_IsEnabled+0x18>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <LL_ADC_IsEnabled+0x1a>
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_ADC_REG_IsConversionOngoing>:
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d101      	bne.n	8006128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006138:	b590      	push	{r4, r7, lr}
 800613a:	b0a1      	sub	sp, #132	@ 0x84
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006152:	2302      	movs	r3, #2
 8006154:	e0e7      	b.n	8006326 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800615e:	2300      	movs	r3, #0
 8006160:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006162:	2300      	movs	r3, #0
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800616e:	d102      	bne.n	8006176 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006170:	4b6f      	ldr	r3, [pc, #444]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e009      	b.n	800618a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a6e      	ldr	r2, [pc, #440]	@ (8006334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d102      	bne.n	8006186 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006180:	4b6d      	ldr	r3, [pc, #436]	@ (8006338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	e001      	b.n	800618a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006186:	2300      	movs	r3, #0
 8006188:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006194:	f043 0220 	orr.w	r2, r3, #32
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0be      	b.n	8006326 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff ffb0 	bl	8006110 <LL_ADC_REG_IsConversionOngoing>
 80061b0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff ffaa 	bl	8006110 <LL_ADC_REG_IsConversionOngoing>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 80a0 	bne.w	8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80061c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 809c 	bne.w	8006304 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d4:	d004      	beq.n	80061e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a55      	ldr	r2, [pc, #340]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80061e0:	4b56      	ldr	r3, [pc, #344]	@ (800633c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80061e2:	e000      	b.n	80061e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80061e4:	4b56      	ldr	r3, [pc, #344]	@ (8006340 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80061e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d04b      	beq.n	8006288 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006202:	035b      	lsls	r3, r3, #13
 8006204:	430b      	orrs	r3, r1
 8006206:	431a      	orrs	r2, r3
 8006208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800620a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006214:	d004      	beq.n	8006220 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a45      	ldr	r2, [pc, #276]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10f      	bne.n	8006240 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006220:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006224:	f7ff ff61 	bl	80060ea <LL_ADC_IsEnabled>
 8006228:	4604      	mov	r4, r0
 800622a:	4841      	ldr	r0, [pc, #260]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800622c:	f7ff ff5d 	bl	80060ea <LL_ADC_IsEnabled>
 8006230:	4603      	mov	r3, r0
 8006232:	4323      	orrs	r3, r4
 8006234:	2b00      	cmp	r3, #0
 8006236:	bf0c      	ite	eq
 8006238:	2301      	moveq	r3, #1
 800623a:	2300      	movne	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e012      	b.n	8006266 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006240:	483c      	ldr	r0, [pc, #240]	@ (8006334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006242:	f7ff ff52 	bl	80060ea <LL_ADC_IsEnabled>
 8006246:	4604      	mov	r4, r0
 8006248:	483b      	ldr	r0, [pc, #236]	@ (8006338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800624a:	f7ff ff4e 	bl	80060ea <LL_ADC_IsEnabled>
 800624e:	4603      	mov	r3, r0
 8006250:	431c      	orrs	r4, r3
 8006252:	483c      	ldr	r0, [pc, #240]	@ (8006344 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006254:	f7ff ff49 	bl	80060ea <LL_ADC_IsEnabled>
 8006258:	4603      	mov	r3, r0
 800625a:	4323      	orrs	r3, r4
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d056      	beq.n	8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800626a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6811      	ldr	r1, [r2, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	430a      	orrs	r2, r1
 8006280:	431a      	orrs	r2, r3
 8006282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006284:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006286:	e047      	b.n	8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006290:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006292:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800629c:	d004      	beq.n	80062a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10f      	bne.n	80062c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80062a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80062ac:	f7ff ff1d 	bl	80060ea <LL_ADC_IsEnabled>
 80062b0:	4604      	mov	r4, r0
 80062b2:	481f      	ldr	r0, [pc, #124]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062b4:	f7ff ff19 	bl	80060ea <LL_ADC_IsEnabled>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4323      	orrs	r3, r4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e012      	b.n	80062ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80062c8:	481a      	ldr	r0, [pc, #104]	@ (8006334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80062ca:	f7ff ff0e 	bl	80060ea <LL_ADC_IsEnabled>
 80062ce:	4604      	mov	r4, r0
 80062d0:	4819      	ldr	r0, [pc, #100]	@ (8006338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80062d2:	f7ff ff0a 	bl	80060ea <LL_ADC_IsEnabled>
 80062d6:	4603      	mov	r3, r0
 80062d8:	431c      	orrs	r4, r3
 80062da:	481a      	ldr	r0, [pc, #104]	@ (8006344 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80062dc:	f7ff ff05 	bl	80060ea <LL_ADC_IsEnabled>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4323      	orrs	r3, r4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80062fa:	f023 030f 	bic.w	r3, r3, #15
 80062fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006300:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006302:	e009      	b.n	8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006316:	e000      	b.n	800631a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006322:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006326:	4618      	mov	r0, r3
 8006328:	3784      	adds	r7, #132	@ 0x84
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	bf00      	nop
 8006330:	50000100 	.word	0x50000100
 8006334:	50000400 	.word	0x50000400
 8006338:	50000500 	.word	0x50000500
 800633c:	50000300 	.word	0x50000300
 8006340:	50000700 	.word	0x50000700
 8006344:	50000600 	.word	0x50000600

08006348 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006350:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <LL_EXTI_EnableIT_0_31+0x20>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	4904      	ldr	r1, [pc, #16]	@ (8006368 <LL_EXTI_EnableIT_0_31+0x20>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	40010400 	.word	0x40010400

0800636c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006374:	4b05      	ldr	r3, [pc, #20]	@ (800638c <LL_EXTI_EnableIT_32_63+0x20>)
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	4904      	ldr	r1, [pc, #16]	@ (800638c <LL_EXTI_EnableIT_32_63+0x20>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4313      	orrs	r3, r2
 800637e:	620b      	str	r3, [r1, #32]
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010400 	.word	0x40010400

08006390 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	43db      	mvns	r3, r3
 80063a0:	4904      	ldr	r1, [pc, #16]	@ (80063b4 <LL_EXTI_DisableIT_0_31+0x24>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010400 	.word	0x40010400

080063b8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80063c0:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <LL_EXTI_DisableIT_32_63+0x24>)
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	4904      	ldr	r1, [pc, #16]	@ (80063dc <LL_EXTI_DisableIT_32_63+0x24>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	620b      	str	r3, [r1, #32]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010400 	.word	0x40010400

080063e0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <LL_EXTI_EnableEvent_0_31+0x20>)
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4904      	ldr	r1, [pc, #16]	@ (8006400 <LL_EXTI_EnableEvent_0_31+0x20>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]

}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	40010400 	.word	0x40010400

08006404 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <LL_EXTI_EnableEvent_32_63+0x20>)
 800640e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006410:	4904      	ldr	r1, [pc, #16]	@ (8006424 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4313      	orrs	r3, r2
 8006416:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40010400 	.word	0x40010400

08006428 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006430:	4b06      	ldr	r3, [pc, #24]	@ (800644c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	43db      	mvns	r3, r3
 8006438:	4904      	ldr	r1, [pc, #16]	@ (800644c <LL_EXTI_DisableEvent_0_31+0x24>)
 800643a:	4013      	ands	r3, r2
 800643c:	604b      	str	r3, [r1, #4]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010400 	.word	0x40010400

08006450 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006458:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <LL_EXTI_DisableEvent_32_63+0x24>)
 800645a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	43db      	mvns	r3, r3
 8006460:	4904      	ldr	r1, [pc, #16]	@ (8006474 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006462:	4013      	ands	r3, r2
 8006464:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010400 	.word	0x40010400

08006478 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	4904      	ldr	r1, [pc, #16]	@ (8006498 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4313      	orrs	r3, r2
 800648a:	608b      	str	r3, [r1, #8]

}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40010400 	.word	0x40010400

0800649c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80064a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064a8:	4904      	ldr	r1, [pc, #16]	@ (80064bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40010400 	.word	0x40010400

080064c0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	4904      	ldr	r1, [pc, #16]	@ (80064e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]

}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010400 	.word	0x40010400

080064e8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80064f0:	4b06      	ldr	r3, [pc, #24]	@ (800650c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80064f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	4904      	ldr	r1, [pc, #16]	@ (800650c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010400 	.word	0x40010400

08006510 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	4904      	ldr	r1, [pc, #16]	@ (8006530 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4313      	orrs	r3, r2
 8006522:	60cb      	str	r3, [r1, #12]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40010400 	.word	0x40010400

08006534 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800653c:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	4904      	ldr	r1, [pc, #16]	@ (8006554 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40010400 	.word	0x40010400

08006558 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	43db      	mvns	r3, r3
 8006568:	4904      	ldr	r1, [pc, #16]	@ (800657c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800656a:	4013      	ands	r3, r2
 800656c:	60cb      	str	r3, [r1, #12]
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010400 	.word	0x40010400

08006580 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006588:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800658a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	43db      	mvns	r3, r3
 8006590:	4904      	ldr	r1, [pc, #16]	@ (80065a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006592:	4013      	ands	r3, r2
 8006594:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010400 	.word	0x40010400

080065a8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80065b0:	4a04      	ldr	r2, [pc, #16]	@ (80065c4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6153      	str	r3, [r2, #20]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40010400 	.word	0x40010400

080065c8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80065d0:	4a04      	ldr	r2, [pc, #16]	@ (80065e4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010400 	.word	0x40010400

080065e8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e181      	b.n	8006908 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800660e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006612:	d102      	bne.n	800661a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e176      	b.n	8006908 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7f5b      	ldrb	r3, [r3, #29]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fd f825 	bl	8003680 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006640:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b90      	ldr	r3, [pc, #576]	@ (80068a8 <HAL_COMP_Init+0x2c0>)
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6979      	ldr	r1, [r7, #20]
 8006670:	430b      	orrs	r3, r1
 8006672:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <HAL_COMP_Init+0xc8>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d113      	bne.n	80066b0 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006688:	4b88      	ldr	r3, [pc, #544]	@ (80068ac <HAL_COMP_Init+0x2c4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	4a88      	ldr	r2, [pc, #544]	@ (80068b0 <HAL_COMP_Init+0x2c8>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80066a2:	e002      	b.n	80066aa <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f9      	bne.n	80066a4 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7f      	ldr	r2, [pc, #508]	@ (80068b4 <HAL_COMP_Init+0x2cc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d028      	beq.n	800670c <HAL_COMP_Init+0x124>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7e      	ldr	r2, [pc, #504]	@ (80068b8 <HAL_COMP_Init+0x2d0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d020      	beq.n	8006706 <HAL_COMP_Init+0x11e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7c      	ldr	r2, [pc, #496]	@ (80068bc <HAL_COMP_Init+0x2d4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_COMP_Init+0x118>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7b      	ldr	r2, [pc, #492]	@ (80068c0 <HAL_COMP_Init+0x2d8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d010      	beq.n	80066fa <HAL_COMP_Init+0x112>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a79      	ldr	r2, [pc, #484]	@ (80068c4 <HAL_COMP_Init+0x2dc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d008      	beq.n	80066f4 <HAL_COMP_Init+0x10c>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a78      	ldr	r2, [pc, #480]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_COMP_Init+0x108>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e00f      	b.n	8006710 <HAL_COMP_Init+0x128>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e00d      	b.n	8006710 <HAL_COMP_Init+0x128>
 80066f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066f8:	e00a      	b.n	8006710 <HAL_COMP_Init+0x128>
 80066fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066fe:	e007      	b.n	8006710 <HAL_COMP_Init+0x128>
 8006700:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006704:	e004      	b.n	8006710 <HAL_COMP_Init+0x128>
 8006706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800670a:	e001      	b.n	8006710 <HAL_COMP_Init+0x128>
 800670c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006710:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80b6 	beq.w	800688c <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a65      	ldr	r2, [pc, #404]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_COMP_Init+0x158>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a64      	ldr	r2, [pc, #400]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006740:	6938      	ldr	r0, [r7, #16]
 8006742:	f7ff feab 	bl	800649c <LL_EXTI_EnableRisingTrig_32_63>
 8006746:	e014      	b.n	8006772 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006748:	6938      	ldr	r0, [r7, #16]
 800674a:	f7ff fe95 	bl	8006478 <LL_EXTI_EnableRisingTrig_0_31>
 800674e:	e010      	b.n	8006772 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5c      	ldr	r2, [pc, #368]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_COMP_Init+0x17c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5b      	ldr	r2, [pc, #364]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d103      	bne.n	800676c <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006764:	6938      	ldr	r0, [r7, #16]
 8006766:	f7ff febf 	bl	80064e8 <LL_EXTI_DisableRisingTrig_32_63>
 800676a:	e002      	b.n	8006772 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800676c:	6938      	ldr	r0, [r7, #16]
 800676e:	f7ff fea7 	bl	80064c0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d011      	beq.n	80067a2 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a51      	ldr	r2, [pc, #324]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <HAL_COMP_Init+0x1aa>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a4f      	ldr	r2, [pc, #316]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d103      	bne.n	800679a <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f7ff fece 	bl	8006534 <LL_EXTI_EnableFallingTrig_32_63>
 8006798:	e014      	b.n	80067c4 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800679a:	6938      	ldr	r0, [r7, #16]
 800679c:	f7ff feb8 	bl	8006510 <LL_EXTI_EnableFallingTrig_0_31>
 80067a0:	e010      	b.n	80067c4 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a48      	ldr	r2, [pc, #288]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_COMP_Init+0x1ce>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a46      	ldr	r2, [pc, #280]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d103      	bne.n	80067be <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80067b6:	6938      	ldr	r0, [r7, #16]
 80067b8:	f7ff fee2 	bl	8006580 <LL_EXTI_DisableFallingTrig_32_63>
 80067bc:	e002      	b.n	80067c4 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80067be:	6938      	ldr	r0, [r7, #16]
 80067c0:	f7ff feca 	bl	8006558 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a3f      	ldr	r2, [pc, #252]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_COMP_Init+0x1f0>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a3e      	ldr	r2, [pc, #248]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80067d8:	6938      	ldr	r0, [r7, #16]
 80067da:	f7ff fef5 	bl	80065c8 <LL_EXTI_ClearFlag_32_63>
 80067de:	e002      	b.n	80067e6 <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80067e0:	6938      	ldr	r0, [r7, #16]
 80067e2:	f7ff fee1 	bl	80065a8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d011      	beq.n	8006816 <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a34      	ldr	r2, [pc, #208]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_COMP_Init+0x21e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a32      	ldr	r2, [pc, #200]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d103      	bne.n	800680e <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f7ff fdfc 	bl	8006404 <LL_EXTI_EnableEvent_32_63>
 800680c:	e014      	b.n	8006838 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800680e:	6938      	ldr	r0, [r7, #16]
 8006810:	f7ff fde6 	bl	80063e0 <LL_EXTI_EnableEvent_0_31>
 8006814:	e010      	b.n	8006838 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2b      	ldr	r2, [pc, #172]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_COMP_Init+0x242>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a29      	ldr	r2, [pc, #164]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d103      	bne.n	8006832 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800682a:	6938      	ldr	r0, [r7, #16]
 800682c:	f7ff fe10 	bl	8006450 <LL_EXTI_DisableEvent_32_63>
 8006830:	e002      	b.n	8006838 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006832:	6938      	ldr	r0, [r7, #16]
 8006834:	f7ff fdf8 	bl	8006428 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d011      	beq.n	8006868 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1f      	ldr	r2, [pc, #124]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_COMP_Init+0x270>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1e      	ldr	r2, [pc, #120]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006858:	6938      	ldr	r0, [r7, #16]
 800685a:	f7ff fd87 	bl	800636c <LL_EXTI_EnableIT_32_63>
 800685e:	e04b      	b.n	80068f8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006860:	6938      	ldr	r0, [r7, #16]
 8006862:	f7ff fd71 	bl	8006348 <LL_EXTI_EnableIT_0_31>
 8006866:	e047      	b.n	80068f8 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a16      	ldr	r2, [pc, #88]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_COMP_Init+0x294>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d103      	bne.n	8006884 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7ff fd9b 	bl	80063b8 <LL_EXTI_DisableIT_32_63>
 8006882:	e039      	b.n	80068f8 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006884:	6938      	ldr	r0, [r7, #16]
 8006886:	f7ff fd83 	bl	8006390 <LL_EXTI_DisableIT_0_31>
 800688a:	e035      	b.n	80068f8 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0d      	ldr	r2, [pc, #52]	@ (80068c8 <HAL_COMP_Init+0x2e0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_COMP_Init+0x2b8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <HAL_COMP_Init+0x2e4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d117      	bne.n	80068d0 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f7ff fdd5 	bl	8006450 <LL_EXTI_DisableEvent_32_63>
 80068a6:	e016      	b.n	80068d6 <HAL_COMP_Init+0x2ee>
 80068a8:	ff007e0f 	.word	0xff007e0f
 80068ac:	20000004 	.word	0x20000004
 80068b0:	053e2d63 	.word	0x053e2d63
 80068b4:	40010200 	.word	0x40010200
 80068b8:	40010204 	.word	0x40010204
 80068bc:	40010208 	.word	0x40010208
 80068c0:	4001020c 	.word	0x4001020c
 80068c4:	40010210 	.word	0x40010210
 80068c8:	40010214 	.word	0x40010214
 80068cc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80068d0:	6938      	ldr	r0, [r7, #16]
 80068d2:	f7ff fda9 	bl	8006428 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a0e      	ldr	r2, [pc, #56]	@ (8006914 <HAL_COMP_Init+0x32c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_COMP_Init+0x302>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006918 <HAL_COMP_Init+0x330>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d103      	bne.n	80068f2 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80068ea:	6938      	ldr	r0, [r7, #16]
 80068ec:	f7ff fd64 	bl	80063b8 <LL_EXTI_DisableIT_32_63>
 80068f0:	e002      	b.n	80068f8 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80068f2:	6938      	ldr	r0, [r7, #16]
 80068f4:	f7ff fd4c 	bl	8006390 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7f5b      	ldrb	r3, [r3, #29]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006908:	7ffb      	ldrb	r3, [r7, #31]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40010214 	.word	0x40010214
 8006918:	40010218 	.word	0x40010218

0800691c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800692c:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <__NVIC_SetPriorityGrouping+0x44>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006938:	4013      	ands	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800694e:	4a04      	ldr	r2, [pc, #16]	@ (8006960 <__NVIC_SetPriorityGrouping+0x44>)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	60d3      	str	r3, [r2, #12]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000ed00 	.word	0xe000ed00

08006964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006968:	4b04      	ldr	r3, [pc, #16]	@ (800697c <__NVIC_GetPriorityGrouping+0x18>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	f003 0307 	and.w	r3, r3, #7
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800698a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698e:	2b00      	cmp	r3, #0
 8006990:	db0b      	blt.n	80069aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	f003 021f 	and.w	r2, r3, #31
 8006998:	4907      	ldr	r1, [pc, #28]	@ (80069b8 <__NVIC_EnableIRQ+0x38>)
 800699a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	2001      	movs	r0, #1
 80069a2:	fa00 f202 	lsl.w	r2, r0, r2
 80069a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e000e100 	.word	0xe000e100

080069bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db0a      	blt.n	80069e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	490c      	ldr	r1, [pc, #48]	@ (8006a08 <__NVIC_SetPriority+0x4c>)
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	0112      	lsls	r2, r2, #4
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	440b      	add	r3, r1
 80069e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069e4:	e00a      	b.n	80069fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4908      	ldr	r1, [pc, #32]	@ (8006a0c <__NVIC_SetPriority+0x50>)
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	3b04      	subs	r3, #4
 80069f4:	0112      	lsls	r2, r2, #4
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	440b      	add	r3, r1
 80069fa:	761a      	strb	r2, [r3, #24]
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	e000e100 	.word	0xe000e100
 8006a0c:	e000ed00 	.word	0xe000ed00

08006a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	@ 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f1c3 0307 	rsb	r3, r3, #7
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	bf28      	it	cs
 8006a2e:	2304      	movcs	r3, #4
 8006a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3304      	adds	r3, #4
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d902      	bls.n	8006a40 <NVIC_EncodePriority+0x30>
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3b03      	subs	r3, #3
 8006a3e:	e000      	b.n	8006a42 <NVIC_EncodePriority+0x32>
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43da      	mvns	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	401a      	ands	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a58:	f04f 31ff 	mov.w	r1, #4294967295
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	43d9      	mvns	r1, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a68:	4313      	orrs	r3, r2
         );
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3724      	adds	r7, #36	@ 0x24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a88:	d301      	bcc.n	8006a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00f      	b.n	8006aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <SysTick_Config+0x40>)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a96:	210f      	movs	r1, #15
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	f7ff ff8e 	bl	80069bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <SysTick_Config+0x40>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aa6:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <SysTick_Config+0x40>)
 8006aa8:	2207      	movs	r2, #7
 8006aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	e000e010 	.word	0xe000e010

08006abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ff29 	bl	800691c <__NVIC_SetPriorityGrouping>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
 8006ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ae0:	f7ff ff40 	bl	8006964 <__NVIC_GetPriorityGrouping>
 8006ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff90 	bl	8006a10 <NVIC_EncodePriority>
 8006af0:	4602      	mov	r2, r0
 8006af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ff5f 	bl	80069bc <__NVIC_SetPriority>
}
 8006afe:	bf00      	nop
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff33 	bl	8006980 <__NVIC_EnableIRQ>
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff ffa4 	bl	8006a78 <SysTick_Config>
 8006b30:	4603      	mov	r3, r0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e054      	b.n	8006bf8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7f5b      	ldrb	r3, [r3, #29]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc fdde 	bl	8003720 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	791b      	ldrb	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a22      	ldr	r2, [pc, #136]	@ (8006c00 <HAL_CRC_Init+0xc4>)
 8006b78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0218 	bic.w	r2, r2, #24
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	e00c      	b.n	8006ba6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f948 	bl	8006e2c <HAL_CRCEx_Polynomial_Set>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e028      	b.n	8006bf8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	795b      	ldrb	r3, [r3, #5]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	611a      	str	r2, [r3, #16]
 8006bb8:	e004      	b.n	8006bc4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6912      	ldr	r2, [r2, #16]
 8006bc2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	04c11db7 	.word	0x04c11db7

08006c04 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2202      	movs	r2, #2
 8006c18:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0201 	orr.w	r2, r2, #1
 8006c28:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d006      	beq.n	8006c40 <HAL_CRC_Calculate+0x3c>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d829      	bhi.n	8006c8a <HAL_CRC_Calculate+0x86>
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d019      	beq.n	8006c6e <HAL_CRC_Calculate+0x6a>
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d01e      	beq.n	8006c7c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006c3e:	e024      	b.n	8006c8a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e00a      	b.n	8006c5c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3f0      	bcc.n	8006c46 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	613b      	str	r3, [r7, #16]
      break;
 8006c6c:	e00e      	b.n	8006c8c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f812 	bl	8006c9c <CRC_Handle_8>
 8006c78:	6138      	str	r0, [r7, #16]
      break;
 8006c7a:	e007      	b.n	8006c8c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f899 	bl	8006db8 <CRC_Handle_16>
 8006c86:	6138      	str	r0, [r7, #16]
      break;
 8006c88:	e000      	b.n	8006c8c <HAL_CRC_Calculate+0x88>
      break;
 8006c8a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006c92:	693b      	ldr	r3, [r7, #16]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	@ 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e023      	b.n	8006cf6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	68b9      	ldr	r1, [r7, #8]
 8006cc2:	440b      	add	r3, r1
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006cc8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	3302      	adds	r3, #2
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	440b      	add	r3, r1
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006cd8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	3303      	adds	r3, #3
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	440b      	add	r3, r1
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006cec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	089b      	lsrs	r3, r3, #2
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3d6      	bcc.n	8006cae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d04d      	beq.n	8006da6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d107      	bne.n	8006d24 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d116      	bne.n	8006d5c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	4413      	add	r3, r2
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	b21a      	sxth	r2, r3
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	3301      	adds	r3, #1
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	440b      	add	r3, r1
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b21b      	sxth	r3, r3
 8006d4e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	8b7a      	ldrh	r2, [r7, #26]
 8006d5a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d11f      	bne.n	8006da6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	b21a      	sxth	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	3301      	adds	r3, #1
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	440b      	add	r3, r1
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b21b      	sxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b21b      	sxth	r3, r3
 8006d86:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	8b7a      	ldrh	r2, [r7, #26]
 8006d92:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	3302      	adds	r3, #2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3724      	adds	r7, #36	@ 0x24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e013      	b.n	8006df2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	041a      	lsls	r2, r3, #16
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	3302      	adds	r3, #2
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	440b      	add	r3, r1
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d3e6      	bcc.n	8006dca <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	4413      	add	r3, r2
 8006e14:	881a      	ldrh	r2, [r3, #0]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006e3c:	231f      	movs	r3, #31
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
 8006e4e:	e063      	b.n	8006f18 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006e50:	bf00      	nop
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	613a      	str	r2, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <HAL_CRCEx_Polynomial_Set+0x44>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f0      	beq.n	8006e52 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b18      	cmp	r3, #24
 8006e74:	d846      	bhi.n	8006f04 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006e76:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <HAL_CRCEx_Polynomial_Set+0x50>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006f0b 	.word	0x08006f0b
 8006e80:	08006f05 	.word	0x08006f05
 8006e84:	08006f05 	.word	0x08006f05
 8006e88:	08006f05 	.word	0x08006f05
 8006e8c:	08006f05 	.word	0x08006f05
 8006e90:	08006f05 	.word	0x08006f05
 8006e94:	08006f05 	.word	0x08006f05
 8006e98:	08006f05 	.word	0x08006f05
 8006e9c:	08006ef9 	.word	0x08006ef9
 8006ea0:	08006f05 	.word	0x08006f05
 8006ea4:	08006f05 	.word	0x08006f05
 8006ea8:	08006f05 	.word	0x08006f05
 8006eac:	08006f05 	.word	0x08006f05
 8006eb0:	08006f05 	.word	0x08006f05
 8006eb4:	08006f05 	.word	0x08006f05
 8006eb8:	08006f05 	.word	0x08006f05
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	08006f05 	.word	0x08006f05
 8006ec4:	08006f05 	.word	0x08006f05
 8006ec8:	08006f05 	.word	0x08006f05
 8006ecc:	08006f05 	.word	0x08006f05
 8006ed0:	08006f05 	.word	0x08006f05
 8006ed4:	08006f05 	.word	0x08006f05
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006ee1 	.word	0x08006ee1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d913      	bls.n	8006f0e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006eea:	e010      	b.n	8006f0e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b07      	cmp	r3, #7
 8006ef0:	d90f      	bls.n	8006f12 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006ef6:	e00c      	b.n	8006f12 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d90b      	bls.n	8006f16 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006f02:	e008      	b.n	8006f16 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
        break;
 8006f08:	e006      	b.n	8006f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e004      	b.n	8006f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e002      	b.n	8006f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006f16:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10d      	bne.n	8006f3a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f023 0118 	bic.w	r1, r3, #24
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e014      	b.n	8006f84 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fc fbf8 	bl	8003760 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	@ 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_DAC_ConfigChannel+0x1c>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e19e      	b.n	80072ea <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	795b      	ldrb	r3, [r3, #5]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_DAC_ConfigChannel+0x2c>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e198      	b.n	80072ea <HAL_DAC_ConfigChannel+0x35e>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d17a      	bne.n	80070c2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006fcc:	f7fd fc8a 	bl	80048e4 <HAL_GetTick>
 8006fd0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d13d      	bne.n	8007054 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006fd8:	e018      	b.n	800700c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006fda:	f7fd fc83 	bl	80048e4 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d911      	bls.n	800700c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f043 0208 	orr.w	r2, r3, #8
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2203      	movs	r2, #3
 8007006:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e16e      	b.n	80072ea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1df      	bne.n	8006fda <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007022:	641a      	str	r2, [r3, #64]	@ 0x40
 8007024:	e020      	b.n	8007068 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007026:	f7fd fc5d 	bl	80048e4 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d90f      	bls.n	8007054 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	da0a      	bge.n	8007054 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f043 0208 	orr.w	r2, r3, #8
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2203      	movs	r2, #3
 800704e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e14a      	b.n	80072ea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	2b00      	cmp	r3, #0
 800705c:	dbe3      	blt.n	8007026 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007066:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007078:	fa01 f303 	lsl.w	r3, r1, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	ea02 0103 	and.w	r1, r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	409a      	lsls	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	21ff      	movs	r1, #255	@ 0xff
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	ea02 0103 	and.w	r1, r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	409a      	lsls	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d11d      	bne.n	8007106 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	221f      	movs	r2, #31
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e2:	4013      	ands	r3, r2
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fa:	4313      	orrs	r3, r2
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007104:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2207      	movs	r2, #7
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711e:	4013      	ands	r3, r2
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d102      	bne.n	8007130 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800712a:	2300      	movs	r3, #0
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	e00f      	b.n	8007150 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d102      	bne.n	800713e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007138:	2301      	movs	r3, #1
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	e008      	b.n	8007150 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007146:	2301      	movs	r3, #1
 8007148:	623b      	str	r3, [r7, #32]
 800714a:	e001      	b.n	8007150 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800714c:	2300      	movs	r3, #0
 800714e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43db      	mvns	r3, r3
 8007170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007172:	4013      	ands	r3, r2
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	791b      	ldrb	r3, [r3, #4]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d102      	bne.n	8007184 <HAL_DAC_ConfigChannel+0x1f8>
 800717e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007182:	e000      	b.n	8007186 <HAL_DAC_ConfigChannel+0x1fa>
 8007184:	2300      	movs	r3, #0
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719e:	4013      	ands	r3, r2
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	795b      	ldrb	r3, [r3, #5]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d102      	bne.n	80071b0 <HAL_DAC_ConfigChannel+0x224>
 80071aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071ae:	e000      	b.n	80071b2 <HAL_DAC_ConfigChannel+0x226>
 80071b0:	2300      	movs	r3, #0
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d114      	bne.n	80071f2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80071c8:	f001 fc58 	bl	8008a7c <HAL_RCC_GetHCLKFreq>
 80071cc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4a48      	ldr	r2, [pc, #288]	@ (80072f4 <HAL_DAC_ConfigChannel+0x368>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d904      	bls.n	80071e0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071de:	e00f      	b.n	8007200 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4a45      	ldr	r2, [pc, #276]	@ (80072f8 <HAL_DAC_ConfigChannel+0x36c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d90a      	bls.n	80071fe <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f0:	e006      	b.n	8007200 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	4313      	orrs	r3, r2
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fc:	e000      	b.n	8007200 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80071fe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720e:	4313      	orrs	r3, r2
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	43da      	mvns	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	400a      	ands	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43db      	mvns	r3, r3
 8007250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007252:	4013      	ands	r3, r2
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726a:	4313      	orrs	r3, r2
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007274:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	22c0      	movs	r2, #192	@ 0xc0
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	43da      	mvns	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	400a      	ands	r2, r1
 8007290:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	089b      	lsrs	r3, r3, #2
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80072c0:	fa01 f303 	lsl.w	r3, r1, r3
 80072c4:	43db      	mvns	r3, r3
 80072c6:	ea02 0103 	and.w	r1, r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	409a      	lsls	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80072e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3728      	adds	r7, #40	@ 0x28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	09896800 	.word	0x09896800
 80072f8:	04c4b400 	.word	0x04c4b400

080072fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e08d      	b.n	800742a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	4b47      	ldr	r3, [pc, #284]	@ (8007434 <HAL_DMA_Init+0x138>)
 8007316:	429a      	cmp	r2, r3
 8007318:	d80f      	bhi.n	800733a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	4b45      	ldr	r3, [pc, #276]	@ (8007438 <HAL_DMA_Init+0x13c>)
 8007322:	4413      	add	r3, r2
 8007324:	4a45      	ldr	r2, [pc, #276]	@ (800743c <HAL_DMA_Init+0x140>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	091b      	lsrs	r3, r3, #4
 800732c:	009a      	lsls	r2, r3, #2
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <HAL_DMA_Init+0x144>)
 8007336:	641a      	str	r2, [r3, #64]	@ 0x40
 8007338:	e00e      	b.n	8007358 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	4b40      	ldr	r3, [pc, #256]	@ (8007444 <HAL_DMA_Init+0x148>)
 8007342:	4413      	add	r3, r2
 8007344:	4a3d      	ldr	r2, [pc, #244]	@ (800743c <HAL_DMA_Init+0x140>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	009a      	lsls	r2, r3, #2
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a3c      	ldr	r2, [pc, #240]	@ (8007448 <HAL_DMA_Init+0x14c>)
 8007356:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800736e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007372:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800737c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa76 	bl	800789c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073b8:	d102      	bne.n	80073c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_DMA_Init+0x104>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d80c      	bhi.n	8007400 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa96 	bl	8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	e008      	b.n	8007412 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40020407 	.word	0x40020407
 8007438:	bffdfff8 	.word	0xbffdfff8
 800743c:	cccccccd 	.word	0xcccccccd
 8007440:	40020000 	.word	0x40020000
 8007444:	bffdfbf8 	.word	0xbffdfbf8
 8007448:	40020400 	.word	0x40020400

0800744c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_DMA_Start_IT+0x20>
 8007468:	2302      	movs	r3, #2
 800746a:	e066      	b.n	800753a <HAL_DMA_Start_IT+0xee>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d155      	bne.n	800752c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f9bb 	bl	8007820 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 020e 	orr.w	r2, r2, #14
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e00f      	b.n	80074e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0204 	bic.w	r2, r2, #4
 80074d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 020a 	orr.w	r2, r2, #10
 80074e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007500:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007518:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0201 	orr.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e005      	b.n	8007538 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007534:	2302      	movs	r3, #2
 8007536:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d005      	beq.n	8007566 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2204      	movs	r2, #4
 800755e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e037      	b.n	80075d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 020e 	bic.w	r2, r2, #14
 8007574:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007584:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759a:	f003 021f 	and.w	r2, r3, #31
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	2101      	movs	r1, #1
 80075a4:	fa01 f202 	lsl.w	r2, r1, r2
 80075a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00c      	beq.n	80075d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80075d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d00d      	beq.n	8007628 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2204      	movs	r2, #4
 8007610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
 8007626:	e047      	b.n	80076b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 020e 	bic.w	r2, r2, #14
 8007636:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007652:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765c:	f003 021f 	and.w	r2, r3, #31
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	2101      	movs	r1, #1
 8007666:	fa01 f202 	lsl.w	r2, r1, r2
 800766a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007674:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800768c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007696:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
    }
  }
  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2204      	movs	r2, #4
 80076e4:	409a      	lsls	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d026      	beq.n	800773c <HAL_DMA_IRQHandler+0x7a>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d021      	beq.n	800773c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d107      	bne.n	8007716 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0204 	bic.w	r2, r2, #4
 8007714:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800771a:	f003 021f 	and.w	r2, r3, #31
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007722:	2104      	movs	r1, #4
 8007724:	fa01 f202 	lsl.w	r2, r1, r2
 8007728:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772e:	2b00      	cmp	r3, #0
 8007730:	d071      	beq.n	8007816 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800773a:	e06c      	b.n	8007816 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	2202      	movs	r2, #2
 8007746:	409a      	lsls	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02e      	beq.n	80077ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d029      	beq.n	80077ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 020a 	bic.w	r2, r2, #10
 8007776:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007784:	f003 021f 	and.w	r2, r3, #31
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	2102      	movs	r1, #2
 800778e:	fa01 f202 	lsl.w	r2, r1, r2
 8007792:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d038      	beq.n	8007816 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80077ac:	e033      	b.n	8007816 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2208      	movs	r2, #8
 80077b8:	409a      	lsls	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d02a      	beq.n	8007818 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d025      	beq.n	8007818 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 020e 	bic.w	r2, r2, #14
 80077da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e8:	2101      	movs	r1, #1
 80077ea:	fa01 f202 	lsl.w	r2, r1, r2
 80077ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007816:	bf00      	nop
 8007818:	bf00      	nop
}
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007836:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007848:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784e:	f003 021f 	and.w	r2, r3, #31
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007856:	2101      	movs	r1, #1
 8007858:	fa01 f202 	lsl.w	r2, r1, r2
 800785c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b10      	cmp	r3, #16
 800786c:	d108      	bne.n	8007880 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800787e:	e007      	b.n	8007890 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b16      	ldr	r3, [pc, #88]	@ (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d802      	bhi.n	80078b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80078b0:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e001      	b.n	80078ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80078b6:	4b15      	ldr	r3, [pc, #84]	@ (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	3b08      	subs	r3, #8
 80078c6:	4a12      	ldr	r2, [pc, #72]	@ (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d4:	089b      	lsrs	r3, r3, #2
 80078d6:	009a      	lsls	r2, r3, #2
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	4413      	add	r3, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80078e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 031f 	and.w	r3, r3, #31
 80078ee:	2201      	movs	r2, #1
 80078f0:	409a      	lsls	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40020407 	.word	0x40020407
 8007908:	40020800 	.word	0x40020800
 800790c:	40020820 	.word	0x40020820
 8007910:	cccccccd 	.word	0xcccccccd
 8007914:	40020880 	.word	0x40020880

08007918 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a08      	ldr	r2, [pc, #32]	@ (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800793a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	1000823f 	.word	0x1000823f
 800795c:	40020940 	.word	0x40020940

08007960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800796e:	e15a      	b.n	8007c26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	2101      	movs	r1, #1
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 814c 	beq.w	8007c20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d005      	beq.n	80079a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800799c:	2b02      	cmp	r3, #2
 800799e:	d130      	bne.n	8007a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	2203      	movs	r2, #3
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	43db      	mvns	r3, r3
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4013      	ands	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079d6:	2201      	movs	r2, #1
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4013      	ands	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 0201 	and.w	r2, r3, #1
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d017      	beq.n	8007a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	2203      	movs	r2, #3
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4013      	ands	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d123      	bne.n	8007a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	08da      	lsrs	r2, r3, #3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3208      	adds	r2, #8
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	6939      	ldr	r1, [r7, #16]
 8007a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f003 0203 	and.w	r2, r3, #3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80a6 	beq.w	8007c20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6613      	str	r3, [r2, #96]	@ 0x60
 8007ae0:	4b58      	ldr	r3, [pc, #352]	@ (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aec:	4a56      	ldr	r2, [pc, #344]	@ (8007c48 <HAL_GPIO_Init+0x2e8>)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	3302      	adds	r3, #2
 8007af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	220f      	movs	r2, #15
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007b16:	d01f      	beq.n	8007b58 <HAL_GPIO_Init+0x1f8>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8007c4c <HAL_GPIO_Init+0x2ec>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d019      	beq.n	8007b54 <HAL_GPIO_Init+0x1f4>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a4b      	ldr	r2, [pc, #300]	@ (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_GPIO_Init+0x1f0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c54 <HAL_GPIO_Init+0x2f4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00d      	beq.n	8007b4c <HAL_GPIO_Init+0x1ec>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a49      	ldr	r2, [pc, #292]	@ (8007c58 <HAL_GPIO_Init+0x2f8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d007      	beq.n	8007b48 <HAL_GPIO_Init+0x1e8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a48      	ldr	r2, [pc, #288]	@ (8007c5c <HAL_GPIO_Init+0x2fc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <HAL_GPIO_Init+0x1e4>
 8007b40:	2305      	movs	r3, #5
 8007b42:	e00a      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b44:	2306      	movs	r3, #6
 8007b46:	e008      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	e006      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e004      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e002      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <HAL_GPIO_Init+0x1fa>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f002 0203 	and.w	r2, r2, #3
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4093      	lsls	r3, r2
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b6a:	4937      	ldr	r1, [pc, #220]	@ (8007c48 <HAL_GPIO_Init+0x2e8>)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	3302      	adds	r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b78:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4013      	ands	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b9c:	4a30      	ldr	r2, [pc, #192]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bc6:	4a26      	ldr	r2, [pc, #152]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007bcc:	4b24      	ldr	r3, [pc, #144]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c1a:	4a11      	ldr	r2, [pc, #68]	@ (8007c60 <HAL_GPIO_Init+0x300>)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3301      	adds	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f ae9d 	bne.w	8007970 <HAL_GPIO_Init+0x10>
  }
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	48000400 	.word	0x48000400
 8007c50:	48000800 	.word	0x48000800
 8007c54:	48000c00 	.word	0x48000c00
 8007c58:	48001000 	.word	0x48001000
 8007c5c:	48001400 	.word	0x48001400
 8007c60:	40010400 	.word	0x40010400

08007c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
 8007c80:	e001      	b.n	8007c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	807b      	strh	r3, [r7, #2]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ca4:	787b      	ldrb	r3, [r7, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007caa:	887a      	ldrh	r2, [r7, #2]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007cb0:	e002      	b.n	8007cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cb2:	887a      	ldrh	r2, [r7, #2]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e08d      	b.n	8007df2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fb fd58 	bl	80037a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2224      	movs	r2, #36	@ 0x24
 8007cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007d14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d107      	bne.n	8007d3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	e006      	b.n	8007d4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d108      	bne.n	8007d66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	e007      	b.n	8007d76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69d9      	ldr	r1, [r3, #28]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d138      	bne.n	8007e82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e032      	b.n	8007e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	@ 0x24
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e000      	b.n	8007e84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e82:	2302      	movs	r3, #2
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d139      	bne.n	8007f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e033      	b.n	8007f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	@ 0x24
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0201 	orr.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d141      	bne.n	8007fba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f36:	4b4b      	ldr	r3, [pc, #300]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f42:	d131      	bne.n	8007fa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f44:	4b47      	ldr	r3, [pc, #284]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4a:	4a46      	ldr	r2, [pc, #280]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f54:	4b43      	ldr	r3, [pc, #268]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f5c:	4a41      	ldr	r2, [pc, #260]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f64:	4b40      	ldr	r3, [pc, #256]	@ (8008068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2232      	movs	r2, #50	@ 0x32
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800806c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0c9b      	lsrs	r3, r3, #18
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f7a:	e002      	b.n	8007f82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f82:	4b38      	ldr	r3, [pc, #224]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f8e:	d102      	bne.n	8007f96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f2      	bne.n	8007f7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f96:	4b33      	ldr	r3, [pc, #204]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa2:	d158      	bne.n	8008056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e057      	b.n	8008058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fae:	4a2d      	ldr	r2, [pc, #180]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fb8:	e04d      	b.n	8008056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc0:	d141      	bne.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fc2:	4b28      	ldr	r3, [pc, #160]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fce:	d131      	bne.n	8008034 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fd0:	4b24      	ldr	r3, [pc, #144]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd6:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fe0:	4b20      	ldr	r3, [pc, #128]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8008068 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2232      	movs	r2, #50	@ 0x32
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800806c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	0c9b      	lsrs	r3, r3, #18
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008006:	e002      	b.n	800800e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b01      	subs	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800800e:	4b15      	ldr	r3, [pc, #84]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801a:	d102      	bne.n	8008022 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f2      	bne.n	8008008 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008022:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802e:	d112      	bne.n	8008056 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e011      	b.n	8008058 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008034:	4b0b      	ldr	r3, [pc, #44]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803a:	4a0a      	ldr	r2, [pc, #40]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800803c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008044:	e007      	b.n	8008056 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008046:	4b07      	ldr	r3, [pc, #28]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800804e:	4a05      	ldr	r2, [pc, #20]	@ (8008064 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008054:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40007000 	.word	0x40007000
 8008068:	20000004 	.word	0x20000004
 800806c:	431bde83 	.word	0x431bde83

08008070 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008070:	b480      	push	{r7}
 8008072:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	4a04      	ldr	r2, [pc, #16]	@ (800808c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800807a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800807e:	6093      	str	r3, [r2, #8]
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40007000 	.word	0x40007000

08008090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e2fe      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d075      	beq.n	800819a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ae:	4b97      	ldr	r3, [pc, #604]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080b8:	4b94      	ldr	r3, [pc, #592]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d102      	bne.n	80080ce <HAL_RCC_OscConfig+0x3e>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d002      	beq.n	80080d4 <HAL_RCC_OscConfig+0x44>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d10b      	bne.n	80080ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080d4:	4b8d      	ldr	r3, [pc, #564]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d05b      	beq.n	8008198 <HAL_RCC_OscConfig+0x108>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d157      	bne.n	8008198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e2d9      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f4:	d106      	bne.n	8008104 <HAL_RCC_OscConfig+0x74>
 80080f6:	4b85      	ldr	r3, [pc, #532]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a84      	ldr	r2, [pc, #528]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80080fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	e01d      	b.n	8008140 <HAL_RCC_OscConfig+0xb0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800810c:	d10c      	bne.n	8008128 <HAL_RCC_OscConfig+0x98>
 800810e:	4b7f      	ldr	r3, [pc, #508]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a7e      	ldr	r2, [pc, #504]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	4b7c      	ldr	r3, [pc, #496]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a7b      	ldr	r2, [pc, #492]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e00b      	b.n	8008140 <HAL_RCC_OscConfig+0xb0>
 8008128:	4b78      	ldr	r3, [pc, #480]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a77      	ldr	r2, [pc, #476]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800812e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	4b75      	ldr	r3, [pc, #468]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a74      	ldr	r2, [pc, #464]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800813a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800813e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d013      	beq.n	8008170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008148:	f7fc fbcc 	bl	80048e4 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008150:	f7fc fbc8 	bl	80048e4 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b64      	cmp	r3, #100	@ 0x64
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e29e      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008162:	4b6a      	ldr	r3, [pc, #424]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f0      	beq.n	8008150 <HAL_RCC_OscConfig+0xc0>
 800816e:	e014      	b.n	800819a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7fc fbb8 	bl	80048e4 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008178:	f7fc fbb4 	bl	80048e4 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b64      	cmp	r3, #100	@ 0x64
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e28a      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800818a:	4b60      	ldr	r3, [pc, #384]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0xe8>
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d075      	beq.n	8008292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081a6:	4b59      	ldr	r3, [pc, #356]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 030c 	and.w	r3, r3, #12
 80081ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081b0:	4b56      	ldr	r3, [pc, #344]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	d102      	bne.n	80081c6 <HAL_RCC_OscConfig+0x136>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d002      	beq.n	80081cc <HAL_RCC_OscConfig+0x13c>
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d11f      	bne.n	800820c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081cc:	4b4f      	ldr	r3, [pc, #316]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_OscConfig+0x154>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e25d      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e4:	4b49      	ldr	r3, [pc, #292]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	4946      	ldr	r1, [pc, #280]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081f8:	4b45      	ldr	r3, [pc, #276]	@ (8008310 <HAL_RCC_OscConfig+0x280>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fc fb25 	bl	800484c <HAL_InitTick>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d043      	beq.n	8008290 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e249      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d023      	beq.n	800825c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008214:	4b3d      	ldr	r3, [pc, #244]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a3c      	ldr	r2, [pc, #240]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800821a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fc fb60 	bl	80048e4 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008228:	f7fc fb5c 	bl	80048e4 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e232      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800823a:	4b34      	ldr	r3, [pc, #208]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008246:	4b31      	ldr	r3, [pc, #196]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	492d      	ldr	r1, [pc, #180]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008256:	4313      	orrs	r3, r2
 8008258:	604b      	str	r3, [r1, #4]
 800825a:	e01a      	b.n	8008292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800825c:	4b2b      	ldr	r3, [pc, #172]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2a      	ldr	r2, [pc, #168]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fc fb3c 	bl	80048e4 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008270:	f7fc fb38 	bl	80048e4 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e20e      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008282:	4b22      	ldr	r3, [pc, #136]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x1e0>
 800828e:	e000      	b.n	8008292 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d041      	beq.n	8008322 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01c      	beq.n	80082e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a6:	4b19      	ldr	r3, [pc, #100]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80082a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ac:	4a17      	ldr	r2, [pc, #92]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b6:	f7fc fb15 	bl	80048e4 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082be:	f7fc fb11 	bl	80048e4 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e1e7      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80082d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0ef      	beq.n	80082be <HAL_RCC_OscConfig+0x22e>
 80082de:	e020      	b.n	8008322 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80082e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082e6:	4a09      	ldr	r2, [pc, #36]	@ (800830c <HAL_RCC_OscConfig+0x27c>)
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f0:	f7fc faf8 	bl	80048e4 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082f6:	e00d      	b.n	8008314 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082f8:	f7fc faf4 	bl	80048e4 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d906      	bls.n	8008314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e1ca      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
 800830a:	bf00      	nop
 800830c:	40021000 	.word	0x40021000
 8008310:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008314:	4b8c      	ldr	r3, [pc, #560]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ea      	bne.n	80082f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80a6 	beq.w	800847c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008330:	2300      	movs	r3, #0
 8008332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008334:	4b84      	ldr	r3, [pc, #528]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_RCC_OscConfig+0x2b4>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <HAL_RCC_OscConfig+0x2b6>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00d      	beq.n	8008366 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800834a:	4b7f      	ldr	r3, [pc, #508]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834e:	4a7e      	ldr	r2, [pc, #504]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008354:	6593      	str	r3, [r2, #88]	@ 0x58
 8008356:	4b7c      	ldr	r3, [pc, #496]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800835a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008362:	2301      	movs	r3, #1
 8008364:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008366:	4b79      	ldr	r3, [pc, #484]	@ (800854c <HAL_RCC_OscConfig+0x4bc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d118      	bne.n	80083a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008372:	4b76      	ldr	r3, [pc, #472]	@ (800854c <HAL_RCC_OscConfig+0x4bc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a75      	ldr	r2, [pc, #468]	@ (800854c <HAL_RCC_OscConfig+0x4bc>)
 8008378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800837c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800837e:	f7fc fab1 	bl	80048e4 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008386:	f7fc faad 	bl	80048e4 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e183      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008398:	4b6c      	ldr	r3, [pc, #432]	@ (800854c <HAL_RCC_OscConfig+0x4bc>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d108      	bne.n	80083be <HAL_RCC_OscConfig+0x32e>
 80083ac:	4b66      	ldr	r3, [pc, #408]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b2:	4a65      	ldr	r2, [pc, #404]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083bc:	e024      	b.n	8008408 <HAL_RCC_OscConfig+0x378>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d110      	bne.n	80083e8 <HAL_RCC_OscConfig+0x358>
 80083c6:	4b60      	ldr	r3, [pc, #384]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083cc:	4a5e      	ldr	r2, [pc, #376]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083d6:	4b5c      	ldr	r3, [pc, #368]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083dc:	4a5a      	ldr	r2, [pc, #360]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083e6:	e00f      	b.n	8008408 <HAL_RCC_OscConfig+0x378>
 80083e8:	4b57      	ldr	r3, [pc, #348]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ee:	4a56      	ldr	r2, [pc, #344]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80083f8:	4b53      	ldr	r3, [pc, #332]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083fe:	4a52      	ldr	r2, [pc, #328]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008400:	f023 0304 	bic.w	r3, r3, #4
 8008404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d016      	beq.n	800843e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008410:	f7fc fa68 	bl	80048e4 <HAL_GetTick>
 8008414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008416:	e00a      	b.n	800842e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008418:	f7fc fa64 	bl	80048e4 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e138      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800842e:	4b46      	ldr	r3, [pc, #280]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ed      	beq.n	8008418 <HAL_RCC_OscConfig+0x388>
 800843c:	e015      	b.n	800846a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843e:	f7fc fa51 	bl	80048e4 <HAL_GetTick>
 8008442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008444:	e00a      	b.n	800845c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008446:	f7fc fa4d 	bl	80048e4 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008454:	4293      	cmp	r3, r2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e121      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800845c:	4b3a      	ldr	r3, [pc, #232]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 800845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1ed      	bne.n	8008446 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800846a:	7ffb      	ldrb	r3, [r7, #31]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d105      	bne.n	800847c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008470:	4b35      	ldr	r3, [pc, #212]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008474:	4a34      	ldr	r2, [pc, #208]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800847a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03c      	beq.n	8008502 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01c      	beq.n	80084ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008490:	4b2d      	ldr	r3, [pc, #180]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008496:	4a2c      	ldr	r2, [pc, #176]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a0:	f7fc fa20 	bl	80048e4 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084a8:	f7fc fa1c 	bl	80048e4 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e0f2      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084ba:	4b23      	ldr	r3, [pc, #140]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80084bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0ef      	beq.n	80084a8 <HAL_RCC_OscConfig+0x418>
 80084c8:	e01b      	b.n	8008502 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80084cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80084d2:	f023 0301 	bic.w	r3, r3, #1
 80084d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084da:	f7fc fa03 	bl	80048e4 <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084e2:	f7fc f9ff 	bl	80048e4 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e0d5      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80084f4:	4b14      	ldr	r3, [pc, #80]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 80084f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1ef      	bne.n	80084e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80c9 	beq.w	800869e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800850c:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 030c 	and.w	r3, r3, #12
 8008514:	2b0c      	cmp	r3, #12
 8008516:	f000 8083 	beq.w	8008620 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d15e      	bne.n	80085e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008522:	4b09      	ldr	r3, [pc, #36]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a08      	ldr	r2, [pc, #32]	@ (8008548 <HAL_RCC_OscConfig+0x4b8>)
 8008528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800852c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852e:	f7fc f9d9 	bl	80048e4 <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008534:	e00c      	b.n	8008550 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008536:	f7fc f9d5 	bl	80048e4 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d905      	bls.n	8008550 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e0ab      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
 8008548:	40021000 	.word	0x40021000
 800854c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008550:	4b55      	ldr	r3, [pc, #340]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1ec      	bne.n	8008536 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800855c:	4b52      	ldr	r3, [pc, #328]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	4b52      	ldr	r3, [pc, #328]	@ (80086ac <HAL_RCC_OscConfig+0x61c>)
 8008562:	4013      	ands	r3, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6a11      	ldr	r1, [r2, #32]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800856c:	3a01      	subs	r2, #1
 800856e:	0112      	lsls	r2, r2, #4
 8008570:	4311      	orrs	r1, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008576:	0212      	lsls	r2, r2, #8
 8008578:	4311      	orrs	r1, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800857e:	0852      	lsrs	r2, r2, #1
 8008580:	3a01      	subs	r2, #1
 8008582:	0552      	lsls	r2, r2, #21
 8008584:	4311      	orrs	r1, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800858a:	0852      	lsrs	r2, r2, #1
 800858c:	3a01      	subs	r2, #1
 800858e:	0652      	lsls	r2, r2, #25
 8008590:	4311      	orrs	r1, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008596:	06d2      	lsls	r2, r2, #27
 8008598:	430a      	orrs	r2, r1
 800859a:	4943      	ldr	r1, [pc, #268]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 800859c:	4313      	orrs	r3, r2
 800859e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a0:	4b41      	ldr	r3, [pc, #260]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a40      	ldr	r2, [pc, #256]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80085ac:	4b3e      	ldr	r3, [pc, #248]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	4a3d      	ldr	r2, [pc, #244]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b8:	f7fc f994 	bl	80048e4 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c0:	f7fc f990 	bl	80048e4 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e066      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085d2:	4b35      	ldr	r3, [pc, #212]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x530>
 80085de:	e05e      	b.n	800869e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e0:	4b31      	ldr	r3, [pc, #196]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a30      	ldr	r2, [pc, #192]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 80085e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ec:	f7fc f97a 	bl	80048e4 <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085f4:	f7fc f976 	bl	80048e4 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e04c      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008606:	4b28      	ldr	r3, [pc, #160]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008612:	4b25      	ldr	r3, [pc, #148]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	4924      	ldr	r1, [pc, #144]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 8008618:	4b25      	ldr	r3, [pc, #148]	@ (80086b0 <HAL_RCC_OscConfig+0x620>)
 800861a:	4013      	ands	r3, r2
 800861c:	60cb      	str	r3, [r1, #12]
 800861e:	e03e      	b.n	800869e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e039      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800862c:	4b1e      	ldr	r3, [pc, #120]	@ (80086a8 <HAL_RCC_OscConfig+0x618>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f003 0203 	and.w	r2, r3, #3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	429a      	cmp	r2, r3
 800863e:	d12c      	bne.n	800869a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864a:	3b01      	subs	r3, #1
 800864c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800864e:	429a      	cmp	r2, r3
 8008650:	d123      	bne.n	800869a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800865e:	429a      	cmp	r2, r3
 8008660:	d11b      	bne.n	800869a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800866e:	429a      	cmp	r2, r3
 8008670:	d113      	bne.n	800869a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867c:	085b      	lsrs	r3, r3, #1
 800867e:	3b01      	subs	r3, #1
 8008680:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008682:	429a      	cmp	r2, r3
 8008684:	d109      	bne.n	800869a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	3b01      	subs	r3, #1
 8008694:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008696:	429a      	cmp	r2, r3
 8008698:	d001      	beq.n	800869e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40021000 	.word	0x40021000
 80086ac:	019f800c 	.word	0x019f800c
 80086b0:	feeefffc 	.word	0xfeeefffc

080086b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e11e      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086cc:	4b91      	ldr	r3, [pc, #580]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d910      	bls.n	80086fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086da:	4b8e      	ldr	r3, [pc, #568]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f023 020f 	bic.w	r2, r3, #15
 80086e2:	498c      	ldr	r1, [pc, #560]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ea:	4b8a      	ldr	r3, [pc, #552]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d001      	beq.n	80086fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e106      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d073      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d129      	bne.n	8008764 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008710:	4b81      	ldr	r3, [pc, #516]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0f4      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008720:	f000 f9e4 	bl	8008aec <RCC_GetSysClockFreqFromPLLSource>
 8008724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4a7c      	ldr	r2, [pc, #496]	@ (800891c <HAL_RCC_ClockConfig+0x268>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d93f      	bls.n	80087ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800872e:	4b7a      	ldr	r3, [pc, #488]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008742:	2b00      	cmp	r3, #0
 8008744:	d033      	beq.n	80087ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	d12f      	bne.n	80087ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800874e:	4b72      	ldr	r3, [pc, #456]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008756:	4a70      	ldr	r2, [pc, #448]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800875e:	2380      	movs	r3, #128	@ 0x80
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	e024      	b.n	80087ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d107      	bne.n	800877c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800876c:	4b6a      	ldr	r3, [pc, #424]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d109      	bne.n	800878c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0c6      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800877c:	4b66      	ldr	r3, [pc, #408]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e0be      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800878c:	f000 f914 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 8008790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	4a61      	ldr	r2, [pc, #388]	@ (800891c <HAL_RCC_ClockConfig+0x268>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d909      	bls.n	80087ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800879a:	4b5f      	ldr	r3, [pc, #380]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087a2:	4a5d      	ldr	r2, [pc, #372]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80087a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80087aa:	2380      	movs	r3, #128	@ 0x80
 80087ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087ae:	4b5a      	ldr	r3, [pc, #360]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f023 0203 	bic.w	r2, r3, #3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	4957      	ldr	r1, [pc, #348]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c0:	f7fc f890 	bl	80048e4 <HAL_GetTick>
 80087c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c6:	e00a      	b.n	80087de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087c8:	f7fc f88c 	bl	80048e4 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e095      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087de:	4b4e      	ldr	r3, [pc, #312]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 020c 	and.w	r2, r3, #12
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1eb      	bne.n	80087c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d023      	beq.n	8008844 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008808:	4b43      	ldr	r3, [pc, #268]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	4a42      	ldr	r2, [pc, #264]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800880e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008812:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0308 	and.w	r3, r3, #8
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008820:	4b3d      	ldr	r3, [pc, #244]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008828:	4a3b      	ldr	r2, [pc, #236]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800882a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800882e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008830:	4b39      	ldr	r3, [pc, #228]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4936      	ldr	r1, [pc, #216]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800883e:	4313      	orrs	r3, r2
 8008840:	608b      	str	r3, [r1, #8]
 8008842:	e008      	b.n	8008856 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b80      	cmp	r3, #128	@ 0x80
 8008848:	d105      	bne.n	8008856 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800884a:	4b33      	ldr	r3, [pc, #204]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4a32      	ldr	r2, [pc, #200]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 8008850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008854:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008856:	4b2f      	ldr	r3, [pc, #188]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	429a      	cmp	r2, r3
 8008862:	d21d      	bcs.n	80088a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008864:	4b2b      	ldr	r3, [pc, #172]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f023 020f 	bic.w	r2, r3, #15
 800886c:	4929      	ldr	r1, [pc, #164]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	4313      	orrs	r3, r2
 8008872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008874:	f7fc f836 	bl	80048e4 <HAL_GetTick>
 8008878:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	e00a      	b.n	8008892 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800887c:	f7fc f832 	bl	80048e4 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800888a:	4293      	cmp	r3, r2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e03b      	b.n	800890a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008892:	4b20      	ldr	r3, [pc, #128]	@ (8008914 <HAL_RCC_ClockConfig+0x260>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d1ed      	bne.n	800887c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4917      	ldr	r1, [pc, #92]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088ca:	4b13      	ldr	r3, [pc, #76]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	490f      	ldr	r1, [pc, #60]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088de:	f000 f86b 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <HAL_RCC_ClockConfig+0x264>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	490c      	ldr	r1, [pc, #48]	@ (8008920 <HAL_RCC_ClockConfig+0x26c>)
 80088f0:	5ccb      	ldrb	r3, [r1, r3]
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	fa22 f303 	lsr.w	r3, r2, r3
 80088fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008924 <HAL_RCC_ClockConfig+0x270>)
 80088fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80088fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <HAL_RCC_ClockConfig+0x274>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7fb ffa2 	bl	800484c <HAL_InitTick>
 8008908:	4603      	mov	r3, r0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40022000 	.word	0x40022000
 8008918:	40021000 	.word	0x40021000
 800891c:	04c4b400 	.word	0x04c4b400
 8008920:	0800d394 	.word	0x0800d394
 8008924:	20000004 	.word	0x20000004
 8008928:	20000010 	.word	0x20000010

0800892c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08c      	sub	sp, #48	@ 0x30
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008938:	2302      	movs	r3, #2
 800893a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800893c:	2303      	movs	r3, #3
 800893e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800894a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8008958:	029b      	lsls	r3, r3, #10
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <HAL_RCC_MCOConfig+0x88>)
 8008968:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800896a:	2101      	movs	r1, #1
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	fa01 f303 	lsl.w	r3, r1, r3
 8008972:	4910      	ldr	r1, [pc, #64]	@ (80089b4 <HAL_RCC_MCOConfig+0x88>)
 8008974:	4313      	orrs	r3, r2
 8008976:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	b29b      	uxth	r3, r3
 800897c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	0d1b      	lsrs	r3, r3, #20
 8008982:	b2db      	uxtb	r3, r3
 8008984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008986:	f107 0310 	add.w	r3, r7, #16
 800898a:	4619      	mov	r1, r3
 800898c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800898e:	f7fe ffe7 	bl	8007960 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008998:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <HAL_RCC_MCOConfig+0x88>)
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	430b      	orrs	r3, r1
 80089a6:	4903      	ldr	r1, [pc, #12]	@ (80089b4 <HAL_RCC_MCOConfig+0x88>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	608b      	str	r3, [r1, #8]
  }
}
 80089ac:	bf00      	nop
 80089ae:	3730      	adds	r7, #48	@ 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40021000 	.word	0x40021000

080089b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80089be:	4b2c      	ldr	r3, [pc, #176]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d102      	bne.n	80089d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	e047      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089d0:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 030c 	and.w	r3, r3, #12
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d102      	bne.n	80089e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089dc:	4b26      	ldr	r3, [pc, #152]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	e03e      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80089e2:	4b23      	ldr	r3, [pc, #140]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 030c 	and.w	r3, r3, #12
 80089ea:	2b0c      	cmp	r3, #12
 80089ec:	d136      	bne.n	8008a5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089ee:	4b20      	ldr	r3, [pc, #128]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	091b      	lsrs	r3, r3, #4
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	3301      	adds	r3, #1
 8008a04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a14:	4a16      	ldr	r2, [pc, #88]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a16:	68d2      	ldr	r2, [r2, #12]
 8008a18:	0a12      	lsrs	r2, r2, #8
 8008a1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
 8008a22:	617b      	str	r3, [r7, #20]
      break;
 8008a24:	e00c      	b.n	8008a40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a26:	4a13      	ldr	r2, [pc, #76]	@ (8008a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	4a10      	ldr	r2, [pc, #64]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a30:	68d2      	ldr	r2, [r2, #12]
 8008a32:	0a12      	lsrs	r2, r2, #8
 8008a34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
      break;
 8008a3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	0e5b      	lsrs	r3, r3, #25
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	e001      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a60:	693b      	ldr	r3, [r7, #16]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40021000 	.word	0x40021000
 8008a74:	00f42400 	.word	0x00f42400
 8008a78:	017d7840 	.word	0x017d7840

08008a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a80:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a82:	681b      	ldr	r3, [r3, #0]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000004 	.word	0x20000004

08008a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a98:	f7ff fff0 	bl	8008a7c <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	@ (8008abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800d3a4 	.word	0x0800d3a4

08008ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ac4:	f7ff ffda 	bl	8008a7c <HAL_RCC_GetHCLKFreq>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	0adb      	lsrs	r3, r3, #11
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	4904      	ldr	r1, [pc, #16]	@ (8008ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ad6:	5ccb      	ldrb	r3, [r1, r3]
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	0800d3a4 	.word	0x0800d3a4

08008aec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008af2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008afc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	091b      	lsrs	r3, r3, #4
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d10c      	bne.n	8008b2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b10:	4a17      	ldr	r2, [pc, #92]	@ (8008b70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	4a14      	ldr	r2, [pc, #80]	@ (8008b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b1a:	68d2      	ldr	r2, [r2, #12]
 8008b1c:	0a12      	lsrs	r2, r2, #8
 8008b1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	617b      	str	r3, [r7, #20]
    break;
 8008b28:	e00c      	b.n	8008b44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b2a:	4a12      	ldr	r2, [pc, #72]	@ (8008b74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	4a0e      	ldr	r2, [pc, #56]	@ (8008b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b34:	68d2      	ldr	r2, [r2, #12]
 8008b36:	0a12      	lsrs	r2, r2, #8
 8008b38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b3c:	fb02 f303 	mul.w	r3, r2, r3
 8008b40:	617b      	str	r3, [r7, #20]
    break;
 8008b42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b44:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	0e5b      	lsrs	r3, r3, #25
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	3301      	adds	r3, #1
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b5e:	687b      	ldr	r3, [r7, #4]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	017d7840 	.word	0x017d7840
 8008b74:	00f42400 	.word	0x00f42400

08008b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b80:	2300      	movs	r3, #0
 8008b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b84:	2300      	movs	r3, #0
 8008b86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8098 	beq.w	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b96:	2300      	movs	r3, #0
 8008b98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b9a:	4b43      	ldr	r3, [pc, #268]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10d      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba6:	4b40      	ldr	r3, [pc, #256]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008baa:	4a3f      	ldr	r2, [pc, #252]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bba:	60bb      	str	r3, [r7, #8]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a39      	ldr	r2, [pc, #228]	@ (8008cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bce:	f7fb fe89 	bl	80048e4 <HAL_GetTick>
 8008bd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bd4:	e009      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd6:	f7fb fe85 	bl	80048e4 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d902      	bls.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	74fb      	strb	r3, [r7, #19]
        break;
 8008be8:	e005      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bea:	4b30      	ldr	r3, [pc, #192]	@ (8008cac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0ef      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008bf6:	7cfb      	ldrb	r3, [r7, #19]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d159      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01e      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d019      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c18:	4b23      	ldr	r3, [pc, #140]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c24:	4b20      	ldr	r3, [pc, #128]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c34:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c44:	4a18      	ldr	r2, [pc, #96]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d016      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c56:	f7fb fe45 	bl	80048e4 <HAL_GetTick>
 8008c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c5c:	e00b      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c5e:	f7fb fe41 	bl	80048e4 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d902      	bls.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	74fb      	strb	r3, [r7, #19]
            break;
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0ec      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008c84:	7cfb      	ldrb	r3, [r7, #19]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10b      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c8a:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c98:	4903      	ldr	r1, [pc, #12]	@ (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008ca0:	e008      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ca2:	7cfb      	ldrb	r3, [r7, #19]
 8008ca4:	74bb      	strb	r3, [r7, #18]
 8008ca6:	e005      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb0:	7cfb      	ldrb	r3, [r7, #19]
 8008cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cb4:	7c7b      	ldrb	r3, [r7, #17]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d105      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cba:	4ba7      	ldr	r3, [pc, #668]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	4aa6      	ldr	r2, [pc, #664]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cd2:	4ba1      	ldr	r3, [pc, #644]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd8:	f023 0203 	bic.w	r2, r3, #3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	499d      	ldr	r1, [pc, #628]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cf4:	4b98      	ldr	r3, [pc, #608]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfa:	f023 020c 	bic.w	r2, r3, #12
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	4995      	ldr	r1, [pc, #596]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d16:	4b90      	ldr	r3, [pc, #576]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	498c      	ldr	r1, [pc, #560]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d38:	4b87      	ldr	r3, [pc, #540]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	4984      	ldr	r1, [pc, #528]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	497b      	ldr	r1, [pc, #492]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d7c:	4b76      	ldr	r3, [pc, #472]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	4973      	ldr	r1, [pc, #460]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	496a      	ldr	r1, [pc, #424]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008dc0:	4b65      	ldr	r3, [pc, #404]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	4962      	ldr	r1, [pc, #392]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008de2:	4b5d      	ldr	r3, [pc, #372]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	4959      	ldr	r1, [pc, #356]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e04:	4b54      	ldr	r3, [pc, #336]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e0a:	f023 0203 	bic.w	r2, r3, #3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	4951      	ldr	r1, [pc, #324]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e26:	4b4c      	ldr	r3, [pc, #304]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	4948      	ldr	r1, [pc, #288]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d015      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e48:	4b43      	ldr	r3, [pc, #268]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e56:	4940      	ldr	r1, [pc, #256]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e66:	d105      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e68:	4b3b      	ldr	r3, [pc, #236]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d015      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e80:	4b35      	ldr	r3, [pc, #212]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8e:	4932      	ldr	r1, [pc, #200]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e9e:	d105      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eaa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d015      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008eb8:	4b27      	ldr	r3, [pc, #156]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ebe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec6:	4924      	ldr	r1, [pc, #144]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ed6:	d105      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4a1e      	ldr	r2, [pc, #120]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ee2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d015      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ef0:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efe:	4916      	ldr	r1, [pc, #88]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f10:	4b11      	ldr	r3, [pc, #68]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	4a10      	ldr	r2, [pc, #64]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d019      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f28:	4b0b      	ldr	r3, [pc, #44]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	4908      	ldr	r1, [pc, #32]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f46:	d109      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f48:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	4a02      	ldr	r2, [pc, #8]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f52:	60d3      	str	r3, [r2, #12]
 8008f54:	e002      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008f56:	bf00      	nop
 8008f58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f68:	4b29      	ldr	r3, [pc, #164]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f76:	4926      	ldr	r1, [pc, #152]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f86:	d105      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f88:	4b21      	ldr	r3, [pc, #132]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4a20      	ldr	r2, [pc, #128]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fae:	4918      	ldr	r1, [pc, #96]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fbe:	d105      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008fc0:	4b13      	ldr	r3, [pc, #76]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a12      	ldr	r2, [pc, #72]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d015      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	490a      	ldr	r1, [pc, #40]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ff6:	d105      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ff8:	4b05      	ldr	r3, [pc, #20]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	4a04      	ldr	r2, [pc, #16]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009002:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009004:	7cbb      	ldrb	r3, [r7, #18]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	40021000 	.word	0x40021000

08009014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e09d      	b.n	8009162 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d108      	bne.n	8009040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009036:	d009      	beq.n	800904c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	61da      	str	r2, [r3, #28]
 800903e:	e005      	b.n	800904c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fa fc10 	bl	800388c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800908c:	d902      	bls.n	8009094 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e002      	b.n	800909a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009098:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80090a2:	d007      	beq.n	80090b4 <HAL_SPI_Init+0xa0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090ac:	d002      	beq.n	80090b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0302 	and.w	r3, r3, #2
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f6:	ea42 0103 	orr.w	r1, r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	0c1b      	lsrs	r3, r3, #16
 8009110:	f003 0204 	and.w	r2, r3, #4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	431a      	orrs	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009130:	ea42 0103 	orr.w	r1, r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b088      	sub	sp, #32
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_SPI_Transmit+0x22>
 8009188:	2302      	movs	r3, #2
 800918a:	e15f      	b.n	800944c <HAL_SPI_Transmit+0x2e2>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009194:	f7fb fba6 	bl	80048e4 <HAL_GetTick>
 8009198:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d002      	beq.n	80091b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091aa:	2302      	movs	r3, #2
 80091ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091ae:	e148      	b.n	8009442 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_SPI_Transmit+0x52>
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091c0:	e13f      	b.n	8009442 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2203      	movs	r2, #3
 80091c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	88fa      	ldrh	r2, [r7, #6]
 80091e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800920c:	d10f      	bne.n	800922e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800921c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800922c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009238:	2b40      	cmp	r3, #64	@ 0x40
 800923a:	d007      	beq.n	800924c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800924a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009254:	d94f      	bls.n	80092f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_SPI_Transmit+0xfa>
 800925e:	8afb      	ldrh	r3, [r7, #22]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d142      	bne.n	80092ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009288:	e02f      	b.n	80092ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b02      	cmp	r3, #2
 8009296:	d112      	bne.n	80092be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092bc:	e015      	b.n	80092ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092be:	f7fb fb11 	bl	80048e4 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d803      	bhi.n	80092d6 <HAL_SPI_Transmit+0x16c>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d102      	bne.n	80092dc <HAL_SPI_Transmit+0x172>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d106      	bne.n	80092ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80092e8:	e0ab      	b.n	8009442 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1ca      	bne.n	800928a <HAL_SPI_Transmit+0x120>
 80092f4:	e080      	b.n	80093f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <HAL_SPI_Transmit+0x19a>
 80092fe:	8afb      	ldrh	r3, [r7, #22]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d174      	bne.n	80093ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b01      	cmp	r3, #1
 800930c:	d912      	bls.n	8009334 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009312:	881a      	ldrh	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931e:	1c9a      	adds	r2, r3, #2
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b02      	subs	r3, #2
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009332:	e05c      	b.n	80093ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	330c      	adds	r3, #12
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009350:	b29b      	uxth	r3, r3
 8009352:	3b01      	subs	r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800935a:	e048      	b.n	80093ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b02      	cmp	r3, #2
 8009368:	d12b      	bne.n	80093c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d912      	bls.n	800939a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009378:	881a      	ldrh	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009384:	1c9a      	adds	r2, r3, #2
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800938e:	b29b      	uxth	r3, r3
 8009390:	3b02      	subs	r3, #2
 8009392:	b29a      	uxth	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009398:	e029      	b.n	80093ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	330c      	adds	r3, #12
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80093c0:	e015      	b.n	80093ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093c2:	f7fb fa8f 	bl	80048e4 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d803      	bhi.n	80093da <HAL_SPI_Transmit+0x270>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d102      	bne.n	80093e0 <HAL_SPI_Transmit+0x276>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d106      	bne.n	80093ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80093ec:	e029      	b.n	8009442 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1b1      	bne.n	800935c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f947 	bl	8009690 <SPI_EndRxTxTransaction>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2220      	movs	r2, #32
 800940c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009416:	2300      	movs	r3, #0
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	77fb      	strb	r3, [r7, #31]
 8009438:	e003      	b.n	8009442 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800944a:	7ffb      	ldrb	r3, [r7, #31]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	4613      	mov	r3, r2
 8009462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009464:	f7fb fa3e 	bl	80048e4 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4413      	add	r3, r2
 8009472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009474:	f7fb fa36 	bl	80048e4 <HAL_GetTick>
 8009478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800947a:	4b39      	ldr	r3, [pc, #228]	@ (8009560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	015b      	lsls	r3, r3, #5
 8009480:	0d1b      	lsrs	r3, r3, #20
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	fb02 f303 	mul.w	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800948a:	e054      	b.n	8009536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d050      	beq.n	8009536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009494:	f7fb fa26 	bl	80048e4 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d902      	bls.n	80094aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d13d      	bne.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094c2:	d111      	bne.n	80094e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094cc:	d004      	beq.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d6:	d107      	bne.n	80094e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f0:	d10f      	bne.n	8009512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e017      	b.n	8009556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3b01      	subs	r3, #1
 8009534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4013      	ands	r3, r2
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	bf0c      	ite	eq
 8009546:	2301      	moveq	r3, #1
 8009548:	2300      	movne	r3, #0
 800954a:	b2db      	uxtb	r3, r3
 800954c:	461a      	mov	r2, r3
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	429a      	cmp	r2, r3
 8009552:	d19b      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20000004 	.word	0x20000004

08009564 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08a      	sub	sp, #40	@ 0x28
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009576:	f7fb f9b5 	bl	80048e4 <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	4413      	add	r3, r2
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009586:	f7fb f9ad 	bl	80048e4 <HAL_GetTick>
 800958a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	330c      	adds	r3, #12
 8009592:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009594:	4b3d      	ldr	r3, [pc, #244]	@ (800968c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	00da      	lsls	r2, r3, #3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a6:	fb02 f303 	mul.w	r3, r2, r3
 80095aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80095ac:	e060      	b.n	8009670 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80095b4:	d107      	bne.n	80095c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d050      	beq.n	8009670 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095ce:	f7fb f989 	bl	80048e4 <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095da:	429a      	cmp	r2, r3
 80095dc:	d902      	bls.n	80095e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d13d      	bne.n	8009660 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095fc:	d111      	bne.n	8009622 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009606:	d004      	beq.n	8009612 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009610:	d107      	bne.n	8009622 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009620:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800962a:	d10f      	bne.n	800964c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800964a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e010      	b.n	8009682 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	3b01      	subs	r3, #1
 800966e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	4013      	ands	r3, r2
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d196      	bne.n	80095ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3728      	adds	r7, #40	@ 0x28
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000004 	.word	0x20000004

08009690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af02      	add	r7, sp, #8
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff ff5b 	bl	8009564 <SPI_WaitFifoStateUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d007      	beq.n	80096c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096b8:	f043 0220 	orr.w	r2, r3, #32
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e027      	b.n	8009714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	2180      	movs	r1, #128	@ 0x80
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff fec0 	bl	8009454 <SPI_WaitFlagStateUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096de:	f043 0220 	orr.w	r2, r3, #32
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e014      	b.n	8009714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff ff34 	bl	8009564 <SPI_WaitFifoStateUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009706:	f043 0220 	orr.w	r2, r3, #32
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e000      	b.n	8009714 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e049      	b.n	80097c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fa f918 	bl	8003978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f000 fae0 	bl	8009d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d001      	beq.n	80097e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e04c      	b.n	800987e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a26      	ldr	r2, [pc, #152]	@ (800988c <HAL_TIM_Base_Start+0xc0>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d022      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097fe:	d01d      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a22      	ldr	r2, [pc, #136]	@ (8009890 <HAL_TIM_Base_Start+0xc4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d018      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a21      	ldr	r2, [pc, #132]	@ (8009894 <HAL_TIM_Base_Start+0xc8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d013      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a1f      	ldr	r2, [pc, #124]	@ (8009898 <HAL_TIM_Base_Start+0xcc>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00e      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1e      	ldr	r2, [pc, #120]	@ (800989c <HAL_TIM_Base_Start+0xd0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d009      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a1c      	ldr	r2, [pc, #112]	@ (80098a0 <HAL_TIM_Base_Start+0xd4>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d004      	beq.n	800983c <HAL_TIM_Base_Start+0x70>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a1b      	ldr	r2, [pc, #108]	@ (80098a4 <HAL_TIM_Base_Start+0xd8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d115      	bne.n	8009868 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	4b19      	ldr	r3, [pc, #100]	@ (80098a8 <HAL_TIM_Base_Start+0xdc>)
 8009844:	4013      	ands	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b06      	cmp	r3, #6
 800984c:	d015      	beq.n	800987a <HAL_TIM_Base_Start+0xae>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009854:	d011      	beq.n	800987a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009866:	e008      	b.n	800987a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e000      	b.n	800987c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	40012c00 	.word	0x40012c00
 8009890:	40000400 	.word	0x40000400
 8009894:	40000800 	.word	0x40000800
 8009898:	40000c00 	.word	0x40000c00
 800989c:	40013400 	.word	0x40013400
 80098a0:	40014000 	.word	0x40014000
 80098a4:	40015000 	.word	0x40015000
 80098a8:	00010007 	.word	0x00010007

080098ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6a1a      	ldr	r2, [r3, #32]
 80098ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10f      	bne.n	80098e4 <HAL_TIM_Base_Stop+0x38>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	f244 4344 	movw	r3, #17476	@ 0x4444
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <HAL_TIM_Base_Stop+0x38>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0201 	bic.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e049      	b.n	80099a0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f841 	bl	80099a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3304      	adds	r3, #4
 8009936:	4619      	mov	r1, r3
 8009938:	4610      	mov	r0, r2
 800993a:	f000 f9f1 	bl	8009d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_TIM_IC_ConfigChannel+0x1e>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e088      	b.n	8009aec <HAL_TIM_IC_ConfigChannel+0x130>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11b      	bne.n	8009a20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80099f8:	f000 fa46 	bl	8009e88 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 020c 	bic.w	r2, r2, #12
 8009a0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6999      	ldr	r1, [r3, #24]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	619a      	str	r2, [r3, #24]
 8009a1e:	e060      	b.n	8009ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d11c      	bne.n	8009a60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009a36:	f000 faca 	bl	8009fce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6999      	ldr	r1, [r3, #24]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	021a      	lsls	r2, r3, #8
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	619a      	str	r2, [r3, #24]
 8009a5e:	e040      	b.n	8009ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d11b      	bne.n	8009a9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009a76:	f000 fb17 	bl	800a0a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 020c 	bic.w	r2, r2, #12
 8009a88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69d9      	ldr	r1, [r3, #28]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	61da      	str	r2, [r3, #28]
 8009a9c:	e021      	b.n	8009ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b0c      	cmp	r3, #12
 8009aa2:	d11c      	bne.n	8009ade <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009ab4:	f000 fb34 	bl	800a120 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69da      	ldr	r2, [r3, #28]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009ac6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69d9      	ldr	r1, [r3, #28]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	021a      	lsls	r2, r3, #8
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	61da      	str	r2, [r3, #28]
 8009adc:	e001      	b.n	8009ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_TIM_ConfigClockSource+0x1c>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e0f6      	b.n	8009cfe <HAL_TIM_ConfigClockSource+0x20a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009b2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a6f      	ldr	r2, [pc, #444]	@ (8009d08 <HAL_TIM_ConfigClockSource+0x214>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f000 80c1 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009b50:	4a6d      	ldr	r2, [pc, #436]	@ (8009d08 <HAL_TIM_ConfigClockSource+0x214>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f200 80c6 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b58:	4a6c      	ldr	r2, [pc, #432]	@ (8009d0c <HAL_TIM_ConfigClockSource+0x218>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f000 80b9 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009b60:	4a6a      	ldr	r2, [pc, #424]	@ (8009d0c <HAL_TIM_ConfigClockSource+0x218>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	f200 80be 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b68:	4a69      	ldr	r2, [pc, #420]	@ (8009d10 <HAL_TIM_ConfigClockSource+0x21c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	f000 80b1 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009b70:	4a67      	ldr	r2, [pc, #412]	@ (8009d10 <HAL_TIM_ConfigClockSource+0x21c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	f200 80b6 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b78:	4a66      	ldr	r2, [pc, #408]	@ (8009d14 <HAL_TIM_ConfigClockSource+0x220>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	f000 80a9 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009b80:	4a64      	ldr	r2, [pc, #400]	@ (8009d14 <HAL_TIM_ConfigClockSource+0x220>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f200 80ae 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b88:	4a63      	ldr	r2, [pc, #396]	@ (8009d18 <HAL_TIM_ConfigClockSource+0x224>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f000 80a1 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009b90:	4a61      	ldr	r2, [pc, #388]	@ (8009d18 <HAL_TIM_ConfigClockSource+0x224>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	f200 80a6 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b98:	4a60      	ldr	r2, [pc, #384]	@ (8009d1c <HAL_TIM_ConfigClockSource+0x228>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	f000 8099 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8009d1c <HAL_TIM_ConfigClockSource+0x228>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f200 809e 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ba8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009bac:	f000 8091 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009bb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009bb4:	f200 8096 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bbc:	f000 8089 	beq.w	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009bc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bc4:	f200 808e 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bcc:	d03e      	beq.n	8009c4c <HAL_TIM_ConfigClockSource+0x158>
 8009bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd2:	f200 8087 	bhi.w	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bda:	f000 8086 	beq.w	8009cea <HAL_TIM_ConfigClockSource+0x1f6>
 8009bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009be2:	d87f      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009be4:	2b70      	cmp	r3, #112	@ 0x70
 8009be6:	d01a      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0x12a>
 8009be8:	2b70      	cmp	r3, #112	@ 0x70
 8009bea:	d87b      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bec:	2b60      	cmp	r3, #96	@ 0x60
 8009bee:	d050      	beq.n	8009c92 <HAL_TIM_ConfigClockSource+0x19e>
 8009bf0:	2b60      	cmp	r3, #96	@ 0x60
 8009bf2:	d877      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bf4:	2b50      	cmp	r3, #80	@ 0x50
 8009bf6:	d03c      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x17e>
 8009bf8:	2b50      	cmp	r3, #80	@ 0x50
 8009bfa:	d873      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bfc:	2b40      	cmp	r3, #64	@ 0x40
 8009bfe:	d058      	beq.n	8009cb2 <HAL_TIM_ConfigClockSource+0x1be>
 8009c00:	2b40      	cmp	r3, #64	@ 0x40
 8009c02:	d86f      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c04:	2b30      	cmp	r3, #48	@ 0x30
 8009c06:	d064      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c08:	2b30      	cmp	r3, #48	@ 0x30
 8009c0a:	d86b      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	d060      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	d867      	bhi.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d05c      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c18:	2b10      	cmp	r3, #16
 8009c1a:	d05a      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c1c:	e062      	b.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c2e:	f000 fad1 	bl	800a1d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	609a      	str	r2, [r3, #8]
      break;
 8009c4a:	e04f      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c5c:	f000 faba 	bl	800a1d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c6e:	609a      	str	r2, [r3, #8]
      break;
 8009c70:	e03c      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f000 f976 	bl	8009f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2150      	movs	r1, #80	@ 0x50
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fa85 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 8009c90:	e02c      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f000 f9d2 	bl	800a048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2160      	movs	r1, #96	@ 0x60
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fa75 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 8009cb0:	e01c      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f000 f956 	bl	8009f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2140      	movs	r1, #64	@ 0x40
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fa65 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 8009cd0:	e00c      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f000 fa5c 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 8009ce2:	e003      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce8:	e000      	b.n	8009cec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	00100070 	.word	0x00100070
 8009d0c:	00100060 	.word	0x00100060
 8009d10:	00100050 	.word	0x00100050
 8009d14:	00100040 	.word	0x00100040
 8009d18:	00100030 	.word	0x00100030
 8009d1c:	00100020 	.word	0x00100020

08009d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a4c      	ldr	r2, [pc, #304]	@ (8009e64 <TIM_Base_SetConfig+0x144>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d017      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3e:	d013      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a49      	ldr	r2, [pc, #292]	@ (8009e68 <TIM_Base_SetConfig+0x148>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00f      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a48      	ldr	r2, [pc, #288]	@ (8009e6c <TIM_Base_SetConfig+0x14c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a47      	ldr	r2, [pc, #284]	@ (8009e70 <TIM_Base_SetConfig+0x150>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d007      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a46      	ldr	r2, [pc, #280]	@ (8009e74 <TIM_Base_SetConfig+0x154>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_Base_SetConfig+0x48>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a45      	ldr	r2, [pc, #276]	@ (8009e78 <TIM_Base_SetConfig+0x158>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d108      	bne.n	8009d7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a39      	ldr	r2, [pc, #228]	@ (8009e64 <TIM_Base_SetConfig+0x144>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d023      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d88:	d01f      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a36      	ldr	r2, [pc, #216]	@ (8009e68 <TIM_Base_SetConfig+0x148>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01b      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a35      	ldr	r2, [pc, #212]	@ (8009e6c <TIM_Base_SetConfig+0x14c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d017      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a34      	ldr	r2, [pc, #208]	@ (8009e70 <TIM_Base_SetConfig+0x150>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d013      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a33      	ldr	r2, [pc, #204]	@ (8009e74 <TIM_Base_SetConfig+0x154>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00f      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a33      	ldr	r2, [pc, #204]	@ (8009e7c <TIM_Base_SetConfig+0x15c>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00b      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a32      	ldr	r2, [pc, #200]	@ (8009e80 <TIM_Base_SetConfig+0x160>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d007      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a31      	ldr	r2, [pc, #196]	@ (8009e84 <TIM_Base_SetConfig+0x164>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d003      	beq.n	8009dca <TIM_Base_SetConfig+0xaa>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009e78 <TIM_Base_SetConfig+0x158>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d108      	bne.n	8009ddc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a18      	ldr	r2, [pc, #96]	@ (8009e64 <TIM_Base_SetConfig+0x144>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d013      	beq.n	8009e30 <TIM_Base_SetConfig+0x110>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8009e74 <TIM_Base_SetConfig+0x154>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <TIM_Base_SetConfig+0x110>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a1a      	ldr	r2, [pc, #104]	@ (8009e7c <TIM_Base_SetConfig+0x15c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <TIM_Base_SetConfig+0x110>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a19      	ldr	r2, [pc, #100]	@ (8009e80 <TIM_Base_SetConfig+0x160>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_Base_SetConfig+0x110>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a18      	ldr	r2, [pc, #96]	@ (8009e84 <TIM_Base_SetConfig+0x164>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_Base_SetConfig+0x110>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a13      	ldr	r2, [pc, #76]	@ (8009e78 <TIM_Base_SetConfig+0x158>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d103      	bne.n	8009e38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	691a      	ldr	r2, [r3, #16]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d105      	bne.n	8009e56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f023 0201 	bic.w	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	611a      	str	r2, [r3, #16]
  }
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	40012c00 	.word	0x40012c00
 8009e68:	40000400 	.word	0x40000400
 8009e6c:	40000800 	.word	0x40000800
 8009e70:	40000c00 	.word	0x40000c00
 8009e74:	40013400 	.word	0x40013400
 8009e78:	40015000 	.word	0x40015000
 8009e7c:	40014000 	.word	0x40014000
 8009e80:	40014400 	.word	0x40014400
 8009e84:	40014800 	.word	0x40014800

08009e88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	f023 0201 	bic.w	r2, r3, #1
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4a28      	ldr	r2, [pc, #160]	@ (8009f54 <TIM_TI1_SetConfig+0xcc>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d01b      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ebc:	d017      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4a25      	ldr	r2, [pc, #148]	@ (8009f58 <TIM_TI1_SetConfig+0xd0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4a24      	ldr	r2, [pc, #144]	@ (8009f5c <TIM_TI1_SetConfig+0xd4>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00f      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4a23      	ldr	r2, [pc, #140]	@ (8009f60 <TIM_TI1_SetConfig+0xd8>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00b      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4a22      	ldr	r2, [pc, #136]	@ (8009f64 <TIM_TI1_SetConfig+0xdc>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d007      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a21      	ldr	r2, [pc, #132]	@ (8009f68 <TIM_TI1_SetConfig+0xe0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d003      	beq.n	8009eee <TIM_TI1_SetConfig+0x66>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4a20      	ldr	r2, [pc, #128]	@ (8009f6c <TIM_TI1_SetConfig+0xe4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d101      	bne.n	8009ef2 <TIM_TI1_SetConfig+0x6a>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <TIM_TI1_SetConfig+0x6c>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d008      	beq.n	8009f0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e003      	b.n	8009f12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f043 0301 	orr.w	r3, r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f023 030a 	bic.w	r3, r3, #10
 8009f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f003 030a 	and.w	r3, r3, #10
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	621a      	str	r2, [r3, #32]
}
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40012c00 	.word	0x40012c00
 8009f58:	40000400 	.word	0x40000400
 8009f5c:	40000800 	.word	0x40000800
 8009f60:	40000c00 	.word	0x40000c00
 8009f64:	40013400 	.word	0x40013400
 8009f68:	40014000 	.word	0x40014000
 8009f6c:	40015000 	.word	0x40015000

08009f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	f023 0201 	bic.w	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f023 030a 	bic.w	r3, r3, #10
 8009fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f023 0210 	bic.w	r2, r3, #16
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a00c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	b29b      	uxth	r3, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a020:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	621a      	str	r2, [r3, #32]
}
 800a03c:	bf00      	nop
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f023 0210 	bic.w	r2, r3, #16
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	031b      	lsls	r3, r3, #12
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a084:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	621a      	str	r2, [r3, #32]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f023 0303 	bic.w	r3, r3, #3
 800a0d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	011b      	lsls	r3, r3, #4
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a0f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	621a      	str	r2, [r3, #32]
}
 800a114:	bf00      	nop
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a14c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a15e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	031b      	lsls	r3, r3, #12
 800a164:	b29b      	uxth	r3, r3
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	4313      	orrs	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a172:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	031b      	lsls	r3, r3, #12
 800a178:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	621a      	str	r2, [r3, #32]
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a1b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	f043 0307 	orr.w	r3, r3, #7
 800a1c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	609a      	str	r2, [r3, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	021a      	lsls	r2, r3, #8
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	609a      	str	r2, [r3, #8]
}
 800a208:	bf00      	nop
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a228:	2302      	movs	r3, #2
 800a22a:	e074      	b.n	800a316 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a34      	ldr	r2, [pc, #208]	@ (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a33      	ldr	r2, [pc, #204]	@ (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a31      	ldr	r2, [pc, #196]	@ (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d108      	bne.n	800a27c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a21      	ldr	r2, [pc, #132]	@ (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d022      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ac:	d01d      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a15      	ldr	r2, [pc, #84]	@ (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a18      	ldr	r2, [pc, #96]	@ (800a33c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a11      	ldr	r2, [pc, #68]	@ (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10c      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40012c00 	.word	0x40012c00
 800a328:	40013400 	.word	0x40013400
 800a32c:	40015000 	.word	0x40015000
 800a330:	40000400 	.word	0x40000400
 800a334:	40000800 	.word	0x40000800
 800a338:	40000c00 	.word	0x40000c00
 800a33c:	40014000 	.word	0x40014000

0800a340 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_TIMEx_TISelection+0x1e>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e073      	b.n	800a446 <HAL_TIMEx_TISelection+0x106>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b0c      	cmp	r3, #12
 800a36a:	d864      	bhi.n	800a436 <HAL_TIMEx_TISelection+0xf6>
 800a36c:	a201      	add	r2, pc, #4	@ (adr r2, 800a374 <HAL_TIMEx_TISelection+0x34>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a3a9 	.word	0x0800a3a9
 800a378:	0800a437 	.word	0x0800a437
 800a37c:	0800a437 	.word	0x0800a437
 800a380:	0800a437 	.word	0x0800a437
 800a384:	0800a3f5 	.word	0x0800a3f5
 800a388:	0800a437 	.word	0x0800a437
 800a38c:	0800a437 	.word	0x0800a437
 800a390:	0800a437 	.word	0x0800a437
 800a394:	0800a40b 	.word	0x0800a40b
 800a398:	0800a437 	.word	0x0800a437
 800a39c:	0800a437 	.word	0x0800a437
 800a3a0:	0800a437 	.word	0x0800a437
 800a3a4:	0800a421 	.word	0x0800a421
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ae:	f023 010f 	bic.w	r1, r3, #15
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a24      	ldr	r2, [pc, #144]	@ (800a454 <HAL_TIMEx_TISelection+0x114>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_TIMEx_TISelection+0x90>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a23      	ldr	r2, [pc, #140]	@ (800a458 <HAL_TIMEx_TISelection+0x118>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d108      	bne.n	800a3e2 <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 800a3e0:	e02c      	b.n	800a43c <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a3f2:	e023      	b.n	800a43c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3fa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	430a      	orrs	r2, r1
 800a406:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a408:	e018      	b.n	800a43c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a410:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a41e:	e00d      	b.n	800a43c <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a426:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	430a      	orrs	r2, r1
 800a432:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800a434:	e002      	b.n	800a43c <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	75fb      	strb	r3, [r7, #23]
      break;
 800a43a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
}
 800a446:	4618      	mov	r0, r3
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40014400 	.word	0x40014400
 800a458:	40014800 	.word	0x40014800

0800a45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e042      	b.n	800a4f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a474:	2b00      	cmp	r3, #0
 800a476:	d106      	bne.n	800a486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7f9 fb15 	bl	8003ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2224      	movs	r2, #36	@ 0x24
 800a48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fe8e 	bl	800b1c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fb8f 	bl	800abd0 <UART_SetConfig>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e01b      	b.n	800a4f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 ff0d 	bl	800b30c <UART_CheckIdleState>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b0ba      	sub	sp, #232	@ 0xe8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a526:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a52a:	4013      	ands	r3, r2
 800a52c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a534:	2b00      	cmp	r3, #0
 800a536:	d11b      	bne.n	800a570 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b00      	cmp	r3, #0
 800a542:	d015      	beq.n	800a570 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d105      	bne.n	800a55c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d009      	beq.n	800a570 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 8300 	beq.w	800ab66 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
      }
      return;
 800a56e:	e2fa      	b.n	800ab66 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8123 	beq.w	800a7c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a57a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a57e:	4b8d      	ldr	r3, [pc, #564]	@ (800a7b4 <HAL_UART_IRQHandler+0x2b8>)
 800a580:	4013      	ands	r3, r2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a58a:	4b8b      	ldr	r3, [pc, #556]	@ (800a7b8 <HAL_UART_IRQHandler+0x2bc>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 8116 	beq.w	800a7c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d011      	beq.n	800a5c4 <HAL_UART_IRQHandler+0xc8>
 800a5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ba:	f043 0201 	orr.w	r2, r3, #1
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d011      	beq.n	800a5f4 <HAL_UART_IRQHandler+0xf8>
 800a5d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ea:	f043 0204 	orr.w	r2, r3, #4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d011      	beq.n	800a624 <HAL_UART_IRQHandler+0x128>
 800a600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00b      	beq.n	800a624 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2204      	movs	r2, #4
 800a612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a61a:	f043 0202 	orr.w	r2, r3, #2
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d017      	beq.n	800a660 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a634:	f003 0320 	and.w	r3, r3, #32
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a63c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a640:	4b5c      	ldr	r3, [pc, #368]	@ (800a7b4 <HAL_UART_IRQHandler+0x2b8>)
 800a642:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2208      	movs	r2, #8
 800a64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a656:	f043 0208 	orr.w	r2, r3, #8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d012      	beq.n	800a692 <HAL_UART_IRQHandler+0x196>
 800a66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00c      	beq.n	800a692 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a688:	f043 0220 	orr.w	r2, r3, #32
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 8266 	beq.w	800ab6a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6a2:	f003 0320 	and.w	r3, r3, #32
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d013      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d007      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e6:	2b40      	cmp	r3, #64	@ 0x40
 800a6e8:	d005      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d054      	beq.n	800a7a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 f807 	bl	800b70a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a706:	2b40      	cmp	r3, #64	@ 0x40
 800a708:	d146      	bne.n	800a798 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a736:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a73a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1d9      	bne.n	800a70a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d017      	beq.n	800a790 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a766:	4a15      	ldr	r2, [pc, #84]	@ (800a7bc <HAL_UART_IRQHandler+0x2c0>)
 800a768:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a770:	4618      	mov	r0, r3
 800a772:	f7fc ff3f 	bl	80075f4 <HAL_DMA_Abort_IT>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d019      	beq.n	800a7b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a78a:	4610      	mov	r0, r2
 800a78c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78e:	e00f      	b.n	800a7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa13 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a796:	e00b      	b.n	800a7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fa0f 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a79e:	e007      	b.n	800a7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fa0b 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a7ae:	e1dc      	b.n	800ab6a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	bf00      	nop
    return;
 800a7b2:	e1da      	b.n	800ab6a <HAL_UART_IRQHandler+0x66e>
 800a7b4:	10000001 	.word	0x10000001
 800a7b8:	04000120 	.word	0x04000120
 800a7bc:	0800b9c1 	.word	0x0800b9c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	f040 8170 	bne.w	800aaaa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ce:	f003 0310 	and.w	r3, r3, #16
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 8169 	beq.w	800aaaa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7dc:	f003 0310 	and.w	r3, r3, #16
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 8162 	beq.w	800aaaa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2210      	movs	r2, #16
 800a7ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f8:	2b40      	cmp	r3, #64	@ 0x40
 800a7fa:	f040 80d8 	bne.w	800a9ae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a80c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80af 	beq.w	800a974 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a81c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a820:	429a      	cmp	r2, r3
 800a822:	f080 80a7 	bcs.w	800a974 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a82c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0320 	and.w	r3, r3, #32
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 8087 	bne.w	800a952 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a86e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a872:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a87a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1da      	bne.n	800a844 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3308      	adds	r3, #8
 800a894:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a89e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8a0:	f023 0301 	bic.w	r3, r3, #1
 800a8a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e1      	bne.n	800a88e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e3      	bne.n	800a8ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a91e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a920:	f023 0310 	bic.w	r3, r3, #16
 800a924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a932:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a934:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e4      	bne.n	800a910 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fc fdf8 	bl	8007542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a964:	b29b      	uxth	r3, r3
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	b29b      	uxth	r3, r3
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7f9 fb0b 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a972:	e0fc      	b.n	800ab6e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a97a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a97e:	429a      	cmp	r2, r3
 800a980:	f040 80f5 	bne.w	800ab6e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0320 	and.w	r3, r3, #32
 800a992:	2b20      	cmp	r3, #32
 800a994:	f040 80eb 	bne.w	800ab6e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7f9 faee 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
      return;
 800a9ac:	e0df      	b.n	800ab6e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80d1 	beq.w	800ab72 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a9d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80cc 	beq.w	800ab72 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e4      	bne.n	800a9da <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	623b      	str	r3, [r7, #32]
   return(result);
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa26:	f023 0301 	bic.w	r3, r3, #1
 800aa2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa38:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e1      	bne.n	800aa10 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f023 0310 	bic.w	r3, r3, #16
 800aa74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa82:	61fb      	str	r3, [r7, #28]
 800aa84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	69b9      	ldr	r1, [r7, #24]
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e4      	bne.n	800aa60 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7f9 fa70 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaa8:	e063      	b.n	800ab72 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <HAL_UART_IRQHandler+0x5d8>
 800aab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aaca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 ffb8 	bl	800ba42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aad2:	e051      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d014      	beq.n	800ab0a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d105      	bne.n	800aaf8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aaec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d008      	beq.n	800ab0a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d03a      	beq.n	800ab76 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
    }
    return;
 800ab08:	e035      	b.n	800ab76 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <HAL_UART_IRQHandler+0x62e>
 800ab16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 ff62 	bl	800b9ec <UART_EndTransmit_IT>
    return;
 800ab28:	e026      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <HAL_UART_IRQHandler+0x64e>
 800ab36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 ff91 	bl	800ba6a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab48:	e016      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d010      	beq.n	800ab78 <HAL_UART_IRQHandler+0x67c>
 800ab56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	da0c      	bge.n	800ab78 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 ff79 	bl	800ba56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab64:	e008      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab66:	bf00      	nop
 800ab68:	e006      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
    return;
 800ab6a:	bf00      	nop
 800ab6c:	e004      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab6e:	bf00      	nop
 800ab70:	e002      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
      return;
 800ab72:	bf00      	nop
 800ab74:	e000      	b.n	800ab78 <HAL_UART_IRQHandler+0x67c>
    return;
 800ab76:	bf00      	nop
  }
}
 800ab78:	37e8      	adds	r7, #232	@ 0xe8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop

0800ab80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd4:	b08c      	sub	sp, #48	@ 0x30
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	431a      	orrs	r2, r3
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	431a      	orrs	r2, r3
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4baa      	ldr	r3, [pc, #680]	@ (800aea8 <UART_SetConfig+0x2d8>)
 800ac00:	4013      	ands	r3, r2
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a9f      	ldr	r2, [pc, #636]	@ (800aeac <UART_SetConfig+0x2dc>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d004      	beq.n	800ac3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ac46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5a:	f023 010f 	bic.w	r1, r3, #15
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a90      	ldr	r2, [pc, #576]	@ (800aeb0 <UART_SetConfig+0x2e0>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d125      	bne.n	800acc0 <UART_SetConfig+0xf0>
 800ac74:	4b8f      	ldr	r3, [pc, #572]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7a:	f003 0303 	and.w	r3, r3, #3
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d81a      	bhi.n	800acb8 <UART_SetConfig+0xe8>
 800ac82:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <UART_SetConfig+0xb8>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800ac99 	.word	0x0800ac99
 800ac8c:	0800aca9 	.word	0x0800aca9
 800ac90:	0800aca1 	.word	0x0800aca1
 800ac94:	0800acb1 	.word	0x0800acb1
 800ac98:	2301      	movs	r3, #1
 800ac9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9e:	e116      	b.n	800aece <UART_SetConfig+0x2fe>
 800aca0:	2302      	movs	r3, #2
 800aca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca6:	e112      	b.n	800aece <UART_SetConfig+0x2fe>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acae:	e10e      	b.n	800aece <UART_SetConfig+0x2fe>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb6:	e10a      	b.n	800aece <UART_SetConfig+0x2fe>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acbe:	e106      	b.n	800aece <UART_SetConfig+0x2fe>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a7c      	ldr	r2, [pc, #496]	@ (800aeb8 <UART_SetConfig+0x2e8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d138      	bne.n	800ad3c <UART_SetConfig+0x16c>
 800acca:	4b7a      	ldr	r3, [pc, #488]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acd0:	f003 030c 	and.w	r3, r3, #12
 800acd4:	2b0c      	cmp	r3, #12
 800acd6:	d82d      	bhi.n	800ad34 <UART_SetConfig+0x164>
 800acd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <UART_SetConfig+0x110>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800ad15 	.word	0x0800ad15
 800ace4:	0800ad35 	.word	0x0800ad35
 800ace8:	0800ad35 	.word	0x0800ad35
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad25 	.word	0x0800ad25
 800acf4:	0800ad35 	.word	0x0800ad35
 800acf8:	0800ad35 	.word	0x0800ad35
 800acfc:	0800ad35 	.word	0x0800ad35
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad35 	.word	0x0800ad35
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1a:	e0d8      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad22:	e0d4      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad2a:	e0d0      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad32:	e0cc      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad3a:	e0c8      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a5e      	ldr	r2, [pc, #376]	@ (800aebc <UART_SetConfig+0x2ec>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d125      	bne.n	800ad92 <UART_SetConfig+0x1c2>
 800ad46:	4b5b      	ldr	r3, [pc, #364]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ad48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ad50:	2b30      	cmp	r3, #48	@ 0x30
 800ad52:	d016      	beq.n	800ad82 <UART_SetConfig+0x1b2>
 800ad54:	2b30      	cmp	r3, #48	@ 0x30
 800ad56:	d818      	bhi.n	800ad8a <UART_SetConfig+0x1ba>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d00a      	beq.n	800ad72 <UART_SetConfig+0x1a2>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d814      	bhi.n	800ad8a <UART_SetConfig+0x1ba>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <UART_SetConfig+0x19a>
 800ad64:	2b10      	cmp	r3, #16
 800ad66:	d008      	beq.n	800ad7a <UART_SetConfig+0x1aa>
 800ad68:	e00f      	b.n	800ad8a <UART_SetConfig+0x1ba>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad70:	e0ad      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad72:	2302      	movs	r3, #2
 800ad74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad78:	e0a9      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad7a:	2304      	movs	r3, #4
 800ad7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad80:	e0a5      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad82:	2308      	movs	r3, #8
 800ad84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad88:	e0a1      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad90:	e09d      	b.n	800aece <UART_SetConfig+0x2fe>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a4a      	ldr	r2, [pc, #296]	@ (800aec0 <UART_SetConfig+0x2f0>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d125      	bne.n	800ade8 <UART_SetConfig+0x218>
 800ad9c:	4b45      	ldr	r3, [pc, #276]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ad9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ada6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ada8:	d016      	beq.n	800add8 <UART_SetConfig+0x208>
 800adaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800adac:	d818      	bhi.n	800ade0 <UART_SetConfig+0x210>
 800adae:	2b80      	cmp	r3, #128	@ 0x80
 800adb0:	d00a      	beq.n	800adc8 <UART_SetConfig+0x1f8>
 800adb2:	2b80      	cmp	r3, #128	@ 0x80
 800adb4:	d814      	bhi.n	800ade0 <UART_SetConfig+0x210>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <UART_SetConfig+0x1f0>
 800adba:	2b40      	cmp	r3, #64	@ 0x40
 800adbc:	d008      	beq.n	800add0 <UART_SetConfig+0x200>
 800adbe:	e00f      	b.n	800ade0 <UART_SetConfig+0x210>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adc6:	e082      	b.n	800aece <UART_SetConfig+0x2fe>
 800adc8:	2302      	movs	r3, #2
 800adca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adce:	e07e      	b.n	800aece <UART_SetConfig+0x2fe>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add6:	e07a      	b.n	800aece <UART_SetConfig+0x2fe>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adde:	e076      	b.n	800aece <UART_SetConfig+0x2fe>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ade6:	e072      	b.n	800aece <UART_SetConfig+0x2fe>
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a35      	ldr	r2, [pc, #212]	@ (800aec4 <UART_SetConfig+0x2f4>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d12a      	bne.n	800ae48 <UART_SetConfig+0x278>
 800adf2:	4b30      	ldr	r3, [pc, #192]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae00:	d01a      	beq.n	800ae38 <UART_SetConfig+0x268>
 800ae02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae06:	d81b      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae0c:	d00c      	beq.n	800ae28 <UART_SetConfig+0x258>
 800ae0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae12:	d815      	bhi.n	800ae40 <UART_SetConfig+0x270>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <UART_SetConfig+0x250>
 800ae18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae1c:	d008      	beq.n	800ae30 <UART_SetConfig+0x260>
 800ae1e:	e00f      	b.n	800ae40 <UART_SetConfig+0x270>
 800ae20:	2300      	movs	r3, #0
 800ae22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae26:	e052      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae28:	2302      	movs	r3, #2
 800ae2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae2e:	e04e      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae30:	2304      	movs	r3, #4
 800ae32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae36:	e04a      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae38:	2308      	movs	r3, #8
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3e:	e046      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae40:	2310      	movs	r3, #16
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae46:	e042      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a17      	ldr	r2, [pc, #92]	@ (800aeac <UART_SetConfig+0x2dc>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d13a      	bne.n	800aec8 <UART_SetConfig+0x2f8>
 800ae52:	4b18      	ldr	r3, [pc, #96]	@ (800aeb4 <UART_SetConfig+0x2e4>)
 800ae54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae60:	d01a      	beq.n	800ae98 <UART_SetConfig+0x2c8>
 800ae62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae66:	d81b      	bhi.n	800aea0 <UART_SetConfig+0x2d0>
 800ae68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae6c:	d00c      	beq.n	800ae88 <UART_SetConfig+0x2b8>
 800ae6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae72:	d815      	bhi.n	800aea0 <UART_SetConfig+0x2d0>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <UART_SetConfig+0x2b0>
 800ae78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae7c:	d008      	beq.n	800ae90 <UART_SetConfig+0x2c0>
 800ae7e:	e00f      	b.n	800aea0 <UART_SetConfig+0x2d0>
 800ae80:	2300      	movs	r3, #0
 800ae82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae86:	e022      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae8e:	e01e      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae90:	2304      	movs	r3, #4
 800ae92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae96:	e01a      	b.n	800aece <UART_SetConfig+0x2fe>
 800ae98:	2308      	movs	r3, #8
 800ae9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9e:	e016      	b.n	800aece <UART_SetConfig+0x2fe>
 800aea0:	2310      	movs	r3, #16
 800aea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea6:	e012      	b.n	800aece <UART_SetConfig+0x2fe>
 800aea8:	cfff69f3 	.word	0xcfff69f3
 800aeac:	40008000 	.word	0x40008000
 800aeb0:	40013800 	.word	0x40013800
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	40004400 	.word	0x40004400
 800aebc:	40004800 	.word	0x40004800
 800aec0:	40004c00 	.word	0x40004c00
 800aec4:	40005000 	.word	0x40005000
 800aec8:	2310      	movs	r3, #16
 800aeca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4aae      	ldr	r2, [pc, #696]	@ (800b18c <UART_SetConfig+0x5bc>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	f040 8097 	bne.w	800b008 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aeda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d823      	bhi.n	800af2a <UART_SetConfig+0x35a>
 800aee2:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <UART_SetConfig+0x318>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af0d 	.word	0x0800af0d
 800aeec:	0800af2b 	.word	0x0800af2b
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af2b 	.word	0x0800af2b
 800aef8:	0800af1b 	.word	0x0800af1b
 800aefc:	0800af2b 	.word	0x0800af2b
 800af00:	0800af2b 	.word	0x0800af2b
 800af04:	0800af2b 	.word	0x0800af2b
 800af08:	0800af23 	.word	0x0800af23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af0c:	f7fd fdc2 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800af10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af12:	e010      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af14:	4b9e      	ldr	r3, [pc, #632]	@ (800b190 <UART_SetConfig+0x5c0>)
 800af16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af18:	e00d      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af1a:	f7fd fd4d 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800af1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af20:	e009      	b.n	800af36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af28:	e005      	b.n	800af36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8130 	beq.w	800b19e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af42:	4a94      	ldr	r2, [pc, #592]	@ (800b194 <UART_SetConfig+0x5c4>)
 800af44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af48:	461a      	mov	r2, r3
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	4613      	mov	r3, r2
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	4413      	add	r3, r2
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d305      	bcc.n	800af6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d903      	bls.n	800af76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af74:	e113      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	2200      	movs	r2, #0
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	60fa      	str	r2, [r7, #12]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af82:	4a84      	ldr	r2, [pc, #528]	@ (800b194 <UART_SetConfig+0x5c4>)
 800af84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2200      	movs	r2, #0
 800af8c:	603b      	str	r3, [r7, #0]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af98:	f7f5 fee2 	bl	8000d60 <__aeabi_uldivmod>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4610      	mov	r0, r2
 800afa2:	4619      	mov	r1, r3
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	020b      	lsls	r3, r1, #8
 800afae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afb2:	0202      	lsls	r2, r0, #8
 800afb4:	6979      	ldr	r1, [r7, #20]
 800afb6:	6849      	ldr	r1, [r1, #4]
 800afb8:	0849      	lsrs	r1, r1, #1
 800afba:	2000      	movs	r0, #0
 800afbc:	460c      	mov	r4, r1
 800afbe:	4605      	mov	r5, r0
 800afc0:	eb12 0804 	adds.w	r8, r2, r4
 800afc4:	eb43 0905 	adc.w	r9, r3, r5
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	469a      	mov	sl, r3
 800afd0:	4693      	mov	fp, r2
 800afd2:	4652      	mov	r2, sl
 800afd4:	465b      	mov	r3, fp
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f7f5 fec1 	bl	8000d60 <__aeabi_uldivmod>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4613      	mov	r3, r2
 800afe4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afec:	d308      	bcc.n	800b000 <UART_SetConfig+0x430>
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aff4:	d204      	bcs.n	800b000 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6a3a      	ldr	r2, [r7, #32]
 800affc:	60da      	str	r2, [r3, #12]
 800affe:	e0ce      	b.n	800b19e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b006:	e0ca      	b.n	800b19e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b010:	d166      	bne.n	800b0e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b016:	2b08      	cmp	r3, #8
 800b018:	d827      	bhi.n	800b06a <UART_SetConfig+0x49a>
 800b01a:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <UART_SetConfig+0x450>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b045 	.word	0x0800b045
 800b024:	0800b04d 	.word	0x0800b04d
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	0800b06b 	.word	0x0800b06b
 800b030:	0800b05b 	.word	0x0800b05b
 800b034:	0800b06b 	.word	0x0800b06b
 800b038:	0800b06b 	.word	0x0800b06b
 800b03c:	0800b06b 	.word	0x0800b06b
 800b040:	0800b063 	.word	0x0800b063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b044:	f7fd fd26 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800b048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b04a:	e014      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b04c:	f7fd fd38 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 800b050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b052:	e010      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b054:	4b4e      	ldr	r3, [pc, #312]	@ (800b190 <UART_SetConfig+0x5c0>)
 800b056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b058:	e00d      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b05a:	f7fd fcad 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800b05e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b060:	e009      	b.n	800b076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b068:	e005      	b.n	800b076 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8090 	beq.w	800b19e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	4a44      	ldr	r2, [pc, #272]	@ (800b194 <UART_SetConfig+0x5c4>)
 800b084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b088:	461a      	mov	r2, r3
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b090:	005a      	lsls	r2, r3, #1
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	085b      	lsrs	r3, r3, #1
 800b098:	441a      	add	r2, r3
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b0f      	cmp	r3, #15
 800b0a8:	d916      	bls.n	800b0d8 <UART_SetConfig+0x508>
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b0:	d212      	bcs.n	800b0d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f023 030f 	bic.w	r3, r3, #15
 800b0ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	8bfa      	ldrh	r2, [r7, #30]
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	e062      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0de:	e05e      	b.n	800b19e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d828      	bhi.n	800b13a <UART_SetConfig+0x56a>
 800b0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <UART_SetConfig+0x520>)
 800b0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ee:	bf00      	nop
 800b0f0:	0800b115 	.word	0x0800b115
 800b0f4:	0800b11d 	.word	0x0800b11d
 800b0f8:	0800b125 	.word	0x0800b125
 800b0fc:	0800b13b 	.word	0x0800b13b
 800b100:	0800b12b 	.word	0x0800b12b
 800b104:	0800b13b 	.word	0x0800b13b
 800b108:	0800b13b 	.word	0x0800b13b
 800b10c:	0800b13b 	.word	0x0800b13b
 800b110:	0800b133 	.word	0x0800b133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b114:	f7fd fcbe 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800b118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b11a:	e014      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b11c:	f7fd fcd0 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 800b120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b122:	e010      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b124:	4b1a      	ldr	r3, [pc, #104]	@ (800b190 <UART_SetConfig+0x5c0>)
 800b126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b128:	e00d      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b12a:	f7fd fc45 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800b12e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b130:	e009      	b.n	800b146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b138:	e005      	b.n	800b146 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b144:	bf00      	nop
    }

    if (pclk != 0U)
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d028      	beq.n	800b19e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b150:	4a10      	ldr	r2, [pc, #64]	@ (800b194 <UART_SetConfig+0x5c4>)
 800b152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b156:	461a      	mov	r2, r3
 800b158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	441a      	add	r2, r3
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	2b0f      	cmp	r3, #15
 800b174:	d910      	bls.n	800b198 <UART_SetConfig+0x5c8>
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b17c:	d20c      	bcs.n	800b198 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	b29a      	uxth	r2, r3
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60da      	str	r2, [r3, #12]
 800b188:	e009      	b.n	800b19e <UART_SetConfig+0x5ce>
 800b18a:	bf00      	nop
 800b18c:	40008000 	.word	0x40008000
 800b190:	00f42400 	.word	0x00f42400
 800b194:	0800d3ac 	.word	0x0800d3ac
      }
      else
      {
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3730      	adds	r7, #48	@ 0x30
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b1c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d4:	f003 0308 	and.w	r3, r3, #8
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00a      	beq.n	800b1f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00a      	beq.n	800b214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	430a      	orrs	r2, r1
 800b212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23a:	f003 0304 	and.w	r3, r3, #4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	430a      	orrs	r2, r1
 800b256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00a      	beq.n	800b27a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01a      	beq.n	800b2de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2c6:	d10a      	bne.n	800b2de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b098      	sub	sp, #96	@ 0x60
 800b310:	af02      	add	r7, sp, #8
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b31c:	f7f9 fae2 	bl	80048e4 <HAL_GetTick>
 800b320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0308 	and.w	r3, r3, #8
 800b32c:	2b08      	cmp	r3, #8
 800b32e:	d12f      	bne.n	800b390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b338:	2200      	movs	r2, #0
 800b33a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f88e 	bl	800b460 <UART_WaitOnFlagUntilTimeout>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d022      	beq.n	800b390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	e853 3f00 	ldrex	r3, [r3]
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b35e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	461a      	mov	r2, r3
 800b366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b368:	647b      	str	r3, [r7, #68]	@ 0x44
 800b36a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b36e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b370:	e841 2300 	strex	r3, r2, [r1]
 800b374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e6      	bne.n	800b34a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2220      	movs	r2, #32
 800b380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e063      	b.n	800b458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d149      	bne.n	800b432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b39e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f857 	bl	800b460 <UART_WaitOnFlagUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d03c      	beq.n	800b432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e6      	bne.n	800b3b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3308      	adds	r3, #8
 800b408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b40a:	61fa      	str	r2, [r7, #28]
 800b40c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	69b9      	ldr	r1, [r7, #24]
 800b410:	69fa      	ldr	r2, [r7, #28]
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	617b      	str	r3, [r7, #20]
   return(result);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e5      	bne.n	800b3ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e012      	b.n	800b458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3758      	adds	r7, #88	@ 0x58
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	4613      	mov	r3, r2
 800b46e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b470:	e04f      	b.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b478:	d04b      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b47a:	f7f9 fa33 	bl	80048e4 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	429a      	cmp	r2, r3
 800b488:	d302      	bcc.n	800b490 <UART_WaitOnFlagUntilTimeout+0x30>
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b490:	2303      	movs	r3, #3
 800b492:	e04e      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0304 	and.w	r3, r3, #4
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d037      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b80      	cmp	r3, #128	@ 0x80
 800b4a6:	d034      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2b40      	cmp	r3, #64	@ 0x40
 800b4ac:	d031      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	f003 0308 	and.w	r3, r3, #8
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	d110      	bne.n	800b4de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f000 f920 	bl	800b70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e029      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ec:	d111      	bne.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f906 	bl	800b70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2220      	movs	r2, #32
 800b502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e00f      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69da      	ldr	r2, [r3, #28]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4013      	ands	r3, r2
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	429a      	cmp	r2, r3
 800b520:	bf0c      	ite	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	2300      	movne	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d0a0      	beq.n	800b472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b096      	sub	sp, #88	@ 0x58
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2222      	movs	r2, #34	@ 0x22
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d02d      	beq.n	800b5ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b578:	4a40      	ldr	r2, [pc, #256]	@ (800b67c <UART_Start_Receive_DMA+0x140>)
 800b57a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b582:	4a3f      	ldr	r2, [pc, #252]	@ (800b680 <UART_Start_Receive_DMA+0x144>)
 800b584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b58c:	4a3d      	ldr	r2, [pc, #244]	@ (800b684 <UART_Start_Receive_DMA+0x148>)
 800b58e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b596:	2200      	movs	r2, #0
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	f7fb ff4c 	bl	800744c <HAL_DMA_Start_IT>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d009      	beq.n	800b5ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2210      	movs	r2, #16
 800b5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e051      	b.n	800b672 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d018      	beq.n	800b608 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5fc:	e841 2300 	strex	r3, r2, [r1]
 800b600:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e6      	bne.n	800b5d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3308      	adds	r3, #8
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3308      	adds	r3, #8
 800b626:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b628:	637a      	str	r2, [r7, #52]	@ 0x34
 800b62a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b62e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e5      	bne.n	800b608 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	613b      	str	r3, [r7, #16]
   return(result);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b65c:	623a      	str	r2, [r7, #32]
 800b65e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	69f9      	ldr	r1, [r7, #28]
 800b662:	6a3a      	ldr	r2, [r7, #32]
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	61bb      	str	r3, [r7, #24]
   return(result);
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3758      	adds	r7, #88	@ 0x58
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800b7d7 	.word	0x0800b7d7
 800b680:	0800b903 	.word	0x0800b903
 800b684:	0800b941 	.word	0x0800b941

0800b688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b688:	b480      	push	{r7}
 800b68a:	b08f      	sub	sp, #60	@ 0x3c
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6b6:	e841 2300 	strex	r3, r2, [r1]
 800b6ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e6      	bne.n	800b690 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b6d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e2:	61ba      	str	r2, [r7, #24]
 800b6e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6979      	ldr	r1, [r7, #20]
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e5      	bne.n	800b6c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b6fe:	bf00      	nop
 800b700:	373c      	adds	r7, #60	@ 0x3c
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b095      	sub	sp, #84	@ 0x54
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b730:	643b      	str	r3, [r7, #64]	@ 0x40
 800b732:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e6      	bne.n	800b712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3308      	adds	r3, #8
 800b74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	61fb      	str	r3, [r7, #28]
   return(result);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b76a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e3      	bne.n	800b744 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b780:	2b01      	cmp	r3, #1
 800b782:	d118      	bne.n	800b7b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	60bb      	str	r3, [r7, #8]
   return(result);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f023 0310 	bic.w	r3, r3, #16
 800b798:	647b      	str	r3, [r7, #68]	@ 0x44
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a2:	61bb      	str	r3, [r7, #24]
 800b7a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	6979      	ldr	r1, [r7, #20]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e6      	bne.n	800b784 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7ca:	bf00      	nop
 800b7cc:	3754      	adds	r7, #84	@ 0x54
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b09c      	sub	sp, #112	@ 0x70
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0320 	and.w	r3, r3, #32
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d171      	bne.n	800b8d6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b7f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b80a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b80e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b818:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b81a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b81e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e6      	bne.n	800b7fa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b82c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3308      	adds	r3, #8
 800b832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b836:	e853 3f00 	ldrex	r3, [r3]
 800b83a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b83e:	f023 0301 	bic.w	r3, r3, #1
 800b842:	667b      	str	r3, [r7, #100]	@ 0x64
 800b844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3308      	adds	r3, #8
 800b84a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b84c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b84e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e5      	bne.n	800b82c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3308      	adds	r3, #8
 800b866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86a:	e853 3f00 	ldrex	r3, [r3]
 800b86e:	623b      	str	r3, [r7, #32]
   return(result);
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b876:	663b      	str	r3, [r7, #96]	@ 0x60
 800b878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3308      	adds	r3, #8
 800b87e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b880:	633a      	str	r2, [r7, #48]	@ 0x30
 800b882:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b888:	e841 2300 	strex	r3, r2, [r1]
 800b88c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1e5      	bne.n	800b860 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b896:	2220      	movs	r2, #32
 800b898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b89c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d118      	bne.n	800b8d6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f023 0310 	bic.w	r3, r3, #16
 800b8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	69b9      	ldr	r1, [r7, #24]
 800b8c8:	69fa      	ldr	r2, [r7, #28]
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e6      	bne.n	800b8a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d8:	2200      	movs	r2, #0
 800b8da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d107      	bne.n	800b8f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8ee:	f7f8 fb4b 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8f2:	e002      	b.n	800b8fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b8f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8f6:	f7ff f94d 	bl	800ab94 <HAL_UART_RxCpltCallback>
}
 800b8fa:	bf00      	nop
 800b8fc:	3770      	adds	r7, #112	@ 0x70
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2201      	movs	r2, #1
 800b914:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d109      	bne.n	800b932 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	b29b      	uxth	r3, r3
 800b928:	4619      	mov	r1, r3
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f7f8 fb2c 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b930:	e002      	b.n	800b938 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7ff f938 	bl	800aba8 <HAL_UART_RxHalfCpltCallback>
}
 800b938:	bf00      	nop
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b954:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b968:	2b80      	cmp	r3, #128	@ 0x80
 800b96a:	d109      	bne.n	800b980 <UART_DMAError+0x40>
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b21      	cmp	r3, #33	@ 0x21
 800b970:	d106      	bne.n	800b980 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2200      	movs	r2, #0
 800b976:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b97a:	6978      	ldr	r0, [r7, #20]
 800b97c:	f7ff fe84 	bl	800b688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98a:	2b40      	cmp	r3, #64	@ 0x40
 800b98c:	d109      	bne.n	800b9a2 <UART_DMAError+0x62>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b22      	cmp	r3, #34	@ 0x22
 800b992:	d106      	bne.n	800b9a2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2200      	movs	r2, #0
 800b998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b99c:	6978      	ldr	r0, [r7, #20]
 800b99e:	f7ff feb4 	bl	800b70a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a8:	f043 0210 	orr.w	r2, r3, #16
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7ff f902 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9b8:	bf00      	nop
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff f8ec 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e4:	bf00      	nop
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba08:	61fb      	str	r3, [r7, #28]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	61bb      	str	r3, [r7, #24]
 800ba14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba16:	6979      	ldr	r1, [r7, #20]
 800ba18:	69ba      	ldr	r2, [r7, #24]
 800ba1a:	e841 2300 	strex	r3, r2, [r1]
 800ba1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1e6      	bne.n	800b9f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff f8a3 	bl	800ab80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba3a:	bf00      	nop
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba90:	2302      	movs	r3, #2
 800ba92:	e027      	b.n	800bae4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2224      	movs	r2, #36	@ 0x24
 800baa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bac2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d101      	bne.n	800bb08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb04:	2302      	movs	r3, #2
 800bb06:	e02d      	b.n	800bb64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2224      	movs	r2, #36	@ 0x24
 800bb14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0201 	bic.w	r2, r2, #1
 800bb2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f8a3 	bl	800bc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2220      	movs	r2, #32
 800bb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e02d      	b.n	800bbe0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2224      	movs	r2, #36	@ 0x24
 800bb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f865 	bl	800bc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	@ 0x30
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	d142      	bne.n	800bc86 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bc06:	88fb      	ldrh	r3, [r7, #6]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e03b      	b.n	800bc88 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2201      	movs	r2, #1
 800bc14:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc1c:	88fb      	ldrh	r3, [r7, #6]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff fc8a 	bl	800b53c <UART_Start_Receive_DMA>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bc2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d124      	bne.n	800bc80 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d11d      	bne.n	800bc7a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2210      	movs	r2, #16
 800bc44:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	617b      	str	r3, [r7, #20]
   return(result);
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f043 0310 	orr.w	r3, r3, #16
 800bc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc66:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc68:	6a39      	ldr	r1, [r7, #32]
 800bc6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc6c:	e841 2300 	strex	r3, r2, [r1]
 800bc70:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1e6      	bne.n	800bc46 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800bc78:	e002      	b.n	800bc80 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bc80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc84:	e000      	b.n	800bc88 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bc86:	2302      	movs	r3, #2
  }
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3730      	adds	r7, #48	@ 0x30
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d108      	bne.n	800bcb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcb0:	e031      	b.n	800bd16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcb2:	2308      	movs	r3, #8
 800bcb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	0e5b      	lsrs	r3, r3, #25
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	0f5b      	lsrs	r3, r3, #29
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
 800bcdc:	7b3a      	ldrb	r2, [r7, #12]
 800bcde:	4911      	ldr	r1, [pc, #68]	@ (800bd24 <UARTEx_SetNbDataToProcess+0x94>)
 800bce0:	5c8a      	ldrb	r2, [r1, r2]
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bce6:	7b3a      	ldrb	r2, [r7, #12]
 800bce8:	490f      	ldr	r1, [pc, #60]	@ (800bd28 <UARTEx_SetNbDataToProcess+0x98>)
 800bcea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcec:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	7b7a      	ldrb	r2, [r7, #13]
 800bcfc:	4909      	ldr	r1, [pc, #36]	@ (800bd24 <UARTEx_SetNbDataToProcess+0x94>)
 800bcfe:	5c8a      	ldrb	r2, [r1, r2]
 800bd00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd04:	7b7a      	ldrb	r2, [r7, #13]
 800bd06:	4908      	ldr	r1, [pc, #32]	@ (800bd28 <UARTEx_SetNbDataToProcess+0x98>)
 800bd08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	0800d3c4 	.word	0x0800d3c4
 800bd28:	0800d3cc 	.word	0x0800d3cc

0800bd2c <arm_rfft_1024_fast_init_f32>:
 800bd2c:	b190      	cbz	r0, 800bd54 <arm_rfft_1024_fast_init_f32+0x28>
 800bd2e:	b430      	push	{r4, r5}
 800bd30:	490a      	ldr	r1, [pc, #40]	@ (800bd5c <arm_rfft_1024_fast_init_f32+0x30>)
 800bd32:	4a0b      	ldr	r2, [pc, #44]	@ (800bd60 <arm_rfft_1024_fast_init_f32+0x34>)
 800bd34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd38:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800bd3c:	8003      	strh	r3, [r0, #0]
 800bd3e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800bd42:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800bd46:	4b07      	ldr	r3, [pc, #28]	@ (800bd64 <arm_rfft_1024_fast_init_f32+0x38>)
 800bd48:	8205      	strh	r5, [r0, #16]
 800bd4a:	8184      	strh	r4, [r0, #12]
 800bd4c:	6143      	str	r3, [r0, #20]
 800bd4e:	bc30      	pop	{r4, r5}
 800bd50:	2000      	movs	r0, #0
 800bd52:	4770      	bx	lr
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	0800d3d4 	.word	0x0800d3d4
 800bd60:	0800df58 	.word	0x0800df58
 800bd64:	0800ef58 	.word	0x0800ef58

0800bd68 <stage_rfft_f32>:
 800bd68:	b410      	push	{r4}
 800bd6a:	edd1 7a00 	vldr	s15, [r1]
 800bd6e:	ed91 7a01 	vldr	s14, [r1, #4]
 800bd72:	8804      	ldrh	r4, [r0, #0]
 800bd74:	6940      	ldr	r0, [r0, #20]
 800bd76:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bd7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd7e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800bd82:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bd86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd8a:	3c01      	subs	r4, #1
 800bd8c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800bd90:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bd94:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800bd98:	ed82 7a00 	vstr	s14, [r2]
 800bd9c:	edc2 7a01 	vstr	s15, [r2, #4]
 800bda0:	3010      	adds	r0, #16
 800bda2:	3210      	adds	r2, #16
 800bda4:	3b08      	subs	r3, #8
 800bda6:	3110      	adds	r1, #16
 800bda8:	ed11 5a02 	vldr	s10, [r1, #-8]
 800bdac:	ed93 7a02 	vldr	s14, [r3, #8]
 800bdb0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800bdb4:	edd3 4a03 	vldr	s9, [r3, #12]
 800bdb8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bdbc:	ed10 6a01 	vldr	s12, [r0, #-4]
 800bdc0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800bdc4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bdc8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800bdcc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800bdd0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800bdd4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bdd8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800bddc:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bde0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800bde4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bde8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bdec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdf0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800bdf4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bdf8:	3c01      	subs	r4, #1
 800bdfa:	ed02 7a02 	vstr	s14, [r2, #-8]
 800bdfe:	ed42 7a01 	vstr	s15, [r2, #-4]
 800be02:	f1a3 0308 	sub.w	r3, r3, #8
 800be06:	f101 0108 	add.w	r1, r1, #8
 800be0a:	f100 0008 	add.w	r0, r0, #8
 800be0e:	f102 0208 	add.w	r2, r2, #8
 800be12:	d1c9      	bne.n	800bda8 <stage_rfft_f32+0x40>
 800be14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop

0800be1c <merge_rfft_f32>:
 800be1c:	b410      	push	{r4}
 800be1e:	edd1 7a00 	vldr	s15, [r1]
 800be22:	edd1 6a01 	vldr	s13, [r1, #4]
 800be26:	8804      	ldrh	r4, [r0, #0]
 800be28:	6940      	ldr	r0, [r0, #20]
 800be2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800be2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be32:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800be36:	ee27 7a04 	vmul.f32	s14, s14, s8
 800be3a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800be3e:	3c01      	subs	r4, #1
 800be40:	ed82 7a00 	vstr	s14, [r2]
 800be44:	edc2 7a01 	vstr	s15, [r2, #4]
 800be48:	b3dc      	cbz	r4, 800bec2 <merge_rfft_f32+0xa6>
 800be4a:	00e3      	lsls	r3, r4, #3
 800be4c:	3b08      	subs	r3, #8
 800be4e:	440b      	add	r3, r1
 800be50:	3010      	adds	r0, #16
 800be52:	3210      	adds	r2, #16
 800be54:	3110      	adds	r1, #16
 800be56:	ed11 5a02 	vldr	s10, [r1, #-8]
 800be5a:	ed93 7a02 	vldr	s14, [r3, #8]
 800be5e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800be62:	edd3 4a03 	vldr	s9, [r3, #12]
 800be66:	ed51 7a01 	vldr	s15, [r1, #-4]
 800be6a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800be6e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800be72:	ee37 7a05 	vadd.f32	s14, s14, s10
 800be76:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800be7a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800be7e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800be82:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800be86:	ee37 7a63 	vsub.f32	s14, s14, s7
 800be8a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800be8e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800be92:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800be96:	ee37 7a46 	vsub.f32	s14, s14, s12
 800be9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800bea2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800bea6:	3c01      	subs	r4, #1
 800bea8:	ed02 7a02 	vstr	s14, [r2, #-8]
 800beac:	ed42 7a01 	vstr	s15, [r2, #-4]
 800beb0:	f1a3 0308 	sub.w	r3, r3, #8
 800beb4:	f101 0108 	add.w	r1, r1, #8
 800beb8:	f100 0008 	add.w	r0, r0, #8
 800bebc:	f102 0208 	add.w	r2, r2, #8
 800bec0:	d1c9      	bne.n	800be56 <merge_rfft_f32+0x3a>
 800bec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <arm_rfft_fast_f32>:
 800bec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800becc:	8a05      	ldrh	r5, [r0, #16]
 800bece:	086d      	lsrs	r5, r5, #1
 800bed0:	8005      	strh	r5, [r0, #0]
 800bed2:	4604      	mov	r4, r0
 800bed4:	4616      	mov	r6, r2
 800bed6:	461d      	mov	r5, r3
 800bed8:	b14b      	cbz	r3, 800beee <arm_rfft_fast_f32+0x26>
 800beda:	f7ff ff9f 	bl	800be1c <merge_rfft_f32>
 800bede:	462a      	mov	r2, r5
 800bee0:	4631      	mov	r1, r6
 800bee2:	4620      	mov	r0, r4
 800bee4:	2301      	movs	r3, #1
 800bee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beea:	f000 bb33 	b.w	800c554 <arm_cfft_f32>
 800beee:	460f      	mov	r7, r1
 800bef0:	461a      	mov	r2, r3
 800bef2:	2301      	movs	r3, #1
 800bef4:	f000 fb2e 	bl	800c554 <arm_cfft_f32>
 800bef8:	4632      	mov	r2, r6
 800befa:	4639      	mov	r1, r7
 800befc:	4620      	mov	r0, r4
 800befe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	f7ff bf31 	b.w	800bd68 <stage_rfft_f32>
 800bf06:	bf00      	nop

0800bf08 <arm_cfft_radix8by2_f32>:
 800bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0c:	ed2d 8b08 	vpush	{d8-d11}
 800bf10:	4607      	mov	r7, r0
 800bf12:	4608      	mov	r0, r1
 800bf14:	f8b7 c000 	ldrh.w	ip, [r7]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800bf1e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800bf22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800bf26:	f000 80b0 	beq.w	800c08a <arm_cfft_radix8by2_f32+0x182>
 800bf2a:	008c      	lsls	r4, r1, #2
 800bf2c:	3410      	adds	r4, #16
 800bf2e:	f100 0310 	add.w	r3, r0, #16
 800bf32:	1906      	adds	r6, r0, r4
 800bf34:	3210      	adds	r2, #16
 800bf36:	4444      	add	r4, r8
 800bf38:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800bf3c:	f108 0510 	add.w	r5, r8, #16
 800bf40:	ed15 2a04 	vldr	s4, [r5, #-16]
 800bf44:	ed55 2a03 	vldr	s5, [r5, #-12]
 800bf48:	ed54 4a04 	vldr	s9, [r4, #-16]
 800bf4c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800bf50:	ed14 6a02 	vldr	s12, [r4, #-8]
 800bf54:	ed54 5a01 	vldr	s11, [r4, #-4]
 800bf58:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bf5c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800bf60:	ed55 0a01 	vldr	s1, [r5, #-4]
 800bf64:	ed56 6a04 	vldr	s13, [r6, #-16]
 800bf68:	ed16 3a03 	vldr	s6, [r6, #-12]
 800bf6c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800bf70:	ed13 5a02 	vldr	s10, [r3, #-8]
 800bf74:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bf78:	ed16 1a02 	vldr	s2, [r6, #-8]
 800bf7c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800bf80:	ee73 ba82 	vadd.f32	s23, s7, s4
 800bf84:	ee37 ba22 	vadd.f32	s22, s14, s5
 800bf88:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800bf8c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800bf90:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800bf94:	ee75 aa00 	vadd.f32	s21, s10, s0
 800bf98:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800bf9c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800bfa0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800bfa4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800bfa8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800bfac:	ed03 aa01 	vstr	s20, [r3, #-4]
 800bfb0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800bfb4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800bfb8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800bfbc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800bfc0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800bfc4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800bfc8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800bfcc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800bfd0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800bfd4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800bfd8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bfdc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800bfe0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800bfe4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800bfe8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800bfec:	ee27 7a03 	vmul.f32	s14, s14, s6
 800bff0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800bff4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800bff8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800bffc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c000:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c004:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c008:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c00c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c010:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c014:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c018:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c01c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c020:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c024:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c028:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c02c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c030:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c034:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c038:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c03c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c040:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c044:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c048:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c04c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c050:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c054:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c058:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c05c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c060:	3310      	adds	r3, #16
 800c062:	4563      	cmp	r3, ip
 800c064:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c068:	f106 0610 	add.w	r6, r6, #16
 800c06c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c070:	f102 0210 	add.w	r2, r2, #16
 800c074:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c078:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c07c:	f105 0510 	add.w	r5, r5, #16
 800c080:	f104 0410 	add.w	r4, r4, #16
 800c084:	f47f af5c 	bne.w	800bf40 <arm_cfft_radix8by2_f32+0x38>
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	b28c      	uxth	r4, r1
 800c08c:	4621      	mov	r1, r4
 800c08e:	2302      	movs	r3, #2
 800c090:	f000 fc66 	bl	800c960 <arm_radix8_butterfly_f32>
 800c094:	ecbd 8b08 	vpop	{d8-d11}
 800c098:	4621      	mov	r1, r4
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	4640      	mov	r0, r8
 800c09e:	2302      	movs	r3, #2
 800c0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a4:	f000 bc5c 	b.w	800c960 <arm_radix8_butterfly_f32>

0800c0a8 <arm_cfft_radix8by4_f32>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	ed2d 8b0a 	vpush	{d8-d12}
 800c0b0:	b08d      	sub	sp, #52	@ 0x34
 800c0b2:	460d      	mov	r5, r1
 800c0b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c0b6:	8801      	ldrh	r1, [r0, #0]
 800c0b8:	6842      	ldr	r2, [r0, #4]
 800c0ba:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0bc:	0849      	lsrs	r1, r1, #1
 800c0be:	008b      	lsls	r3, r1, #2
 800c0c0:	18ee      	adds	r6, r5, r3
 800c0c2:	18f0      	adds	r0, r6, r3
 800c0c4:	edd0 5a00 	vldr	s11, [r0]
 800c0c8:	edd5 7a00 	vldr	s15, [r5]
 800c0cc:	ed96 7a00 	vldr	s14, [r6]
 800c0d0:	edd0 3a01 	vldr	s7, [r0, #4]
 800c0d4:	ed96 4a01 	vldr	s8, [r6, #4]
 800c0d8:	ed95 5a01 	vldr	s10, [r5, #4]
 800c0dc:	9008      	str	r0, [sp, #32]
 800c0de:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c0e2:	18c7      	adds	r7, r0, r3
 800c0e4:	edd7 4a00 	vldr	s9, [r7]
 800c0e8:	ed97 3a01 	vldr	s6, [r7, #4]
 800c0ec:	9701      	str	r7, [sp, #4]
 800c0ee:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c0f2:	462c      	mov	r4, r5
 800c0f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c0f8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c0fc:	ee16 ca90 	vmov	ip, s13
 800c100:	f844 cb08 	str.w	ip, [r4], #8
 800c104:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c108:	edd6 5a01 	vldr	s11, [r6, #4]
 800c10c:	edd7 2a01 	vldr	s5, [r7, #4]
 800c110:	9404      	str	r4, [sp, #16]
 800c112:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c116:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c11a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c11e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c122:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c126:	0849      	lsrs	r1, r1, #1
 800c128:	f102 0e08 	add.w	lr, r2, #8
 800c12c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c130:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c134:	9109      	str	r1, [sp, #36]	@ 0x24
 800c136:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c13a:	f1a1 0902 	sub.w	r9, r1, #2
 800c13e:	f8cd e00c 	str.w	lr, [sp, #12]
 800c142:	4631      	mov	r1, r6
 800c144:	ee13 ea90 	vmov	lr, s7
 800c148:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c14c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c150:	4604      	mov	r4, r0
 800c152:	edc5 5a01 	vstr	s11, [r5, #4]
 800c156:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c15a:	f841 eb08 	str.w	lr, [r1], #8
 800c15e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c162:	ee16 ea10 	vmov	lr, s12
 800c166:	ed86 5a01 	vstr	s10, [r6, #4]
 800c16a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c16e:	f844 eb08 	str.w	lr, [r4], #8
 800c172:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c176:	edc0 6a01 	vstr	s13, [r0, #4]
 800c17a:	9405      	str	r4, [sp, #20]
 800c17c:	4604      	mov	r4, r0
 800c17e:	ee17 0a90 	vmov	r0, s15
 800c182:	9106      	str	r1, [sp, #24]
 800c184:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c188:	f102 0110 	add.w	r1, r2, #16
 800c18c:	46bc      	mov	ip, r7
 800c18e:	9100      	str	r1, [sp, #0]
 800c190:	f847 0b08 	str.w	r0, [r7], #8
 800c194:	f102 0118 	add.w	r1, r2, #24
 800c198:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800c19c:	9102      	str	r1, [sp, #8]
 800c19e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c1a2:	9007      	str	r0, [sp, #28]
 800c1a4:	f000 8134 	beq.w	800c410 <arm_cfft_radix8by4_f32+0x368>
 800c1a8:	f102 0920 	add.w	r9, r2, #32
 800c1ac:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	f8dd a000 	ldr.w	sl, [sp]
 800c1b6:	3b0c      	subs	r3, #12
 800c1b8:	4683      	mov	fp, r0
 800c1ba:	4463      	add	r3, ip
 800c1bc:	f105 0e10 	add.w	lr, r5, #16
 800c1c0:	f1a4 010c 	sub.w	r1, r4, #12
 800c1c4:	f104 0510 	add.w	r5, r4, #16
 800c1c8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c1cc:	f1a2 040c 	sub.w	r4, r2, #12
 800c1d0:	f106 0010 	add.w	r0, r6, #16
 800c1d4:	3210      	adds	r2, #16
 800c1d6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c1da:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c1de:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c1e2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c1e6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c1ea:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c1ee:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c1f2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800c1f6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c1fa:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c1fe:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c202:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c206:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c20a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c20e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c212:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c216:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c21a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c21e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c222:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c226:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c22a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c22e:	ed94 7a02 	vldr	s14, [r4, #8]
 800c232:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c236:	ed91 ba02 	vldr	s22, [r1, #8]
 800c23a:	edd3 9a02 	vldr	s19, [r3, #8]
 800c23e:	edd4 2a01 	vldr	s5, [r4, #4]
 800c242:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c246:	ed93 5a01 	vldr	s10, [r3, #4]
 800c24a:	edd1 0a01 	vldr	s1, [r1, #4]
 800c24e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c252:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c256:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c25a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c25e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c262:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c266:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c26a:	ed91 7a01 	vldr	s14, [r1, #4]
 800c26e:	edd3 8a01 	vldr	s17, [r3, #4]
 800c272:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c276:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c27a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c27e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c282:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c286:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800c28a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800c28e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c292:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c296:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c29a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c29e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c2a2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c2a6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c2aa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c2ae:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c2b2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c2b6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c2ba:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c2be:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c2c2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c2c6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c2ca:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c2ce:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c2d2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c2d6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c2da:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c2de:	ed00 7a02 	vstr	s14, [r0, #-8]
 800c2e2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800c2e6:	edc1 8a01 	vstr	s17, [r1, #4]
 800c2ea:	ed81 aa02 	vstr	s20, [r1, #8]
 800c2ee:	ed59 3a04 	vldr	s7, [r9, #-16]
 800c2f2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c2f6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c2fa:	ed59 6a03 	vldr	s13, [r9, #-12]
 800c2fe:	ee34 4a61 	vsub.f32	s8, s8, s3
 800c302:	ee36 6a41 	vsub.f32	s12, s12, s2
 800c306:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800c30a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800c30e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800c312:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c316:	ee24 4a26 	vmul.f32	s8, s8, s13
 800c31a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c31e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c322:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c326:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c32a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c32e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c332:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c336:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c33a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c33e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c342:	ed45 3a02 	vstr	s7, [r5, #-8]
 800c346:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c34a:	ed84 7a01 	vstr	s14, [r4, #4]
 800c34e:	ed84 4a02 	vstr	s8, [r4, #8]
 800c352:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c356:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c35a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800c35e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800c362:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c366:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c36a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c36e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c372:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c376:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c37a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c37e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c382:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c386:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c38a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c38e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c392:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c396:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c39a:	f1bb 0b01 	subs.w	fp, fp, #1
 800c39e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c3a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c3a6:	f10e 0e08 	add.w	lr, lr, #8
 800c3aa:	ed83 3a02 	vstr	s6, [r3, #8]
 800c3ae:	ed83 7a01 	vstr	s14, [r3, #4]
 800c3b2:	f1ac 0c08 	sub.w	ip, ip, #8
 800c3b6:	f10a 0a08 	add.w	sl, sl, #8
 800c3ba:	f100 0008 	add.w	r0, r0, #8
 800c3be:	f1a1 0108 	sub.w	r1, r1, #8
 800c3c2:	f109 0910 	add.w	r9, r9, #16
 800c3c6:	f105 0508 	add.w	r5, r5, #8
 800c3ca:	f1a4 0408 	sub.w	r4, r4, #8
 800c3ce:	f108 0818 	add.w	r8, r8, #24
 800c3d2:	f102 0208 	add.w	r2, r2, #8
 800c3d6:	f1a3 0308 	sub.w	r3, r3, #8
 800c3da:	f47f aefc 	bne.w	800c1d6 <arm_cfft_radix8by4_f32+0x12e>
 800c3de:	9907      	ldr	r1, [sp, #28]
 800c3e0:	9800      	ldr	r0, [sp, #0]
 800c3e2:	00cb      	lsls	r3, r1, #3
 800c3e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c3e8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c3ec:	9100      	str	r1, [sp, #0]
 800c3ee:	9904      	ldr	r1, [sp, #16]
 800c3f0:	4419      	add	r1, r3
 800c3f2:	9104      	str	r1, [sp, #16]
 800c3f4:	9903      	ldr	r1, [sp, #12]
 800c3f6:	4419      	add	r1, r3
 800c3f8:	9103      	str	r1, [sp, #12]
 800c3fa:	9906      	ldr	r1, [sp, #24]
 800c3fc:	4419      	add	r1, r3
 800c3fe:	9106      	str	r1, [sp, #24]
 800c400:	9905      	ldr	r1, [sp, #20]
 800c402:	441f      	add	r7, r3
 800c404:	4419      	add	r1, r3
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c40e:	9302      	str	r3, [sp, #8]
 800c410:	9904      	ldr	r1, [sp, #16]
 800c412:	9805      	ldr	r0, [sp, #20]
 800c414:	ed91 4a00 	vldr	s8, [r1]
 800c418:	edd0 6a00 	vldr	s13, [r0]
 800c41c:	9b06      	ldr	r3, [sp, #24]
 800c41e:	ed97 3a00 	vldr	s6, [r7]
 800c422:	edd3 7a00 	vldr	s15, [r3]
 800c426:	edd0 4a01 	vldr	s9, [r0, #4]
 800c42a:	edd1 3a01 	vldr	s7, [r1, #4]
 800c42e:	ed97 2a01 	vldr	s4, [r7, #4]
 800c432:	ed93 7a01 	vldr	s14, [r3, #4]
 800c436:	9a03      	ldr	r2, [sp, #12]
 800c438:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800c43c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c440:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c444:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c448:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c44c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c450:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c454:	ed81 5a00 	vstr	s10, [r1]
 800c458:	ed93 5a01 	vldr	s10, [r3, #4]
 800c45c:	edd7 4a01 	vldr	s9, [r7, #4]
 800c460:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c464:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c468:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c46c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c470:	ed81 5a01 	vstr	s10, [r1, #4]
 800c474:	edd2 1a00 	vldr	s3, [r2]
 800c478:	edd2 2a01 	vldr	s5, [r2, #4]
 800c47c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c480:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c484:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c488:	ee64 4a21 	vmul.f32	s9, s8, s3
 800c48c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800c490:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c494:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c498:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c49c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c4a0:	edc3 2a00 	vstr	s5, [r3]
 800c4a4:	ed83 5a01 	vstr	s10, [r3, #4]
 800c4a8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800c4ac:	9b00      	ldr	r3, [sp, #0]
 800c4ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c4b2:	ed93 4a01 	vldr	s8, [r3, #4]
 800c4b6:	ed93 5a00 	vldr	s10, [r3]
 800c4ba:	9b02      	ldr	r3, [sp, #8]
 800c4bc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c4c0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800c4c4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c4c8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c4cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c4d0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c4d4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800c4d8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c4dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c4e0:	ed80 6a01 	vstr	s12, [r0, #4]
 800c4e4:	edc0 5a00 	vstr	s11, [r0]
 800c4e8:	edd3 5a01 	vldr	s11, [r3, #4]
 800c4ec:	edd3 6a00 	vldr	s13, [r3]
 800c4f0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800c4f4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800c4f8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800c4fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c500:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c504:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c508:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c50c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c510:	ed87 7a01 	vstr	s14, [r7, #4]
 800c514:	edc7 7a00 	vstr	s15, [r7]
 800c518:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800c51c:	4621      	mov	r1, r4
 800c51e:	686a      	ldr	r2, [r5, #4]
 800c520:	2304      	movs	r3, #4
 800c522:	f000 fa1d 	bl	800c960 <arm_radix8_butterfly_f32>
 800c526:	4630      	mov	r0, r6
 800c528:	4621      	mov	r1, r4
 800c52a:	686a      	ldr	r2, [r5, #4]
 800c52c:	2304      	movs	r3, #4
 800c52e:	f000 fa17 	bl	800c960 <arm_radix8_butterfly_f32>
 800c532:	9808      	ldr	r0, [sp, #32]
 800c534:	686a      	ldr	r2, [r5, #4]
 800c536:	4621      	mov	r1, r4
 800c538:	2304      	movs	r3, #4
 800c53a:	f000 fa11 	bl	800c960 <arm_radix8_butterfly_f32>
 800c53e:	686a      	ldr	r2, [r5, #4]
 800c540:	9801      	ldr	r0, [sp, #4]
 800c542:	4621      	mov	r1, r4
 800c544:	2304      	movs	r3, #4
 800c546:	b00d      	add	sp, #52	@ 0x34
 800c548:	ecbd 8b0a 	vpop	{d8-d12}
 800c54c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	f000 ba06 	b.w	800c960 <arm_radix8_butterfly_f32>

0800c554 <arm_cfft_f32>:
 800c554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c558:	2a01      	cmp	r2, #1
 800c55a:	4606      	mov	r6, r0
 800c55c:	4617      	mov	r7, r2
 800c55e:	460c      	mov	r4, r1
 800c560:	4698      	mov	r8, r3
 800c562:	8805      	ldrh	r5, [r0, #0]
 800c564:	d056      	beq.n	800c614 <arm_cfft_f32+0xc0>
 800c566:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c56a:	d063      	beq.n	800c634 <arm_cfft_f32+0xe0>
 800c56c:	d916      	bls.n	800c59c <arm_cfft_f32+0x48>
 800c56e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800c572:	d01a      	beq.n	800c5aa <arm_cfft_f32+0x56>
 800c574:	d947      	bls.n	800c606 <arm_cfft_f32+0xb2>
 800c576:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800c57a:	d05b      	beq.n	800c634 <arm_cfft_f32+0xe0>
 800c57c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800c580:	d105      	bne.n	800c58e <arm_cfft_f32+0x3a>
 800c582:	2301      	movs	r3, #1
 800c584:	6872      	ldr	r2, [r6, #4]
 800c586:	4629      	mov	r1, r5
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 f9e9 	bl	800c960 <arm_radix8_butterfly_f32>
 800c58e:	f1b8 0f00 	cmp.w	r8, #0
 800c592:	d111      	bne.n	800c5b8 <arm_cfft_f32+0x64>
 800c594:	2f01      	cmp	r7, #1
 800c596:	d016      	beq.n	800c5c6 <arm_cfft_f32+0x72>
 800c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c59c:	2d20      	cmp	r5, #32
 800c59e:	d049      	beq.n	800c634 <arm_cfft_f32+0xe0>
 800c5a0:	d935      	bls.n	800c60e <arm_cfft_f32+0xba>
 800c5a2:	2d40      	cmp	r5, #64	@ 0x40
 800c5a4:	d0ed      	beq.n	800c582 <arm_cfft_f32+0x2e>
 800c5a6:	2d80      	cmp	r5, #128	@ 0x80
 800c5a8:	d1f1      	bne.n	800c58e <arm_cfft_f32+0x3a>
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff fcab 	bl	800bf08 <arm_cfft_radix8by2_f32>
 800c5b2:	f1b8 0f00 	cmp.w	r8, #0
 800c5b6:	d0ed      	beq.n	800c594 <arm_cfft_f32+0x40>
 800c5b8:	68b2      	ldr	r2, [r6, #8]
 800c5ba:	89b1      	ldrh	r1, [r6, #12]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 f841 	bl	800c644 <arm_bitreversal_32>
 800c5c2:	2f01      	cmp	r7, #1
 800c5c4:	d1e8      	bne.n	800c598 <arm_cfft_f32+0x44>
 800c5c6:	ee07 5a90 	vmov	s15, r5
 800c5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	d0de      	beq.n	800c598 <arm_cfft_f32+0x44>
 800c5da:	f104 0108 	add.w	r1, r4, #8
 800c5de:	2300      	movs	r3, #0
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	f101 0108 	add.w	r1, r1, #8
 800c5e8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c5ec:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c5f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c5f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c5f8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c5fc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c600:	d1ee      	bne.n	800c5e0 <arm_cfft_f32+0x8c>
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800c60a:	d0ba      	beq.n	800c582 <arm_cfft_f32+0x2e>
 800c60c:	e7bf      	b.n	800c58e <arm_cfft_f32+0x3a>
 800c60e:	2d10      	cmp	r5, #16
 800c610:	d0cb      	beq.n	800c5aa <arm_cfft_f32+0x56>
 800c612:	e7bc      	b.n	800c58e <arm_cfft_f32+0x3a>
 800c614:	b19d      	cbz	r5, 800c63e <arm_cfft_f32+0xea>
 800c616:	f101 030c 	add.w	r3, r1, #12
 800c61a:	2200      	movs	r2, #0
 800c61c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c620:	3201      	adds	r2, #1
 800c622:	eef1 7a67 	vneg.f32	s15, s15
 800c626:	4295      	cmp	r5, r2
 800c628:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c62c:	f103 0308 	add.w	r3, r3, #8
 800c630:	d1f4      	bne.n	800c61c <arm_cfft_f32+0xc8>
 800c632:	e798      	b.n	800c566 <arm_cfft_f32+0x12>
 800c634:	4621      	mov	r1, r4
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff fd36 	bl	800c0a8 <arm_cfft_radix8by4_f32>
 800c63c:	e7a7      	b.n	800c58e <arm_cfft_f32+0x3a>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0aa      	beq.n	800c598 <arm_cfft_f32+0x44>
 800c642:	e7b9      	b.n	800c5b8 <arm_cfft_f32+0x64>

0800c644 <arm_bitreversal_32>:
 800c644:	b1e9      	cbz	r1, 800c682 <arm_bitreversal_32+0x3e>
 800c646:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c648:	2500      	movs	r5, #0
 800c64a:	f102 0e02 	add.w	lr, r2, #2
 800c64e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800c652:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800c656:	08a4      	lsrs	r4, r4, #2
 800c658:	089b      	lsrs	r3, r3, #2
 800c65a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800c65e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800c662:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800c666:	00a6      	lsls	r6, r4, #2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800c66e:	3304      	adds	r3, #4
 800c670:	1d34      	adds	r4, r6, #4
 800c672:	3502      	adds	r5, #2
 800c674:	58c6      	ldr	r6, [r0, r3]
 800c676:	5907      	ldr	r7, [r0, r4]
 800c678:	50c7      	str	r7, [r0, r3]
 800c67a:	428d      	cmp	r5, r1
 800c67c:	5106      	str	r6, [r0, r4]
 800c67e:	d3e6      	bcc.n	800c64e <arm_bitreversal_32+0xa>
 800c680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c682:	4770      	bx	lr

0800c684 <arm_cmplx_mag_f32>:
 800c684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c688:	ed2d 8b02 	vpush	{d8}
 800c68c:	0897      	lsrs	r7, r2, #2
 800c68e:	b084      	sub	sp, #16
 800c690:	d077      	beq.n	800c782 <arm_cmplx_mag_f32+0xfe>
 800c692:	f04f 0800 	mov.w	r8, #0
 800c696:	f100 0420 	add.w	r4, r0, #32
 800c69a:	f101 0510 	add.w	r5, r1, #16
 800c69e:	463e      	mov	r6, r7
 800c6a0:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800c6a4:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800c6a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c6ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6bc:	f2c0 80c5 	blt.w	800c84a <arm_cmplx_mag_f32+0x1c6>
 800c6c0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c6cc:	f100 80cb 	bmi.w	800c866 <arm_cmplx_mag_f32+0x1e2>
 800c6d0:	ed05 8a04 	vstr	s16, [r5, #-16]
 800c6d4:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800c6d8:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800c6dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c6e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	f2c0 80a8 	blt.w	800c844 <arm_cmplx_mag_f32+0x1c0>
 800c6f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c700:	f100 80a8 	bmi.w	800c854 <arm_cmplx_mag_f32+0x1d0>
 800c704:	ed05 8a03 	vstr	s16, [r5, #-12]
 800c708:	ed14 0a04 	vldr	s0, [r4, #-16]
 800c70c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800c710:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c714:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c718:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c71c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c724:	f2c0 808b 	blt.w	800c83e <arm_cmplx_mag_f32+0x1ba>
 800c728:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c730:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c734:	f100 80a9 	bmi.w	800c88a <arm_cmplx_mag_f32+0x206>
 800c738:	ed05 8a02 	vstr	s16, [r5, #-8]
 800c73c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800c740:	ed54 7a01 	vldr	s15, [r4, #-4]
 800c744:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c74c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c758:	db6e      	blt.n	800c838 <arm_cmplx_mag_f32+0x1b4>
 800c75a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c762:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c766:	f100 8087 	bmi.w	800c878 <arm_cmplx_mag_f32+0x1f4>
 800c76a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800c76e:	3e01      	subs	r6, #1
 800c770:	f104 0420 	add.w	r4, r4, #32
 800c774:	f105 0510 	add.w	r5, r5, #16
 800c778:	d192      	bne.n	800c6a0 <arm_cmplx_mag_f32+0x1c>
 800c77a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800c77e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800c782:	f012 0203 	ands.w	r2, r2, #3
 800c786:	d052      	beq.n	800c82e <arm_cmplx_mag_f32+0x1aa>
 800c788:	ed90 0a00 	vldr	s0, [r0]
 800c78c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c790:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c798:	2300      	movs	r3, #0
 800c79a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c79e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a6:	bfb8      	it	lt
 800c7a8:	600b      	strlt	r3, [r1, #0]
 800c7aa:	db08      	blt.n	800c7be <arm_cmplx_mag_f32+0x13a>
 800c7ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c7b8:	d479      	bmi.n	800c8ae <arm_cmplx_mag_f32+0x22a>
 800c7ba:	ed81 8a00 	vstr	s16, [r1]
 800c7be:	3a01      	subs	r2, #1
 800c7c0:	d035      	beq.n	800c82e <arm_cmplx_mag_f32+0x1aa>
 800c7c2:	ed90 0a02 	vldr	s0, [r0, #8]
 800c7c6:	edd0 7a03 	vldr	s15, [r0, #12]
 800c7ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c7ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c7d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e0:	bfb8      	it	lt
 800c7e2:	604b      	strlt	r3, [r1, #4]
 800c7e4:	db08      	blt.n	800c7f8 <arm_cmplx_mag_f32+0x174>
 800c7e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c7f2:	d453      	bmi.n	800c89c <arm_cmplx_mag_f32+0x218>
 800c7f4:	ed81 8a01 	vstr	s16, [r1, #4]
 800c7f8:	2a01      	cmp	r2, #1
 800c7fa:	d018      	beq.n	800c82e <arm_cmplx_mag_f32+0x1aa>
 800c7fc:	ed90 0a04 	vldr	s0, [r0, #16]
 800c800:	edd0 7a05 	vldr	s15, [r0, #20]
 800c804:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c808:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c80c:	2300      	movs	r3, #0
 800c80e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c812:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	db19      	blt.n	800c850 <arm_cmplx_mag_f32+0x1cc>
 800c81c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c824:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800c828:	d44a      	bmi.n	800c8c0 <arm_cmplx_mag_f32+0x23c>
 800c82a:	ed81 8a02 	vstr	s16, [r1, #8]
 800c82e:	b004      	add	sp, #16
 800c830:	ecbd 8b02 	vpop	{d8}
 800c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c838:	f845 8c04 	str.w	r8, [r5, #-4]
 800c83c:	e797      	b.n	800c76e <arm_cmplx_mag_f32+0xea>
 800c83e:	f845 8c08 	str.w	r8, [r5, #-8]
 800c842:	e77b      	b.n	800c73c <arm_cmplx_mag_f32+0xb8>
 800c844:	f845 8c0c 	str.w	r8, [r5, #-12]
 800c848:	e75e      	b.n	800c708 <arm_cmplx_mag_f32+0x84>
 800c84a:	f845 8c10 	str.w	r8, [r5, #-16]
 800c84e:	e741      	b.n	800c6d4 <arm_cmplx_mag_f32+0x50>
 800c850:	608b      	str	r3, [r1, #8]
 800c852:	e7ec      	b.n	800c82e <arm_cmplx_mag_f32+0x1aa>
 800c854:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c858:	9001      	str	r0, [sp, #4]
 800c85a:	f000 fbc3 	bl	800cfe4 <sqrtf>
 800c85e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	e74e      	b.n	800c704 <arm_cmplx_mag_f32+0x80>
 800c866:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c86a:	9001      	str	r0, [sp, #4]
 800c86c:	f000 fbba 	bl	800cfe4 <sqrtf>
 800c870:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c874:	9801      	ldr	r0, [sp, #4]
 800c876:	e72b      	b.n	800c6d0 <arm_cmplx_mag_f32+0x4c>
 800c878:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c87c:	9001      	str	r0, [sp, #4]
 800c87e:	f000 fbb1 	bl	800cfe4 <sqrtf>
 800c882:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c886:	9801      	ldr	r0, [sp, #4]
 800c888:	e76f      	b.n	800c76a <arm_cmplx_mag_f32+0xe6>
 800c88a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c88e:	9001      	str	r0, [sp, #4]
 800c890:	f000 fba8 	bl	800cfe4 <sqrtf>
 800c894:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c898:	9801      	ldr	r0, [sp, #4]
 800c89a:	e74d      	b.n	800c738 <arm_cmplx_mag_f32+0xb4>
 800c89c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a0:	9201      	str	r2, [sp, #4]
 800c8a2:	f000 fb9f 	bl	800cfe4 <sqrtf>
 800c8a6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800c8aa:	9903      	ldr	r1, [sp, #12]
 800c8ac:	e7a2      	b.n	800c7f4 <arm_cmplx_mag_f32+0x170>
 800c8ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8b2:	9201      	str	r2, [sp, #4]
 800c8b4:	f000 fb96 	bl	800cfe4 <sqrtf>
 800c8b8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800c8bc:	9903      	ldr	r1, [sp, #12]
 800c8be:	e77c      	b.n	800c7ba <arm_cmplx_mag_f32+0x136>
 800c8c0:	9101      	str	r1, [sp, #4]
 800c8c2:	f000 fb8f 	bl	800cfe4 <sqrtf>
 800c8c6:	9901      	ldr	r1, [sp, #4]
 800c8c8:	e7af      	b.n	800c82a <arm_cmplx_mag_f32+0x1a6>
 800c8ca:	bf00      	nop

0800c8cc <arm_cos_f32>:
 800c8cc:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800c954 <arm_cos_f32+0x88>
 800c8d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c8d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c8d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c8dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c8e8:	d504      	bpl.n	800c8f4 <arm_cos_f32+0x28>
 800c8ea:	ee17 3a90 	vmov	r3, s15
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	ee07 3a90 	vmov	s15, r3
 800c8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8f8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c958 <arm_cos_f32+0x8c>
 800c8fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c900:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c904:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c908:	ee17 3a90 	vmov	r3, s15
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c912:	d21a      	bcs.n	800c94a <arm_cos_f32+0x7e>
 800c914:	ee07 3a90 	vmov	s15, r3
 800c918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91c:	1c59      	adds	r1, r3, #1
 800c91e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c922:	4a0e      	ldr	r2, [pc, #56]	@ (800c95c <arm_cos_f32+0x90>)
 800c924:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c92c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c930:	ed93 7a00 	vldr	s14, [r3]
 800c934:	edd2 6a00 	vldr	s13, [r2]
 800c938:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c93c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c940:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c944:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c948:	4770      	bx	lr
 800c94a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c94e:	2101      	movs	r1, #1
 800c950:	2300      	movs	r3, #0
 800c952:	e7e6      	b.n	800c922 <arm_cos_f32+0x56>
 800c954:	3e22f983 	.word	0x3e22f983
 800c958:	44000000 	.word	0x44000000
 800c95c:	0800d754 	.word	0x0800d754

0800c960 <arm_radix8_butterfly_f32>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	ed2d 8b10 	vpush	{d8-d15}
 800c968:	b095      	sub	sp, #84	@ 0x54
 800c96a:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800c96e:	4603      	mov	r3, r0
 800c970:	3304      	adds	r3, #4
 800c972:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800cc58 <arm_radix8_butterfly_f32+0x2f8>
 800c976:	9012      	str	r0, [sp, #72]	@ 0x48
 800c978:	468b      	mov	fp, r1
 800c97a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c97c:	4689      	mov	r9, r1
 800c97e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800c982:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c984:	960f      	str	r6, [sp, #60]	@ 0x3c
 800c986:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800c98a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c98e:	eb03 0508 	add.w	r5, r3, r8
 800c992:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c996:	eb05 040e 	add.w	r4, r5, lr
 800c99a:	0137      	lsls	r7, r6, #4
 800c99c:	eba6 030a 	sub.w	r3, r6, sl
 800c9a0:	eb04 000e 	add.w	r0, r4, lr
 800c9a4:	44b2      	add	sl, r6
 800c9a6:	1d3a      	adds	r2, r7, #4
 800c9a8:	9702      	str	r7, [sp, #8]
 800c9aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c9ae:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800c9b2:	ebae 0c06 	sub.w	ip, lr, r6
 800c9b6:	9703      	str	r7, [sp, #12]
 800c9b8:	eb03 0708 	add.w	r7, r3, r8
 800c9bc:	9701      	str	r7, [sp, #4]
 800c9be:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800c9c2:	9706      	str	r7, [sp, #24]
 800c9c4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c9c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c9ca:	f10e 0104 	add.w	r1, lr, #4
 800c9ce:	4439      	add	r1, r7
 800c9d0:	443a      	add	r2, r7
 800c9d2:	0137      	lsls	r7, r6, #4
 800c9d4:	00f6      	lsls	r6, r6, #3
 800c9d6:	9704      	str	r7, [sp, #16]
 800c9d8:	9605      	str	r6, [sp, #20]
 800c9da:	9f01      	ldr	r7, [sp, #4]
 800c9dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c9de:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800c9e2:	f04f 0c00 	mov.w	ip, #0
 800c9e6:	edd4 6a00 	vldr	s13, [r4]
 800c9ea:	edd7 1a00 	vldr	s3, [r7]
 800c9ee:	ed16 aa01 	vldr	s20, [r6, #-4]
 800c9f2:	edd5 5a00 	vldr	s11, [r5]
 800c9f6:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c9fa:	ed90 6a00 	vldr	s12, [r0]
 800c9fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ca02:	ed93 3a00 	vldr	s6, [r3]
 800ca06:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ca0a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ca0e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ca12:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ca16:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ca1a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ca1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca22:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ca26:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ca2a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800ca2e:	ed85 4a00 	vstr	s8, [r5]
 800ca32:	edd1 6a00 	vldr	s13, [r1]
 800ca36:	ed94 9a01 	vldr	s18, [r4, #4]
 800ca3a:	edd3 2a01 	vldr	s5, [r3, #4]
 800ca3e:	edd7 8a01 	vldr	s17, [r7, #4]
 800ca42:	edd6 0a00 	vldr	s1, [r6]
 800ca46:	edd5 3a01 	vldr	s7, [r5, #4]
 800ca4a:	ed90 8a01 	vldr	s16, [r0, #4]
 800ca4e:	ed92 7a00 	vldr	s14, [r2]
 800ca52:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ca56:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ca5a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ca5e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ca62:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ca66:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ca6a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800ca6e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ca72:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ca76:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ca7a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ca7e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800ca82:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800ca86:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ca8a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800ca8e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800ca92:	ee76 6a89 	vadd.f32	s13, s13, s18
 800ca96:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800ca9a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ca9e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800caa2:	ee35 5a42 	vsub.f32	s10, s10, s4
 800caa6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800caaa:	ee33 2a20 	vadd.f32	s4, s6, s1
 800caae:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800cab2:	ee33 3a60 	vsub.f32	s6, s6, s1
 800cab6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800caba:	ee77 0a01 	vadd.f32	s1, s14, s2
 800cabe:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800cac2:	ee37 7a41 	vsub.f32	s14, s14, s2
 800cac6:	ee73 1a84 	vadd.f32	s3, s7, s8
 800caca:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cace:	ee76 3a27 	vadd.f32	s7, s12, s15
 800cad2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cad6:	ee32 8a00 	vadd.f32	s16, s4, s0
 800cada:	ee33 1a45 	vsub.f32	s2, s6, s10
 800cade:	ee32 2a40 	vsub.f32	s4, s4, s0
 800cae2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cae6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800caea:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800caee:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800caf2:	ee34 6a67 	vsub.f32	s12, s8, s15
 800caf6:	ee75 4a87 	vadd.f32	s9, s11, s14
 800cafa:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800cafe:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800cb02:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cb06:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800cb0a:	44dc      	add	ip, fp
 800cb0c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800cb10:	45e1      	cmp	r9, ip
 800cb12:	ed86 8a00 	vstr	s16, [r6]
 800cb16:	ed85 2a01 	vstr	s4, [r5, #4]
 800cb1a:	4456      	add	r6, sl
 800cb1c:	ed02 0a01 	vstr	s0, [r2, #-4]
 800cb20:	4455      	add	r5, sl
 800cb22:	edc0 6a00 	vstr	s13, [r0]
 800cb26:	ed82 1a00 	vstr	s2, [r2]
 800cb2a:	ed80 5a01 	vstr	s10, [r0, #4]
 800cb2e:	4452      	add	r2, sl
 800cb30:	ed01 3a01 	vstr	s6, [r1, #-4]
 800cb34:	4450      	add	r0, sl
 800cb36:	edc7 2a00 	vstr	s5, [r7]
 800cb3a:	edc4 4a00 	vstr	s9, [r4]
 800cb3e:	ed83 7a00 	vstr	s14, [r3]
 800cb42:	edc1 5a00 	vstr	s11, [r1]
 800cb46:	edc7 3a01 	vstr	s7, [r7, #4]
 800cb4a:	4451      	add	r1, sl
 800cb4c:	ed84 6a01 	vstr	s12, [r4, #4]
 800cb50:	4457      	add	r7, sl
 800cb52:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb56:	4454      	add	r4, sl
 800cb58:	4453      	add	r3, sl
 800cb5a:	f63f af44 	bhi.w	800c9e6 <arm_radix8_butterfly_f32+0x86>
 800cb5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb60:	2b07      	cmp	r3, #7
 800cb62:	f240 81b7 	bls.w	800ced4 <arm_radix8_butterfly_f32+0x574>
 800cb66:	9b06      	ldr	r3, [sp, #24]
 800cb68:	9903      	ldr	r1, [sp, #12]
 800cb6a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cb6c:	9e05      	ldr	r6, [sp, #20]
 800cb6e:	9a04      	ldr	r2, [sp, #16]
 800cb70:	f103 0c08 	add.w	ip, r3, #8
 800cb74:	9b02      	ldr	r3, [sp, #8]
 800cb76:	3108      	adds	r1, #8
 800cb78:	f108 0808 	add.w	r8, r8, #8
 800cb7c:	1841      	adds	r1, r0, r1
 800cb7e:	3608      	adds	r6, #8
 800cb80:	330c      	adds	r3, #12
 800cb82:	4604      	mov	r4, r0
 800cb84:	4444      	add	r4, r8
 800cb86:	18c3      	adds	r3, r0, r3
 800cb88:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb8a:	1981      	adds	r1, r0, r6
 800cb8c:	f10e 0e08 	add.w	lr, lr, #8
 800cb90:	3208      	adds	r2, #8
 800cb92:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cb94:	9107      	str	r1, [sp, #28]
 800cb96:	4604      	mov	r4, r0
 800cb98:	4601      	mov	r1, r0
 800cb9a:	9304      	str	r3, [sp, #16]
 800cb9c:	f100 030c 	add.w	r3, r0, #12
 800cba0:	4474      	add	r4, lr
 800cba2:	f04f 0801 	mov.w	r8, #1
 800cba6:	1882      	adds	r2, r0, r2
 800cba8:	4461      	add	r1, ip
 800cbaa:	9305      	str	r3, [sp, #20]
 800cbac:	464b      	mov	r3, r9
 800cbae:	940a      	str	r4, [sp, #40]	@ 0x28
 800cbb0:	46c1      	mov	r9, r8
 800cbb2:	9208      	str	r2, [sp, #32]
 800cbb4:	46d8      	mov	r8, fp
 800cbb6:	9106      	str	r1, [sp, #24]
 800cbb8:	f04f 0e00 	mov.w	lr, #0
 800cbbc:	469b      	mov	fp, r3
 800cbbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cbc2:	449e      	add	lr, r3
 800cbc4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800cbc8:	441a      	add	r2, r3
 800cbca:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbcc:	441a      	add	r2, r3
 800cbce:	18d4      	adds	r4, r2, r3
 800cbd0:	18e5      	adds	r5, r4, r3
 800cbd2:	18ee      	adds	r6, r5, r3
 800cbd4:	18f7      	adds	r7, r6, r3
 800cbd6:	eb07 0c03 	add.w	ip, r7, r3
 800cbda:	920d      	str	r2, [sp, #52]	@ 0x34
 800cbdc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800cbe0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800cbe4:	910c      	str	r1, [sp, #48]	@ 0x30
 800cbe6:	4419      	add	r1, r3
 800cbe8:	9103      	str	r1, [sp, #12]
 800cbea:	4419      	add	r1, r3
 800cbec:	18ca      	adds	r2, r1, r3
 800cbee:	9202      	str	r2, [sp, #8]
 800cbf0:	441a      	add	r2, r3
 800cbf2:	18d0      	adds	r0, r2, r3
 800cbf4:	ed92 ea01 	vldr	s28, [r2, #4]
 800cbf8:	9a02      	ldr	r2, [sp, #8]
 800cbfa:	edd4 7a00 	vldr	s15, [r4]
 800cbfe:	edd2 da01 	vldr	s27, [r2, #4]
 800cc02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cc04:	ed91 da01 	vldr	s26, [r1, #4]
 800cc08:	ed92 ca01 	vldr	s24, [r2, #4]
 800cc0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc0e:	9903      	ldr	r1, [sp, #12]
 800cc10:	edcd 7a03 	vstr	s15, [sp, #12]
 800cc14:	edd2 7a00 	vldr	s15, [r2]
 800cc18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc1a:	edcd 7a02 	vstr	s15, [sp, #8]
 800cc1e:	edd2 7a00 	vldr	s15, [r2]
 800cc22:	edd0 ea01 	vldr	s29, [r0, #4]
 800cc26:	edd1 ca01 	vldr	s25, [r1, #4]
 800cc2a:	eddc ba00 	vldr	s23, [ip]
 800cc2e:	edd7 aa00 	vldr	s21, [r7]
 800cc32:	ed96 aa00 	vldr	s20, [r6]
 800cc36:	edd5 9a00 	vldr	s19, [r5]
 800cc3a:	edcd 7a01 	vstr	s15, [sp, #4]
 800cc3e:	4403      	add	r3, r0
 800cc40:	ed93 fa01 	vldr	s30, [r3, #4]
 800cc44:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800cc48:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800cc4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800cc54:	46cc      	mov	ip, r9
 800cc56:	e001      	b.n	800cc5c <arm_radix8_butterfly_f32+0x2fc>
 800cc58:	3f3504f3 	.word	0x3f3504f3
 800cc5c:	ed91 6a00 	vldr	s12, [r1]
 800cc60:	ed93 5a00 	vldr	s10, [r3]
 800cc64:	edd0 fa00 	vldr	s31, [r0]
 800cc68:	edd4 7a00 	vldr	s15, [r4]
 800cc6c:	ed95 7a00 	vldr	s14, [r5]
 800cc70:	ed56 3a01 	vldr	s7, [r6, #-4]
 800cc74:	ed17 3a01 	vldr	s6, [r7, #-4]
 800cc78:	ed92 2a00 	vldr	s4, [r2]
 800cc7c:	ed96 0a00 	vldr	s0, [r6]
 800cc80:	ee33 8a85 	vadd.f32	s16, s7, s10
 800cc84:	ee32 1a06 	vadd.f32	s2, s4, s12
 800cc88:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800cc8c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800cc90:	ee78 1a04 	vadd.f32	s3, s16, s8
 800cc94:	ee71 6a24 	vadd.f32	s13, s2, s9
 800cc98:	ee32 2a46 	vsub.f32	s4, s4, s12
 800cc9c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800cca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cca4:	ed06 6a01 	vstr	s12, [r6, #-4]
 800cca8:	edd4 8a01 	vldr	s17, [r4, #4]
 800ccac:	ed92 9a01 	vldr	s18, [r2, #4]
 800ccb0:	edd7 0a00 	vldr	s1, [r7]
 800ccb4:	edd1 2a01 	vldr	s5, [r1, #4]
 800ccb8:	ed95 7a01 	vldr	s14, [r5, #4]
 800ccbc:	ed93 6a01 	vldr	s12, [r3, #4]
 800ccc0:	edd0 5a01 	vldr	s11, [r0, #4]
 800ccc4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ccc8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800cccc:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ccd0:	ee78 fac7 	vsub.f32	s31, s17, s14
 800ccd4:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ccd8:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ccdc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800cce0:	ee79 2a22 	vadd.f32	s5, s18, s5
 800cce4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800cce8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ccec:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ccf0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ccf4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ccf8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ccfc:	ee32 1a08 	vadd.f32	s2, s4, s16
 800cd00:	ee72 fa87 	vadd.f32	s31, s5, s14
 800cd04:	ee32 2a48 	vsub.f32	s4, s4, s16
 800cd08:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800cd0c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800cd10:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800cd14:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800cd18:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800cd1c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800cd20:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800cd24:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800cd28:	ee30 6a46 	vsub.f32	s12, s0, s12
 800cd2c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800cd30:	ee36 0a28 	vadd.f32	s0, s12, s17
 800cd34:	ee74 2a62 	vsub.f32	s5, s8, s5
 800cd38:	ee36 6a68 	vsub.f32	s12, s12, s17
 800cd3c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800cd40:	ee73 8a09 	vadd.f32	s17, s6, s18
 800cd44:	ee74 4a82 	vadd.f32	s9, s9, s4
 800cd48:	ee33 9a49 	vsub.f32	s18, s6, s18
 800cd4c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800cd50:	ee35 3a85 	vadd.f32	s6, s11, s10
 800cd54:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800cd58:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800cd5c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800cd60:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800cd64:	ee30 7a68 	vsub.f32	s14, s0, s17
 800cd68:	ee35 8a03 	vadd.f32	s16, s10, s6
 800cd6c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800cd70:	ee73 3a82 	vadd.f32	s7, s7, s4
 800cd74:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800cd78:	ed9d 2a01 	vldr	s4, [sp, #4]
 800cd7c:	eddd 1a02 	vldr	s3, [sp, #8]
 800cd80:	ee35 5a43 	vsub.f32	s10, s10, s6
 800cd84:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800cd88:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800cd8c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800cd90:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cd94:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800cd98:	ee76 5a49 	vsub.f32	s11, s12, s18
 800cd9c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800cda0:	ee39 6a06 	vadd.f32	s12, s18, s12
 800cda4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800cda8:	ee21 4a84 	vmul.f32	s8, s3, s8
 800cdac:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800cdb0:	ee22 7a07 	vmul.f32	s14, s4, s14
 800cdb4:	ee22 2a08 	vmul.f32	s4, s4, s16
 800cdb8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800cdbc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800cdc0:	ee31 1a09 	vadd.f32	s2, s2, s18
 800cdc4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800cdc8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800cdcc:	ee74 0a60 	vsub.f32	s1, s8, s1
 800cdd0:	ee37 7a48 	vsub.f32	s14, s14, s16
 800cdd4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800cdd8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800cddc:	ee72 1a21 	vadd.f32	s3, s4, s3
 800cde0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800cde4:	ee38 2a89 	vadd.f32	s4, s17, s18
 800cde8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800cdec:	ee38 8a04 	vadd.f32	s16, s16, s8
 800cdf0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800cdf4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800cdf8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800cdfc:	eddd 5a03 	vldr	s11, [sp, #12]
 800ce00:	edc6 fa00 	vstr	s31, [r6]
 800ce04:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800ce08:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800ce0c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800ce10:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800ce14:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800ce18:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800ce1c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800ce20:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800ce24:	ee25 6a86 	vmul.f32	s12, s11, s12
 800ce28:	ee74 4a89 	vadd.f32	s9, s9, s18
 800ce2c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800ce30:	ee78 8a85 	vadd.f32	s17, s17, s10
 800ce34:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ce38:	44c4      	add	ip, r8
 800ce3a:	45e3      	cmp	fp, ip
 800ce3c:	edc3 3a00 	vstr	s7, [r3]
 800ce40:	edc3 6a01 	vstr	s13, [r3, #4]
 800ce44:	4456      	add	r6, sl
 800ce46:	ed07 1a01 	vstr	s2, [r7, #-4]
 800ce4a:	edc7 0a00 	vstr	s1, [r7]
 800ce4e:	4453      	add	r3, sl
 800ce50:	ed80 2a00 	vstr	s4, [r0]
 800ce54:	edc0 2a01 	vstr	s5, [r0, #4]
 800ce58:	4457      	add	r7, sl
 800ce5a:	edc2 1a00 	vstr	s3, [r2]
 800ce5e:	ed82 7a01 	vstr	s14, [r2, #4]
 800ce62:	4450      	add	r0, sl
 800ce64:	ed85 8a00 	vstr	s16, [r5]
 800ce68:	ed85 0a01 	vstr	s0, [r5, #4]
 800ce6c:	4452      	add	r2, sl
 800ce6e:	edc1 4a00 	vstr	s9, [r1]
 800ce72:	4455      	add	r5, sl
 800ce74:	ed81 3a01 	vstr	s6, [r1, #4]
 800ce78:	edc4 8a00 	vstr	s17, [r4]
 800ce7c:	ed84 6a01 	vstr	s12, [r4, #4]
 800ce80:	4451      	add	r1, sl
 800ce82:	4454      	add	r4, sl
 800ce84:	f63f aeea 	bhi.w	800cc5c <arm_radix8_butterfly_f32+0x2fc>
 800ce88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce90:	3308      	adds	r3, #8
 800ce92:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce96:	3308      	adds	r3, #8
 800ce98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce9a:	9b08      	ldr	r3, [sp, #32]
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	9308      	str	r3, [sp, #32]
 800cea0:	9b07      	ldr	r3, [sp, #28]
 800cea2:	3308      	adds	r3, #8
 800cea4:	9307      	str	r3, [sp, #28]
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	3308      	adds	r3, #8
 800ceaa:	9306      	str	r3, [sp, #24]
 800ceac:	9b05      	ldr	r3, [sp, #20]
 800ceae:	3308      	adds	r3, #8
 800ceb0:	9305      	str	r3, [sp, #20]
 800ceb2:	9b04      	ldr	r3, [sp, #16]
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceba:	f109 0901 	add.w	r9, r9, #1
 800cebe:	454b      	cmp	r3, r9
 800cec0:	f47f ae7d 	bne.w	800cbbe <arm_radix8_butterfly_f32+0x25e>
 800cec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	46d9      	mov	r9, fp
 800cecc:	9310      	str	r3, [sp, #64]	@ 0x40
 800cece:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800ced2:	e554      	b.n	800c97e <arm_radix8_butterfly_f32+0x1e>
 800ced4:	b015      	add	sp, #84	@ 0x54
 800ced6:	ecbd 8b10 	vpop	{d8-d15}
 800ceda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cede:	bf00      	nop

0800cee0 <_ZdlPvj>:
 800cee0:	f000 b875 	b.w	800cfce <_ZdlPv>

0800cee4 <_Znwj>:
 800cee4:	2801      	cmp	r0, #1
 800cee6:	bf38      	it	cc
 800cee8:	2001      	movcc	r0, #1
 800ceea:	b510      	push	{r4, lr}
 800ceec:	4604      	mov	r4, r0
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 f8a0 	bl	800d034 <malloc>
 800cef4:	b100      	cbz	r0, 800cef8 <_Znwj+0x14>
 800cef6:	bd10      	pop	{r4, pc}
 800cef8:	f000 f86c 	bl	800cfd4 <_ZSt15get_new_handlerv>
 800cefc:	b908      	cbnz	r0, 800cf02 <_Znwj+0x1e>
 800cefe:	f000 f892 	bl	800d026 <abort>
 800cf02:	4780      	blx	r0
 800cf04:	e7f3      	b.n	800ceee <_Znwj+0xa>

0800cf06 <_ZNSaIcEC1Ev>:
 800cf06:	4770      	bx	lr

0800cf08 <_ZNSaIcED1Ev>:
 800cf08:	4770      	bx	lr

0800cf0a <_ZSt17__throw_bad_allocv>:
 800cf0a:	b508      	push	{r3, lr}
 800cf0c:	f000 f88b 	bl	800d026 <abort>

0800cf10 <_ZSt20__throw_length_errorPKc>:
 800cf10:	b508      	push	{r3, lr}
 800cf12:	f000 f888 	bl	800d026 <abort>

0800cf16 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800cf16:	b10a      	cbz	r2, 800cf1c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800cf18:	f000 b94a 	b.w	800d1b0 <memcmp>
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	4770      	bx	lr

0800cf20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800cf20:	6001      	str	r1, [r0, #0]
 800cf22:	4770      	bx	lr

0800cf24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800cf24:	6800      	ldr	r0, [r0, #0]
 800cf26:	4770      	bx	lr

0800cf28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800cf28:	3008      	adds	r0, #8
 800cf2a:	4770      	bx	lr

0800cf2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800cf2c:	6081      	str	r1, [r0, #8]
 800cf2e:	4770      	bx	lr

0800cf30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800cf30:	6803      	ldr	r3, [r0, #0]
 800cf32:	6041      	str	r1, [r0, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	545a      	strb	r2, [r3, r1]
 800cf38:	4770      	bx	lr

0800cf3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800cf3a:	f850 3b08 	ldr.w	r3, [r0], #8
 800cf3e:	1a1b      	subs	r3, r3, r0
 800cf40:	4258      	negs	r0, r3
 800cf42:	4158      	adcs	r0, r3
 800cf44:	4770      	bx	lr
	...

0800cf48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800cf48:	b508      	push	{r3, lr}
 800cf4a:	680b      	ldr	r3, [r1, #0]
 800cf4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf50:	d302      	bcc.n	800cf58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800cf52:	480d      	ldr	r0, [pc, #52]	@ (800cf88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800cf54:	f7ff ffdc 	bl	800cf10 <_ZSt20__throw_length_errorPKc>
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d90b      	bls.n	800cf74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800cf5c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800cf60:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800cf64:	d206      	bcs.n	800cf74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800cf66:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800cf6a:	bf2a      	itet	cs
 800cf6c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800cf70:	6008      	strcc	r0, [r1, #0]
 800cf72:	600b      	strcs	r3, [r1, #0]
 800cf74:	6808      	ldr	r0, [r1, #0]
 800cf76:	3001      	adds	r0, #1
 800cf78:	d501      	bpl.n	800cf7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800cf7a:	f7ff ffc6 	bl	800cf0a <_ZSt17__throw_bad_allocv>
 800cf7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf82:	f7ff bfaf 	b.w	800cee4 <_Znwj>
 800cf86:	bf00      	nop
 800cf88:	0800ff58 	.word	0x0800ff58

0800cf8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4604      	mov	r4, r0
 800cf90:	f7ff ffd3 	bl	800cf3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800cf94:	b920      	cbnz	r0, 800cfa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800cf96:	6820      	ldr	r0, [r4, #0]
 800cf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9c:	f000 b817 	b.w	800cfce <_ZdlPv>
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800cfa2:	b510      	push	{r4, lr}
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	f7ff fff1 	bl	800cf8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800cfaa:	4620      	mov	r0, r4
 800cfac:	bd10      	pop	{r4, pc}

0800cfae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800cfae:	b538      	push	{r3, r4, r5, lr}
 800cfb0:	6845      	ldr	r5, [r0, #4]
 800cfb2:	684c      	ldr	r4, [r1, #4]
 800cfb4:	6800      	ldr	r0, [r0, #0]
 800cfb6:	6809      	ldr	r1, [r1, #0]
 800cfb8:	42a5      	cmp	r5, r4
 800cfba:	462a      	mov	r2, r5
 800cfbc:	bf28      	it	cs
 800cfbe:	4622      	movcs	r2, r4
 800cfc0:	f7ff ffa9 	bl	800cf16 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800cfc4:	b900      	cbnz	r0, 800cfc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 800cfc6:	1b28      	subs	r0, r5, r4
 800cfc8:	bd38      	pop	{r3, r4, r5, pc}

0800cfca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800cfca:	6001      	str	r1, [r0, #0]
 800cfcc:	4770      	bx	lr

0800cfce <_ZdlPv>:
 800cfce:	f000 b839 	b.w	800d044 <free>
	...

0800cfd4 <_ZSt15get_new_handlerv>:
 800cfd4:	4b02      	ldr	r3, [pc, #8]	@ (800cfe0 <_ZSt15get_new_handlerv+0xc>)
 800cfd6:	6818      	ldr	r0, [r3, #0]
 800cfd8:	f3bf 8f5b 	dmb	ish
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	20001fe4 	.word	0x20001fe4

0800cfe4 <sqrtf>:
 800cfe4:	b508      	push	{r3, lr}
 800cfe6:	ed2d 8b02 	vpush	{d8}
 800cfea:	eeb0 8a40 	vmov.f32	s16, s0
 800cfee:	f000 f817 	bl	800d020 <__ieee754_sqrtf>
 800cff2:	eeb4 8a48 	vcmp.f32	s16, s16
 800cff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffa:	d60c      	bvs.n	800d016 <sqrtf+0x32>
 800cffc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d01c <sqrtf+0x38>
 800d000:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d008:	d505      	bpl.n	800d016 <sqrtf+0x32>
 800d00a:	f000 f93d 	bl	800d288 <__errno>
 800d00e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d012:	2321      	movs	r3, #33	@ 0x21
 800d014:	6003      	str	r3, [r0, #0]
 800d016:	ecbd 8b02 	vpop	{d8}
 800d01a:	bd08      	pop	{r3, pc}
 800d01c:	00000000 	.word	0x00000000

0800d020 <__ieee754_sqrtf>:
 800d020:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d024:	4770      	bx	lr

0800d026 <abort>:
 800d026:	b508      	push	{r3, lr}
 800d028:	2006      	movs	r0, #6
 800d02a:	f000 f901 	bl	800d230 <raise>
 800d02e:	2001      	movs	r0, #1
 800d030:	f7f6 fe3c 	bl	8003cac <_exit>

0800d034 <malloc>:
 800d034:	4b02      	ldr	r3, [pc, #8]	@ (800d040 <malloc+0xc>)
 800d036:	4601      	mov	r1, r0
 800d038:	6818      	ldr	r0, [r3, #0]
 800d03a:	f000 b82d 	b.w	800d098 <_malloc_r>
 800d03e:	bf00      	nop
 800d040:	20000018 	.word	0x20000018

0800d044 <free>:
 800d044:	4b02      	ldr	r3, [pc, #8]	@ (800d050 <free+0xc>)
 800d046:	4601      	mov	r1, r0
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f000 b949 	b.w	800d2e0 <_free_r>
 800d04e:	bf00      	nop
 800d050:	20000018 	.word	0x20000018

0800d054 <sbrk_aligned>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	4e0f      	ldr	r6, [pc, #60]	@ (800d094 <sbrk_aligned+0x40>)
 800d058:	460c      	mov	r4, r1
 800d05a:	6831      	ldr	r1, [r6, #0]
 800d05c:	4605      	mov	r5, r0
 800d05e:	b911      	cbnz	r1, 800d066 <sbrk_aligned+0x12>
 800d060:	f000 f902 	bl	800d268 <_sbrk_r>
 800d064:	6030      	str	r0, [r6, #0]
 800d066:	4621      	mov	r1, r4
 800d068:	4628      	mov	r0, r5
 800d06a:	f000 f8fd 	bl	800d268 <_sbrk_r>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d103      	bne.n	800d07a <sbrk_aligned+0x26>
 800d072:	f04f 34ff 	mov.w	r4, #4294967295
 800d076:	4620      	mov	r0, r4
 800d078:	bd70      	pop	{r4, r5, r6, pc}
 800d07a:	1cc4      	adds	r4, r0, #3
 800d07c:	f024 0403 	bic.w	r4, r4, #3
 800d080:	42a0      	cmp	r0, r4
 800d082:	d0f8      	beq.n	800d076 <sbrk_aligned+0x22>
 800d084:	1a21      	subs	r1, r4, r0
 800d086:	4628      	mov	r0, r5
 800d088:	f000 f8ee 	bl	800d268 <_sbrk_r>
 800d08c:	3001      	adds	r0, #1
 800d08e:	d1f2      	bne.n	800d076 <sbrk_aligned+0x22>
 800d090:	e7ef      	b.n	800d072 <sbrk_aligned+0x1e>
 800d092:	bf00      	nop
 800d094:	20001fe8 	.word	0x20001fe8

0800d098 <_malloc_r>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	1ccd      	adds	r5, r1, #3
 800d09e:	f025 0503 	bic.w	r5, r5, #3
 800d0a2:	3508      	adds	r5, #8
 800d0a4:	2d0c      	cmp	r5, #12
 800d0a6:	bf38      	it	cc
 800d0a8:	250c      	movcc	r5, #12
 800d0aa:	2d00      	cmp	r5, #0
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	db01      	blt.n	800d0b4 <_malloc_r+0x1c>
 800d0b0:	42a9      	cmp	r1, r5
 800d0b2:	d904      	bls.n	800d0be <_malloc_r+0x26>
 800d0b4:	230c      	movs	r3, #12
 800d0b6:	6033      	str	r3, [r6, #0]
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d194 <_malloc_r+0xfc>
 800d0c2:	f000 f869 	bl	800d198 <__malloc_lock>
 800d0c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ca:	461c      	mov	r4, r3
 800d0cc:	bb44      	cbnz	r4, 800d120 <_malloc_r+0x88>
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7ff ffbf 	bl	800d054 <sbrk_aligned>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	4604      	mov	r4, r0
 800d0da:	d158      	bne.n	800d18e <_malloc_r+0xf6>
 800d0dc:	f8d8 4000 	ldr.w	r4, [r8]
 800d0e0:	4627      	mov	r7, r4
 800d0e2:	2f00      	cmp	r7, #0
 800d0e4:	d143      	bne.n	800d16e <_malloc_r+0xd6>
 800d0e6:	2c00      	cmp	r4, #0
 800d0e8:	d04b      	beq.n	800d182 <_malloc_r+0xea>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	eb04 0903 	add.w	r9, r4, r3
 800d0f4:	f000 f8b8 	bl	800d268 <_sbrk_r>
 800d0f8:	4581      	cmp	r9, r0
 800d0fa:	d142      	bne.n	800d182 <_malloc_r+0xea>
 800d0fc:	6821      	ldr	r1, [r4, #0]
 800d0fe:	1a6d      	subs	r5, r5, r1
 800d100:	4629      	mov	r1, r5
 800d102:	4630      	mov	r0, r6
 800d104:	f7ff ffa6 	bl	800d054 <sbrk_aligned>
 800d108:	3001      	adds	r0, #1
 800d10a:	d03a      	beq.n	800d182 <_malloc_r+0xea>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	442b      	add	r3, r5
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	f8d8 3000 	ldr.w	r3, [r8]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	bb62      	cbnz	r2, 800d174 <_malloc_r+0xdc>
 800d11a:	f8c8 7000 	str.w	r7, [r8]
 800d11e:	e00f      	b.n	800d140 <_malloc_r+0xa8>
 800d120:	6822      	ldr	r2, [r4, #0]
 800d122:	1b52      	subs	r2, r2, r5
 800d124:	d420      	bmi.n	800d168 <_malloc_r+0xd0>
 800d126:	2a0b      	cmp	r2, #11
 800d128:	d917      	bls.n	800d15a <_malloc_r+0xc2>
 800d12a:	1961      	adds	r1, r4, r5
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	6025      	str	r5, [r4, #0]
 800d130:	bf18      	it	ne
 800d132:	6059      	strne	r1, [r3, #4]
 800d134:	6863      	ldr	r3, [r4, #4]
 800d136:	bf08      	it	eq
 800d138:	f8c8 1000 	streq.w	r1, [r8]
 800d13c:	5162      	str	r2, [r4, r5]
 800d13e:	604b      	str	r3, [r1, #4]
 800d140:	4630      	mov	r0, r6
 800d142:	f000 f82f 	bl	800d1a4 <__malloc_unlock>
 800d146:	f104 000b 	add.w	r0, r4, #11
 800d14a:	1d23      	adds	r3, r4, #4
 800d14c:	f020 0007 	bic.w	r0, r0, #7
 800d150:	1ac2      	subs	r2, r0, r3
 800d152:	bf1c      	itt	ne
 800d154:	1a1b      	subne	r3, r3, r0
 800d156:	50a3      	strne	r3, [r4, r2]
 800d158:	e7af      	b.n	800d0ba <_malloc_r+0x22>
 800d15a:	6862      	ldr	r2, [r4, #4]
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	bf0c      	ite	eq
 800d160:	f8c8 2000 	streq.w	r2, [r8]
 800d164:	605a      	strne	r2, [r3, #4]
 800d166:	e7eb      	b.n	800d140 <_malloc_r+0xa8>
 800d168:	4623      	mov	r3, r4
 800d16a:	6864      	ldr	r4, [r4, #4]
 800d16c:	e7ae      	b.n	800d0cc <_malloc_r+0x34>
 800d16e:	463c      	mov	r4, r7
 800d170:	687f      	ldr	r7, [r7, #4]
 800d172:	e7b6      	b.n	800d0e2 <_malloc_r+0x4a>
 800d174:	461a      	mov	r2, r3
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	d1fb      	bne.n	800d174 <_malloc_r+0xdc>
 800d17c:	2300      	movs	r3, #0
 800d17e:	6053      	str	r3, [r2, #4]
 800d180:	e7de      	b.n	800d140 <_malloc_r+0xa8>
 800d182:	230c      	movs	r3, #12
 800d184:	6033      	str	r3, [r6, #0]
 800d186:	4630      	mov	r0, r6
 800d188:	f000 f80c 	bl	800d1a4 <__malloc_unlock>
 800d18c:	e794      	b.n	800d0b8 <_malloc_r+0x20>
 800d18e:	6005      	str	r5, [r0, #0]
 800d190:	e7d6      	b.n	800d140 <_malloc_r+0xa8>
 800d192:	bf00      	nop
 800d194:	20001fec 	.word	0x20001fec

0800d198 <__malloc_lock>:
 800d198:	4801      	ldr	r0, [pc, #4]	@ (800d1a0 <__malloc_lock+0x8>)
 800d19a:	f000 b89f 	b.w	800d2dc <__retarget_lock_acquire_recursive>
 800d19e:	bf00      	nop
 800d1a0:	2000212c 	.word	0x2000212c

0800d1a4 <__malloc_unlock>:
 800d1a4:	4801      	ldr	r0, [pc, #4]	@ (800d1ac <__malloc_unlock+0x8>)
 800d1a6:	f000 b89a 	b.w	800d2de <__retarget_lock_release_recursive>
 800d1aa:	bf00      	nop
 800d1ac:	2000212c 	.word	0x2000212c

0800d1b0 <memcmp>:
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	3901      	subs	r1, #1
 800d1b4:	4402      	add	r2, r0
 800d1b6:	4290      	cmp	r0, r2
 800d1b8:	d101      	bne.n	800d1be <memcmp+0xe>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e005      	b.n	800d1ca <memcmp+0x1a>
 800d1be:	7803      	ldrb	r3, [r0, #0]
 800d1c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1c4:	42a3      	cmp	r3, r4
 800d1c6:	d001      	beq.n	800d1cc <memcmp+0x1c>
 800d1c8:	1b18      	subs	r0, r3, r4
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	e7f2      	b.n	800d1b6 <memcmp+0x6>

0800d1d0 <memset>:
 800d1d0:	4402      	add	r2, r0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d100      	bne.n	800d1da <memset+0xa>
 800d1d8:	4770      	bx	lr
 800d1da:	f803 1b01 	strb.w	r1, [r3], #1
 800d1de:	e7f9      	b.n	800d1d4 <memset+0x4>

0800d1e0 <_raise_r>:
 800d1e0:	291f      	cmp	r1, #31
 800d1e2:	b538      	push	{r3, r4, r5, lr}
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	d904      	bls.n	800d1f4 <_raise_r+0x14>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1f6:	b112      	cbz	r2, 800d1fe <_raise_r+0x1e>
 800d1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1fc:	b94b      	cbnz	r3, 800d212 <_raise_r+0x32>
 800d1fe:	4628      	mov	r0, r5
 800d200:	f000 f830 	bl	800d264 <_getpid_r>
 800d204:	4622      	mov	r2, r4
 800d206:	4601      	mov	r1, r0
 800d208:	4628      	mov	r0, r5
 800d20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d20e:	f000 b817 	b.w	800d240 <_kill_r>
 800d212:	2b01      	cmp	r3, #1
 800d214:	d00a      	beq.n	800d22c <_raise_r+0x4c>
 800d216:	1c59      	adds	r1, r3, #1
 800d218:	d103      	bne.n	800d222 <_raise_r+0x42>
 800d21a:	2316      	movs	r3, #22
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	2001      	movs	r0, #1
 800d220:	e7e7      	b.n	800d1f2 <_raise_r+0x12>
 800d222:	2100      	movs	r1, #0
 800d224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d228:	4620      	mov	r0, r4
 800d22a:	4798      	blx	r3
 800d22c:	2000      	movs	r0, #0
 800d22e:	e7e0      	b.n	800d1f2 <_raise_r+0x12>

0800d230 <raise>:
 800d230:	4b02      	ldr	r3, [pc, #8]	@ (800d23c <raise+0xc>)
 800d232:	4601      	mov	r1, r0
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	f7ff bfd3 	b.w	800d1e0 <_raise_r>
 800d23a:	bf00      	nop
 800d23c:	20000018 	.word	0x20000018

0800d240 <_kill_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	@ (800d260 <_kill_r+0x20>)
 800d244:	2300      	movs	r3, #0
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	4611      	mov	r1, r2
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	f7f6 fd1d 	bl	8003c8c <_kill>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d102      	bne.n	800d25c <_kill_r+0x1c>
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	b103      	cbz	r3, 800d25c <_kill_r+0x1c>
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	20002128 	.word	0x20002128

0800d264 <_getpid_r>:
 800d264:	f7f6 bd0a 	b.w	8003c7c <_getpid>

0800d268 <_sbrk_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	@ (800d284 <_sbrk_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f6 fd26 	bl	8003cc4 <_sbrk>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_sbrk_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_sbrk_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20002128 	.word	0x20002128

0800d288 <__errno>:
 800d288:	4b01      	ldr	r3, [pc, #4]	@ (800d290 <__errno+0x8>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000018 	.word	0x20000018

0800d294 <__libc_init_array>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	4d0d      	ldr	r5, [pc, #52]	@ (800d2cc <__libc_init_array+0x38>)
 800d298:	4c0d      	ldr	r4, [pc, #52]	@ (800d2d0 <__libc_init_array+0x3c>)
 800d29a:	1b64      	subs	r4, r4, r5
 800d29c:	10a4      	asrs	r4, r4, #2
 800d29e:	2600      	movs	r6, #0
 800d2a0:	42a6      	cmp	r6, r4
 800d2a2:	d109      	bne.n	800d2b8 <__libc_init_array+0x24>
 800d2a4:	4d0b      	ldr	r5, [pc, #44]	@ (800d2d4 <__libc_init_array+0x40>)
 800d2a6:	4c0c      	ldr	r4, [pc, #48]	@ (800d2d8 <__libc_init_array+0x44>)
 800d2a8:	f000 f864 	bl	800d374 <_init>
 800d2ac:	1b64      	subs	r4, r4, r5
 800d2ae:	10a4      	asrs	r4, r4, #2
 800d2b0:	2600      	movs	r6, #0
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	d105      	bne.n	800d2c2 <__libc_init_array+0x2e>
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}
 800d2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2bc:	4798      	blx	r3
 800d2be:	3601      	adds	r6, #1
 800d2c0:	e7ee      	b.n	800d2a0 <__libc_init_array+0xc>
 800d2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c6:	4798      	blx	r3
 800d2c8:	3601      	adds	r6, #1
 800d2ca:	e7f2      	b.n	800d2b2 <__libc_init_array+0x1e>
 800d2cc:	0800ff78 	.word	0x0800ff78
 800d2d0:	0800ff78 	.word	0x0800ff78
 800d2d4:	0800ff78 	.word	0x0800ff78
 800d2d8:	0800ff84 	.word	0x0800ff84

0800d2dc <__retarget_lock_acquire_recursive>:
 800d2dc:	4770      	bx	lr

0800d2de <__retarget_lock_release_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <_free_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	d041      	beq.n	800d36c <_free_r+0x8c>
 800d2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ec:	1f0c      	subs	r4, r1, #4
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	bfb8      	it	lt
 800d2f2:	18e4      	addlt	r4, r4, r3
 800d2f4:	f7ff ff50 	bl	800d198 <__malloc_lock>
 800d2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d370 <_free_r+0x90>)
 800d2fa:	6813      	ldr	r3, [r2, #0]
 800d2fc:	b933      	cbnz	r3, 800d30c <_free_r+0x2c>
 800d2fe:	6063      	str	r3, [r4, #4]
 800d300:	6014      	str	r4, [r2, #0]
 800d302:	4628      	mov	r0, r5
 800d304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d308:	f7ff bf4c 	b.w	800d1a4 <__malloc_unlock>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d908      	bls.n	800d322 <_free_r+0x42>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	1821      	adds	r1, r4, r0
 800d314:	428b      	cmp	r3, r1
 800d316:	bf01      	itttt	eq
 800d318:	6819      	ldreq	r1, [r3, #0]
 800d31a:	685b      	ldreq	r3, [r3, #4]
 800d31c:	1809      	addeq	r1, r1, r0
 800d31e:	6021      	streq	r1, [r4, #0]
 800d320:	e7ed      	b.n	800d2fe <_free_r+0x1e>
 800d322:	461a      	mov	r2, r3
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	b10b      	cbz	r3, 800d32c <_free_r+0x4c>
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d9fa      	bls.n	800d322 <_free_r+0x42>
 800d32c:	6811      	ldr	r1, [r2, #0]
 800d32e:	1850      	adds	r0, r2, r1
 800d330:	42a0      	cmp	r0, r4
 800d332:	d10b      	bne.n	800d34c <_free_r+0x6c>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	4401      	add	r1, r0
 800d338:	1850      	adds	r0, r2, r1
 800d33a:	4283      	cmp	r3, r0
 800d33c:	6011      	str	r1, [r2, #0]
 800d33e:	d1e0      	bne.n	800d302 <_free_r+0x22>
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	6053      	str	r3, [r2, #4]
 800d346:	4408      	add	r0, r1
 800d348:	6010      	str	r0, [r2, #0]
 800d34a:	e7da      	b.n	800d302 <_free_r+0x22>
 800d34c:	d902      	bls.n	800d354 <_free_r+0x74>
 800d34e:	230c      	movs	r3, #12
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	e7d6      	b.n	800d302 <_free_r+0x22>
 800d354:	6820      	ldr	r0, [r4, #0]
 800d356:	1821      	adds	r1, r4, r0
 800d358:	428b      	cmp	r3, r1
 800d35a:	bf04      	itt	eq
 800d35c:	6819      	ldreq	r1, [r3, #0]
 800d35e:	685b      	ldreq	r3, [r3, #4]
 800d360:	6063      	str	r3, [r4, #4]
 800d362:	bf04      	itt	eq
 800d364:	1809      	addeq	r1, r1, r0
 800d366:	6021      	streq	r1, [r4, #0]
 800d368:	6054      	str	r4, [r2, #4]
 800d36a:	e7ca      	b.n	800d302 <_free_r+0x22>
 800d36c:	bd38      	pop	{r3, r4, r5, pc}
 800d36e:	bf00      	nop
 800d370:	20001fec 	.word	0x20001fec

0800d374 <_init>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	bf00      	nop
 800d378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37a:	bc08      	pop	{r3}
 800d37c:	469e      	mov	lr, r3
 800d37e:	4770      	bx	lr

0800d380 <_fini>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr
