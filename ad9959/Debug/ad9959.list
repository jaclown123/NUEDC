
ad9959.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  00004020  2**0
                  CONTENTS
  4 .ARM          00000008  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002738  08002738  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800273c  0800273c  0000373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002740  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000020  08002760  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08002760  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012159  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  000161a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009023  00000000  00000000  000188e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00021910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c04  00000000  00000000  000227f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c18  00000000  00000000  000233fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b5a  00000000  00000000  00049014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7a96  00000000  00000000  0005db6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155604  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026f0  00000000  00000000  00155648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00157d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002700 	.word	0x08002700

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08002700 	.word	0x08002700

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b99d 	b.w	8000574 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f835 	bl	80002b8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f828 	bl	80002b8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f817 	bl	80002b8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f809 	bl	80002b8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14e      	bne.n	8000362 <__udivmoddi4+0xaa>
 80002c4:	4694      	mov	ip, r2
 80002c6:	458c      	cmp	ip, r1
 80002c8:	4686      	mov	lr, r0
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	d962      	bls.n	8000396 <__udivmoddi4+0xde>
 80002d0:	b14a      	cbz	r2, 80002e6 <__udivmoddi4+0x2e>
 80002d2:	f1c2 0320 	rsb	r3, r2, #32
 80002d6:	4091      	lsls	r1, r2
 80002d8:	fa20 f303 	lsr.w	r3, r0, r3
 80002dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e0:	4319      	orrs	r1, r3
 80002e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ea:	fa1f f68c 	uxth.w	r6, ip
 80002ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb07 1114 	mls	r1, r7, r4, r1
 80002fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fe:	fb04 f106 	mul.w	r1, r4, r6
 8000302:	4299      	cmp	r1, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x64>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f104 30ff 	add.w	r0, r4, #4294967295
 800030e:	f080 8112 	bcs.w	8000536 <__udivmoddi4+0x27e>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 810f 	bls.w	8000536 <__udivmoddi4+0x27e>
 8000318:	3c02      	subs	r4, #2
 800031a:	4463      	add	r3, ip
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb1 f0f7 	udiv	r0, r1, r7
 8000326:	fb07 1110 	mls	r1, r7, r0, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb00 f606 	mul.w	r6, r0, r6
 8000332:	429e      	cmp	r6, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x94>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 31ff 	add.w	r1, r0, #4294967295
 800033e:	f080 80fc 	bcs.w	800053a <__udivmoddi4+0x282>
 8000342:	429e      	cmp	r6, r3
 8000344:	f240 80f9 	bls.w	800053a <__udivmoddi4+0x282>
 8000348:	4463      	add	r3, ip
 800034a:	3802      	subs	r0, #2
 800034c:	1b9b      	subs	r3, r3, r6
 800034e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa6>
 8000356:	40d3      	lsrs	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	e9c5 3200 	strd	r3, r2, [r5]
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xba>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb4>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa6>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d146      	bne.n	8000408 <__udivmoddi4+0x150>
 800037a:	42a3      	cmp	r3, r4
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xcc>
 800037e:	4290      	cmp	r0, r2
 8000380:	f0c0 80f0 	bcc.w	8000564 <__udivmoddi4+0x2ac>
 8000384:	1a86      	subs	r6, r0, r2
 8000386:	eb64 0303 	sbc.w	r3, r4, r3
 800038a:	2001      	movs	r0, #1
 800038c:	2d00      	cmp	r5, #0
 800038e:	d0e6      	beq.n	800035e <__udivmoddi4+0xa6>
 8000390:	e9c5 6300 	strd	r6, r3, [r5]
 8000394:	e7e3      	b.n	800035e <__udivmoddi4+0xa6>
 8000396:	2a00      	cmp	r2, #0
 8000398:	f040 8090 	bne.w	80004bc <__udivmoddi4+0x204>
 800039c:	eba1 040c 	sub.w	r4, r1, ip
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b2:	fb08 4416 	mls	r4, r8, r6, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb07 f006 	mul.w	r0, r7, r6
 80003be:	4298      	cmp	r0, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x11c>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x11a>
 80003cc:	4298      	cmp	r0, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2b4>
 80003d2:	4626      	mov	r6, r4
 80003d4:	1a1c      	subs	r4, r3, r0
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb4 f0f8 	udiv	r0, r4, r8
 80003de:	fb08 4410 	mls	r4, r8, r0, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb00 f707 	mul.w	r7, r0, r7
 80003ea:	429f      	cmp	r7, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x148>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x146>
 80003f8:	429f      	cmp	r7, r3
 80003fa:	f200 80b0 	bhi.w	800055e <__udivmoddi4+0x2a6>
 80003fe:	4620      	mov	r0, r4
 8000400:	1bdb      	subs	r3, r3, r7
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0x9c>
 8000408:	f1c1 0620 	rsb	r6, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	431f      	orrs	r7, r3
 8000414:	fa20 fc06 	lsr.w	ip, r0, r6
 8000418:	fa04 f301 	lsl.w	r3, r4, r1
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	40f4      	lsrs	r4, r6
 8000422:	fa00 f801 	lsl.w	r8, r0, r1
 8000426:	0c38      	lsrs	r0, r7, #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fbb4 fef0 	udiv	lr, r4, r0
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	fb00 441e 	mls	r4, r0, lr, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	d90a      	bls.n	800045e <__udivmoddi4+0x1a6>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044e:	f080 8084 	bcs.w	800055a <__udivmoddi4+0x2a2>
 8000452:	45a1      	cmp	r9, r4
 8000454:	f240 8081 	bls.w	800055a <__udivmoddi4+0x2a2>
 8000458:	f1ae 0e02 	sub.w	lr, lr, #2
 800045c:	443c      	add	r4, r7
 800045e:	eba4 0409 	sub.w	r4, r4, r9
 8000462:	fa1f f983 	uxth.w	r9, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	45a4      	cmp	ip, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x1d2>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	d267      	bcs.n	8000552 <__udivmoddi4+0x29a>
 8000482:	45a4      	cmp	ip, r4
 8000484:	d965      	bls.n	8000552 <__udivmoddi4+0x29a>
 8000486:	3b02      	subs	r3, #2
 8000488:	443c      	add	r4, r7
 800048a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048e:	fba0 9302 	umull	r9, r3, r0, r2
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	429c      	cmp	r4, r3
 8000498:	46ce      	mov	lr, r9
 800049a:	469c      	mov	ip, r3
 800049c:	d351      	bcc.n	8000542 <__udivmoddi4+0x28a>
 800049e:	d04e      	beq.n	800053e <__udivmoddi4+0x286>
 80004a0:	b155      	cbz	r5, 80004b8 <__udivmoddi4+0x200>
 80004a2:	ebb8 030e 	subs.w	r3, r8, lr
 80004a6:	eb64 040c 	sbc.w	r4, r4, ip
 80004aa:	fa04 f606 	lsl.w	r6, r4, r6
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431e      	orrs	r6, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	e9c5 6400 	strd	r6, r4, [r5]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e750      	b.n	800035e <__udivmoddi4+0xa6>
 80004bc:	f1c2 0320 	rsb	r3, r2, #32
 80004c0:	fa20 f103 	lsr.w	r1, r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa24 f303 	lsr.w	r3, r4, r3
 80004cc:	4094      	lsls	r4, r2
 80004ce:	430c      	orrs	r4, r1
 80004d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d8:	fa1f f78c 	uxth.w	r7, ip
 80004dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e0:	fb08 3110 	mls	r1, r8, r0, r3
 80004e4:	0c23      	lsrs	r3, r4, #16
 80004e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ea:	fb00 f107 	mul.w	r1, r0, r7
 80004ee:	4299      	cmp	r1, r3
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x24c>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fa:	d22c      	bcs.n	8000556 <__udivmoddi4+0x29e>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	d92a      	bls.n	8000556 <__udivmoddi4+0x29e>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb3 f1f8 	udiv	r1, r3, r8
 800050c:	fb08 3311 	mls	r3, r8, r1, r3
 8000510:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000514:	fb01 f307 	mul.w	r3, r1, r7
 8000518:	42a3      	cmp	r3, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x276>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f101 36ff 	add.w	r6, r1, #4294967295
 8000524:	d213      	bcs.n	800054e <__udivmoddi4+0x296>
 8000526:	42a3      	cmp	r3, r4
 8000528:	d911      	bls.n	800054e <__udivmoddi4+0x296>
 800052a:	3902      	subs	r1, #2
 800052c:	4464      	add	r4, ip
 800052e:	1ae4      	subs	r4, r4, r3
 8000530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000534:	e739      	b.n	80003aa <__udivmoddi4+0xf2>
 8000536:	4604      	mov	r4, r0
 8000538:	e6f0      	b.n	800031c <__udivmoddi4+0x64>
 800053a:	4608      	mov	r0, r1
 800053c:	e706      	b.n	800034c <__udivmoddi4+0x94>
 800053e:	45c8      	cmp	r8, r9
 8000540:	d2ae      	bcs.n	80004a0 <__udivmoddi4+0x1e8>
 8000542:	ebb9 0e02 	subs.w	lr, r9, r2
 8000546:	eb63 0c07 	sbc.w	ip, r3, r7
 800054a:	3801      	subs	r0, #1
 800054c:	e7a8      	b.n	80004a0 <__udivmoddi4+0x1e8>
 800054e:	4631      	mov	r1, r6
 8000550:	e7ed      	b.n	800052e <__udivmoddi4+0x276>
 8000552:	4603      	mov	r3, r0
 8000554:	e799      	b.n	800048a <__udivmoddi4+0x1d2>
 8000556:	4630      	mov	r0, r6
 8000558:	e7d4      	b.n	8000504 <__udivmoddi4+0x24c>
 800055a:	46d6      	mov	lr, sl
 800055c:	e77f      	b.n	800045e <__udivmoddi4+0x1a6>
 800055e:	4463      	add	r3, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e74d      	b.n	8000400 <__udivmoddi4+0x148>
 8000564:	4606      	mov	r6, r0
 8000566:	4623      	mov	r3, r4
 8000568:	4608      	mov	r0, r1
 800056a:	e70f      	b.n	800038c <__udivmoddi4+0xd4>
 800056c:	3e02      	subs	r6, #2
 800056e:	4463      	add	r3, ip
 8000570:	e730      	b.n	80003d4 <__udivmoddi4+0x11c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <AD9959_WriteData>:
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_SET);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_RESET);
//}
void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 8000578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800057c:	4604      	mov	r4, r0
 800057e:	4688      	mov	r8, r1
 8000580:	4692      	mov	sl, r2
	uint8_t	RegisterIndex = 0;
	uint8_t	i = 0;

	ControlValue = RegisterAddress;
//д����?
	SCLK_LOW;
 8000582:	4d31      	ldr	r5, [pc, #196]	@ (8000648 <AD9959_WriteData+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	4628      	mov	r0, r5
 800058a:	f001 f8d5 	bl	8001738 <HAL_GPIO_WritePin>
	CS_LOW;
 800058e:	2200      	movs	r2, #0
 8000590:	2102      	movs	r1, #2
 8000592:	4628      	mov	r0, r5
 8000594:	f001 f8d0 	bl	8001738 <HAL_GPIO_WritePin>
 8000598:	2508      	movs	r5, #8
	for(i=0; i<8; i++)
	{
		SCLK_LOW;
 800059a:	4e2b      	ldr	r6, [pc, #172]	@ (8000648 <AD9959_WriteData+0xd0>)
 800059c:	f04f 0900 	mov.w	r9, #0
 80005a0:	2701      	movs	r7, #1
 80005a2:	464a      	mov	r2, r9
 80005a4:	4639      	mov	r1, r7
 80005a6:	4630      	mov	r0, r6
 80005a8:	f001 f8c6 	bl	8001738 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 80005ac:	f014 0f80 	tst.w	r4, #128	@ 0x80
		SDIO0_HIGH;
 80005b0:	bf14      	ite	ne
 80005b2:	463a      	movne	r2, r7
		else
			SDIO0_LOW;
 80005b4:	464a      	moveq	r2, r9
 80005b6:	2104      	movs	r1, #4
 80005b8:	4630      	mov	r0, r6
 80005ba:	f001 f8bd 	bl	8001738 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 80005be:	463a      	mov	r2, r7
 80005c0:	4639      	mov	r1, r7
 80005c2:	4630      	mov	r0, r6
 80005c4:	f001 f8b8 	bl	8001738 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 80005c8:	0064      	lsls	r4, r4, #1
 80005ca:	b2e4      	uxtb	r4, r4
	for(i=0; i<8; i++)
 80005cc:	1e6b      	subs	r3, r5, #1
 80005ce:	f013 05ff 	ands.w	r5, r3, #255	@ 0xff
 80005d2:	d1e6      	bne.n	80005a2 <AD9959_WriteData+0x2a>
	}
	SCLK_LOW;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	481b      	ldr	r0, [pc, #108]	@ (8000648 <AD9959_WriteData+0xd0>)
 80005da:	f001 f8ad 	bl	8001738 <HAL_GPIO_WritePin>
//д������
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 80005de:	f1b8 0f00 	cmp.w	r8, #0
 80005e2:	d02a      	beq.n	800063a <AD9959_WriteData+0xc2>
 80005e4:	46d1      	mov	r9, sl
 80005e6:	44c2      	add	sl, r8
	{
		ValueToWrite = RegisterData[RegisterIndex];
		for (i=0; i<8; i++)
		{
			SCLK_LOW;
 80005e8:	4e17      	ldr	r6, [pc, #92]	@ (8000648 <AD9959_WriteData+0xd0>)
 80005ea:	f04f 0800 	mov.w	r8, #0
 80005ee:	2701      	movs	r7, #1
 80005f0:	e006      	b.n	8000600 <AD9959_WriteData+0x88>
			else
			SDIO0_LOW;
			SCLK_HIGH;
			ValueToWrite <<= 1;
		}
		SCLK_LOW;
 80005f2:	4642      	mov	r2, r8
 80005f4:	4639      	mov	r1, r7
 80005f6:	4630      	mov	r0, r6
 80005f8:	f001 f89e 	bl	8001738 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 80005fc:	45d1      	cmp	r9, sl
 80005fe:	d01c      	beq.n	800063a <AD9959_WriteData+0xc2>
		ValueToWrite = RegisterData[RegisterIndex];
 8000600:	f819 5b01 	ldrb.w	r5, [r9], #1
 8000604:	2408      	movs	r4, #8
			SCLK_LOW;
 8000606:	4642      	mov	r2, r8
 8000608:	4639      	mov	r1, r7
 800060a:	4630      	mov	r0, r6
 800060c:	f001 f894 	bl	8001738 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 8000610:	f015 0f80 	tst.w	r5, #128	@ 0x80
			SDIO0_HIGH;
 8000614:	bf14      	ite	ne
 8000616:	463a      	movne	r2, r7
			SDIO0_LOW;
 8000618:	4642      	moveq	r2, r8
 800061a:	2104      	movs	r1, #4
 800061c:	4630      	mov	r0, r6
 800061e:	f001 f88b 	bl	8001738 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 8000622:	463a      	mov	r2, r7
 8000624:	4639      	mov	r1, r7
 8000626:	4630      	mov	r0, r6
 8000628:	f001 f886 	bl	8001738 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 800062c:	006d      	lsls	r5, r5, #1
 800062e:	b2ed      	uxtb	r5, r5
		for (i=0; i<8; i++)
 8000630:	1e63      	subs	r3, r4, #1
 8000632:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8000636:	d1e6      	bne.n	8000606 <AD9959_WriteData+0x8e>
 8000638:	e7db      	b.n	80005f2 <AD9959_WriteData+0x7a>
	}
  CS_HIGH;
 800063a:	2201      	movs	r2, #1
 800063c:	2102      	movs	r1, #2
 800063e:	4802      	ldr	r0, [pc, #8]	@ (8000648 <AD9959_WriteData+0xd0>)
 8000640:	f001 f87a 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000648:	48000800 	.word	0x48000800
 800064c:	00000000 	.word	0x00000000

08000650 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 8000650:	b500      	push	{lr}
 8000652:	b083      	sub	sp, #12
 8000654:	4601      	mov	r1, r0
		uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};	//�м����?????????
	  uint32_t Temp;
	  Temp=(uint32_t)fre * 4294967296 / 500000000;
 8000656:	a30c      	add	r3, pc, #48	@ (adr r3, 8000688 <Write_CFTW0+0x38>)
 8000658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fddb 	bl	8000218 <__aeabi_ldivmod>
	  CFTW0_DATA[3]=(uint8_t)Temp;
 8000662:	f88d 0007 	strb.w	r0, [sp, #7]
	  CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 8000666:	0a03      	lsrs	r3, r0, #8
 8000668:	f88d 3006 	strb.w	r3, [sp, #6]
	  CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 800066c:	0c03      	lsrs	r3, r0, #16
 800066e:	f88d 3005 	strb.w	r3, [sp, #5]
	  CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 8000672:	0e00      	lsrs	r0, r0, #24
 8000674:	f88d 0004 	strb.w	r0, [sp, #4]
		AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 8000678:	aa01      	add	r2, sp, #4
 800067a:	2104      	movs	r1, #4
 800067c:	4608      	mov	r0, r1
 800067e:	f7ff ff7b 	bl	8000578 <AD9959_WriteData>
}
 8000682:	b003      	add	sp, #12
 8000684:	f85d fb04 	ldr.w	pc, [sp], #4
 8000688:	1dcd6500 	.word	0x1dcd6500
 800068c:	00000000 	.word	0x00000000

08000690 <AD9959_Set_Fre>:
void AD9959_Set_Fre(uint8_t Channel,uint32_t Freq)
{
 8000690:	b510      	push	{r4, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	460c      	mov	r4, r1
		uint8_t CHANNEL[1] = {0x00};

		CHANNEL[0]=Channel;
 8000696:	f88d 0004 	strb.w	r0, [sp, #4]
		AD9959_WriteData(0x00,1,CHANNEL);//���ƼĴ���д��CHnͨ����ѡ��CHn
 800069a:	aa01      	add	r2, sp, #4
 800069c:	2101      	movs	r1, #1
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff6a 	bl	8000578 <AD9959_WriteData>
    Write_CFTW0(Freq);//���CHn�趨Ƶ��
 80006a4:	4620      	mov	r0, r4
 80006a6:	f7ff ffd3 	bl	8000650 <Write_CFTW0>
}
 80006aa:	b002      	add	sp, #8
 80006ac:	bd10      	pop	{r4, pc}

080006ae <IntReset>:
void IntReset()
{
 80006ae:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f001 f83e 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fbeb 	bl	8000e98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2102      	movs	r1, #2
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f001 f835 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fbe2 	bl	8000e98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f001 f82c 	bl	8001738 <HAL_GPIO_WritePin>
}
 80006e0:	bd08      	pop	{r3, pc}
	...

080006e4 <Intserve>:
void Intserve(void)
{
 80006e4:	b510      	push	{r4, lr}
		//AD9959_PWR=0;
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 80006e6:	4c22      	ldr	r4, [pc, #136]	@ (8000770 <Intserve+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4620      	mov	r0, r4
 80006ee:	f001 f823 	bl	8001738 <HAL_GPIO_WritePin>
    CS_HIGH;
 80006f2:	2201      	movs	r2, #1
 80006f4:	2102      	movs	r1, #2
 80006f6:	4620      	mov	r0, r4
 80006f8:	f001 f81e 	bl	8001738 <HAL_GPIO_WritePin>
    SCLK_LOW;
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	4620      	mov	r0, r4
 8000702:	f001 f819 	bl	8001738 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	4620      	mov	r0, r4
 800070c:	f001 f814 	bl	8001738 <HAL_GPIO_WritePin>
//    PS0 = 0;
    HAL_GPIO_WritePin(PS0_GPIO_Port, PS0_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	4620      	mov	r0, r4
 8000716:	f001 f80f 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS1_GPIO_Port, PS1_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2140      	movs	r1, #64	@ 0x40
 800071e:	4620      	mov	r0, r4
 8000720:	f001 f80a 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS2_GPIO_Port, PS2_Pin, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	4620      	mov	r0, r4
 800072a:	f001 f805 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS3_GPIO_Port, PS3_Pin, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000734:	4620      	mov	r0, r4
 8000736:	f000 ffff 	bl	8001738 <HAL_GPIO_WritePin>
//    PS1 = 0;
//    PS2 = 0;
//    PS3 = 0;
    SDIO0_HIGH;
 800073a:	2201      	movs	r2, #1
 800073c:	2104      	movs	r1, #4
 800073e:	4620      	mov	r0, r4
 8000740:	f000 fffa 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO1_GPIO_Port, SDIO1_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800074a:	4620      	mov	r0, r4
 800074c:	f000 fff4 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO2_GPIO_Port, SDIO2_Pin, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f000 ffed 	bl	8001738 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO3_GPIO_Port, SDIO3_Pin, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 ffe6 	bl	8001738 <HAL_GPIO_WritePin>
//    SDIO1 = 0;
//    SDIO2 = 0;
//    SDIO3 = 0;
}
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	48000800 	.word	0x48000800

08000774 <Write_ACR>:
void Write_ACR(uint16_t Ampli)
{
 8000774:	b500      	push	{lr}
 8000776:	b083      	sub	sp, #12
	uint32_t A_temp=0;
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <Write_ACR+0x2c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f8ad 3004 	strh.w	r3, [sp, #4]
  A_temp=Ampli|0x1000;
 8000780:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000

	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 8000784:	0a03      	lsrs	r3, r0, #8
 8000786:	f88d 3005 	strb.w	r3, [sp, #5]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 800078a:	f88d 0006 	strb.w	r0, [sp, #6]
  AD9959_WriteData(0x06,3,ACR_DATA); //ACR address 0x06.CHn设定幅度
 800078e:	aa01      	add	r2, sp, #4
 8000790:	2103      	movs	r1, #3
 8000792:	2006      	movs	r0, #6
 8000794:	f7ff fef0 	bl	8000578 <AD9959_WriteData>
}
 8000798:	b003      	add	sp, #12
 800079a:	f85d fb04 	ldr.w	pc, [sp], #4
 800079e:	bf00      	nop
 80007a0:	08002718 	.word	0x08002718

080007a4 <AD9959_Set_Amp>:

void AD9959_Set_Amp(uint8_t Channel, uint16_t Ampli)
{
 80007a4:	b510      	push	{r4, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	460c      	mov	r4, r1
	uint8_t CHANNEL[1] = {0x00};

	CHANNEL[0]=Channel;
 80007aa:	f88d 0004 	strb.w	r0, [sp, #4]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，�?�择CHn
 80007ae:	aa01      	add	r2, sp, #4
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fee0 	bl	8000578 <AD9959_WriteData>
	Write_ACR(Ampli);							//	CHn设定幅度
 80007b8:	4620      	mov	r0, r4
 80007ba:	f7ff ffdb 	bl	8000774 <Write_ACR>
}
 80007be:	b002      	add	sp, #8
 80007c0:	bd10      	pop	{r4, pc}

080007c2 <Write_CPOW0>:
void Write_CPOW0(uint16_t Phase)
{
 80007c2:	b500      	push	{lr}
 80007c4:	b083      	sub	sp, #12
	uint8_t CPOW0_data[2] = {0x00,0x00};
	CPOW0_data[1]=(uint8_t)Phase;
 80007c6:	f88d 0005 	strb.w	r0, [sp, #5]
	CPOW0_data[0]=(uint8_t)(Phase>>8);
 80007ca:	0a00      	lsrs	r0, r0, #8
 80007cc:	f88d 0004 	strb.w	r0, [sp, #4]

	AD9959_WriteData(0x05,2,CPOW0_data);//CPOW0 address 0x05.CHn设定相位
 80007d0:	aa01      	add	r2, sp, #4
 80007d2:	2102      	movs	r1, #2
 80007d4:	2005      	movs	r0, #5
 80007d6:	f7ff fecf 	bl	8000578 <AD9959_WriteData>
}
 80007da:	b003      	add	sp, #12
 80007dc:	f85d fb04 	ldr.w	pc, [sp], #4

080007e0 <AD9959_Set_Phase>:

void AD9959_Set_Phase(uint8_t Channel,uint16_t Phase)
{
 80007e0:	b510      	push	{r4, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	460c      	mov	r4, r1
	uint8_t CHANNEL[1] = {0x00};
	CHANNEL[0]=Channel;
 80007e6:	f88d 0004 	strb.w	r0, [sp, #4]

	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，�?�择CHn
 80007ea:	aa01      	add	r2, sp, #4
 80007ec:	2101      	movs	r1, #1
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fec2 	bl	8000578 <AD9959_WriteData>
	Write_CPOW0(Phase);//CHn设定相位
 80007f4:	4620      	mov	r0, r4
 80007f6:	f7ff ffe4 	bl	80007c2 <Write_CPOW0>
}
 80007fa:	b002      	add	sp, #8
 80007fc:	bd10      	pop	{r4, pc}
	...

08000800 <AD9959_Init>:

void AD9959_Init(void)
{
 8000800:	b500      	push	{lr}
 8000802:	b083      	sub	sp, #12
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;	//初始化管脚PC0
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;		 //IO口�?�度�????????2MHz
//	GPIO_Init(GPIOC, &GPIO_InitStructure);					 //根据设定参数初始化GPIOC
//
	Intserve();  //IO口电平状态初始化
 8000804:	f7ff ff6e 	bl	80006e4 <Intserve>
  IntReset();  //AD9959复位
 8000808:	f7ff ff51 	bl	80006ae <IntReset>

	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <AD9959_Init+0x3c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	f88d 3006 	strb.w	r3, [sp, #6]


  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 800081a:	2300      	movs	r3, #0
 800081c:	f8ad 3000 	strh.w	r3, [sp]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 8000820:	aa01      	add	r2, sp, #4
 8000822:	2103      	movs	r1, #3
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fea7 	bl	8000578 <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);//
 800082a:	466a      	mov	r2, sp
 800082c:	2102      	movs	r1, #2
 800082e:	4608      	mov	r0, r1
 8000830:	f7ff fea2 	bl	8000578 <AD9959_WriteData>
}
 8000834:	b003      	add	sp, #12
 8000836:	f85d fb04 	ldr.w	pc, [sp], #4
 800083a:	bf00      	nop
 800083c:	08002718 	.word	0x08002718

08000840 <IO_Update>:
void IO_Update(void)
{
 8000840:	b510      	push	{r4, lr}
	UPDATE_LOW;
 8000842:	4c0b      	ldr	r4, [pc, #44]	@ (8000870 <IO_Update+0x30>)
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4620      	mov	r0, r4
 800084a:	f000 ff75 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f000 fb22 	bl	8000e98 <HAL_Delay>
	UPDATE_HIGH;
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	4620      	mov	r0, r4
 800085a:	f000 ff6d 	bl	8001738 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800085e:	2003      	movs	r0, #3
 8000860:	f000 fb1a 	bl	8000e98 <HAL_Delay>
	UPDATE_LOW;
 8000864:	2200      	movs	r2, #0
 8000866:	2108      	movs	r1, #8
 8000868:	4620      	mov	r0, r4
 800086a:	f000 ff65 	bl	8001738 <HAL_GPIO_WritePin>
}
 800086e:	bd10      	pop	{r4, pc}
 8000870:	48000800 	.word	0x48000800

08000874 <set_dac>:
#define length 10
uint16_t hsdac_buffer[10] = {714, 791, 803, 745, 640, 527, 450, 438, 496, 601};
void set_dac(uint16_t offset)
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	b082      	sub	sp, #8
//	  for (int i= 0 ; i < length; ++i)
//	  {
//		  hsdac_buffer[i] = (temp2[i] + (1<< 31))>>21 / 10;
//		  hsdac_buffer[i] += offset;
//	  }
	  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, hsdac_buffer, length/2, DAC_ALIGN_12B_R);
 8000878:	4e0d      	ldr	r6, [pc, #52]	@ (80008b0 <set_dac+0x3c>)
 800087a:	4d0e      	ldr	r5, [pc, #56]	@ (80008b4 <set_dac+0x40>)
 800087c:	2400      	movs	r4, #0
 800087e:	9400      	str	r4, [sp, #0]
 8000880:	2305      	movs	r3, #5
 8000882:	4632      	mov	r2, r6
 8000884:	4621      	mov	r1, r4
 8000886:	4628      	mov	r0, r5
 8000888:	f000 fba0 	bl	8000fcc <HAL_DAC_Start_DMA>
	  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_2, hsdac_buffer, length/2, DAC_ALIGN_12B_R);
 800088c:	9400      	str	r4, [sp, #0]
 800088e:	2305      	movs	r3, #5
 8000890:	4632      	mov	r2, r6
 8000892:	2110      	movs	r1, #16
 8000894:	4628      	mov	r0, r5
 8000896:	f000 fb99 	bl	8000fcc <HAL_DAC_Start_DMA>
//	  }
//	  uint16_t dither[10] = {4,4,4,4,5,4,4,4,4,5};
//	  HAL_TIM_Base_Start_DMA(&htim15 ,dither , 1000 );
	  //(&htim15)->Instance->ARR = (uint32_t)(4);
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	  HAL_OPAMP_Start(&hopamp3);
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <set_dac+0x44>)
 800089c:	f000 ffc2 	bl	8001824 <HAL_OPAMP_Start>
	  HAL_OPAMP_Start(&hopamp6);
 80008a0:	4806      	ldr	r0, [pc, #24]	@ (80008bc <set_dac+0x48>)
 80008a2:	f000 ffbf 	bl	8001824 <HAL_OPAMP_Start>
	  HAL_TIM_Base_Start(&htim15);
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <set_dac+0x4c>)
 80008a8:	f001 fc72 	bl	8002190 <HAL_TIM_Base_Start>

}
 80008ac:	b002      	add	sp, #8
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	200001c0 	.word	0x200001c0
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	20000088 	.word	0x20000088
 80008c0:	2000003c 	.word	0x2000003c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b500      	push	{lr}
 80008c6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c8:	2238      	movs	r2, #56	@ 0x38
 80008ca:	2100      	movs	r1, #0
 80008cc:	a806      	add	r0, sp, #24
 80008ce:	f001 feeb 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d2:	2300      	movs	r3, #0
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	9303      	str	r3, [sp, #12]
 80008da:	9304      	str	r3, [sp, #16]
 80008dc:	9305      	str	r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008e2:	f000 ffbb 	bl	800185c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ee:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	2203      	movs	r2, #3
 80008f6:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80008f8:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008fa:	2210      	movs	r2, #16
 80008fc:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fe:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000900:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000902:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	a806      	add	r0, sp, #24
 8000906:	f001 f83b 	bl	8001980 <HAL_RCC_OscConfig>
 800090a:	b9a8      	cbnz	r0, 8000938 <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2103      	movs	r1, #3
 8000912:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800091c:	a801      	add	r0, sp, #4
 800091e:	f001 fb0d 	bl	8001f3c <HAL_RCC_ClockConfig>
 8000922:	b958      	cbnz	r0, 800093c <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000924:	2200      	movs	r2, #0
 8000926:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800092a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800092e:	f001 fa9b 	bl	8001e68 <HAL_RCC_MCOConfig>
}
 8000932:	b015      	add	sp, #84	@ 0x54
 8000934:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <SystemClock_Config+0x76>
 800093c:	b672      	cpsid	i
 800093e:	e7fe      	b.n	800093e <SystemClock_Config+0x7a>

08000940 <main>:
{
 8000940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000944:	b096      	sub	sp, #88	@ 0x58
  HAL_Init();
 8000946:	f000 fa85 	bl	8000e54 <HAL_Init>
  SystemClock_Config();
 800094a:	f7ff ffbb 	bl	80008c4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	2500      	movs	r5, #0
 8000950:	950a      	str	r5, [sp, #40]	@ 0x28
 8000952:	950b      	str	r5, [sp, #44]	@ 0x2c
 8000954:	950c      	str	r5, [sp, #48]	@ 0x30
 8000956:	950d      	str	r5, [sp, #52]	@ 0x34
 8000958:	950e      	str	r5, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4c89      	ldr	r4, [pc, #548]	@ (8000b80 <main+0x240>)
 800095c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000964:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000966:	f003 0320 	and.w	r3, r3, #32
 800096a:	9303      	str	r3, [sp, #12]
 800096c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000976:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	9304      	str	r3, [sp, #16]
 800097e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000988:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	9305      	str	r3, [sp, #20]
 8000990:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800099a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	9306      	str	r3, [sp, #24]
 80009a2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 80009a4:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 8000bb0 <main+0x270>
 80009a8:	462a      	mov	r2, r5
 80009aa:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80009ae:	4640      	mov	r0, r8
 80009b0:	f000 fec2 	bl	8001738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SDIO3_Pin, GPIO_PIN_RESET);
 80009b4:	462a      	mov	r2, r5
 80009b6:	f240 2102 	movw	r1, #514	@ 0x202
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f000 febb 	bl	8001738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDIO4_GPIO_Port, SDIO4_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009cc:	f000 feb4 	bl	8001738 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 80009d0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009d4:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2701      	movs	r7, #1
 80009d8:	970b      	str	r7, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2602      	movs	r6, #2
 80009de:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	a90a      	add	r1, sp, #40	@ 0x28
 80009e2:	4640      	mov	r0, r8
 80009e4:	f000 fdc8 	bl	8001578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RESET_Pin|SDIO3_Pin|SDIO4_Pin;
 80009e8:	f240 6302 	movw	r3, #1538	@ 0x602
 80009ec:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	970b      	str	r7, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	a90a      	add	r1, sp, #40	@ 0x28
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f000 fdbd 	bl	8001578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDIO2_Pin;
 80009fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a02:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a0a:	950e      	str	r5, [sp, #56]	@ 0x38
  HAL_GPIO_Init(SDIO2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	a90a      	add	r1, sp, #40	@ 0x28
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f000 fdb1 	bl	8001578 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000a1e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a28:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a2a:	433b      	orrs	r3, r7
 8000a2c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000a2e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a30:	403b      	ands	r3, r7
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	9b02      	ldr	r3, [sp, #8]
  DAC_ChannelConfTypeDef sConfig = {0};
 8000a36:	2230      	movs	r2, #48	@ 0x30
 8000a38:	4629      	mov	r1, r5
 8000a3a:	a80a      	add	r0, sp, #40	@ 0x28
 8000a3c:	f001 fe34 	bl	80026a8 <memset>
  hdac3.Instance = DAC3;
 8000a40:	4850      	ldr	r0, [pc, #320]	@ (8000b84 <main+0x244>)
 8000a42:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <main+0x248>)
 8000a44:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000a46:	f000 faaf 	bl	8000fa8 <HAL_DAC_Init>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	f040 8086 	bne.w	8000b5c <main+0x21c>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a50:	2302      	movs	r3, #2
 8000a52:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 8000a54:	2201      	movs	r2, #1
 8000a56:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
  sConfig.DAC_SignedFormat = DISABLE;
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f88d 202d 	strb.w	r2, [sp, #45]	@ 0x2d
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a60:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 8000a62:	210e      	movs	r1, #14
 8000a64:	910d      	str	r1, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a66:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000a68:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000a6a:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a6c:	9211      	str	r2, [sp, #68]	@ 0x44
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a6e:	a90a      	add	r1, sp, #40	@ 0x28
 8000a70:	4844      	ldr	r0, [pc, #272]	@ (8000b84 <main+0x244>)
 8000a72:	f000 fb55 	bl	8001120 <HAL_DAC_ConfigChannel>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d172      	bne.n	8000b60 <main+0x220>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	a90a      	add	r1, sp, #40	@ 0x28
 8000a7e:	4841      	ldr	r0, [pc, #260]	@ (8000b84 <main+0x244>)
 8000a80:	f000 fb4e 	bl	8001120 <HAL_DAC_ConfigChannel>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d16d      	bne.n	8000b64 <main+0x224>
  hopamp6.Instance = OPAMP6;
 8000a88:	4840      	ldr	r0, [pc, #256]	@ (8000b8c <main+0x24c>)
 8000a8a:	4b41      	ldr	r3, [pc, #260]	@ (8000b90 <main+0x250>)
 8000a8c:	6003      	str	r3, [r0, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	6043      	str	r3, [r0, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000a92:	2360      	movs	r3, #96	@ 0x60
 8000a94:	6083      	str	r3, [r0, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000a96:	230c      	movs	r3, #12
 8000a98:	6103      	str	r3, [r0, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	7503      	strb	r3, [r0, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000a9e:	6183      	str	r3, [r0, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000aa0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000aa2:	f000 fe4f 	bl	8001744 <HAL_OPAMP_Init>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d15e      	bne.n	8000b68 <main+0x228>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	2300      	movs	r3, #0
 8000aac:	930a      	str	r3, [sp, #40]	@ 0x28
 8000aae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000ab0:	930c      	str	r3, [sp, #48]	@ 0x30
 8000ab2:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	9307      	str	r3, [sp, #28]
 8000ab6:	9308      	str	r3, [sp, #32]
 8000ab8:	9309      	str	r3, [sp, #36]	@ 0x24
  htim15.Instance = TIM15;
 8000aba:	4836      	ldr	r0, [pc, #216]	@ (8000b94 <main+0x254>)
 8000abc:	4a36      	ldr	r2, [pc, #216]	@ (8000b98 <main+0x258>)
 8000abe:	6002      	str	r2, [r0, #0]
  htim15.Init.Prescaler = 0;
 8000ac0:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 9;
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aca:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ace:	f001 fc71 	bl	80023b4 <HAL_TIM_Base_Init>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d14a      	bne.n	8000b6c <main+0x22c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ada:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000adc:	a90a      	add	r1, sp, #40	@ 0x28
 8000ade:	482d      	ldr	r0, [pc, #180]	@ (8000b94 <main+0x254>)
 8000ae0:	f001 fca6 	bl	8002430 <HAL_TIM_ConfigClockSource>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d143      	bne.n	8000b70 <main+0x230>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000af0:	a907      	add	r1, sp, #28
 8000af2:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <main+0x254>)
 8000af4:	f001 fd82 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d13b      	bne.n	8000b74 <main+0x234>
  hcordic.Instance = CORDIC;
 8000afc:	4827      	ldr	r0, [pc, #156]	@ (8000b9c <main+0x25c>)
 8000afe:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <main+0x260>)
 8000b00:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b02:	f000 f9dd 	bl	8000ec0 <HAL_CORDIC_Init>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d136      	bne.n	8000b78 <main+0x238>
  hopamp3.Instance = OPAMP3;
 8000b0a:	4826      	ldr	r0, [pc, #152]	@ (8000ba4 <main+0x264>)
 8000b0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <main+0x268>)
 8000b0e:	6003      	str	r3, [r0, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000b10:	2380      	movs	r3, #128	@ 0x80
 8000b12:	6043      	str	r3, [r0, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000b14:	2360      	movs	r3, #96	@ 0x60
 8000b16:	6083      	str	r3, [r0, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	6103      	str	r3, [r0, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	7503      	strb	r3, [r0, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000b20:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000b22:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000b24:	f000 fe0e 	bl	8001744 <HAL_OPAMP_Init>
 8000b28:	bb40      	cbnz	r0, 8000b7c <main+0x23c>
  AD9959_Init();
 8000b2a:	f7ff fe69 	bl	8000800 <AD9959_Init>
  AD9959_Set_Fre(0xf0, x);
 8000b2e:	491f      	ldr	r1, [pc, #124]	@ (8000bac <main+0x26c>)
 8000b30:	20f0      	movs	r0, #240	@ 0xf0
 8000b32:	f7ff fdad 	bl	8000690 <AD9959_Set_Fre>
  AD9959_Set_Amp(0xf0, 600);
 8000b36:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000b3a:	20f0      	movs	r0, #240	@ 0xf0
 8000b3c:	f7ff fe32 	bl	80007a4 <AD9959_Set_Amp>
  AD9959_Set_Phase(0x10, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2010      	movs	r0, #16
 8000b44:	f7ff fe4c 	bl	80007e0 <AD9959_Set_Phase>
  AD9959_Set_Phase(0x20, 0);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2020      	movs	r0, #32
 8000b4c:	f7ff fe48 	bl	80007e0 <AD9959_Set_Phase>
  IO_Update();
 8000b50:	f7ff fe76 	bl	8000840 <IO_Update>
  set_dac(0);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fe8d 	bl	8000874 <set_dac>
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <main+0x21a>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <main+0x21e>
 8000b60:	b672      	cpsid	i
 8000b62:	e7fe      	b.n	8000b62 <main+0x222>
 8000b64:	b672      	cpsid	i
 8000b66:	e7fe      	b.n	8000b66 <main+0x226>
 8000b68:	b672      	cpsid	i
 8000b6a:	e7fe      	b.n	8000b6a <main+0x22a>
 8000b6c:	b672      	cpsid	i
 8000b6e:	e7fe      	b.n	8000b6e <main+0x22e>
 8000b70:	b672      	cpsid	i
 8000b72:	e7fe      	b.n	8000b72 <main+0x232>
 8000b74:	b672      	cpsid	i
 8000b76:	e7fe      	b.n	8000b76 <main+0x236>
 8000b78:	b672      	cpsid	i
 8000b7a:	e7fe      	b.n	8000b7a <main+0x23a>
 8000b7c:	b672      	cpsid	i
 8000b7e:	e7fe      	b.n	8000b7e <main+0x23e>
 8000b80:	40021000 	.word	0x40021000
 8000b84:	200001c0 	.word	0x200001c0
 8000b88:	50001000 	.word	0x50001000
 8000b8c:	20000088 	.word	0x20000088
 8000b90:	40010314 	.word	0x40010314
 8000b94:	2000003c 	.word	0x2000003c
 8000b98:	40014000 	.word	0x40014000
 8000b9c:	200001d4 	.word	0x200001d4
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	200000c4 	.word	0x200000c4
 8000ba8:	40010308 	.word	0x40010308
 8000bac:	01c9c380 	.word	0x01c9c380
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <Error_Handler>:
 8000bb4:	b672      	cpsid	i
 8000bb6:	e7fe      	b.n	8000bb6 <Error_Handler+0x2>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b500      	push	{lr}
 8000bba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_MspInit+0x34>)
 8000bbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bc0:	f042 0201 	orr.w	r2, r2, #1
 8000bc4:	661a      	str	r2, [r3, #96]	@ 0x60
 8000bc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bc8:	f002 0201 	and.w	r2, r2, #1
 8000bcc:	9200      	str	r2, [sp, #0]
 8000bce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be2:	f000 fec5 	bl	8001970 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	b003      	add	sp, #12
 8000be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8000bf0:	6802      	ldr	r2, [r0, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_CORDIC_MspInit+0x28>)
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d000      	beq.n	8000bfa <HAL_CORDIC_MspInit+0xa>
 8000bf8:	4770      	bx	lr
{
 8000bfa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000c00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c02:	f042 0208 	orr.w	r2, r2, #8
 8000c06:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8000c12:	b002      	add	sp, #8
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8000c1c:	6802      	ldr	r2, [r0, #0]
 8000c1e:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <HAL_DAC_MspInit+0xa4>)
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d000      	beq.n	8000c26 <HAL_DAC_MspInit+0xa>
 8000c24:	4770      	bx	lr
{
 8000c26:	b510      	push	{r4, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000c2c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8000c30:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000c34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c36:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	9b01      	ldr	r3, [sp, #4]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8000c46:	481f      	ldr	r0, [pc, #124]	@ (8000cc4 <HAL_DAC_MspInit+0xa8>)
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <HAL_DAC_MspInit+0xac>)
 8000c4a:	6003      	str	r3, [r0, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000c4c:	2366      	movs	r3, #102	@ 0x66
 8000c4e:	6043      	str	r3, [r0, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c50:	2310      	movs	r3, #16
 8000c52:	6083      	str	r3, [r0, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60c3      	str	r3, [r0, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	6102      	str	r2, [r0, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c60:	6142      	str	r2, [r0, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c66:	6182      	str	r2, [r0, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000c68:	2220      	movs	r2, #32
 8000c6a:	61c2      	str	r2, [r0, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000c6e:	f000 fbc3 	bl	80013f8 <HAL_DMA_Init>
 8000c72:	b9f0      	cbnz	r0, 8000cb2 <HAL_DAC_MspInit+0x96>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <HAL_DAC_MspInit+0xa8>)
 8000c76:	60a3      	str	r3, [r4, #8]
 8000c78:	629c      	str	r4, [r3, #40]	@ 0x28

    /* DAC3_CH2 Init */
    hdma_dac3_ch2.Instance = DMA1_Channel2;
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <HAL_DAC_MspInit+0xb0>)
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_DAC_MspInit+0xb4>)
 8000c7e:	6003      	str	r3, [r0, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 8000c80:	2367      	movs	r3, #103	@ 0x67
 8000c82:	6043      	str	r3, [r0, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c84:	2310      	movs	r3, #16
 8000c86:	6083      	str	r3, [r0, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60c3      	str	r3, [r0, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	6102      	str	r2, [r0, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c94:	6142      	str	r2, [r0, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c9a:	6182      	str	r2, [r0, #24]
    hdma_dac3_ch2.Init.Mode = DMA_CIRCULAR;
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	61c2      	str	r2, [r0, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000ca0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8000ca2:	f000 fba9 	bl	80013f8 <HAL_DMA_Init>
 8000ca6:	b938      	cbnz	r0, 8000cb8 <HAL_DAC_MspInit+0x9c>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_DAC_MspInit+0xb0>)
 8000caa:	60e3      	str	r3, [r4, #12]
 8000cac:	629c      	str	r4, [r3, #40]	@ 0x28

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000cb2:	f7ff ff7f 	bl	8000bb4 <Error_Handler>
 8000cb6:	e7dd      	b.n	8000c74 <HAL_DAC_MspInit+0x58>
      Error_Handler();
 8000cb8:	f7ff ff7c 	bl	8000bb4 <Error_Handler>
 8000cbc:	e7f4      	b.n	8000ca8 <HAL_DAC_MspInit+0x8c>
 8000cbe:	bf00      	nop
 8000cc0:	50001000 	.word	0x50001000
 8000cc4:	20000160 	.word	0x20000160
 8000cc8:	40020008 	.word	0x40020008
 8000ccc:	20000100 	.word	0x20000100
 8000cd0:	4002001c 	.word	0x4002001c

08000cd4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000cd4:	b500      	push	{lr}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9303      	str	r3, [sp, #12]
 8000cdc:	9304      	str	r3, [sp, #16]
 8000cde:	9305      	str	r3, [sp, #20]
 8000ce0:	9306      	str	r3, [sp, #24]
 8000ce2:	9307      	str	r3, [sp, #28]
  if(hopamp->Instance==OPAMP3)
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <HAL_OPAMP_MspInit+0x74>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d005      	beq.n	8000cf8 <HAL_OPAMP_MspInit+0x24>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP6)
 8000cec:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <HAL_OPAMP_MspInit+0x78>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d015      	beq.n	8000d1e <HAL_OPAMP_MspInit+0x4a>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8000cf2:	b009      	add	sp, #36	@ 0x24
 8000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_OPAMP_MspInit+0x7c>)
 8000cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cfc:	f042 0202 	orr.w	r2, r2, #2
 8000d00:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d10:	2303      	movs	r3, #3
 8000d12:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	a903      	add	r1, sp, #12
 8000d16:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <HAL_OPAMP_MspInit+0x80>)
 8000d18:	f000 fc2e 	bl	8001578 <HAL_GPIO_Init>
 8000d1c:	e7e9      	b.n	8000cf2 <HAL_OPAMP_MspInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_OPAMP_MspInit+0x7c>)
 8000d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d22:	f042 0202 	orr.w	r2, r2, #2
 8000d26:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	a903      	add	r1, sp, #12
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <HAL_OPAMP_MspInit+0x80>)
 8000d40:	f000 fc1a 	bl	8001578 <HAL_GPIO_Init>
}
 8000d44:	e7d5      	b.n	8000cf2 <HAL_OPAMP_MspInit+0x1e>
 8000d46:	bf00      	nop
 8000d48:	40010308 	.word	0x40010308
 8000d4c:	40010314 	.word	0x40010314
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM15)
 8000d58:	6802      	ldr	r2, [r0, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_TIM_Base_MspInit+0x28>)
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d000      	beq.n	8000d62 <HAL_TIM_Base_MspInit+0xa>
 8000d60:	4770      	bx	lr
{
 8000d62:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d64:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8000d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000d6e:	661a      	str	r2, [r3, #96]	@ 0x60
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8000d7a:	b002      	add	sp, #8
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40014000 	.word	0x40014000

08000d84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler>

08000d86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler>

08000d88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler>

08000d8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler>

08000d8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler>

08000d8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f86d 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bd08      	pop	{r3, pc}

08000d9c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d9c:	4a03      	ldr	r2, [pc, #12]	@ (8000dac <SystemInit+0x10>)
 8000d9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff fff2 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f001 fc6b 	bl	80026b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fdad 	bl	8000940 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000df4:	08002740 	.word	0x08002740
  ldr r2, =_sbss
 8000df8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000dfc:	20000200 	.word	0x20000200

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <HAL_InitTick+0x44>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b90b      	cbnz	r3, 8000e0e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e0c:	4770      	bx	lr
{
 8000e0e:	b510      	push	{r4, lr}
 8000e10:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <HAL_InitTick+0x48>)
 8000e1c:	6810      	ldr	r0, [r2, #0]
 8000e1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e22:	f000 f8ad 	bl	8000f80 <HAL_SYSTICK_Config>
 8000e26:	b968      	cbnz	r0, 8000e44 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e28:	2c0f      	cmp	r4, #15
 8000e2a:	d901      	bls.n	8000e30 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	e00a      	b.n	8000e46 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	4621      	mov	r1, r4
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f86c 	bl	8000f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <HAL_InitTick+0x4c>)
 8000e3e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2000      	movs	r0, #0
 8000e42:	e000      	b.n	8000e46 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
}
 8000e46:	bd10      	pop	{r4, pc}
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	2000001c 	.word	0x2000001c

08000e54 <HAL_Init>:
{
 8000e54:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f84a 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f7ff ffd1 	bl	8000e04 <HAL_InitTick>
 8000e62:	b110      	cbz	r0, 8000e6a <HAL_Init+0x16>
    status = HAL_ERROR;
 8000e64:	2401      	movs	r4, #1
}
 8000e66:	4620      	mov	r0, r4
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	4604      	mov	r4, r0
    HAL_MspInit();
 8000e6c:	f7ff fea4 	bl	8000bb8 <HAL_MspInit>
 8000e70:	e7f9      	b.n	8000e66 <HAL_Init+0x12>
	...

08000e74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e74:	4a03      	ldr	r2, [pc, #12]	@ (8000e84 <HAL_IncTick+0x10>)
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	4903      	ldr	r1, [pc, #12]	@ (8000e88 <HAL_IncTick+0x14>)
 8000e7a:	6809      	ldr	r1, [r1, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200001fc 	.word	0x200001fc
 8000e88:	20000018 	.word	0x20000018

08000e8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e8c:	4b01      	ldr	r3, [pc, #4]	@ (8000e94 <HAL_GetTick+0x8>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200001fc 	.word	0x200001fc

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff6 	bl	8000e8c <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ea6:	d002      	beq.n	8000eae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <HAL_Delay+0x24>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eae:	f7ff ffed 	bl	8000e8c <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	42a0      	cmp	r0, r4
 8000eb6:	d3fa      	bcc.n	8000eae <HAL_Delay+0x16>
  {
  }
}
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000018 	.word	0x20000018

08000ec0 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8000ec0:	b1a0      	cbz	r0, 8000eec <HAL_CORDIC_Init+0x2c>
{
 8000ec2:	b510      	push	{r4, lr}
 8000ec4:	4604      	mov	r4, r0

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8000ec6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8000eca:	b153      	cbz	r3, 8000ee2 <HAL_CORDIC_Init+0x22>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8000ecc:	2000      	movs	r0, #0
 8000ece:	6260      	str	r0, [r4, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8000ed0:	6060      	str	r0, [r4, #4]
  hcordic->pOutBuff = NULL;
 8000ed2:	60a0      	str	r0, [r4, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8000ed4:	60e0      	str	r0, [r4, #12]
  hcordic->NbCalcToGet = 0U;
 8000ed6:	6120      	str	r0, [r4, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8000ed8:	6160      	str	r0, [r4, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
}
 8000ee0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8000ee2:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8000ee6:	f7ff fe83 	bl	8000bf0 <HAL_CORDIC_MspInit>
 8000eea:	e7ef      	b.n	8000ecc <HAL_CORDIC_Init+0xc>
    return HAL_ERROR;
 8000eec:	2001      	movs	r0, #1
}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4907      	ldr	r1, [pc, #28]	@ (8000f10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ef2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	0203      	lsls	r3, r0, #8
 8000ef6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000efe:	0412      	lsls	r2, r2, #16
 8000f00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000f0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_NVIC_SetPriority+0x64>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1e:	f1c3 0c07 	rsb	ip, r3, #7
 8000f22:	f1bc 0f04 	cmp.w	ip, #4
 8000f26:	bf28      	it	cs
 8000f28:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2c:	f103 0e04 	add.w	lr, r3, #4
 8000f30:	f1be 0f06 	cmp.w	lr, #6
 8000f34:	bf8c      	ite	hi
 8000f36:	3b03      	subhi	r3, #3
 8000f38:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3a:	f04f 3eff 	mov.w	lr, #4294967295
 8000f3e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000f42:	ea21 010c 	bic.w	r1, r1, ip
 8000f46:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f4c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f52:	2800      	cmp	r0, #0
 8000f54:	db09      	blt.n	8000f6a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	0109      	lsls	r1, r1, #4
 8000f58:	b2c9      	uxtb	r1, r1
 8000f5a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f5e:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f62:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f66:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	f000 000f 	and.w	r0, r0, #15
 8000f6e:	0109      	lsls	r1, r1, #4
 8000f70:	b2c9      	uxtb	r1, r1
 8000f72:	4b02      	ldr	r3, [pc, #8]	@ (8000f7c <HAL_NVIC_SetPriority+0x68>)
 8000f74:	5419      	strb	r1, [r3, r0]
 8000f76:	e7f6      	b.n	8000f66 <HAL_NVIC_SetPriority+0x52>
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	e000ed14 	.word	0xe000ed14

08000f80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	3801      	subs	r0, #1
 8000f82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f86:	d20b      	bcs.n	8000fa0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f8c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <HAL_SYSTICK_Config+0x24>)
 8000f90:	21f0      	movs	r1, #240	@ 0xf0
 8000f92:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f96:	2000      	movs	r0, #0
 8000f98:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fa0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000fa8:	b170      	cbz	r0, 8000fc8 <HAL_DAC_Init+0x20>
{
 8000faa:	b510      	push	{r4, lr}
 8000fac:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000fae:	7903      	ldrb	r3, [r0, #4]
 8000fb0:	b133      	cbz	r3, 8000fc0 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8000fbe:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000fc0:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000fc2:	f7ff fe2b 	bl	8000c1c <HAL_DAC_MspInit>
 8000fc6:	e7f4      	b.n	8000fb2 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
}
 8000fca:	4770      	bx	lr

08000fcc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	9e06      	ldr	r6, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d073      	beq.n	80010be <HAL_DAC_Start_DMA+0xf2>
 8000fd6:	460d      	mov	r5, r1
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fdc:	7942      	ldrb	r2, [r0, #5]
 8000fde:	2a01      	cmp	r2, #1
 8000fe0:	d06f      	beq.n	80010c2 <HAL_DAC_Start_DMA+0xf6>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	7142      	strb	r2, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	7102      	strb	r2, [r0, #4]

  if (Channel == DAC_CHANNEL_1)
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	d13f      	bne.n	800106e <HAL_DAC_Start_DMA+0xa2>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000fee:	6882      	ldr	r2, [r0, #8]
 8000ff0:	4835      	ldr	r0, [pc, #212]	@ (80010c8 <HAL_DAC_Start_DMA+0xfc>)
 8000ff2:	62d0      	str	r0, [r2, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ff4:	68a2      	ldr	r2, [r4, #8]
 8000ff6:	4835      	ldr	r0, [pc, #212]	@ (80010cc <HAL_DAC_Start_DMA+0x100>)
 8000ff8:	6310      	str	r0, [r2, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ffa:	68a2      	ldr	r2, [r4, #8]
 8000ffc:	4834      	ldr	r0, [pc, #208]	@ (80010d0 <HAL_DAC_Start_DMA+0x104>)
 8000ffe:	6350      	str	r0, [r2, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	6802      	ldr	r2, [r0, #0]
 8001004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001008:	6002      	str	r2, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800100a:	b126      	cbz	r6, 8001016 <HAL_DAC_Start_DMA+0x4a>
 800100c:	2e04      	cmp	r6, #4
 800100e:	d02b      	beq.n	8001068 <HAL_DAC_Start_DMA+0x9c>
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
        break;
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001010:	6822      	ldr	r2, [r4, #0]
 8001012:	3210      	adds	r2, #16
        break;
 8001014:	e001      	b.n	800101a <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	3208      	adds	r2, #8
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800101a:	6826      	ldr	r6, [r4, #0]
 800101c:	6830      	ldr	r0, [r6, #0]
 800101e:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8001022:	6030      	str	r0, [r6, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001024:	68a0      	ldr	r0, [r4, #8]
 8001026:	f000 fa5d 	bl	80014e4 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800102a:	2300      	movs	r3, #0
 800102c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800102e:	2800      	cmp	r0, #0
 8001030:	d13f      	bne.n	80010b2 <HAL_DAC_Start_DMA+0xe6>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	f005 0510 	and.w	r5, r5, #16
 800103a:	2301      	movs	r3, #1
 800103c:	40ab      	lsls	r3, r5
 800103e:	430b      	orrs	r3, r1
 8001040:	6013      	str	r3, [r2, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <HAL_DAC_Start_DMA+0x108>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	099b      	lsrs	r3, r3, #6
 8001048:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_DAC_Start_DMA+0x10c>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	099b      	lsrs	r3, r3, #6
 8001050:	3301      	adds	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001054:	9b01      	ldr	r3, [sp, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d02f      	beq.n	80010ba <HAL_DAC_Start_DMA+0xee>
    {
      wait_loop_index--;
 800105a:	9b01      	ldr	r3, [sp, #4]
 800105c:	3b01      	subs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_DAC_Start_DMA+0x8e>
 8001066:	e028      	b.n	80010ba <HAL_DAC_Start_DMA+0xee>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	320c      	adds	r2, #12
        break;
 800106c:	e7d5      	b.n	800101a <HAL_DAC_Start_DMA+0x4e>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800106e:	68c2      	ldr	r2, [r0, #12]
 8001070:	481a      	ldr	r0, [pc, #104]	@ (80010dc <HAL_DAC_Start_DMA+0x110>)
 8001072:	62d0      	str	r0, [r2, #44]	@ 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001074:	68e2      	ldr	r2, [r4, #12]
 8001076:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <HAL_DAC_Start_DMA+0x114>)
 8001078:	6310      	str	r0, [r2, #48]	@ 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800107a:	68e2      	ldr	r2, [r4, #12]
 800107c:	4819      	ldr	r0, [pc, #100]	@ (80010e4 <HAL_DAC_Start_DMA+0x118>)
 800107e:	6350      	str	r0, [r2, #52]	@ 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001080:	6820      	ldr	r0, [r4, #0]
 8001082:	6802      	ldr	r2, [r0, #0]
 8001084:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001088:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 800108a:	b126      	cbz	r6, 8001096 <HAL_DAC_Start_DMA+0xca>
 800108c:	2e04      	cmp	r6, #4
 800108e:	d00d      	beq.n	80010ac <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	321c      	adds	r2, #28
        break;
 8001094:	e001      	b.n	800109a <HAL_DAC_Start_DMA+0xce>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	3214      	adds	r2, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800109a:	6826      	ldr	r6, [r4, #0]
 800109c:	6830      	ldr	r0, [r6, #0]
 800109e:	f040 5000 	orr.w	r0, r0, #536870912	@ 0x20000000
 80010a2:	6030      	str	r0, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80010a4:	68e0      	ldr	r0, [r4, #12]
 80010a6:	f000 fa1d 	bl	80014e4 <HAL_DMA_Start_IT>
 80010aa:	e7be      	b.n	800102a <HAL_DAC_Start_DMA+0x5e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80010ac:	6822      	ldr	r2, [r4, #0]
 80010ae:	3218      	adds	r2, #24
        break;
 80010b0:	e7f3      	b.n	800109a <HAL_DAC_Start_DMA+0xce>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010b2:	6923      	ldr	r3, [r4, #16]
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 80010ba:	b002      	add	sp, #8
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
 80010c0:	e7fb      	b.n	80010ba <HAL_DAC_Start_DMA+0xee>
  __HAL_LOCK(hdac);
 80010c2:	2002      	movs	r0, #2
 80010c4:	e7f9      	b.n	80010ba <HAL_DAC_Start_DMA+0xee>
 80010c6:	bf00      	nop
 80010c8:	080010eb 	.word	0x080010eb
 80010cc:	080010fd 	.word	0x080010fd
 80010d0:	08001109 	.word	0x08001109
 80010d4:	20000014 	.word	0x20000014
 80010d8:	053e2d63 	.word	0x053e2d63
 80010dc:	0800132f 	.word	0x0800132f
 80010e0:	08001341 	.word	0x08001341
 80010e4:	0800134d 	.word	0x0800134d

080010e8 <HAL_DAC_ConvCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80010e8:	4770      	bx	lr

080010ea <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80010ea:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fffa 	bl	80010e8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010f4:	2301      	movs	r3, #1
 80010f6:	7123      	strb	r3, [r4, #4]
}
 80010f8:	bd10      	pop	{r4, pc}

080010fa <HAL_DAC_ConvHalfCpltCallbackCh1>:
}
 80010fa:	4770      	bx	lr

080010fc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80010fc:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80010fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001100:	f7ff fffb 	bl	80010fa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001104:	bd08      	pop	{r3, pc}

08001106 <HAL_DAC_ErrorCallbackCh1>:
}
 8001106:	4770      	bx	lr

08001108 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001108:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800110a:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800110c:	6923      	ldr	r3, [r4, #16]
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff fff6 	bl	8001106 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800111a:	2301      	movs	r3, #1
 800111c:	7123      	strb	r3, [r4, #4]
}
 800111e:	bd10      	pop	{r4, pc}

08001120 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8001120:	2800      	cmp	r0, #0
 8001122:	f000 80f8 	beq.w	8001316 <HAL_DAC_ConfigChannel+0x1f6>
{
 8001126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	460c      	mov	r4, r1
 800112c:	4615      	mov	r5, r2
 800112e:	4606      	mov	r6, r0
  if ((hdac == NULL) || (sConfig == NULL))
 8001130:	2900      	cmp	r1, #0
 8001132:	f000 80f2 	beq.w	800131a <HAL_DAC_ConfigChannel+0x1fa>
  __HAL_LOCK(hdac);
 8001136:	7943      	ldrb	r3, [r0, #5]
 8001138:	2b01      	cmp	r3, #1
 800113a:	f000 80f0 	beq.w	800131e <HAL_DAC_ConfigChannel+0x1fe>
 800113e:	2301      	movs	r3, #1
 8001140:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001142:	2302      	movs	r3, #2
 8001144:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001146:	688b      	ldr	r3, [r1, #8]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d070      	beq.n	800122e <HAL_DAC_ConfigChannel+0x10e>
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800114c:	69e3      	ldr	r3, [r4, #28]
 800114e:	2b01      	cmp	r3, #1
 8001150:	f000 80c1 	beq.w	80012d6 <HAL_DAC_ConfigChannel+0x1b6>
  tmpreg1 = hdac->Instance->MCR;
 8001154:	6833      	ldr	r3, [r6, #0]
 8001156:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001158:	f005 0510 	and.w	r5, r5, #16
 800115c:	2007      	movs	r0, #7
 800115e:	40a8      	lsls	r0, r5
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001160:	69a3      	ldr	r3, [r4, #24]
 8001162:	2b01      	cmp	r3, #1
 8001164:	f000 80c4 	beq.w	80012f0 <HAL_DAC_ConfigChannel+0x1d0>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001168:	2b02      	cmp	r3, #2
 800116a:	f000 80c3 	beq.w	80012f4 <HAL_DAC_ConfigChannel+0x1d4>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800116e:	6962      	ldr	r2, [r4, #20]
 8001170:	fab2 f282 	clz	r2, r2
 8001174:	0952      	lsrs	r2, r2, #5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117a:	40ab      	lsls	r3, r5
 800117c:	ea21 0103 	bic.w	r1, r1, r3
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001184:	40ab      	lsls	r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001186:	4303      	orrs	r3, r0
 8001188:	ea21 0103 	bic.w	r1, r1, r3
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800118c:	7923      	ldrb	r3, [r4, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	bf14      	ite	ne
 8001192:	2300      	movne	r3, #0
 8001194:	2301      	moveq	r3, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001196:	68a7      	ldr	r7, [r4, #8]
 8001198:	6960      	ldr	r0, [r4, #20]
 800119a:	4307      	orrs	r7, r0
 800119c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 80011a0:	7963      	ldrb	r3, [r4, #5]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	bf14      	ite	ne
 80011a6:	2300      	movne	r3, #0
 80011a8:	2301      	moveq	r3, #1
 80011aa:	ea47 2743 	orr.w	r7, r7, r3, lsl #9
 80011ae:	4317      	orrs	r7, r2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80011b0:	f421 4840 	bic.w	r8, r1, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f000 809e 	beq.w	80012f8 <HAL_DAC_ConfigChannel+0x1d8>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80011bc:	ea48 0803 	orr.w	r8, r8, r3
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011c0:	40af      	lsls	r7, r5
 80011c2:	ea47 0708 	orr.w	r7, r7, r8
  hdac->Instance->MCR = tmpreg1;
 80011c6:	6833      	ldr	r3, [r6, #0]
 80011c8:	63df      	str	r7, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80011ca:	6831      	ldr	r1, [r6, #0]
 80011cc:	680b      	ldr	r3, [r1, #0]
 80011ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d2:	40aa      	lsls	r2, r5
 80011d4:	ea23 0302 	bic.w	r3, r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 80011da:	6831      	ldr	r1, [r6, #0]
 80011dc:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011de:	f640 73fe 	movw	r3, #4094	@ 0xffe
 80011e2:	40ab      	lsls	r3, r5
 80011e4:	ea22 0203 	bic.w	r2, r2, r3
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011e8:	68e3      	ldr	r3, [r4, #12]
 80011ea:	40ab      	lsls	r3, r5
 80011ec:	4313      	orrs	r3, r2
  hdac->Instance->CR = tmpreg1;
 80011ee:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011f0:	6831      	ldr	r1, [r6, #0]
 80011f2:	680b      	ldr	r3, [r1, #0]
 80011f4:	22c0      	movs	r2, #192	@ 0xc0
 80011f6:	40aa      	lsls	r2, r5
 80011f8:	ea23 0302 	bic.w	r3, r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80011fe:	68e3      	ldr	r3, [r4, #12]
 8001200:	f3c3 0183 	ubfx	r1, r3, #2, #4
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001204:	6830      	ldr	r0, [r6, #0]
 8001206:	6e02      	ldr	r2, [r0, #96]	@ 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001208:	6923      	ldr	r3, [r4, #16]
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001210:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001212:	40ab      	lsls	r3, r5
 8001214:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001218:	40a9      	lsls	r1, r5
 800121a:	ea22 0201 	bic.w	r2, r2, r1
 800121e:	4313      	orrs	r3, r2
 8001220:	6603      	str	r3, [r0, #96]	@ 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8001222:	2301      	movs	r3, #1
 8001224:	7133      	strb	r3, [r6, #4]
  __HAL_UNLOCK(hdac);
 8001226:	2000      	movs	r0, #0
 8001228:	7170      	strb	r0, [r6, #5]
}
 800122a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800122e:	f7ff fe2d 	bl	8000e8c <HAL_GetTick>
 8001232:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8001234:	b135      	cbz	r5, 8001244 <HAL_DAC_ConfigChannel+0x124>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123a:	2a00      	cmp	r2, #0
 800123c:	db3b      	blt.n	80012b6 <HAL_DAC_ConfigChannel+0x196>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800123e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44
 8001242:	e006      	b.n	8001252 <HAL_DAC_ConfigChannel+0x132>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001244:	6833      	ldr	r3, [r6, #0]
 8001246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001248:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800124c:	d11e      	bne.n	800128c <HAL_DAC_ConfigChannel+0x16c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800124e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001250:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001252:	6830      	ldr	r0, [r6, #0]
 8001254:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001256:	f005 0210 	and.w	r2, r5, #16
 800125a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800125e:	4091      	lsls	r1, r2
 8001260:	ea23 0301 	bic.w	r3, r3, r1
 8001264:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001266:	4091      	lsls	r1, r2
 8001268:	430b      	orrs	r3, r1
 800126a:	6483      	str	r3, [r0, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800126c:	6830      	ldr	r0, [r6, #0]
 800126e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001270:	21ff      	movs	r1, #255	@ 0xff
 8001272:	4091      	lsls	r1, r2
 8001274:	ea23 0301 	bic.w	r3, r3, r1
 8001278:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800127a:	4091      	lsls	r1, r2
 800127c:	430b      	orrs	r3, r1
 800127e:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8001280:	e764      	b.n	800114c <HAL_DAC_ConfigChannel+0x2c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001282:	6833      	ldr	r3, [r6, #0]
 8001284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001286:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800128a:	d0e0      	beq.n	800124e <HAL_DAC_ConfigChannel+0x12e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800128c:	f7ff fdfe 	bl	8000e8c <HAL_GetTick>
 8001290:	1bc0      	subs	r0, r0, r7
 8001292:	2801      	cmp	r0, #1
 8001294:	d9f5      	bls.n	8001282 <HAL_DAC_ConfigChannel+0x162>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001296:	6833      	ldr	r3, [r6, #0]
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800129e:	d0f0      	beq.n	8001282 <HAL_DAC_ConfigChannel+0x162>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012a0:	6933      	ldr	r3, [r6, #16]
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012a8:	2003      	movs	r0, #3
 80012aa:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 80012ac:	e7bd      	b.n	800122a <HAL_DAC_ConfigChannel+0x10a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012ae:	6833      	ldr	r3, [r6, #0]
 80012b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	dac3      	bge.n	800123e <HAL_DAC_ConfigChannel+0x11e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012b6:	f7ff fde9 	bl	8000e8c <HAL_GetTick>
 80012ba:	1bc0      	subs	r0, r0, r7
 80012bc:	2801      	cmp	r0, #1
 80012be:	d9f6      	bls.n	80012ae <HAL_DAC_ConfigChannel+0x18e>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012c0:	6833      	ldr	r3, [r6, #0]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	daf2      	bge.n	80012ae <HAL_DAC_ConfigChannel+0x18e>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012c8:	6933      	ldr	r3, [r6, #16]
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6133      	str	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
 80012d2:	7130      	strb	r0, [r6, #4]
            return HAL_TIMEOUT;
 80012d4:	e7a9      	b.n	800122a <HAL_DAC_ConfigChannel+0x10a>
    tmpreg1 = hdac->Instance->CCR;
 80012d6:	6831      	ldr	r1, [r6, #0]
 80012d8:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012da:	f005 0010 	and.w	r0, r5, #16
 80012de:	231f      	movs	r3, #31
 80012e0:	4083      	lsls	r3, r0
 80012e2:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012e6:	6a23      	ldr	r3, [r4, #32]
 80012e8:	4083      	lsls	r3, r0
 80012ea:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 80012ec:	638b      	str	r3, [r1, #56]	@ 0x38
 80012ee:	e731      	b.n	8001154 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 80012f0:	2200      	movs	r2, #0
 80012f2:	e740      	b.n	8001176 <HAL_DAC_ConfigChannel+0x56>
    connectOnChip = DAC_MCR_MODE1_0;
 80012f4:	2201      	movs	r2, #1
 80012f6:	e73e      	b.n	8001176 <HAL_DAC_ConfigChannel+0x56>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80012f8:	f000 ff44 	bl	8002184 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_DAC_ConfigChannel+0x204>)
 80012fe:	4298      	cmp	r0, r3
 8001300:	d902      	bls.n	8001308 <HAL_DAC_ConfigChannel+0x1e8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001302:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8001306:	e75b      	b.n	80011c0 <HAL_DAC_ConfigChannel+0xa0>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <HAL_DAC_ConfigChannel+0x208>)
 800130a:	4298      	cmp	r0, r3
 800130c:	f67f af58 	bls.w	80011c0 <HAL_DAC_ConfigChannel+0xa0>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001310:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8001314:	e754      	b.n	80011c0 <HAL_DAC_ConfigChannel+0xa0>
    return HAL_ERROR;
 8001316:	2001      	movs	r0, #1
}
 8001318:	4770      	bx	lr
    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	e785      	b.n	800122a <HAL_DAC_ConfigChannel+0x10a>
  __HAL_LOCK(hdac);
 800131e:	2002      	movs	r0, #2
 8001320:	e783      	b.n	800122a <HAL_DAC_ConfigChannel+0x10a>
 8001322:	bf00      	nop
 8001324:	09896800 	.word	0x09896800
 8001328:	04c4b400 	.word	0x04c4b400

0800132c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800132c:	4770      	bx	lr

0800132e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800132e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001330:	6a84      	ldr	r4, [r0, #40]	@ 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fffa 	bl	800132c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001338:	2301      	movs	r3, #1
 800133a:	7123      	strb	r3, [r4, #4]
}
 800133c:	bd10      	pop	{r4, pc}

0800133e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 800133e:	4770      	bx	lr

08001340 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001340:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001342:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001344:	f7ff fffb 	bl	800133e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001348:	bd08      	pop	{r3, pc}

0800134a <HAL_DACEx_ErrorCallbackCh2>:
}
 800134a:	4770      	bx	lr

0800134c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800134c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800134e:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001350:	6923      	ldr	r3, [r4, #16]
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff fff6 	bl	800134a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800135e:	2301      	movs	r3, #1
 8001360:	7123      	strb	r3, [r4, #4]
}
 8001362:	bd10      	pop	{r4, pc}

08001364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001364:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001366:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8001368:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800136a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800136c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800136e:	b114      	cbz	r4, 8001376 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001370:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8001372:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001374:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001376:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001378:	f004 0c1f 	and.w	ip, r4, #31
 800137c:	2401      	movs	r4, #1
 800137e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001382:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001384:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001386:	6804      	ldr	r4, [r0, #0]
 8001388:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800138a:	6883      	ldr	r3, [r0, #8]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d005      	beq.n	800139c <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	60da      	str	r2, [r3, #12]
  }
}
 8001398:	bc30      	pop	{r4, r5}
 800139a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800139c:	6803      	ldr	r3, [r0, #0]
 800139e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	60d9      	str	r1, [r3, #12]
 80013a4:	e7f8      	b.n	8001398 <DMA_SetConfig+0x34>
	...

080013a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013a8:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013aa:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80013ac:	4c0d      	ldr	r4, [pc, #52]	@ (80013e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80013b0:	490e      	ldr	r1, [pc, #56]	@ (80013ec <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	bf98      	it	ls
 80013b6:	460a      	movls	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013b8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80013ba:	f021 0103 	bic.w	r1, r1, #3
 80013be:	440a      	add	r2, r1
 80013c0:	6482      	str	r2, [r0, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013c2:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 80013c4:	64c2      	str	r2, [r0, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3b08      	subs	r3, #8
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013d0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80013d4:	2201      	movs	r2, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80013dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40020407 	.word	0x40020407
 80013e8:	40020820 	.word	0x40020820
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020880 	.word	0x40020880
 80013f4:	cccccccd 	.word	0xcccccccd

080013f8 <HAL_DMA_Init>:
  if (hdma == NULL)
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d060      	beq.n	80014be <HAL_DMA_Init+0xc6>
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <HAL_DMA_Init+0xcc>)
 8001404:	429a      	cmp	r2, r3
 8001406:	d83f      	bhi.n	8001488 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_DMA_Init+0xd0>)
 800140a:	4413      	add	r3, r2
 800140c:	492f      	ldr	r1, [pc, #188]	@ (80014cc <HAL_DMA_Init+0xd4>)
 800140e:	fba1 1303 	umull	r1, r3, r1, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8001416:	492e      	ldr	r1, [pc, #184]	@ (80014d0 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001418:	6463      	str	r3, [r4, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800141a:	6421      	str	r1, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 8001422:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001424:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8001428:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmp |=  hdma->Init.Direction        |
 800142c:	68a3      	ldr	r3, [r4, #8]
 800142e:	68e0      	ldr	r0, [r4, #12]
 8001430:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	6920      	ldr	r0, [r4, #16]
 8001434:	4303      	orrs	r3, r0
 8001436:	6960      	ldr	r0, [r4, #20]
 8001438:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	69a0      	ldr	r0, [r4, #24]
 800143c:	4303      	orrs	r3, r0
 800143e:	69e0      	ldr	r0, [r4, #28]
 8001440:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	6a20      	ldr	r0, [r4, #32]
 8001444:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001446:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8001448:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff ffac 	bl	80013a8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001450:	68a3      	ldr	r3, [r4, #8]
 8001452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001456:	bf04      	itt	eq
 8001458:	2300      	moveq	r3, #0
 800145a:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800145c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800145e:	7922      	ldrb	r2, [r4, #4]
 8001460:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001462:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001464:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001466:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	2a03      	cmp	r2, #3
 800146e:	d914      	bls.n	800149a <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001474:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001476:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001478:	2000      	movs	r0, #0
 800147a:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800147c:	2301      	movs	r3, #1
 800147e:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 8001482:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8001486:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_DMA_Init+0xdc>)
 800148a:	4413      	add	r3, r2
 800148c:	490f      	ldr	r1, [pc, #60]	@ (80014cc <HAL_DMA_Init+0xd4>)
 800148e:	fba1 1303 	umull	r1, r3, r1, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4910      	ldr	r1, [pc, #64]	@ (80014d8 <HAL_DMA_Init+0xe0>)
 8001498:	e7be      	b.n	8001418 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800149a:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_DMA_Init+0xe4>)
 800149e:	441a      	add	r2, r3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	6562      	str	r2, [r4, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014a4:	490e      	ldr	r1, [pc, #56]	@ (80014e0 <HAL_DMA_Init+0xe8>)
 80014a6:	65a1      	str	r1, [r4, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80014a8:	3b01      	subs	r3, #1
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80014b8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	e7dc      	b.n	8001478 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40020407 	.word	0x40020407
 80014c8:	bffdfff8 	.word	0xbffdfff8
 80014cc:	cccccccd 	.word	0xcccccccd
 80014d0:	40020000 	.word	0x40020000
 80014d4:	bffdfbf8 	.word	0xbffdfbf8
 80014d8:	40020400 	.word	0x40020400
 80014dc:	1000823f 	.word	0x1000823f
 80014e0:	40020940 	.word	0x40020940

080014e4 <HAL_DMA_Start_IT>:
{
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80014e8:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80014ec:	2801      	cmp	r0, #1
 80014ee:	d041      	beq.n	8001574 <HAL_DMA_Start_IT+0x90>
 80014f0:	2001      	movs	r0, #1
 80014f2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80014f6:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80014fa:	b2c0      	uxtb	r0, r0
 80014fc:	2801      	cmp	r0, #1
 80014fe:	d004      	beq.n	800150a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8001500:	2300      	movs	r3, #0
 8001502:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8001506:	2002      	movs	r0, #2
}
 8001508:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800150a:	2002      	movs	r0, #2
 800150c:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	2000      	movs	r0, #0
 8001512:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001514:	6825      	ldr	r5, [r4, #0]
 8001516:	6828      	ldr	r0, [r5, #0]
 8001518:	f020 0001 	bic.w	r0, r0, #1
 800151c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151e:	4620      	mov	r0, r4
 8001520:	f7ff ff20 	bl	8001364 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001524:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001526:	b1d3      	cbz	r3, 800155e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f043 030e 	orr.w	r3, r3, #14
 8001530:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001532:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800153a:	d003      	beq.n	8001544 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001542:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001544:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001546:	b11b      	cbz	r3, 8001550 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800154e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2000      	movs	r0, #0
 800155c:	e7d4      	b.n	8001508 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f043 030a 	orr.w	r3, r3, #10
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e7de      	b.n	8001532 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001574:	2002      	movs	r0, #2
 8001576:	e7c7      	b.n	8001508 <HAL_DMA_Start_IT+0x24>

08001578 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001578:	680b      	ldr	r3, [r1, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80d3 	beq.w	8001726 <HAL_GPIO_Init+0x1ae>
{
 8001580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001584:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001586:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800158a:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800158c:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800158e:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001592:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001596:	4c64      	ldr	r4, [pc, #400]	@ (8001728 <HAL_GPIO_Init+0x1b0>)
 8001598:	e047      	b.n	800162a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800159a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800159c:	fa0e fa0c 	lsl.w	sl, lr, ip
 80015a0:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a4:	68cb      	ldr	r3, [r1, #12]
 80015a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80015aa:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80015ae:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80015b0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b2:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	684b      	ldr	r3, [r1, #4]
 80015b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015bc:	4093      	lsls	r3, r2
 80015be:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 80015c0:	6043      	str	r3, [r0, #4]
 80015c2:	e03d      	b.n	8001640 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015c4:	2700      	movs	r7, #0
 80015c6:	fa07 f70b 	lsl.w	r7, r7, fp
 80015ca:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ce:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 80015d0:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 80015d2:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	684e      	ldr	r6, [r1, #4]
 80015d8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80015dc:	bf0c      	ite	eq
 80015de:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80015e0:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 80015e4:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 80015e6:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	684e      	ldr	r6, [r1, #4]
 80015ea:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80015ee:	bf0c      	ite	eq
 80015f0:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80015f2:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 80015f6:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 80015f8:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fa:	684e      	ldr	r6, [r1, #4]
 80015fc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8001600:	bf0c      	ite	eq
 8001602:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001604:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8001608:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800160a:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160c:	684e      	ldr	r6, [r1, #4]
 800160e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 8001612:	bf0c      	ite	eq
 8001614:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8001616:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 800161a:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 800161c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800161e:	680b      	ldr	r3, [r1, #0]
 8001620:	f10c 0c02 	add.w	ip, ip, #2
 8001624:	fa33 f702 	lsrs.w	r7, r3, r2
 8001628:	d07a      	beq.n	8001720 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800162a:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 800162e:	ea17 0903 	ands.w	r9, r7, r3
 8001632:	d0f3      	beq.n	800161c <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001634:	684b      	ldr	r3, [r1, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	3b01      	subs	r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d9ac      	bls.n	800159a <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	684b      	ldr	r3, [r1, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d020      	beq.n	800168c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800164a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	fa0e f30c 	lsl.w	r3, lr, ip
 8001650:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001654:	688b      	ldr	r3, [r1, #8]
 8001656:	fa03 f30c 	lsl.w	r3, r3, ip
 800165a:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 800165c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	684b      	ldr	r3, [r1, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d111      	bne.n	800168c <HAL_GPIO_Init+0x114>
        temp = GPIOx->AFR[position >> 3U];
 8001668:	08d7      	lsrs	r7, r2, #3
 800166a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800166e:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001670:	f002 0b07 	and.w	fp, r2, #7
 8001674:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001678:	fa08 fa0b 	lsl.w	sl, r8, fp
 800167c:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001680:	690b      	ldr	r3, [r1, #16]
 8001682:	fa03 f30b 	lsl.w	r3, r3, fp
 8001686:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 800168a:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800168c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800168e:	fa0e f30c 	lsl.w	r3, lr, ip
 8001692:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	684b      	ldr	r3, [r1, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	fa03 f30c 	lsl.w	r3, r3, ip
 80016a0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80016a2:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016a4:	684b      	ldr	r3, [r1, #4]
 80016a6:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80016aa:	d0b7      	beq.n	800161c <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	4e1f      	ldr	r6, [pc, #124]	@ (800172c <HAL_GPIO_Init+0x1b4>)
 80016ae:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6633      	str	r3, [r6, #96]	@ 0x60
 80016b6:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016c0:	f022 0303 	bic.w	r3, r2, #3
 80016c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016c8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80016cc:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016ce:	f002 0b03 	and.w	fp, r2, #3
 80016d2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80016d6:	fa08 fa0b 	lsl.w	sl, r8, fp
 80016da:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016de:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80016e2:	f43f af6f 	beq.w	80015c4 <HAL_GPIO_Init+0x4c>
 80016e6:	4e12      	ldr	r6, [pc, #72]	@ (8001730 <HAL_GPIO_Init+0x1b8>)
 80016e8:	42b0      	cmp	r0, r6
 80016ea:	d011      	beq.n	8001710 <HAL_GPIO_Init+0x198>
 80016ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80016f0:	42b0      	cmp	r0, r6
 80016f2:	d00f      	beq.n	8001714 <HAL_GPIO_Init+0x19c>
 80016f4:	4f0f      	ldr	r7, [pc, #60]	@ (8001734 <HAL_GPIO_Init+0x1bc>)
 80016f6:	42b8      	cmp	r0, r7
 80016f8:	d00e      	beq.n	8001718 <HAL_GPIO_Init+0x1a0>
 80016fa:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80016fe:	42b8      	cmp	r0, r7
 8001700:	d00c      	beq.n	800171c <HAL_GPIO_Init+0x1a4>
 8001702:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001706:	42b8      	cmp	r0, r7
 8001708:	bf14      	ite	ne
 800170a:	2706      	movne	r7, #6
 800170c:	2705      	moveq	r7, #5
 800170e:	e75a      	b.n	80015c6 <HAL_GPIO_Init+0x4e>
 8001710:	2701      	movs	r7, #1
 8001712:	e758      	b.n	80015c6 <HAL_GPIO_Init+0x4e>
 8001714:	2702      	movs	r7, #2
 8001716:	e756      	b.n	80015c6 <HAL_GPIO_Init+0x4e>
 8001718:	2703      	movs	r7, #3
 800171a:	e754      	b.n	80015c6 <HAL_GPIO_Init+0x4e>
 800171c:	2704      	movs	r7, #4
 800171e:	e752      	b.n	80015c6 <HAL_GPIO_Init+0x4e>
  }
}
 8001720:	b003      	add	sp, #12
 8001722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001726:	4770      	bx	lr
 8001728:	40010400 	.word	0x40010400
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000c00 	.word	0x48000c00

08001738 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001738:	b10a      	cbz	r2, 800173e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173a:	6181      	str	r1, [r0, #24]
 800173c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001744:	2800      	cmp	r0, #0
 8001746:	d060      	beq.n	800180a <HAL_OPAMP_Init+0xc6>
{
 8001748:	b510      	push	{r4, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800174e:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d05a      	beq.n	800180e <HAL_OPAMP_Init+0xca>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001758:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d057      	beq.n	8001812 <HAL_OPAMP_Init+0xce>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_OPAMP_Init+0xd8>)
 8001764:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	661a      	str	r2, [r3, #96]	@ 0x60
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001776:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800177a:	b90b      	cbnz	r3, 8001780 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800177c:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff faa7 	bl	8000cd4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001786:	68a3      	ldr	r3, [r4, #8]
 8001788:	f023 0320 	bic.w	r3, r3, #32
 800178c:	2b40      	cmp	r3, #64	@ 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f023 0310 	bic.w	r3, r3, #16
 8001796:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001798:	ea43 0301 	orr.w	r3, r3, r1
 800179c:	6013      	str	r3, [r2, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	6808      	ldr	r0, [r1, #0]
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	68a2      	ldr	r2, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80017a6:	bf1c      	itt	ne
 80017a8:	4313      	orrne	r3, r2
 80017aa:	68e2      	ldrne	r2, [r4, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6922      	ldr	r2, [r4, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80017b4:	4313      	orrs	r3, r2
 80017b6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80017b8:	4313      	orrs	r3, r2
 80017ba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80017bc:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80017c0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80017c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017c6:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <HAL_OPAMP_Init+0xdc>)
 80017c8:	4002      	ands	r2, r0
 80017ca:	4313      	orrs	r3, r2
 80017cc:	7d22      	ldrb	r2, [r4, #20]
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	bf14      	ite	ne
 80017d2:	2200      	movne	r2, #0
 80017d4:	2201      	moveq	r2, #1
 80017d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017da:	600b      	str	r3, [r1, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80017dc:	6822      	ldr	r2, [r4, #0]
 80017de:	6993      	ldr	r3, [r2, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db09      	blt.n	80017f8 <HAL_OPAMP_Init+0xb4>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80017e4:	6991      	ldr	r1, [r2, #24]
 80017e6:	69a3      	ldr	r3, [r4, #24]
 80017e8:	69e0      	ldr	r0, [r4, #28]
 80017ea:	4303      	orrs	r3, r0
 80017ec:	6a20      	ldr	r0, [r4, #32]
 80017ee:	4303      	orrs	r3, r0
 80017f0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80017f8:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80017fc:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 8001800:	b953      	cbnz	r3, 8001818 <HAL_OPAMP_Init+0xd4>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001802:	2301      	movs	r3, #1
 8001804:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8001808:	e004      	b.n	8001814 <HAL_OPAMP_Init+0xd0>
    return HAL_ERROR;
 800180a:	2001      	movs	r0, #1
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 800180c:	4770      	bx	lr
    return HAL_ERROR;
 800180e:	2001      	movs	r0, #1
 8001810:	e000      	b.n	8001814 <HAL_OPAMP_Init+0xd0>
    return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
}
 8001814:	b002      	add	sp, #8
 8001816:	bd10      	pop	{r4, pc}
    return status;
 8001818:	2000      	movs	r0, #0
 800181a:	e7fb      	b.n	8001814 <HAL_OPAMP_Init+0xd0>
 800181c:	40021000 	.word	0x40021000
 8001820:	e0003e11 	.word	0xe0003e11

08001824 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8001824:	b1a8      	cbz	r0, 8001852 <HAL_OPAMP_Start+0x2e>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001826:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b05      	cmp	r3, #5
 800182e:	d012      	beq.n	8001856 <HAL_OPAMP_Start+0x32>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8001830:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_OPAMP_Start+0x1a>
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
    }
    else
    {
      status = HAL_ERROR;
 800183a:	2001      	movs	r0, #1
    }


  }
  return status;
}
 800183c:	4770      	bx	lr
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800183e:	6801      	ldr	r1, [r0, #0]
 8001840:	680b      	ldr	r3, [r1, #0]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	600b      	str	r3, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8001848:	2304      	movs	r3, #4
 800184a:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 800184e:	2000      	movs	r0, #0
 8001850:	4770      	bx	lr
    status = HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	4770      	bx	lr
    status = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	4770      	bx	lr
	...

0800185c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800185c:	2800      	cmp	r0, #0
 800185e:	d13a      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800186c:	d008      	beq.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800186e:	4a3d      	ldr	r2, [pc, #244]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001870:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800187c:	2000      	movs	r0, #0
 800187e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001880:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001882:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001898:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800189a:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2132      	movs	r1, #50	@ 0x32
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4931      	ldr	r1, [pc, #196]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0x110>)
 80018a6:	fba1 1303 	umull	r1, r3, r1, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ae:	6952      	ldr	r2, [r2, #20]
 80018b0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80018b4:	d007      	beq.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x6a>
 80018b6:	492b      	ldr	r1, [pc, #172]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 80018b8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ba:	694a      	ldr	r2, [r1, #20]
 80018bc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80018c0:	d001      	beq.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x6a>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f8      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80018c8:	695b      	ldr	r3, [r3, #20]
  return HAL_OK;
 80018ca:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80018ce:	bf14      	ite	ne
 80018d0:	2003      	movne	r0, #3
 80018d2:	2000      	moveq	r0, #0
 80018d4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80018da:	d008      	beq.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	4a21      	ldr	r2, [pc, #132]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80018ea:	2000      	movs	r0, #0
}
 80018ec:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fa:	d008      	beq.n	800190e <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018fc:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80018fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001906:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190e:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001910:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001926:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001928:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2132      	movs	r1, #50	@ 0x32
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	490e      	ldr	r1, [pc, #56]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0x110>)
 8001934:	fba1 1303 	umull	r1, r3, r1, r3
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193c:	6952      	ldr	r2, [r2, #20]
 800193e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001942:	d007      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8001944:	4907      	ldr	r1, [pc, #28]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8001946:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001948:	694a      	ldr	r2, [r1, #20]
 800194a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800194e:	d001      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f8      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8001956:	695b      	ldr	r3, [r3, #20]
  return HAL_OK;
 8001958:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800195c:	bf14      	ite	ne
 800195e:	2003      	movne	r0, #3
 8001960:	2000      	moveq	r0, #0
 8001962:	4770      	bx	lr
 8001964:	40007000 	.word	0x40007000
 8001968:	20000014 	.word	0x20000014
 800196c:	431bde83 	.word	0x431bde83

08001970 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001970:	4a02      	ldr	r2, [pc, #8]	@ (800197c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8001972:	6893      	ldr	r3, [r2, #8]
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6093      	str	r3, [r2, #8]
}
 800197a:	4770      	bx	lr
 800197c:	40007000 	.word	0x40007000

08001980 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	2800      	cmp	r0, #0
 8001982:	f000 8252 	beq.w	8001e2a <HAL_RCC_OscConfig+0x4aa>
{
 8001986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	6803      	ldr	r3, [r0, #0]
 8001990:	f013 0f01 	tst.w	r3, #1
 8001994:	d037      	beq.n	8001a06 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001996:	4aa5      	ldr	r2, [pc, #660]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001998:	6893      	ldr	r3, [r2, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199e:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d023      	beq.n	80019ec <HAL_RCC_OscConfig+0x6c>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d025      	beq.n	80019f4 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ae:	d04e      	beq.n	8001a4e <HAL_RCC_OscConfig+0xce>
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b4:	d051      	beq.n	8001a5a <HAL_RCC_OscConfig+0xda>
 80019b6:	4b9d      	ldr	r3, [pc, #628]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	6863      	ldr	r3, [r4, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d052      	beq.n	8001a74 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fa5d 	bl	8000e8c <HAL_GetTick>
 80019d2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d4:	4e95      	ldr	r6, [pc, #596]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	6833      	ldr	r3, [r6, #0]
 80019d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80019dc:	d113      	bne.n	8001a06 <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019de:	f7ff fa55 	bl	8000e8c <HAL_GetTick>
 80019e2:	1b40      	subs	r0, r0, r5
 80019e4:	2864      	cmp	r0, #100	@ 0x64
 80019e6:	d9f6      	bls.n	80019d6 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80019e8:	2003      	movs	r0, #3
 80019ea:	e227      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019f0:	2a03      	cmp	r2, #3
 80019f2:	d1d9      	bne.n	80019a8 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	4b8d      	ldr	r3, [pc, #564]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_OscConfig+0x86>
 80019fe:	6863      	ldr	r3, [r4, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8214 	beq.w	8001e2e <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f013 0f02 	tst.w	r3, #2
 8001a0c:	d05d      	beq.n	8001aca <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4a87      	ldr	r2, [pc, #540]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	6893      	ldr	r3, [r2, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a16:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d03a      	beq.n	8001a92 <HAL_RCC_OscConfig+0x112>
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d03c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	68e3      	ldr	r3, [r4, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d077      	beq.n	8001b16 <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a26:	4a81      	ldr	r2, [pc, #516]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fa2c 	bl	8000e8c <HAL_GetTick>
 8001a34:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a36:	4e7d      	ldr	r6, [pc, #500]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	6833      	ldr	r3, [r6, #0]
 8001a3a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001a3e:	d161      	bne.n	8001b04 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fa24 	bl	8000e8c <HAL_GetTick>
 8001a44:	1b40      	subs	r0, r0, r5
 8001a46:	2802      	cmp	r0, #2
 8001a48:	d9f6      	bls.n	8001a38 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	e1f6      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	4a77      	ldr	r2, [pc, #476]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	6813      	ldr	r3, [r2, #0]
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e7b6      	b.n	80019c8 <HAL_RCC_OscConfig+0x48>
 8001a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a5e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e7a9      	b.n	80019c8 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 8001a74:	f7ff fa0a 	bl	8000e8c <HAL_GetTick>
 8001a78:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4e6c      	ldr	r6, [pc, #432]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	6833      	ldr	r3, [r6, #0]
 8001a7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a82:	d0c0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fa02 	bl	8000e8c <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2864      	cmp	r0, #100	@ 0x64
 8001a8c:	d9f6      	bls.n	8001a7c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
 8001a90:	e1d4      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a92:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a96:	2a02      	cmp	r2, #2
 8001a98:	d1c2      	bne.n	8001a20 <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9a:	4b64      	ldr	r3, [pc, #400]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001aa2:	d003      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 8001aa4:	68e3      	ldr	r3, [r4, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 81c3 	beq.w	8001e32 <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4a5f      	ldr	r2, [pc, #380]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	6853      	ldr	r3, [r2, #4]
 8001ab0:	6921      	ldr	r1, [r4, #16]
 8001ab2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001ab6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001aba:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001abc:	4b5c      	ldr	r3, [pc, #368]	@ (8001c30 <HAL_RCC_OscConfig+0x2b0>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f7ff f9a0 	bl	8000e04 <HAL_InitTick>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	f040 81b6 	bne.w	8001e36 <HAL_RCC_OscConfig+0x4b6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	f013 0f08 	tst.w	r3, #8
 8001ad0:	d04c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad2:	6963      	ldr	r3, [r4, #20]
 8001ad4:	b39b      	cbz	r3, 8001b3e <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4a55      	ldr	r2, [pc, #340]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f9d2 	bl	8000e8c <HAL_GetTick>
 8001ae8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	4e50      	ldr	r6, [pc, #320]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8001af0:	f013 0f02 	tst.w	r3, #2
 8001af4:	d13a      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff f9c9 	bl	8000e8c <HAL_GetTick>
 8001afa:	1b40      	subs	r0, r0, r5
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e19b      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	6853      	ldr	r3, [r2, #4]
 8001b08:	6921      	ldr	r1, [r4, #16]
 8001b0a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001b0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001b12:	6053      	str	r3, [r2, #4]
 8001b14:	e7d9      	b.n	8001aca <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9b4 	bl	8000e8c <HAL_GetTick>
 8001b24:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b26:	4e41      	ldr	r6, [pc, #260]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6833      	ldr	r3, [r6, #0]
 8001b2a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b2e:	d0cc      	beq.n	8001aca <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f9ac 	bl	8000e8c <HAL_GetTick>
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d9f6      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	e17e      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f99e 	bl	8000e8c <HAL_GetTick>
 8001b50:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b52:	4e36      	ldr	r6, [pc, #216]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8001b58:	f013 0f02 	tst.w	r3, #2
 8001b5c:	d006      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f995 	bl	8000e8c <HAL_GetTick>
 8001b62:	1b40      	subs	r0, r0, r5
 8001b64:	2802      	cmp	r0, #2
 8001b66:	d9f5      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8001b68:	2003      	movs	r0, #3
 8001b6a:	e167      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f013 0f04 	tst.w	r3, #4
 8001b72:	f000 8082 	beq.w	8001c7a <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b76:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001b7e:	d136      	bne.n	8001bee <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b84:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b94:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <HAL_RCC_OscConfig+0x2b4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b9e:	d028      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	68a3      	ldr	r3, [r4, #8]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d039      	beq.n	8001c1a <HAL_RCC_OscConfig+0x29a>
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d046      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2b8>
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001bb8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001bbc:	f022 0204 	bic.w	r2, r2, #4
 8001bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc4:	68a3      	ldr	r3, [r4, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff f95f 	bl	8000e8c <HAL_GetTick>
 8001bce:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd0:	4f16      	ldr	r7, [pc, #88]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bda:	f013 0f02 	tst.w	r3, #2
 8001bde:	d14b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f954 	bl	8000e8c <HAL_GetTick>
 8001be4:	1b80      	subs	r0, r0, r6
 8001be6:	4540      	cmp	r0, r8
 8001be8:	d9f5      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 8001bea:	2003      	movs	r0, #3
 8001bec:	e126      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2500      	movs	r5, #0
 8001bf0:	e7d1      	b.n	8001b96 <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_RCC_OscConfig+0x2b4>)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f946 	bl	8000e8c <HAL_GetTick>
 8001c00:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	4f0c      	ldr	r7, [pc, #48]	@ (8001c34 <HAL_RCC_OscConfig+0x2b4>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c0a:	d1c9      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7ff f93e 	bl	8000e8c <HAL_GetTick>
 8001c10:	1b80      	subs	r0, r0, r6
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9f6      	bls.n	8001c04 <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 8001c16:	2003      	movs	r0, #3
 8001c18:	e110      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c28:	e7cc      	b.n	8001bc4 <HAL_RCC_OscConfig+0x244>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	2000001c 	.word	0x2000001c
 8001c34:	40007000 	.word	0x40007000
 8001c38:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001c3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001c3e:	f042 0204 	orr.w	r2, r2, #4
 8001c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001c46:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001c52:	e7b7      	b.n	8001bc4 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f91a 	bl	8000e8c <HAL_GetTick>
 8001c58:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5a:	4f80      	ldr	r7, [pc, #512]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c64:	f013 0f02 	tst.w	r3, #2
 8001c68:	d006      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff f90f 	bl	8000e8c <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	4540      	cmp	r0, r8
 8001c72:	d9f5      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e0e1      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c78:	b9e5      	cbnz	r5, 8001cb4 <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	f013 0f20 	tst.w	r3, #32
 8001c80:	d035      	beq.n	8001cee <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c82:	69a3      	ldr	r3, [r4, #24]
 8001c84:	b1e3      	cbz	r3, 8001cc0 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c86:	4a75      	ldr	r2, [pc, #468]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f8fa 	bl	8000e8c <HAL_GetTick>
 8001c98:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9a:	4e70      	ldr	r6, [pc, #448]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001c9c:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8001ca0:	f013 0f02 	tst.w	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca6:	f7ff f8f1 	bl	8000e8c <HAL_GetTick>
 8001caa:	1b40      	subs	r0, r0, r5
 8001cac:	2802      	cmp	r0, #2
 8001cae:	d9f5      	bls.n	8001c9c <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	e0c3      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4a69      	ldr	r2, [pc, #420]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	e7dc      	b.n	8001c7a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc0:	4a66      	ldr	r2, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f8dd 	bl	8000e8c <HAL_GetTick>
 8001cd2:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd4:	4e61      	ldr	r6, [pc, #388]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001cd6:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8001cda:	f013 0f02 	tst.w	r3, #2
 8001cde:	d006      	beq.n	8001cee <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce0:	f7ff f8d4 	bl	8000e8c <HAL_GetTick>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9f5      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
 8001cec:	e0a6      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cee:	69e3      	ldr	r3, [r4, #28]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a2 	beq.w	8001e3a <HAL_RCC_OscConfig+0x4ba>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf6:	4a59      	ldr	r2, [pc, #356]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001cf8:	6892      	ldr	r2, [r2, #8]
 8001cfa:	f002 020c 	and.w	r2, r2, #12
 8001cfe:	2a0c      	cmp	r2, #12
 8001d00:	d064      	beq.n	8001dcc <HAL_RCC_OscConfig+0x44c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d013      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3ae>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4a55      	ldr	r2, [pc, #340]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8bc 	bl	8000e8c <HAL_GetTick>
 8001d14:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	4d51      	ldr	r5, [pc, #324]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d1e:	d04e      	beq.n	8001dbe <HAL_RCC_OscConfig+0x43e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f8b4 	bl	8000e8c <HAL_GetTick>
 8001d24:	1b00      	subs	r0, r0, r4
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f6      	bls.n	8001d18 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e086      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d38:	f7ff f8a8 	bl	8000e8c <HAL_GetTick>
 8001d3c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3e:	4e47      	ldr	r6, [pc, #284]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001d40:	6833      	ldr	r3, [r6, #0]
 8001d42:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3d6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff f8a0 	bl	8000e8c <HAL_GetTick>
 8001d4c:	1b40      	subs	r0, r0, r5
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9f6      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 8001d52:	2003      	movs	r0, #3
 8001d54:	e072      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4a41      	ldr	r2, [pc, #260]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001d58:	68d1      	ldr	r1, [r2, #12]
 8001d5a:	4b41      	ldr	r3, [pc, #260]	@ (8001e60 <HAL_RCC_OscConfig+0x4e0>)
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	6a21      	ldr	r1, [r4, #32]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d68:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001d6a:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8001d6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d70:	3901      	subs	r1, #1
 8001d72:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001d76:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001d78:	0849      	lsrs	r1, r1, #1
 8001d7a:	3901      	subs	r1, #1
 8001d7c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d82:	0849      	lsrs	r1, r1, #1
 8001d84:	3901      	subs	r1, #1
 8001d86:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001d8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d94:	68d3      	ldr	r3, [r2, #12]
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f876 	bl	8000e8c <HAL_GetTick>
 8001da0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	4d2e      	ldr	r5, [pc, #184]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f86e 	bl	8000e8c <HAL_GetTick>
 8001db0:	1b00      	subs	r0, r0, r4
 8001db2:	2802      	cmp	r0, #2
 8001db4:	d9f6      	bls.n	8001da4 <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e040      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
      }
    }
  }
  }

  return HAL_OK;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e03e      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dbe:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001dc0:	68d1      	ldr	r1, [r2, #12]
 8001dc2:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <HAL_RCC_OscConfig+0x4e4>)
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001dc8:	2000      	movs	r0, #0
 8001dca:	e037      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d038      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4c2>
      temp_pllckcfg = RCC->PLLCFGR;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_RCC_OscConfig+0x4dc>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd4:	f003 0103 	and.w	r1, r3, #3
 8001dd8:	6a22      	ldr	r2, [r4, #32]
 8001dda:	4291      	cmp	r1, r2
 8001ddc:	d133      	bne.n	8001e46 <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dde:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001de2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001de4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001dea:	d12e      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001df0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df2:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001df6:	d12a      	bne.n	8001e4e <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001df8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001dfc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001e02:	d126      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4d2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e04:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001e08:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001e0a:	0852      	lsrs	r2, r2, #1
 8001e0c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e12:	d120      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4d6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e14:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001e16:	0852      	lsrs	r2, r2, #1
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e22:	bf14      	ite	ne
 8001e24:	2001      	movne	r0, #1
 8001e26:	2000      	moveq	r0, #0
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
}
 8001e2c:	4770      	bx	lr
        return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e004      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
 8001e34:	e002      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
          return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
  return HAL_OK;
 8001e3a:	2000      	movs	r0, #0
}
 8001e3c:	b002      	add	sp, #8
 8001e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e7fa      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
        return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
 8001e48:	e7f8      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	e7f6      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
 8001e4e:	2001      	movs	r0, #1
 8001e50:	e7f4      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
 8001e52:	2001      	movs	r0, #1
 8001e54:	e7f2      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
 8001e56:	2001      	movs	r0, #1
 8001e58:	e7f0      	b.n	8001e3c <HAL_RCC_OscConfig+0x4bc>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	019f800c 	.word	0x019f800c
 8001e64:	feeefffc 	.word	0xfeeefffc

08001e68 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	460d      	mov	r5, r1
 8001e70:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8001e7e:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8001e82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <HAL_RCC_MCOConfig+0x58>)
 8001e84:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8001e86:	2301      	movs	r3, #1
 8001e88:	4083      	lsls	r3, r0
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8001e8e:	b2a3      	uxth	r3, r4
 8001e90:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8001e92:	f3c4 5307 	ubfx	r3, r4, #20, #8
 8001e96:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8001e98:	f500 1090 	add.w	r0, r0, #1179648	@ 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8001e9c:	a901      	add	r1, sp, #4
 8001e9e:	0280      	lsls	r0, r0, #10
 8001ea0:	f7ff fb6a 	bl	8001578 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8001ea4:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8001eaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_RCC_MCOConfig+0x58>)
 8001eac:	6899      	ldr	r1, [r3, #8]
 8001eae:	f021 41fe 	bic.w	r1, r1, #2130706432	@ 0x7f000000
 8001eb2:	ea41 0206 	orr.w	r2, r1, r6
 8001eb6:	432a      	orrs	r2, r5
 8001eb8:	609a      	str	r2, [r3, #8]
  }
}
 8001eba:	b006      	add	sp, #24
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d02a      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x62>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d026      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x66>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8001ee8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8001eea:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001eee:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ef6:	3301      	adds	r3, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef8:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001efc:	2a03      	cmp	r2, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001efe:	4a0c      	ldr	r2, [pc, #48]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001f00:	68d0      	ldr	r0, [r2, #12]
 8001f02:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001f06:	bf0c      	ite	eq
 8001f08:	4a0a      	ldreq	r2, [pc, #40]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x70>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0a:	4a0b      	ldrne	r2, [pc, #44]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x74>)
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001f20:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f24:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001f26:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0x74>)
 8001f28:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001f2a:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x70>)
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	017d7840 	.word	0x017d7840
 8001f38:	00f42400 	.word	0x00f42400

08001f3c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	f000 80be 	beq.w	80020be <HAL_RCC_ClockConfig+0x182>
{
 8001f42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f46:	460c      	mov	r4, r1
 8001f48:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4a:	4b86      	ldr	r3, [pc, #536]	@ (8002164 <HAL_RCC_ClockConfig+0x228>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	428b      	cmp	r3, r1
 8001f54:	d20b      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4a83      	ldr	r2, [pc, #524]	@ (8002164 <HAL_RCC_ClockConfig+0x228>)
 8001f58:	6813      	ldr	r3, [r2, #0]
 8001f5a:	f023 030f 	bic.w	r3, r3, #15
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	f040 80aa 	bne.w	80020c2 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	f013 0f01 	tst.w	r3, #1
 8001f74:	f000 80a9 	beq.w	80020ca <HAL_RCC_ClockConfig+0x18e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f78:	686a      	ldr	r2, [r5, #4]
 8001f7a:	2a03      	cmp	r2, #3
 8001f7c:	d030      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	2a02      	cmp	r2, #2
 8001f80:	d068      	beq.n	8002054 <HAL_RCC_ClockConfig+0x118>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f82:	4b79      	ldr	r3, [pc, #484]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001f8a:	f000 809c 	beq.w	80020c6 <HAL_RCC_ClockConfig+0x18a>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f8e:	f7ff ff99 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_ClockConfig+0x230>)
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d96a      	bls.n	800206e <HAL_RCC_ClockConfig+0x132>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f98:	4a73      	ldr	r2, [pc, #460]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8001f9a:	6893      	ldr	r3, [r2, #8]
 8001f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fa6:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4a6f      	ldr	r2, [pc, #444]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	6869      	ldr	r1, [r5, #4]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001fb8:	f7fe ff68 	bl	8000e8c <HAL_GetTick>
 8001fbc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4f6a      	ldr	r7, [pc, #424]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	686a      	ldr	r2, [r5, #4]
 8001fcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fd0:	d050      	beq.n	8002074 <HAL_RCC_ClockConfig+0x138>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe ff5b 	bl	8000e8c <HAL_GetTick>
 8001fd6:	1b80      	subs	r0, r0, r6
 8001fd8:	4540      	cmp	r0, r8
 8001fda:	d9f3      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 8001fdc:	2003      	movs	r0, #3
 8001fde:	e0bf      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe0:	4a61      	ldr	r2, [pc, #388]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e0b8      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fee:	495e      	ldr	r1, [pc, #376]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8001ff0:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff2:	68c9      	ldr	r1, [r1, #12]
 8001ff4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8001ff8:	3101      	adds	r1, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffa:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 8001ffe:	2a03      	cmp	r2, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002000:	4a59      	ldr	r2, [pc, #356]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002002:	68d2      	ldr	r2, [r2, #12]
 8002004:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002008:	bf0c      	ite	eq
 800200a:	4859      	ldreq	r0, [pc, #356]	@ (8002170 <HAL_RCC_ClockConfig+0x234>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200c:	4859      	ldrne	r0, [pc, #356]	@ (8002174 <HAL_RCC_ClockConfig+0x238>)
 800200e:	fbb0 f1f1 	udiv	r1, r0, r1
 8002012:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002016:	4954      	ldr	r1, [pc, #336]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002018:	68c9      	ldr	r1, [r1, #12]
 800201a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800201e:	3101      	adds	r1, #1
 8002020:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8002022:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8002026:	4951      	ldr	r1, [pc, #324]	@ (800216c <HAL_RCC_ClockConfig+0x230>)
 8002028:	428a      	cmp	r2, r1
 800202a:	d91a      	bls.n	8002062 <HAL_RCC_ClockConfig+0x126>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800202c:	4a4e      	ldr	r2, [pc, #312]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 800202e:	6892      	ldr	r2, [r2, #8]
 8002030:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8002034:	d004      	beq.n	8002040 <HAL_RCC_ClockConfig+0x104>
 8002036:	f013 0902 	ands.w	r9, r3, #2
 800203a:	d0b6      	beq.n	8001faa <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800203c:	68ab      	ldr	r3, [r5, #8]
 800203e:	b99b      	cbnz	r3, 8002068 <HAL_RCC_ClockConfig+0x12c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002040:	4a49      	ldr	r2, [pc, #292]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002042:	6893      	ldr	r3, [r2, #8]
 8002044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800204c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800204e:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8002052:	e7aa      	b.n	8001faa <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002054:	4b44      	ldr	r3, [pc, #272]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800205c:	d197      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
 8002060:	e07e      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002062:	f04f 0900 	mov.w	r9, #0
 8002066:	e7a0      	b.n	8001faa <HAL_RCC_ClockConfig+0x6e>
 8002068:	f04f 0900 	mov.w	r9, #0
 800206c:	e79d      	b.n	8001faa <HAL_RCC_ClockConfig+0x6e>
 800206e:	f04f 0900 	mov.w	r9, #0
 8002072:	e79a      	b.n	8001faa <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	f013 0f02 	tst.w	r3, #2
 800207a:	d129      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x194>
    if(hpre == RCC_SYSCLK_DIV2)
 800207c:	f1b9 0f80 	cmp.w	r9, #128	@ 0x80
 8002080:	d140      	bne.n	8002104 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002082:	4a39      	ldr	r2, [pc, #228]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002084:	6893      	ldr	r3, [r2, #8]
 8002086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800208a:	6093      	str	r3, [r2, #8]
 800208c:	e03a      	b.n	8002104 <HAL_RCC_ClockConfig+0x1c8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <HAL_RCC_ClockConfig+0x228>)
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f023 030f 	bic.w	r3, r3, #15
 8002096:	4323      	orrs	r3, r4
 8002098:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800209a:	f7fe fef7 	bl	8000e8c <HAL_GetTick>
 800209e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	4f30      	ldr	r7, [pc, #192]	@ (8002164 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	d02f      	beq.n	8002110 <HAL_RCC_ClockConfig+0x1d4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe feec 	bl	8000e8c <HAL_GetTick>
 80020b4:	1b80      	subs	r0, r0, r6
 80020b6:	4540      	cmp	r0, r8
 80020b8:	d9f5      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x16a>
        return HAL_TIMEOUT;
 80020ba:	2003      	movs	r0, #3
 80020bc:	e050      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
    return HAL_ERROR;
 80020be:	2001      	movs	r0, #1
}
 80020c0:	4770      	bx	lr
      return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
 80020c4:	e04c      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
          return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e04a      	b.n	8002160 <HAL_RCC_ClockConfig+0x224>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ca:	f013 0f02 	tst.w	r3, #2
 80020ce:	d019      	beq.n	8002104 <HAL_RCC_ClockConfig+0x1c8>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	f013 0f04 	tst.w	r3, #4
 80020d4:	d004      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x1a4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d6:	4a24      	ldr	r2, [pc, #144]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 80020d8:	6893      	ldr	r3, [r2, #8]
 80020da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020de:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	f013 0f08 	tst.w	r3, #8
 80020e6:	d006      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x1ba>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 80020ea:	6893      	ldr	r3, [r2, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020f0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020f4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020fe:	68a9      	ldr	r1, [r5, #8]
 8002100:	430b      	orrs	r3, r1
 8002102:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <HAL_RCC_ClockConfig+0x228>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	42a3      	cmp	r3, r4
 800210e:	d8be      	bhi.n	800208e <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	682b      	ldr	r3, [r5, #0]
 8002112:	f013 0f04 	tst.w	r3, #4
 8002116:	d006      	beq.n	8002126 <HAL_RCC_ClockConfig+0x1ea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 800211a:	6893      	ldr	r3, [r2, #8]
 800211c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002120:	68e9      	ldr	r1, [r5, #12]
 8002122:	430b      	orrs	r3, r1
 8002124:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	f013 0f08 	tst.w	r3, #8
 800212c:	d007      	beq.n	800213e <HAL_RCC_ClockConfig+0x202>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4a0e      	ldr	r2, [pc, #56]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002130:	6893      	ldr	r3, [r2, #8]
 8002132:	6929      	ldr	r1, [r5, #16]
 8002134:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002138:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800213c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800213e:	f7ff fec1 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_ClockConfig+0x22c>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x23c>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	40d8      	lsrs	r0, r3
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x240>)
 8002156:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_ClockConfig+0x244>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f7fe fe52 	bl	8000e04 <HAL_InitTick>
}
 8002160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	04c4b400 	.word	0x04c4b400
 8002170:	017d7840 	.word	0x017d7840
 8002174:	00f42400 	.word	0x00f42400
 8002178:	08002720 	.word	0x08002720
 800217c:	20000014 	.word	0x20000014
 8002180:	2000001c 	.word	0x2000001c

08002184 <HAL_RCC_GetHCLKFreq>:
}
 8002184:	4b01      	ldr	r3, [pc, #4]	@ (800218c <HAL_RCC_GetHCLKFreq+0x8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000014 	.word	0x20000014

08002190 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002190:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d135      	bne.n	8002206 <HAL_TIM_Base_Start+0x76>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021a0:	6803      	ldr	r3, [r0, #0]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <HAL_TIM_Base_Start+0x84>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d020      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d01d      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021ae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d015      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d011      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021c6:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021ce:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
 80021d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021da:	4293      	cmp	r3, r2
 80021dc:	d005      	beq.n	80021ea <HAL_TIM_Base_Start+0x5a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_TIM_Base_Start+0x88>)
 80021ee:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	2a06      	cmp	r2, #6
 80021f2:	d00a      	beq.n	800220a <HAL_TIM_Base_Start+0x7a>
 80021f4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80021f8:	d009      	beq.n	800220e <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002202:	2000      	movs	r0, #0
 8002204:	4770      	bx	lr
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	4770      	bx	lr
  return HAL_OK;
 800220a:	2000      	movs	r0, #0
 800220c:	4770      	bx	lr
 800220e:	2000      	movs	r0, #0
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40012c00 	.word	0x40012c00
 8002218:	00010007 	.word	0x00010007

0800221c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221e:	4a63      	ldr	r2, [pc, #396]	@ (80023ac <TIM_Base_SetConfig+0x190>)
 8002220:	4290      	cmp	r0, r2
 8002222:	f000 80a3 	beq.w	800236c <TIM_Base_SetConfig+0x150>
 8002226:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800222a:	f000 8083 	beq.w	8002334 <TIM_Base_SetConfig+0x118>
 800222e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002232:	4290      	cmp	r0, r2
 8002234:	d062      	beq.n	80022fc <TIM_Base_SetConfig+0xe0>
 8002236:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800223a:	4290      	cmp	r0, r2
 800223c:	f000 808c 	beq.w	8002358 <TIM_Base_SetConfig+0x13c>
 8002240:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002244:	4290      	cmp	r0, r2
 8002246:	d05e      	beq.n	8002306 <TIM_Base_SetConfig+0xea>
 8002248:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800224c:	4290      	cmp	r0, r2
 800224e:	d05f      	beq.n	8002310 <TIM_Base_SetConfig+0xf4>
 8002250:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8002254:	4290      	cmp	r0, r2
 8002256:	f000 8084 	beq.w	8002362 <TIM_Base_SetConfig+0x146>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	4a55      	ldr	r2, [pc, #340]	@ (80023b0 <TIM_Base_SetConfig+0x194>)
 800225c:	4290      	cmp	r0, r2
 800225e:	d03f      	beq.n	80022e0 <TIM_Base_SetConfig+0xc4>
 8002260:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002264:	4290      	cmp	r0, r2
 8002266:	d011      	beq.n	800228c <TIM_Base_SetConfig+0x70>
 8002268:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800226c:	4290      	cmp	r0, r2
 800226e:	d029      	beq.n	80022c4 <TIM_Base_SetConfig+0xa8>
 8002270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002274:	4290      	cmp	r0, r2
 8002276:	d017      	beq.n	80022a8 <TIM_Base_SetConfig+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800227c:	694a      	ldr	r2, [r1, #20]
 800227e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002280:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002282:	688b      	ldr	r3, [r1, #8]
 8002284:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002286:	680b      	ldr	r3, [r1, #0]
 8002288:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228a:	e082      	b.n	8002392 <TIM_Base_SetConfig+0x176>
    tmpcr1 &= ~TIM_CR1_CKD;
 800228c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002290:	68ca      	ldr	r2, [r1, #12]
 8002292:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002298:	694a      	ldr	r2, [r1, #20]
 800229a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800229c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229e:	688b      	ldr	r3, [r1, #8]
 80022a0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022a2:	680b      	ldr	r3, [r1, #0]
 80022a4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a6:	e072      	b.n	800238e <TIM_Base_SetConfig+0x172>
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ac:	68ca      	ldr	r2, [r1, #12]
 80022ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022b4:	694a      	ldr	r2, [r1, #20]
 80022b6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80022b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ba:	688b      	ldr	r3, [r1, #8]
 80022bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022be:	680b      	ldr	r3, [r1, #0]
 80022c0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c2:	e064      	b.n	800238e <TIM_Base_SetConfig+0x172>
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c8:	68ca      	ldr	r2, [r1, #12]
 80022ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d0:	694a      	ldr	r2, [r1, #20]
 80022d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80022d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d6:	688b      	ldr	r3, [r1, #8]
 80022d8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022de:	e056      	b.n	800238e <TIM_Base_SetConfig+0x172>
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e4:	68ca      	ldr	r2, [r1, #12]
 80022e6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ec:	694a      	ldr	r2, [r1, #20]
 80022ee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80022f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f2:	688b      	ldr	r3, [r1, #8]
 80022f4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022f6:	680b      	ldr	r3, [r1, #0]
 80022f8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fa:	e048      	b.n	800238e <TIM_Base_SetConfig+0x172>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002300:	684a      	ldr	r2, [r1, #4]
 8002302:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002304:	e01a      	b.n	800233c <TIM_Base_SetConfig+0x120>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800230a:	684a      	ldr	r2, [r1, #4]
 800230c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230e:	e015      	b.n	800233c <TIM_Base_SetConfig+0x120>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002314:	684a      	ldr	r2, [r1, #4]
 8002316:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231c:	68ca      	ldr	r2, [r1, #12]
 800231e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002324:	694a      	ldr	r2, [r1, #20]
 8002326:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002328:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232a:	688b      	ldr	r3, [r1, #8]
 800232c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800232e:	680b      	ldr	r3, [r1, #0]
 8002330:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002332:	e02c      	b.n	800238e <TIM_Base_SetConfig+0x172>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002338:	684a      	ldr	r2, [r1, #4]
 800233a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800233c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002340:	68ca      	ldr	r2, [r1, #12]
 8002342:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002348:	694a      	ldr	r2, [r1, #20]
 800234a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800234c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800234e:	688b      	ldr	r3, [r1, #8]
 8002350:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002352:	680b      	ldr	r3, [r1, #0]
 8002354:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002356:	e01c      	b.n	8002392 <TIM_Base_SetConfig+0x176>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800235c:	684a      	ldr	r2, [r1, #4]
 800235e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002360:	e7ec      	b.n	800233c <TIM_Base_SetConfig+0x120>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002366:	684a      	ldr	r2, [r1, #4]
 8002368:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	e776      	b.n	800225a <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800236c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002370:	684a      	ldr	r2, [r1, #4]
 8002372:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002378:	68ca      	ldr	r2, [r1, #12]
 800237a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002380:	694a      	ldr	r2, [r1, #20]
 8002382:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002384:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002386:	688b      	ldr	r3, [r1, #8]
 8002388:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800238a:	680b      	ldr	r3, [r1, #0]
 800238c:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238e:	690b      	ldr	r3, [r1, #16]
 8002390:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002392:	2301      	movs	r3, #1
 8002394:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002396:	6903      	ldr	r3, [r0, #16]
 8002398:	f013 0f01 	tst.w	r3, #1
 800239c:	d004      	beq.n	80023a8 <TIM_Base_SetConfig+0x18c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800239e:	6903      	ldr	r3, [r0, #16]
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6103      	str	r3, [r0, #16]
  }
}
 80023a6:	4770      	bx	lr
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40014000 	.word	0x40014000

080023b4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80023b4:	b360      	cbz	r0, 8002410 <HAL_TIM_Base_Init+0x5c>
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023be:	b313      	cbz	r3, 8002406 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	2302      	movs	r3, #2
 80023c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c6:	4621      	mov	r1, r4
 80023c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80023cc:	f7ff ff26 	bl	800221c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80023da:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80023de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80023e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80023e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80023ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80023f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80023f6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80023fa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80023fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002402:	2000      	movs	r0, #0
}
 8002404:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002406:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800240a:	f7fe fca5 	bl	8000d58 <HAL_TIM_Base_MspInit>
 800240e:	e7d7      	b.n	80023c0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002410:	2001      	movs	r0, #1
}
 8002412:	4770      	bx	lr

08002414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002414:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002416:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800241c:	430a      	orrs	r2, r1
 800241e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002422:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002426:	6082      	str	r2, [r0, #8]
}
 8002428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_TIM_ConfigClockSource>:
{
 8002430:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002432:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	f000 80d5 	beq.w	80025e6 <HAL_TIM_ConfigClockSource+0x1b6>
 800243c:	4604      	mov	r4, r0
 800243e:	2301      	movs	r3, #1
 8002440:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800244a:	6802      	ldr	r2, [r0, #0]
 800244c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800244e:	4b67      	ldr	r3, [pc, #412]	@ (80025ec <HAL_TIM_ConfigClockSource+0x1bc>)
 8002450:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002452:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002454:	6808      	ldr	r0, [r1, #0]
 8002456:	2870      	cmp	r0, #112	@ 0x70
 8002458:	f000 808c 	beq.w	8002574 <HAL_TIM_ConfigClockSource+0x144>
 800245c:	d851      	bhi.n	8002502 <HAL_TIM_ConfigClockSource+0xd2>
 800245e:	2850      	cmp	r0, #80	@ 0x50
 8002460:	f000 80a2 	beq.w	80025a8 <HAL_TIM_ConfigClockSource+0x178>
 8002464:	d91f      	bls.n	80024a6 <HAL_TIM_ConfigClockSource+0x76>
 8002466:	2860      	cmp	r0, #96	@ 0x60
 8002468:	d149      	bne.n	80024fe <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800246a:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800246c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800246e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002470:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002472:	6a19      	ldr	r1, [r3, #32]
 8002474:	f021 0110 	bic.w	r1, r1, #16
 8002478:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800247c:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002480:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002484:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002488:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800248c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800248e:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002492:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002494:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800249c:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80024a0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2000      	movs	r0, #0
}
 80024a4:	e04d      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
  switch (sClockSourceConfig->ClockSource)
 80024a6:	2840      	cmp	r0, #64	@ 0x40
 80024a8:	d11c      	bne.n	80024e4 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ac:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80024ae:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80024b0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024bc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80024c8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ce:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80024d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024da:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80024de:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2000      	movs	r0, #0
}
 80024e2:	e02e      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
  switch (sClockSourceConfig->ClockSource)
 80024e4:	d87d      	bhi.n	80025e2 <HAL_TIM_ConfigClockSource+0x1b2>
 80024e6:	2820      	cmp	r0, #32
 80024e8:	d01b      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 80024ea:	d903      	bls.n	80024f4 <HAL_TIM_ConfigClockSource+0xc4>
 80024ec:	2830      	cmp	r0, #48	@ 0x30
 80024ee:	d018      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 80024f0:	2001      	movs	r0, #1
 80024f2:	e026      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
 80024f4:	f030 0310 	bics.w	r3, r0, #16
 80024f8:	d013      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 80024fa:	2001      	movs	r0, #1
 80024fc:	e021      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
 80024fe:	2001      	movs	r0, #1
 8002500:	e01f      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
 8002502:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002506:	d042      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x15e>
 8002508:	d917      	bls.n	800253a <HAL_TIM_ConfigClockSource+0x10a>
 800250a:	4a39      	ldr	r2, [pc, #228]	@ (80025f0 <HAL_TIM_ConfigClockSource+0x1c0>)
 800250c:	4290      	cmp	r0, r2
 800250e:	d008      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 8002510:	d91e      	bls.n	8002550 <HAL_TIM_ConfigClockSource+0x120>
 8002512:	4a38      	ldr	r2, [pc, #224]	@ (80025f4 <HAL_TIM_ConfigClockSource+0x1c4>)
 8002514:	4290      	cmp	r0, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 8002518:	f020 0120 	bic.w	r1, r0, #32
 800251c:	3a10      	subs	r2, #16
 800251e:	4291      	cmp	r1, r2
 8002520:	d126      	bne.n	8002570 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002522:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002524:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002526:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800252a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800252e:	4302      	orrs	r2, r0
 8002530:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8002534:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2000      	movs	r0, #0
}
 8002538:	e003      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
  switch (sClockSourceConfig->ClockSource)
 800253a:	f5b0 5080 	subs.w	r0, r0, #4096	@ 0x1000
 800253e:	bf18      	it	ne
 8002540:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002542:	2301      	movs	r3, #1
 8002544:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002548:	2300      	movs	r3, #0
 800254a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800254e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002550:	3a20      	subs	r2, #32
 8002552:	4290      	cmp	r0, r2
 8002554:	d0e5      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 8002556:	d904      	bls.n	8002562 <HAL_TIM_ConfigClockSource+0x132>
 8002558:	4a27      	ldr	r2, [pc, #156]	@ (80025f8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800255a:	4290      	cmp	r0, r2
 800255c:	d0e1      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 800255e:	2001      	movs	r0, #1
 8002560:	e7ef      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
 8002562:	f020 0210 	bic.w	r2, r0, #16
 8002566:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800256a:	d0da      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xf2>
 800256c:	2001      	movs	r0, #1
 800256e:	e7e8      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
 8002570:	2001      	movs	r0, #1
 8002572:	e7e6      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	68cb      	ldr	r3, [r1, #12]
 8002576:	684a      	ldr	r2, [r1, #4]
 8002578:	6889      	ldr	r1, [r1, #8]
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	f7ff ff4a 	bl	8002414 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002588:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2000      	movs	r0, #0
      break;
 800258c:	e7d9      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
      TIM_ETR_SetConfig(htim->Instance,
 800258e:	68cb      	ldr	r3, [r1, #12]
 8002590:	684a      	ldr	r2, [r1, #4]
 8002592:	6889      	ldr	r1, [r1, #8]
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	f7ff ff3d 	bl	8002414 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800259a:	6822      	ldr	r2, [r4, #0]
 800259c:	6893      	ldr	r3, [r2, #8]
 800259e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2000      	movs	r0, #0
      break;
 80025a6:	e7cc      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a8:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80025aa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80025ac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80025ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b0:	6a1a      	ldr	r2, [r3, #32]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80025c6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80025c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025cc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80025ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80025d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025d8:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80025dc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2000      	movs	r0, #0
}
 80025e0:	e7af      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
  switch (sClockSourceConfig->ClockSource)
 80025e2:	2001      	movs	r0, #1
 80025e4:	e7ad      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x112>
  __HAL_LOCK(htim);
 80025e6:	2002      	movs	r0, #2
 80025e8:	e7b1      	b.n	800254e <HAL_TIM_ConfigClockSource+0x11e>
 80025ea:	bf00      	nop
 80025ec:	ffce0088 	.word	0xffce0088
 80025f0:	00100040 	.word	0x00100040
 80025f4:	00100060 	.word	0x00100060
 80025f8:	00100030 	.word	0x00100030

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d04c      	beq.n	800269e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 8002604:	b430      	push	{r4, r5}
 8002606:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002608:	2301      	movs	r3, #1
 800260a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002614:	6800      	ldr	r0, [r0, #0]
 8002616:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002618:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800261a:	4d22      	ldr	r5, [pc, #136]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800261c:	42a8      	cmp	r0, r5
 800261e:	d007      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002620:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002624:	42a8      	cmp	r0, r5
 8002626:	d003      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002628:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 800262c:	42a8      	cmp	r0, r5
 800262e:	d103      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002630:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002634:	684d      	ldr	r5, [r1, #4]
 8002636:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002638:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800263c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002640:	680d      	ldr	r5, [r1, #0]
 8002642:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002644:	6043      	str	r3, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	4816      	ldr	r0, [pc, #88]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800264a:	4283      	cmp	r3, r0
 800264c:	d01a      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002652:	d017      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8002654:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002658:	4283      	cmp	r3, r0
 800265a:	d013      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 800265c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002660:	4283      	cmp	r3, r0
 8002662:	d00f      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8002664:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002668:	4283      	cmp	r3, r0
 800266a:	d00b      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 800266c:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 8002670:	4283      	cmp	r3, r0
 8002672:	d007      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8002674:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8002678:	4283      	cmp	r3, r0
 800267a:	d003      	beq.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 800267c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8002680:	4283      	cmp	r3, r0
 8002682:	d104      	bne.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x92>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002684:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002688:	6889      	ldr	r1, [r1, #8]
 800268a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800268c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800268e:	2301      	movs	r3, #1
 8002690:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002694:	2000      	movs	r0, #0
 8002696:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800269a:	bc30      	pop	{r4, r5}
 800269c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800269e:	2002      	movs	r0, #2
}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40012c00 	.word	0x40012c00

080026a8 <memset>:
 80026a8:	4402      	add	r2, r0
 80026aa:	4603      	mov	r3, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <__libc_init_array>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4d0d      	ldr	r5, [pc, #52]	@ (80026f0 <__libc_init_array+0x38>)
 80026bc:	4c0d      	ldr	r4, [pc, #52]	@ (80026f4 <__libc_init_array+0x3c>)
 80026be:	1b64      	subs	r4, r4, r5
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	2600      	movs	r6, #0
 80026c4:	42a6      	cmp	r6, r4
 80026c6:	d109      	bne.n	80026dc <__libc_init_array+0x24>
 80026c8:	4d0b      	ldr	r5, [pc, #44]	@ (80026f8 <__libc_init_array+0x40>)
 80026ca:	4c0c      	ldr	r4, [pc, #48]	@ (80026fc <__libc_init_array+0x44>)
 80026cc:	f000 f818 	bl	8002700 <_init>
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	2600      	movs	r6, #0
 80026d6:	42a6      	cmp	r6, r4
 80026d8:	d105      	bne.n	80026e6 <__libc_init_array+0x2e>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e0:	4798      	blx	r3
 80026e2:	3601      	adds	r6, #1
 80026e4:	e7ee      	b.n	80026c4 <__libc_init_array+0xc>
 80026e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ea:	4798      	blx	r3
 80026ec:	3601      	adds	r6, #1
 80026ee:	e7f2      	b.n	80026d6 <__libc_init_array+0x1e>
 80026f0:	08002738 	.word	0x08002738
 80026f4:	08002738 	.word	0x08002738
 80026f8:	08002738 	.word	0x08002738
 80026fc:	0800273c 	.word	0x0800273c

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
