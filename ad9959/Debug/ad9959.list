
ad9959.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002094  08002094  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002094  08002094  00003094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800209c  0800209c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800209c  0800209c  0000309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020a0  080020a0  000030a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080020b0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080020b0  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ecb  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001516  00000000  00000000  0000af07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ed  00000000  00000000  0000cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236ff  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081af  00000000  00000000  000308fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1439  00000000  00000000  00038aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119ee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f84  00000000  00000000  00119f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011beac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002064 	.word	0x08002064

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002064 	.word	0x08002064

08000218 <__aeabi_ldivmod>:
 8000218:	b97b      	cbnz	r3, 800023a <__aeabi_ldivmod+0x22>
 800021a:	b972      	cbnz	r2, 800023a <__aeabi_ldivmod+0x22>
 800021c:	2900      	cmp	r1, #0
 800021e:	bfbe      	ittt	lt
 8000220:	2000      	movlt	r0, #0
 8000222:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000226:	e006      	blt.n	8000236 <__aeabi_ldivmod+0x1e>
 8000228:	bf08      	it	eq
 800022a:	2800      	cmpeq	r0, #0
 800022c:	bf1c      	itt	ne
 800022e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000232:	f04f 30ff 	movne.w	r0, #4294967295
 8000236:	f000 b99d 	b.w	8000574 <__aeabi_idiv0>
 800023a:	f1ad 0c08 	sub.w	ip, sp, #8
 800023e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000242:	2900      	cmp	r1, #0
 8000244:	db09      	blt.n	800025a <__aeabi_ldivmod+0x42>
 8000246:	2b00      	cmp	r3, #0
 8000248:	db1a      	blt.n	8000280 <__aeabi_ldivmod+0x68>
 800024a:	f000 f835 	bl	80002b8 <__udivmoddi4>
 800024e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000256:	b004      	add	sp, #16
 8000258:	4770      	bx	lr
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	db1b      	blt.n	800029c <__aeabi_ldivmod+0x84>
 8000264:	f000 f828 	bl	80002b8 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	4252      	negs	r2, r2
 800027a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027e:	4770      	bx	lr
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	f000 f817 	bl	80002b8 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4240      	negs	r0, r0
 8000296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029a:	4770      	bx	lr
 800029c:	4252      	negs	r2, r2
 800029e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a2:	f000 f809 	bl	80002b8 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	460c      	mov	r4, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14e      	bne.n	8000362 <__udivmoddi4+0xaa>
 80002c4:	4694      	mov	ip, r2
 80002c6:	458c      	cmp	ip, r1
 80002c8:	4686      	mov	lr, r0
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	d962      	bls.n	8000396 <__udivmoddi4+0xde>
 80002d0:	b14a      	cbz	r2, 80002e6 <__udivmoddi4+0x2e>
 80002d2:	f1c2 0320 	rsb	r3, r2, #32
 80002d6:	4091      	lsls	r1, r2
 80002d8:	fa20 f303 	lsr.w	r3, r0, r3
 80002dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e0:	4319      	orrs	r1, r3
 80002e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ea:	fa1f f68c 	uxth.w	r6, ip
 80002ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb07 1114 	mls	r1, r7, r4, r1
 80002fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fe:	fb04 f106 	mul.w	r1, r4, r6
 8000302:	4299      	cmp	r1, r3
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x64>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f104 30ff 	add.w	r0, r4, #4294967295
 800030e:	f080 8112 	bcs.w	8000536 <__udivmoddi4+0x27e>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 810f 	bls.w	8000536 <__udivmoddi4+0x27e>
 8000318:	3c02      	subs	r4, #2
 800031a:	4463      	add	r3, ip
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb1 f0f7 	udiv	r0, r1, r7
 8000326:	fb07 1110 	mls	r1, r7, r0, r1
 800032a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032e:	fb00 f606 	mul.w	r6, r0, r6
 8000332:	429e      	cmp	r6, r3
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x94>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 31ff 	add.w	r1, r0, #4294967295
 800033e:	f080 80fc 	bcs.w	800053a <__udivmoddi4+0x282>
 8000342:	429e      	cmp	r6, r3
 8000344:	f240 80f9 	bls.w	800053a <__udivmoddi4+0x282>
 8000348:	4463      	add	r3, ip
 800034a:	3802      	subs	r0, #2
 800034c:	1b9b      	subs	r3, r3, r6
 800034e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa6>
 8000356:	40d3      	lsrs	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	e9c5 3200 	strd	r3, r2, [r5]
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xba>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb4>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa6>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d146      	bne.n	8000408 <__udivmoddi4+0x150>
 800037a:	42a3      	cmp	r3, r4
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xcc>
 800037e:	4290      	cmp	r0, r2
 8000380:	f0c0 80f0 	bcc.w	8000564 <__udivmoddi4+0x2ac>
 8000384:	1a86      	subs	r6, r0, r2
 8000386:	eb64 0303 	sbc.w	r3, r4, r3
 800038a:	2001      	movs	r0, #1
 800038c:	2d00      	cmp	r5, #0
 800038e:	d0e6      	beq.n	800035e <__udivmoddi4+0xa6>
 8000390:	e9c5 6300 	strd	r6, r3, [r5]
 8000394:	e7e3      	b.n	800035e <__udivmoddi4+0xa6>
 8000396:	2a00      	cmp	r2, #0
 8000398:	f040 8090 	bne.w	80004bc <__udivmoddi4+0x204>
 800039c:	eba1 040c 	sub.w	r4, r1, ip
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003b2:	fb08 4416 	mls	r4, r8, r6, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb07 f006 	mul.w	r0, r7, r6
 80003be:	4298      	cmp	r0, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x11c>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x11a>
 80003cc:	4298      	cmp	r0, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2b4>
 80003d2:	4626      	mov	r6, r4
 80003d4:	1a1c      	subs	r4, r3, r0
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb4 f0f8 	udiv	r0, r4, r8
 80003de:	fb08 4410 	mls	r4, r8, r0, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb00 f707 	mul.w	r7, r0, r7
 80003ea:	429f      	cmp	r7, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x148>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x146>
 80003f8:	429f      	cmp	r7, r3
 80003fa:	f200 80b0 	bhi.w	800055e <__udivmoddi4+0x2a6>
 80003fe:	4620      	mov	r0, r4
 8000400:	1bdb      	subs	r3, r3, r7
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	e7a5      	b.n	8000354 <__udivmoddi4+0x9c>
 8000408:	f1c1 0620 	rsb	r6, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	431f      	orrs	r7, r3
 8000414:	fa20 fc06 	lsr.w	ip, r0, r6
 8000418:	fa04 f301 	lsl.w	r3, r4, r1
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	40f4      	lsrs	r4, r6
 8000422:	fa00 f801 	lsl.w	r8, r0, r1
 8000426:	0c38      	lsrs	r0, r7, #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fbb4 fef0 	udiv	lr, r4, r0
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	fb00 441e 	mls	r4, r0, lr, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	d90a      	bls.n	800045e <__udivmoddi4+0x1a6>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044e:	f080 8084 	bcs.w	800055a <__udivmoddi4+0x2a2>
 8000452:	45a1      	cmp	r9, r4
 8000454:	f240 8081 	bls.w	800055a <__udivmoddi4+0x2a2>
 8000458:	f1ae 0e02 	sub.w	lr, lr, #2
 800045c:	443c      	add	r4, r7
 800045e:	eba4 0409 	sub.w	r4, r4, r9
 8000462:	fa1f f983 	uxth.w	r9, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	45a4      	cmp	ip, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x1d2>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	d267      	bcs.n	8000552 <__udivmoddi4+0x29a>
 8000482:	45a4      	cmp	ip, r4
 8000484:	d965      	bls.n	8000552 <__udivmoddi4+0x29a>
 8000486:	3b02      	subs	r3, #2
 8000488:	443c      	add	r4, r7
 800048a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048e:	fba0 9302 	umull	r9, r3, r0, r2
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	429c      	cmp	r4, r3
 8000498:	46ce      	mov	lr, r9
 800049a:	469c      	mov	ip, r3
 800049c:	d351      	bcc.n	8000542 <__udivmoddi4+0x28a>
 800049e:	d04e      	beq.n	800053e <__udivmoddi4+0x286>
 80004a0:	b155      	cbz	r5, 80004b8 <__udivmoddi4+0x200>
 80004a2:	ebb8 030e 	subs.w	r3, r8, lr
 80004a6:	eb64 040c 	sbc.w	r4, r4, ip
 80004aa:	fa04 f606 	lsl.w	r6, r4, r6
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431e      	orrs	r6, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	e9c5 6400 	strd	r6, r4, [r5]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e750      	b.n	800035e <__udivmoddi4+0xa6>
 80004bc:	f1c2 0320 	rsb	r3, r2, #32
 80004c0:	fa20 f103 	lsr.w	r1, r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa24 f303 	lsr.w	r3, r4, r3
 80004cc:	4094      	lsls	r4, r2
 80004ce:	430c      	orrs	r4, r1
 80004d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d8:	fa1f f78c 	uxth.w	r7, ip
 80004dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e0:	fb08 3110 	mls	r1, r8, r0, r3
 80004e4:	0c23      	lsrs	r3, r4, #16
 80004e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ea:	fb00 f107 	mul.w	r1, r0, r7
 80004ee:	4299      	cmp	r1, r3
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x24c>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004fa:	d22c      	bcs.n	8000556 <__udivmoddi4+0x29e>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	d92a      	bls.n	8000556 <__udivmoddi4+0x29e>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb3 f1f8 	udiv	r1, r3, r8
 800050c:	fb08 3311 	mls	r3, r8, r1, r3
 8000510:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000514:	fb01 f307 	mul.w	r3, r1, r7
 8000518:	42a3      	cmp	r3, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x276>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f101 36ff 	add.w	r6, r1, #4294967295
 8000524:	d213      	bcs.n	800054e <__udivmoddi4+0x296>
 8000526:	42a3      	cmp	r3, r4
 8000528:	d911      	bls.n	800054e <__udivmoddi4+0x296>
 800052a:	3902      	subs	r1, #2
 800052c:	4464      	add	r4, ip
 800052e:	1ae4      	subs	r4, r4, r3
 8000530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000534:	e739      	b.n	80003aa <__udivmoddi4+0xf2>
 8000536:	4604      	mov	r4, r0
 8000538:	e6f0      	b.n	800031c <__udivmoddi4+0x64>
 800053a:	4608      	mov	r0, r1
 800053c:	e706      	b.n	800034c <__udivmoddi4+0x94>
 800053e:	45c8      	cmp	r8, r9
 8000540:	d2ae      	bcs.n	80004a0 <__udivmoddi4+0x1e8>
 8000542:	ebb9 0e02 	subs.w	lr, r9, r2
 8000546:	eb63 0c07 	sbc.w	ip, r3, r7
 800054a:	3801      	subs	r0, #1
 800054c:	e7a8      	b.n	80004a0 <__udivmoddi4+0x1e8>
 800054e:	4631      	mov	r1, r6
 8000550:	e7ed      	b.n	800052e <__udivmoddi4+0x276>
 8000552:	4603      	mov	r3, r0
 8000554:	e799      	b.n	800048a <__udivmoddi4+0x1d2>
 8000556:	4630      	mov	r0, r6
 8000558:	e7d4      	b.n	8000504 <__udivmoddi4+0x24c>
 800055a:	46d6      	mov	lr, sl
 800055c:	e77f      	b.n	800045e <__udivmoddi4+0x1a6>
 800055e:	4463      	add	r3, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e74d      	b.n	8000400 <__udivmoddi4+0x148>
 8000564:	4606      	mov	r6, r0
 8000566:	4623      	mov	r3, r4
 8000568:	4608      	mov	r0, r1
 800056a:	e70f      	b.n	800038c <__udivmoddi4+0xd4>
 800056c:	3e02      	subs	r6, #2
 800056e:	4463      	add	r3, ip
 8000570:	e730      	b.n	80003d4 <__udivmoddi4+0x11c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <AD9959_WriteData>:
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_SET);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_RESET);
//}
void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	603a      	str	r2, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	460b      	mov	r3, r1
 8000586:	71bb      	strb	r3, [r7, #6]
	uint8_t	ControlValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
	uint8_t	ValueToWrite = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	73bb      	strb	r3, [r7, #14]
	uint8_t	RegisterIndex = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	737b      	strb	r3, [r7, #13]
	uint8_t	i = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	733b      	strb	r3, [r7, #12]

	ControlValue = RegisterAddress;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	73fb      	strb	r3, [r7, #15]
//д����?
	SCLK_LOW;
 800059c:	2200      	movs	r2, #0
 800059e:	2101      	movs	r1, #1
 80005a0:	4839      	ldr	r0, [pc, #228]	@ (8000688 <AD9959_WriteData+0x110>)
 80005a2:	f000 fe7f 	bl	80012a4 <HAL_GPIO_WritePin>
	CS_LOW;
 80005a6:	2200      	movs	r2, #0
 80005a8:	2102      	movs	r1, #2
 80005aa:	4837      	ldr	r0, [pc, #220]	@ (8000688 <AD9959_WriteData+0x110>)
 80005ac:	f000 fe7a 	bl	80012a4 <HAL_GPIO_WritePin>
	for(i=0; i<8; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	733b      	strb	r3, [r7, #12]
 80005b4:	e01e      	b.n	80005f4 <AD9959_WriteData+0x7c>
	{
		SCLK_LOW;
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	4833      	ldr	r0, [pc, #204]	@ (8000688 <AD9959_WriteData+0x110>)
 80005bc:	f000 fe72 	bl	80012a4 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 80005c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	da05      	bge.n	80005d4 <AD9959_WriteData+0x5c>
		SDIO0_HIGH;
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	482e      	ldr	r0, [pc, #184]	@ (8000688 <AD9959_WriteData+0x110>)
 80005ce:	f000 fe69 	bl	80012a4 <HAL_GPIO_WritePin>
 80005d2:	e004      	b.n	80005de <AD9959_WriteData+0x66>
		else
			SDIO0_LOW;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	482b      	ldr	r0, [pc, #172]	@ (8000688 <AD9959_WriteData+0x110>)
 80005da:	f000 fe63 	bl	80012a4 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 80005de:	2201      	movs	r2, #1
 80005e0:	2101      	movs	r1, #1
 80005e2:	4829      	ldr	r0, [pc, #164]	@ (8000688 <AD9959_WriteData+0x110>)
 80005e4:	f000 fe5e 	bl	80012a4 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<8; i++)
 80005ee:	7b3b      	ldrb	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	733b      	strb	r3, [r7, #12]
 80005f4:	7b3b      	ldrb	r3, [r7, #12]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9dd      	bls.n	80005b6 <AD9959_WriteData+0x3e>
	}
	SCLK_LOW;
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4822      	ldr	r0, [pc, #136]	@ (8000688 <AD9959_WriteData+0x110>)
 8000600:	f000 fe50 	bl	80012a4 <HAL_GPIO_WritePin>
//д������
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000604:	2300      	movs	r3, #0
 8000606:	737b      	strb	r3, [r7, #13]
 8000608:	e031      	b.n	800066e <AD9959_WriteData+0xf6>
	{
		ValueToWrite = RegisterData[RegisterIndex];
 800060a:	7b7b      	ldrb	r3, [r7, #13]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	733b      	strb	r3, [r7, #12]
 8000618:	e01e      	b.n	8000658 <AD9959_WriteData+0xe0>
		{
			SCLK_LOW;
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	481a      	ldr	r0, [pc, #104]	@ (8000688 <AD9959_WriteData+0x110>)
 8000620:	f000 fe40 	bl	80012a4 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 8000624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000628:	2b00      	cmp	r3, #0
 800062a:	da05      	bge.n	8000638 <AD9959_WriteData+0xc0>
			SDIO0_HIGH;
 800062c:	2201      	movs	r2, #1
 800062e:	2104      	movs	r1, #4
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <AD9959_WriteData+0x110>)
 8000632:	f000 fe37 	bl	80012a4 <HAL_GPIO_WritePin>
 8000636:	e004      	b.n	8000642 <AD9959_WriteData+0xca>
			else
			SDIO0_LOW;
 8000638:	2200      	movs	r2, #0
 800063a:	2104      	movs	r1, #4
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <AD9959_WriteData+0x110>)
 800063e:	f000 fe31 	bl	80012a4 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4810      	ldr	r0, [pc, #64]	@ (8000688 <AD9959_WriteData+0x110>)
 8000648:	f000 fe2c 	bl	80012a4 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000652:	7b3b      	ldrb	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	733b      	strb	r3, [r7, #12]
 8000658:	7b3b      	ldrb	r3, [r7, #12]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d9dd      	bls.n	800061a <AD9959_WriteData+0xa2>
		}
		SCLK_LOW;
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <AD9959_WriteData+0x110>)
 8000664:	f000 fe1e 	bl	80012a4 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	3301      	adds	r3, #1
 800066c:	737b      	strb	r3, [r7, #13]
 800066e:	7b7a      	ldrb	r2, [r7, #13]
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3c9      	bcc.n	800060a <AD9959_WriteData+0x92>
	}
  CS_HIGH;
 8000676:	2201      	movs	r2, #1
 8000678:	2102      	movs	r1, #2
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <AD9959_WriteData+0x110>)
 800067c:	f000 fe12 	bl	80012a4 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48000800 	.word	0x48000800
 800068c:	00000000 	.word	0x00000000

08000690 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
		uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};	//�м����??
 8000698:	2100      	movs	r1, #0
 800069a:	60b9      	str	r1, [r7, #8]
	  uint32_t Temp;
	  Temp=(uint32_t)fre * 4294967296 / 500000000;
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	2000      	movs	r0, #0
 80006a0:	460a      	mov	r2, r1
 80006a2:	4603      	mov	r3, r0
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	f04f 0100 	mov.w	r1, #0
 80006ac:	0011      	movs	r1, r2
 80006ae:	2000      	movs	r0, #0
 80006b0:	a311      	add	r3, pc, #68	@ (adr r3, 80006f8 <Write_CFTW0+0x68>)
 80006b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006b6:	f7ff fdaf 	bl	8000218 <__aeabi_ldivmod>
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	4613      	mov	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
	  CFTW0_DATA[3]=(uint8_t)Temp;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	72fb      	strb	r3, [r7, #11]
	  CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	72bb      	strb	r3, [r7, #10]
	  CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	0c1b      	lsrs	r3, r3, #16
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	727b      	strb	r3, [r7, #9]
	  CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	0e1b      	lsrs	r3, r3, #24
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	723b      	strb	r3, [r7, #8]
		AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	461a      	mov	r2, r3
 80006e6:	2104      	movs	r1, #4
 80006e8:	2004      	movs	r0, #4
 80006ea:	f7ff ff45 	bl	8000578 <AD9959_WriteData>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	1dcd6500 	.word	0x1dcd6500
 80006fc:	00000000 	.word	0x00000000

08000700 <AD9959_Set_Fre>:
void AD9959_Set_Fre(uint8_t Channel,uint32_t Freq)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
		uint8_t CHANNEL[1] = {0x00};
 800070c:	2300      	movs	r3, #0
 800070e:	733b      	strb	r3, [r7, #12]

		CHANNEL[0]=Channel;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	733b      	strb	r3, [r7, #12]
		AD9959_WriteData(0x00,1,CHANNEL);//���ƼĴ���д��CHnͨ����ѡ��CHn
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	461a      	mov	r2, r3
 800071a:	2101      	movs	r1, #1
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff2b 	bl	8000578 <AD9959_WriteData>
    Write_CFTW0(Freq);//���CHn�趨Ƶ��
 8000722:	6838      	ldr	r0, [r7, #0]
 8000724:	f7ff ffb4 	bl	8000690 <Write_CFTW0>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <IntReset>:
void IntReset()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073c:	f000 fdb2 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fb27 	bl	8000d94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074e:	f000 fda9 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fb1e 	bl	8000d94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2102      	movs	r1, #2
 800075c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000760:	f000 fda0 	bl	80012a4 <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <Intserve>:
void Intserve(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
		//AD9959_PWR=0;
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <Intserve+0x3c>)
 8000772:	f000 fd97 	bl	80012a4 <HAL_GPIO_WritePin>
    CS_HIGH;
 8000776:	2201      	movs	r2, #1
 8000778:	2102      	movs	r1, #2
 800077a:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <Intserve+0x3c>)
 800077c:	f000 fd92 	bl	80012a4 <HAL_GPIO_WritePin>
    SCLK_LOW;
 8000780:	2200      	movs	r2, #0
 8000782:	2101      	movs	r1, #1
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <Intserve+0x3c>)
 8000786:	f000 fd8d 	bl	80012a4 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 800078a:	2200      	movs	r2, #0
 800078c:	2108      	movs	r1, #8
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <Intserve+0x3c>)
 8000790:	f000 fd88 	bl	80012a4 <HAL_GPIO_WritePin>
//    PS0 = 0;
//    PS1 = 0;
//    PS2 = 0;
//    PS3 = 0;
    SDIO0_HIGH;
 8000794:	2201      	movs	r2, #1
 8000796:	2104      	movs	r1, #4
 8000798:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <Intserve+0x3c>)
 800079a:	f000 fd83 	bl	80012a4 <HAL_GPIO_WritePin>
//    SDIO1 = 0;
//    SDIO2 = 0;
//    SDIO3 = 0;
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000800 	.word	0x48000800

080007a8 <Write_ACR>:
void Write_ACR(uint16_t Ampli)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	uint32_t A_temp=0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <Write_ACR+0x50>)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	8019      	strh	r1, [r3, #0]
 80007c2:	3302      	adds	r3, #2
 80007c4:	0c12      	lsrs	r2, r2, #16
 80007c6:	701a      	strb	r2, [r3, #0]
  A_temp=Ampli|0x1000;
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	60fb      	str	r3, [r7, #12]

	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	727b      	strb	r3, [r7, #9]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	72bb      	strb	r3, [r7, #10]
  AD9959_WriteData(0x06,3,ACR_DATA); //ACR address 0x06.CHn设定幅度
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	461a      	mov	r2, r3
 80007e6:	2103      	movs	r1, #3
 80007e8:	2006      	movs	r0, #6
 80007ea:	f7ff fec5 	bl	8000578 <AD9959_WriteData>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800207c 	.word	0x0800207c

080007fc <AD9959_Set_Amp>:

void AD9959_Set_Amp(uint8_t Channel, uint16_t Ampli)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 800080c:	2300      	movs	r3, #0
 800080e:	733b      	strb	r3, [r7, #12]

	CHANNEL[0]=Channel;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，选择CHn
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	461a      	mov	r2, r3
 800081a:	2101      	movs	r1, #1
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff feab 	bl	8000578 <AD9959_WriteData>
	Write_ACR(Ampli);							//	CHn设定幅度
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffbf 	bl	80007a8 <Write_ACR>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <AD9959_Init>:
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，选择CHn
	Write_CPOW0(Phase);//CHn设定相位
}

void AD9959_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;	//初始化管脚PC0
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;		 //IO口�?�度�?2MHz
//	GPIO_Init(GPIOC, &GPIO_InitStructure);					 //根据设定参数初始化GPIOC
//
	Intserve();  //IO口电平状态初始化
 800083a:	f7ff ff95 	bl	8000768 <Intserve>
  IntReset();  //AD9959复位
 800083e:	f7ff ff77 	bl	8000730 <IntReset>

	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 8000842:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <AD9959_Init+0x44>)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	4611      	mov	r1, r2
 800084a:	8019      	strh	r1, [r3, #0]
 800084c:	3302      	adds	r3, #2
 800084e:	0c12      	lsrs	r2, r2, #16
 8000850:	701a      	strb	r2, [r3, #0]


  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 8000852:	2300      	movs	r3, #0
 8000854:	803b      	strh	r3, [r7, #0]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	461a      	mov	r2, r3
 800085a:	2103      	movs	r1, #3
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fe8b 	bl	8000578 <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);//
 8000862:	463b      	mov	r3, r7
 8000864:	461a      	mov	r2, r3
 8000866:	2102      	movs	r1, #2
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fe85 	bl	8000578 <AD9959_WriteData>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08002080 	.word	0x08002080

0800087c <IO_Update>:
void IO_Update(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	UPDATE_LOW;
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	480a      	ldr	r0, [pc, #40]	@ (80008b0 <IO_Update+0x34>)
 8000886:	f000 fd0d 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fa82 	bl	8000d94 <HAL_Delay>
	UPDATE_HIGH;
 8000890:	2201      	movs	r2, #1
 8000892:	2108      	movs	r1, #8
 8000894:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <IO_Update+0x34>)
 8000896:	f000 fd05 	bl	80012a4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800089a:	2003      	movs	r0, #3
 800089c:	f000 fa7a 	bl	8000d94 <HAL_Delay>
	UPDATE_LOW;
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <IO_Update+0x34>)
 80008a6:	f000 fcfd 	bl	80012a4 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	48000800 	.word	0x48000800

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 f9fb 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f816 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 f8a4 	bl	8000a0c <MX_GPIO_Init>
  MX_SPI3_Init();
 80008c4:	f000 f864 	bl	8000990 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
//  ad9959_init();
//  ad9959_freq(30000000, 0x10);
//  ad9959_update();
  AD9959_Init();
 80008c8:	f7ff ffb4 	bl	8000834 <AD9959_Init>
  AD9959_Set_Fre(0x10, 30000000);
 80008cc:	4906      	ldr	r1, [pc, #24]	@ (80008e8 <main+0x34>)
 80008ce:	2010      	movs	r0, #16
 80008d0:	f7ff ff16 	bl	8000700 <AD9959_Set_Fre>
  AD9959_Set_Amp(0x10, 1023);
 80008d4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80008d8:	2010      	movs	r0, #16
 80008da:	f7ff ff8f 	bl	80007fc <AD9959_Set_Amp>
  //AD9959_Set_Phase(0x10, 0);
  IO_Update();
 80008de:	f7ff ffcd 	bl	800087c <IO_Update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <main+0x2e>
 80008e6:	bf00      	nop
 80008e8:	01c9c380 	.word	0x01c9c380

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	@ 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	2238      	movs	r2, #56	@ 0x38
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb85 	bl	800200a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000912:	f000 fcdf 	bl	80012d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	2303      	movs	r3, #3
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000928:	2305      	movs	r3, #5
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800092c:	233c      	movs	r3, #60	@ 0x3c
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fd7b 	bl	800143c <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800094c:	f000 f8d8 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2303      	movs	r3, #3
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2104      	movs	r1, #4
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f879 	bl	8001a60 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000974:	f000 f8c4 	bl	8000b00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000978:	2200      	movs	r2, #0
 800097a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800097e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000982:	f001 f9a9 	bl	8001cd8 <HAL_RCC_MCOConfig>
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	@ 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_SPI3_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_SPI3_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_SPI3_Init+0x74>)
 800099c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009f0:	f001 fa60 	bl	8001eb4 <HAL_SPI_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f881 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000028 	.word	0x20000028
 8000a08:	40003c00 	.word	0x40003c00

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a34      	ldr	r2, [pc, #208]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a28      	ldr	r2, [pc, #160]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_GPIO_Init+0xec>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	213f      	movs	r1, #63	@ 0x3f
 8000a6e:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_GPIO_Init+0xf0>)
 8000a70:	f000 fc18 	bl	80012a4 <HAL_GPIO_WritePin>
                          |PWR_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f240 2102 	movw	r1, #514	@ 0x202
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7e:	f000 fc11 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f000 fc0a 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCLK_Pin CS_Pin SDIO0_Pin UPDATE_Pin
                           PWR_Pin PC5 */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8000a90:	233f      	movs	r3, #63	@ 0x3f
 8000a92:	60fb      	str	r3, [r7, #12]
                          |PWR_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <MX_GPIO_Init+0xf0>)
 8000aa8:	f000 fa7a 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = RESET_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000aac:	f240 6302 	movw	r3, #1538	@ 0x602
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f000 fa6a 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f000 fa58 	bl	8000fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000800 	.word	0x48000800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b42:	f000 fc6b 	bl	800141c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <HAL_SPI_MspInit+0x7c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d128      	bne.n	8000bc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	4a16      	ldr	r2, [pc, #88]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_SPI_MspInit+0x80>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ba6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000bc4:	f000 f9ec 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000800 	.word	0x48000800

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f891 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f001 f9c5 	bl	800201c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fe0f 	bl	80008b4 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	080020a4 	.word	0x080020a4
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	20000090 	.word	0x20000090

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>

08000cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f93d 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f80e 	bl	8000ce4 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e001      	b.n	8000cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd4:	f7ff ff1a 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_InitTick+0x68>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d022      	beq.n	8000d3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_InitTick+0x6c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_InitTick+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f93a 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10f      	bne.n	8000d38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b0f      	cmp	r3, #15
 8000d1c:	d809      	bhi.n	8000d32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	f04f 30ff 	mov.w	r0, #4294967295
 8000d26:	f000 f914 	bl	8000f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_InitTick+0x70>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e004      	b.n	8000d42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e001      	b.n	8000d42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <HAL_IncTick+0x1c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a03      	ldr	r2, [pc, #12]	@ (8000d74 <HAL_IncTick+0x1c>)
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	2000008c 	.word	0x2000008c
 8000d78:	20000008 	.word	0x20000008

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000008c 	.word	0x2000008c

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d004      	beq.n	8000db8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_Delay+0x40>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db8:	bf00      	nop
 8000dba:	f7ff ffdf 	bl	8000d7c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d8f7      	bhi.n	8000dba <HAL_Delay+0x26>
  {
  }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff47 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff5e 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffb2 	bl	8000ef8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fae:	e15a      	b.n	8001266 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 814c 	beq.w	8001260 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 0201 	and.w	r2, r3, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d017      	beq.n	800107e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0203 	and.w	r2, r3, #3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80a6 	beq.w	8001260 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	4b5b      	ldr	r3, [pc, #364]	@ (8001284 <HAL_GPIO_Init+0x2e4>)
 8001116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001118:	4a5a      	ldr	r2, [pc, #360]	@ (8001284 <HAL_GPIO_Init+0x2e4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001120:	4b58      	ldr	r3, [pc, #352]	@ (8001284 <HAL_GPIO_Init+0x2e4>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112c:	4a56      	ldr	r2, [pc, #344]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001156:	d01f      	beq.n	8001198 <HAL_GPIO_Init+0x1f8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a4c      	ldr	r2, [pc, #304]	@ (800128c <HAL_GPIO_Init+0x2ec>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d019      	beq.n	8001194 <HAL_GPIO_Init+0x1f4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a4b      	ldr	r2, [pc, #300]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x1f0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a4a      	ldr	r2, [pc, #296]	@ (8001294 <HAL_GPIO_Init+0x2f4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1ec>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a49      	ldr	r2, [pc, #292]	@ (8001298 <HAL_GPIO_Init+0x2f8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1e8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a48      	ldr	r2, [pc, #288]	@ (800129c <HAL_GPIO_Init+0x2fc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1e4>
 8001180:	2305      	movs	r3, #5
 8001182:	e00a      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 8001184:	2306      	movs	r3, #6
 8001186:	e008      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 8001188:	2304      	movs	r3, #4
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 800118c:	2303      	movs	r3, #3
 800118e:	e004      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 8001190:	2302      	movs	r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_GPIO_Init+0x1fa>
 8001198:	2300      	movs	r3, #0
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	f002 0203 	and.w	r2, r2, #3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4093      	lsls	r3, r2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011aa:	4937      	ldr	r1, [pc, #220]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011dc:	4a30      	ldr	r2, [pc, #192]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001206:	4a26      	ldr	r2, [pc, #152]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125a:	4a11      	ldr	r2, [pc, #68]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	f47f ae9d 	bne.w	8000fb0 <HAL_GPIO_Init+0x10>
  }
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000
 8001288:	40010000 	.word	0x40010000
 800128c:	48000400 	.word	0x48000400
 8001290:	48000800 	.word	0x48000800
 8001294:	48000c00 	.word	0x48000c00
 8001298:	48001000 	.word	0x48001000
 800129c:	48001400 	.word	0x48001400
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d141      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d131      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f0:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f6:	4a46      	ldr	r2, [pc, #280]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001308:	4a41      	ldr	r2, [pc, #260]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001310:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2232      	movs	r2, #50	@ 0x32
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	4a3f      	ldr	r2, [pc, #252]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9b      	lsrs	r3, r3, #18
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	e002      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3b01      	subs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133a:	d102      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f2      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001342:	4b33      	ldr	r3, [pc, #204]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134e:	d158      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e057      	b.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001364:	e04d      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800136c:	d141      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	d131      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001394:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2232      	movs	r2, #50	@ 0x32
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b2:	e002      	b.n	80013ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d102      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f2      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013da:	d112      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e011      	b.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013f0:	e007      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001400:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40007000 	.word	0x40007000
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6093      	str	r3, [r2, #8]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e2fe      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145a:	4b97      	ldr	r3, [pc, #604]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001464:	4b94      	ldr	r3, [pc, #592]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x3e>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d002      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b08      	cmp	r3, #8
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b8d      	ldr	r3, [pc, #564]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e2d9      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b85      	ldr	r3, [pc, #532]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a84      	ldr	r2, [pc, #528]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7f      	ldr	r3, [pc, #508]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7e      	ldr	r2, [pc, #504]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b7c      	ldr	r3, [pc, #496]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7b      	ldr	r2, [pc, #492]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b78      	ldr	r3, [pc, #480]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a77      	ldr	r2, [pc, #476]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b75      	ldr	r3, [pc, #468]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a74      	ldr	r2, [pc, #464]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc42 	bl	8000d7c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc3e 	bl	8000d7c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e29e      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fc2e 	bl	8000d7c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc2a 	bl	8000d7c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e28a      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	4b60      	ldr	r3, [pc, #384]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d075      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001552:	4b59      	ldr	r3, [pc, #356]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155c:	4b56      	ldr	r3, [pc, #344]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d102      	bne.n	8001572 <HAL_RCC_OscConfig+0x136>
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d002      	beq.n	8001578 <HAL_RCC_OscConfig+0x13c>
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d11f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	4b4f      	ldr	r3, [pc, #316]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x154>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e25d      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b49      	ldr	r3, [pc, #292]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	4946      	ldr	r1, [pc, #280]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a4:	4b45      	ldr	r3, [pc, #276]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fb9b 	bl	8000ce4 <HAL_InitTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d043      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e249      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a3c      	ldr	r2, [pc, #240]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbd6 	bl	8000d7c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbd2 	bl	8000d7c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e232      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e6:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	061b      	lsls	r3, r3, #24
 8001600:	492d      	ldr	r1, [pc, #180]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
 8001606:	e01a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800160e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fbb2 	bl	8000d7c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fbae 	bl	8000d7c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e20e      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1e0>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d041      	beq.n	80016ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01c      	beq.n	800168c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fb8b 	bl	8000d7c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fb87 	bl	8000d7c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1e7      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ef      	beq.n	800166a <HAL_RCC_OscConfig+0x22e>
 800168a:	e020      	b.n	80016ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	4a09      	ldr	r2, [pc, #36]	@ (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb6e 	bl	8000d7c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a2:	e00d      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb6a 	bl	8000d7c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d906      	bls.n	80016c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1ca      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	4b8c      	ldr	r3, [pc, #560]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ea      	bne.n	80016a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a6 	beq.w	8001828 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016e0:	4b84      	ldr	r3, [pc, #528]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2b4>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b79      	ldr	r3, [pc, #484]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171e:	4b76      	ldr	r3, [pc, #472]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a75      	ldr	r2, [pc, #468]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb27 	bl	8000d7c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fb23 	bl	8000d7c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e183      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001744:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <HAL_RCC_OscConfig+0x4bc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_RCC_OscConfig+0x32e>
 8001758:	4b66      	ldr	r3, [pc, #408]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a65      	ldr	r2, [pc, #404]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	e024      	b.n	80017b4 <HAL_RCC_OscConfig+0x378>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d110      	bne.n	8001794 <HAL_RCC_OscConfig+0x358>
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001778:	4a5e      	ldr	r2, [pc, #376]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001782:	4b5c      	ldr	r3, [pc, #368]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	4a5a      	ldr	r2, [pc, #360]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x378>
 8001794:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d016      	beq.n	80017ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fade 	bl	8000d7c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fada 	bl	8000d7c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e138      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ed      	beq.n	80017c4 <HAL_RCC_OscConfig+0x388>
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fac7 	bl	8000d7c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fac3 	bl	8000d7c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e121      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ed      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a34      	ldr	r2, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03c      	beq.n	80018ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01c      	beq.n	8001876 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001842:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fa96 	bl	8000d7c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001854:	f7ff fa92 	bl	8000d7c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0f2      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ef      	beq.n	8001854 <HAL_RCC_OscConfig+0x418>
 8001874:	e01b      	b.n	80018ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001876:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fa79 	bl	8000d7c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188e:	f7ff fa75 	bl	8000d7c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0d5      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ef      	bne.n	800188e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80c9 	beq.w	8001a4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	f000 8083 	beq.w	80019cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d15e      	bne.n	800198c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fa4f 	bl	8000d7c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fa4b 	bl	8000d7c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d905      	bls.n	80018fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0ab      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b55      	ldr	r3, [pc, #340]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ec      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001908:	4b52      	ldr	r3, [pc, #328]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <HAL_RCC_OscConfig+0x61c>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6a11      	ldr	r1, [r2, #32]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001918:	3a01      	subs	r2, #1
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001922:	0212      	lsls	r2, r2, #8
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800192a:	0852      	lsrs	r2, r2, #1
 800192c:	3a01      	subs	r2, #1
 800192e:	0552      	lsls	r2, r2, #21
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	3a01      	subs	r2, #1
 800193a:	0652      	lsls	r2, r2, #25
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001942:	06d2      	lsls	r2, r2, #27
 8001944:	430a      	orrs	r2, r1
 8001946:	4943      	ldr	r1, [pc, #268]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a40      	ldr	r2, [pc, #256]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fa0a 	bl	8000d7c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fa06 	bl	8000d7c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e066      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x530>
 800198a:	e05e      	b.n	8001a4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198c:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 8001992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f9f0 	bl	8000d7c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f9ec 	bl	8000d7c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04c      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	4924      	ldr	r1, [pc, #144]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_OscConfig+0x620>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]
 80019ca:	e03e      	b.n	8001a4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e039      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_RCC_OscConfig+0x618>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d12c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	3b01      	subs	r3, #1
 80019f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d123      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d113      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	019f800c 	.word	0x019f800c
 8001a5c:	feeefffc 	.word	0xfeeefffc

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e11e      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b91      	ldr	r3, [pc, #580]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	498c      	ldr	r1, [pc, #560]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e106      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d073      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d129      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0f4      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001acc:	f000 f9ac 	bl	8001e28 <RCC_GetSysClockFreqFromPLLSource>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc8 <HAL_RCC_ClockConfig+0x268>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d93f      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ada:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d033      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12f      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b02:	4a70      	ldr	r2, [pc, #448]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b18:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0c6      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0be      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b38:	f000 f914 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <HAL_RCC_ClockConfig+0x268>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d909      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4957      	ldr	r1, [pc, #348]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f906 	bl	8000d7c <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f902 	bl	8000d7c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e095      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a42      	ldr	r2, [pc, #264]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4936      	ldr	r1, [pc, #216]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b80      	cmp	r3, #128	@ 0x80
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4a32      	ldr	r2, [pc, #200]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c02:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d21d      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c10:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 020f 	bic.w	r2, r3, #15
 8001c18:	4929      	ldr	r1, [pc, #164]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f8ac 	bl	8000d7c <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f8a8 	bl	8000d7c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e03b      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_ClockConfig+0x260>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1ed      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4917      	ldr	r1, [pc, #92]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490f      	ldr	r1, [pc, #60]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8a:	f000 f86b 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <HAL_RCC_ClockConfig+0x26c>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_RCC_ClockConfig+0x270>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_RCC_ClockConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f818 	bl	8000ce4 <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	04c4b400 	.word	0x04c4b400
 8001ccc:	08002084 	.word	0x08002084
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	@ 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_RCC_MCOConfig+0x88>)
 8001d14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d16:	2101      	movs	r1, #1
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	4910      	ldr	r1, [pc, #64]	@ (8001d60 <HAL_RCC_MCOConfig+0x88>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0d1b      	lsrs	r3, r3, #20
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4619      	mov	r1, r3
 8001d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d3a:	f7ff f931 	bl	8000fa0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RCC_MCOConfig+0x88>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	4903      	ldr	r1, [pc, #12]	@ (8001d60 <HAL_RCC_MCOConfig+0x88>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	@ 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e047      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e03e      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d136      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3301      	adds	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	68d2      	ldr	r2, [r2, #12]
 8001dc4:	0a12      	lsrs	r2, r2, #8
 8001dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
      break;
 8001dd0:	e00c      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd2:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	0a12      	lsrs	r2, r2, #8
 8001de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0e5b      	lsrs	r3, r3, #25
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e001      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e0c:	693b      	ldr	r3, [r7, #16]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	017d7840 	.word	0x017d7840

08001e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d10c      	bne.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	0a12      	lsrs	r2, r2, #8
 8001e5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
    break;
 8001e64:	e00c      	b.n	8001e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e70:	68d2      	ldr	r2, [r2, #12]
 8001e72:	0a12      	lsrs	r2, r2, #8
 8001e74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    break;
 8001e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0e5b      	lsrs	r3, r3, #25
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	017d7840 	.word	0x017d7840
 8001eb0:	00f42400 	.word	0x00f42400

08001eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e09d      	b.n	8002002 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d108      	bne.n	8001ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ed6:	d009      	beq.n	8001eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
 8001ede:	e005      	b.n	8001eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fe24 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f2c:	d902      	bls.n	8001f34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e002      	b.n	8001f3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001f42:	d007      	beq.n	8001f54 <HAL_SPI_Init+0xa0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f96:	ea42 0103 	orr.w	r1, r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	f003 0204 	and.w	r2, r3, #4
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fd0:	ea42 0103 	orr.w	r1, r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <memset>:
 800200a:	4402      	add	r2, r0
 800200c:	4603      	mov	r3, r0
 800200e:	4293      	cmp	r3, r2
 8002010:	d100      	bne.n	8002014 <memset+0xa>
 8002012:	4770      	bx	lr
 8002014:	f803 1b01 	strb.w	r1, [r3], #1
 8002018:	e7f9      	b.n	800200e <memset+0x4>
	...

0800201c <__libc_init_array>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	4d0d      	ldr	r5, [pc, #52]	@ (8002054 <__libc_init_array+0x38>)
 8002020:	4c0d      	ldr	r4, [pc, #52]	@ (8002058 <__libc_init_array+0x3c>)
 8002022:	1b64      	subs	r4, r4, r5
 8002024:	10a4      	asrs	r4, r4, #2
 8002026:	2600      	movs	r6, #0
 8002028:	42a6      	cmp	r6, r4
 800202a:	d109      	bne.n	8002040 <__libc_init_array+0x24>
 800202c:	4d0b      	ldr	r5, [pc, #44]	@ (800205c <__libc_init_array+0x40>)
 800202e:	4c0c      	ldr	r4, [pc, #48]	@ (8002060 <__libc_init_array+0x44>)
 8002030:	f000 f818 	bl	8002064 <_init>
 8002034:	1b64      	subs	r4, r4, r5
 8002036:	10a4      	asrs	r4, r4, #2
 8002038:	2600      	movs	r6, #0
 800203a:	42a6      	cmp	r6, r4
 800203c:	d105      	bne.n	800204a <__libc_init_array+0x2e>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	f855 3b04 	ldr.w	r3, [r5], #4
 8002044:	4798      	blx	r3
 8002046:	3601      	adds	r6, #1
 8002048:	e7ee      	b.n	8002028 <__libc_init_array+0xc>
 800204a:	f855 3b04 	ldr.w	r3, [r5], #4
 800204e:	4798      	blx	r3
 8002050:	3601      	adds	r6, #1
 8002052:	e7f2      	b.n	800203a <__libc_init_array+0x1e>
 8002054:	0800209c 	.word	0x0800209c
 8002058:	0800209c 	.word	0x0800209c
 800205c:	0800209c 	.word	0x0800209c
 8002060:	080020a0 	.word	0x080020a0

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
