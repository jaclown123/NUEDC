
ad9959.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d4  080040d4  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040dc  080040dc  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e0  080040e0  000050e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  080040e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000034  08004118  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004118  00006228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e98c  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002424  00000000  00000000  000149f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00016e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2b  00000000  00000000  00017df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c18  00000000  00000000  00018a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d6e  00000000  00000000  0003e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a80  00000000  00000000  0004f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  00146e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0014b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040a4 	.word	0x080040a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	080040a4 	.word	0x080040a4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_ldivmod>:
 80009f4:	b97b      	cbnz	r3, 8000a16 <__aeabi_ldivmod+0x22>
 80009f6:	b972      	cbnz	r2, 8000a16 <__aeabi_ldivmod+0x22>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bfbe      	ittt	lt
 80009fc:	2000      	movlt	r0, #0
 80009fe:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a02:	e006      	blt.n	8000a12 <__aeabi_ldivmod+0x1e>
 8000a04:	bf08      	it	eq
 8000a06:	2800      	cmpeq	r0, #0
 8000a08:	bf1c      	itt	ne
 8000a0a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a12:	f000 b99d 	b.w	8000d50 <__aeabi_idiv0>
 8000a16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	db09      	blt.n	8000a36 <__aeabi_ldivmod+0x42>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db1a      	blt.n	8000a5c <__aeabi_ldivmod+0x68>
 8000a26:	f000 f835 	bl	8000a94 <__udivmoddi4>
 8000a2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a32:	b004      	add	sp, #16
 8000a34:	4770      	bx	lr
 8000a36:	4240      	negs	r0, r0
 8000a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db1b      	blt.n	8000a78 <__aeabi_ldivmod+0x84>
 8000a40:	f000 f828 	bl	8000a94 <__udivmoddi4>
 8000a44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4c:	b004      	add	sp, #16
 8000a4e:	4240      	negs	r0, r0
 8000a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a62:	f000 f817 	bl	8000a94 <__udivmoddi4>
 8000a66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6e:	b004      	add	sp, #16
 8000a70:	4240      	negs	r0, r0
 8000a72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a76:	4770      	bx	lr
 8000a78:	4252      	negs	r2, r2
 8000a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7e:	f000 f809 	bl	8000a94 <__udivmoddi4>
 8000a82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d14e      	bne.n	8000b3e <__udivmoddi4+0xaa>
 8000aa0:	4694      	mov	ip, r2
 8000aa2:	458c      	cmp	ip, r1
 8000aa4:	4686      	mov	lr, r0
 8000aa6:	fab2 f282 	clz	r2, r2
 8000aaa:	d962      	bls.n	8000b72 <__udivmoddi4+0xde>
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0320 	rsb	r3, r2, #32
 8000ab2:	4091      	lsls	r1, r2
 8000ab4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	4319      	orrs	r1, r3
 8000abe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac6:	fa1f f68c 	uxth.w	r6, ip
 8000aca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ace:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ada:	fb04 f106 	mul.w	r1, r4, r6
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d90a      	bls.n	8000af8 <__udivmoddi4+0x64>
 8000ae2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aea:	f080 8112 	bcs.w	8000d12 <__udivmoddi4+0x27e>
 8000aee:	4299      	cmp	r1, r3
 8000af0:	f240 810f 	bls.w	8000d12 <__udivmoddi4+0x27e>
 8000af4:	3c02      	subs	r4, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	fa1f f38e 	uxth.w	r3, lr
 8000afe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b02:	fb07 1110 	mls	r1, r7, r0, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb00 f606 	mul.w	r6, r0, r6
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x94>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1a:	f080 80fc 	bcs.w	8000d16 <__udivmoddi4+0x282>
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	f240 80f9 	bls.w	8000d16 <__udivmoddi4+0x282>
 8000b24:	4463      	add	r3, ip
 8000b26:	3802      	subs	r0, #2
 8000b28:	1b9b      	subs	r3, r3, r6
 8000b2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b2e:	2100      	movs	r1, #0
 8000b30:	b11d      	cbz	r5, 8000b3a <__udivmoddi4+0xa6>
 8000b32:	40d3      	lsrs	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d905      	bls.n	8000b4e <__udivmoddi4+0xba>
 8000b42:	b10d      	cbz	r5, 8000b48 <__udivmoddi4+0xb4>
 8000b44:	e9c5 0100 	strd	r0, r1, [r5]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e7f5      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b4e:	fab3 f183 	clz	r1, r3
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d146      	bne.n	8000be4 <__udivmoddi4+0x150>
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xcc>
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	f0c0 80f0 	bcc.w	8000d40 <__udivmoddi4+0x2ac>
 8000b60:	1a86      	subs	r6, r0, r2
 8000b62:	eb64 0303 	sbc.w	r3, r4, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d0e6      	beq.n	8000b3a <__udivmoddi4+0xa6>
 8000b6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b70:	e7e3      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	f040 8090 	bne.w	8000c98 <__udivmoddi4+0x204>
 8000b78:	eba1 040c 	sub.w	r4, r1, ip
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	fa1f f78c 	uxth.w	r7, ip
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb07 f006 	mul.w	r0, r7, r6
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x11c>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x11a>
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000bae:	4626      	mov	r6, r4
 8000bb0:	1a1c      	subs	r4, r3, r0
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bba:	fb08 4410 	mls	r4, r8, r0, r4
 8000bbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc2:	fb00 f707 	mul.w	r7, r0, r7
 8000bc6:	429f      	cmp	r7, r3
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x148>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x146>
 8000bd4:	429f      	cmp	r7, r3
 8000bd6:	f200 80b0 	bhi.w	8000d3a <__udivmoddi4+0x2a6>
 8000bda:	4620      	mov	r0, r4
 8000bdc:	1bdb      	subs	r3, r3, r7
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	e7a5      	b.n	8000b30 <__udivmoddi4+0x9c>
 8000be4:	f1c1 0620 	rsb	r6, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 f706 	lsr.w	r7, r2, r6
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf8:	ea43 030c 	orr.w	r3, r3, ip
 8000bfc:	40f4      	lsrs	r4, r6
 8000bfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000c02:	0c38      	lsrs	r0, r7, #16
 8000c04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c08:	fbb4 fef0 	udiv	lr, r4, r0
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fb00 441e 	mls	r4, r0, lr, r4
 8000c14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c18:	fb0e f90c 	mul.w	r9, lr, ip
 8000c1c:	45a1      	cmp	r9, r4
 8000c1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x1a6>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c2a:	f080 8084 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000c2e:	45a1      	cmp	r9, r4
 8000c30:	f240 8081 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000c34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	eba4 0409 	sub.w	r4, r4, r9
 8000c3e:	fa1f f983 	uxth.w	r9, r3
 8000c42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c46:	fb00 4413 	mls	r4, r0, r3, r4
 8000c4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x1d2>
 8000c56:	193c      	adds	r4, r7, r4
 8000c58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c5c:	d267      	bcs.n	8000d2e <__udivmoddi4+0x29a>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	d965      	bls.n	8000d2e <__udivmoddi4+0x29a>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	429c      	cmp	r4, r3
 8000c74:	46ce      	mov	lr, r9
 8000c76:	469c      	mov	ip, r3
 8000c78:	d351      	bcc.n	8000d1e <__udivmoddi4+0x28a>
 8000c7a:	d04e      	beq.n	8000d1a <__udivmoddi4+0x286>
 8000c7c:	b155      	cbz	r5, 8000c94 <__udivmoddi4+0x200>
 8000c7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c82:	eb64 040c 	sbc.w	r4, r4, ip
 8000c86:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8a:	40cb      	lsrs	r3, r1
 8000c8c:	431e      	orrs	r6, r3
 8000c8e:	40cc      	lsrs	r4, r1
 8000c90:	e9c5 6400 	strd	r6, r4, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	e750      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	430c      	orrs	r4, r1
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f107 	mul.w	r1, r0, r7
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x24c>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cd6:	d22c      	bcs.n	8000d32 <__udivmoddi4+0x29e>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d92a      	bls.n	8000d32 <__udivmoddi4+0x29e>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb01 f307 	mul.w	r3, r1, r7
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x276>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d00:	d213      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d911      	bls.n	8000d2a <__udivmoddi4+0x296>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	1ae4      	subs	r4, r4, r3
 8000d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d10:	e739      	b.n	8000b86 <__udivmoddi4+0xf2>
 8000d12:	4604      	mov	r4, r0
 8000d14:	e6f0      	b.n	8000af8 <__udivmoddi4+0x64>
 8000d16:	4608      	mov	r0, r1
 8000d18:	e706      	b.n	8000b28 <__udivmoddi4+0x94>
 8000d1a:	45c8      	cmp	r8, r9
 8000d1c:	d2ae      	bcs.n	8000c7c <__udivmoddi4+0x1e8>
 8000d1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d26:	3801      	subs	r0, #1
 8000d28:	e7a8      	b.n	8000c7c <__udivmoddi4+0x1e8>
 8000d2a:	4631      	mov	r1, r6
 8000d2c:	e7ed      	b.n	8000d0a <__udivmoddi4+0x276>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e799      	b.n	8000c66 <__udivmoddi4+0x1d2>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e7d4      	b.n	8000ce0 <__udivmoddi4+0x24c>
 8000d36:	46d6      	mov	lr, sl
 8000d38:	e77f      	b.n	8000c3a <__udivmoddi4+0x1a6>
 8000d3a:	4463      	add	r3, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	e74d      	b.n	8000bdc <__udivmoddi4+0x148>
 8000d40:	4606      	mov	r6, r0
 8000d42:	4623      	mov	r3, r4
 8000d44:	4608      	mov	r0, r1
 8000d46:	e70f      	b.n	8000b68 <__udivmoddi4+0xd4>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	e730      	b.n	8000bb0 <__udivmoddi4+0x11c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <AD9959_WriteData>:
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_SET);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(GPIOA, 1<<9, GPIO_PIN_RESET);
//}
void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	603a      	str	r2, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	460b      	mov	r3, r1
 8000d62:	71bb      	strb	r3, [r7, #6]
	uint8_t	ControlValue = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
	uint8_t	ValueToWrite = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73bb      	strb	r3, [r7, #14]
	uint8_t	RegisterIndex = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	737b      	strb	r3, [r7, #13]
	uint8_t	i = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	733b      	strb	r3, [r7, #12]

	ControlValue = RegisterAddress;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	73fb      	strb	r3, [r7, #15]
//д����?
	SCLK_LOW;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4839      	ldr	r0, [pc, #228]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000d7e:	f001 fe8b 	bl	8002a98 <HAL_GPIO_WritePin>
	CS_LOW;
 8000d82:	2200      	movs	r2, #0
 8000d84:	2102      	movs	r1, #2
 8000d86:	4837      	ldr	r0, [pc, #220]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000d88:	f001 fe86 	bl	8002a98 <HAL_GPIO_WritePin>
	for(i=0; i<8; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	733b      	strb	r3, [r7, #12]
 8000d90:	e01e      	b.n	8000dd0 <AD9959_WriteData+0x7c>
	{
		SCLK_LOW;
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	4833      	ldr	r0, [pc, #204]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000d98:	f001 fe7e 	bl	8002a98 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da05      	bge.n	8000db0 <AD9959_WriteData+0x5c>
		SDIO0_HIGH;
 8000da4:	2201      	movs	r2, #1
 8000da6:	2104      	movs	r1, #4
 8000da8:	482e      	ldr	r0, [pc, #184]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000daa:	f001 fe75 	bl	8002a98 <HAL_GPIO_WritePin>
 8000dae:	e004      	b.n	8000dba <AD9959_WriteData+0x66>
		else
			SDIO0_LOW;
 8000db0:	2200      	movs	r2, #0
 8000db2:	2104      	movs	r1, #4
 8000db4:	482b      	ldr	r0, [pc, #172]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000db6:	f001 fe6f 	bl	8002a98 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4829      	ldr	r0, [pc, #164]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000dc0:	f001 fe6a 	bl	8002a98 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<8; i++)
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	733b      	strb	r3, [r7, #12]
 8000dd0:	7b3b      	ldrb	r3, [r7, #12]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d9dd      	bls.n	8000d92 <AD9959_WriteData+0x3e>
	}
	SCLK_LOW;
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000ddc:	f001 fe5c 	bl	8002a98 <HAL_GPIO_WritePin>
//д������
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	737b      	strb	r3, [r7, #13]
 8000de4:	e031      	b.n	8000e4a <AD9959_WriteData+0xf6>
	{
		ValueToWrite = RegisterData[RegisterIndex];
 8000de6:	7b7b      	ldrb	r3, [r7, #13]
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	733b      	strb	r3, [r7, #12]
 8000df4:	e01e      	b.n	8000e34 <AD9959_WriteData+0xe0>
		{
			SCLK_LOW;
 8000df6:	2200      	movs	r2, #0
 8000df8:	2101      	movs	r1, #1
 8000dfa:	481a      	ldr	r0, [pc, #104]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000dfc:	f001 fe4c 	bl	8002a98 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 8000e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da05      	bge.n	8000e14 <AD9959_WriteData+0xc0>
			SDIO0_HIGH;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000e0e:	f001 fe43 	bl	8002a98 <HAL_GPIO_WritePin>
 8000e12:	e004      	b.n	8000e1e <AD9959_WriteData+0xca>
			else
			SDIO0_LOW;
 8000e14:	2200      	movs	r2, #0
 8000e16:	2104      	movs	r1, #4
 8000e18:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000e1a:	f001 fe3d 	bl	8002a98 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2101      	movs	r1, #1
 8000e22:	4810      	ldr	r0, [pc, #64]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000e24:	f001 fe38 	bl	8002a98 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000e2e:	7b3b      	ldrb	r3, [r7, #12]
 8000e30:	3301      	adds	r3, #1
 8000e32:	733b      	strb	r3, [r7, #12]
 8000e34:	7b3b      	ldrb	r3, [r7, #12]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	d9dd      	bls.n	8000df6 <AD9959_WriteData+0xa2>
		}
		SCLK_LOW;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000e40:	f001 fe2a 	bl	8002a98 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000e44:	7b7b      	ldrb	r3, [r7, #13]
 8000e46:	3301      	adds	r3, #1
 8000e48:	737b      	strb	r3, [r7, #13]
 8000e4a:	7b7a      	ldrb	r2, [r7, #13]
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3c9      	bcc.n	8000de6 <AD9959_WriteData+0x92>
	}
  CS_HIGH;
 8000e52:	2201      	movs	r2, #1
 8000e54:	2102      	movs	r1, #2
 8000e56:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <AD9959_WriteData+0x110>)
 8000e58:	f001 fe1e 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800

08000e68 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
		uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};	//�м����???????
 8000e70:	2100      	movs	r1, #0
 8000e72:	60b9      	str	r1, [r7, #8]
	  uint32_t Temp;
	  Temp=(uint32_t)fre * 4294967296 / 500000000;
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	2000      	movs	r0, #0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	f04f 0100 	mov.w	r1, #0
 8000e84:	0011      	movs	r1, r2
 8000e86:	2000      	movs	r0, #0
 8000e88:	a311      	add	r3, pc, #68	@ (adr r3, 8000ed0 <Write_CFTW0+0x68>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fdb1 	bl	80009f4 <__aeabi_ldivmod>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4613      	mov	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
	  CFTW0_DATA[3]=(uint8_t)Temp;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	72fb      	strb	r3, [r7, #11]
	  CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72bb      	strb	r3, [r7, #10]
	  CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	727b      	strb	r3, [r7, #9]
	  CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	0e1b      	lsrs	r3, r3, #24
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	723b      	strb	r3, [r7, #8]
		AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	2004      	movs	r0, #4
 8000ec2:	f7ff ff47 	bl	8000d54 <AD9959_WriteData>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	1dcd6500 	.word	0x1dcd6500
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <AD9959_Set_Fre>:
void AD9959_Set_Fre(uint8_t Channel,uint32_t Freq)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
		uint8_t CHANNEL[1] = {0x00};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	733b      	strb	r3, [r7, #12]

		CHANNEL[0]=Channel;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	733b      	strb	r3, [r7, #12]
		AD9959_WriteData(0x00,1,CHANNEL);//���ƼĴ���д��CHnͨ����ѡ��CHn
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ff2d 	bl	8000d54 <AD9959_WriteData>
    Write_CFTW0(Freq);//���CHn�趨Ƶ��
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f7ff ffb4 	bl	8000e68 <Write_CFTW0>
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <IntReset>:
void IntReset()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f14:	f001 fdc0 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f000 fde9 	bl	8001af0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f001 fdb7 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fde0 	bl	8001af0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2102      	movs	r1, #2
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f001 fdae 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Intserve>:
void Intserve(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
		//AD9959_PWR=0;
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	4820      	ldr	r0, [pc, #128]	@ (8000fcc <Intserve+0x8c>)
 8000f4a:	f001 fda5 	bl	8002a98 <HAL_GPIO_WritePin>
    CS_HIGH;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2102      	movs	r1, #2
 8000f52:	481e      	ldr	r0, [pc, #120]	@ (8000fcc <Intserve+0x8c>)
 8000f54:	f001 fda0 	bl	8002a98 <HAL_GPIO_WritePin>
    SCLK_LOW;
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	481b      	ldr	r0, [pc, #108]	@ (8000fcc <Intserve+0x8c>)
 8000f5e:	f001 fd9b 	bl	8002a98 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 8000f62:	2200      	movs	r2, #0
 8000f64:	2108      	movs	r1, #8
 8000f66:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <Intserve+0x8c>)
 8000f68:	f001 fd96 	bl	8002a98 <HAL_GPIO_WritePin>
//    PS0 = 0;
    HAL_GPIO_WritePin(PS0_GPIO_Port, PS0_Pin, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <Intserve+0x8c>)
 8000f72:	f001 fd91 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS1_GPIO_Port, PS1_Pin, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <Intserve+0x8c>)
 8000f7c:	f001 fd8c 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS2_GPIO_Port, PS2_Pin, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <Intserve+0x8c>)
 8000f86:	f001 fd87 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS3_GPIO_Port, PS3_Pin, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f90:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <Intserve+0x8c>)
 8000f92:	f001 fd81 	bl	8002a98 <HAL_GPIO_WritePin>
//    PS1 = 0;
//    PS2 = 0;
//    PS3 = 0;
    SDIO0_HIGH;
 8000f96:	2201      	movs	r2, #1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <Intserve+0x8c>)
 8000f9c:	f001 fd7c 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO1_GPIO_Port, SDIO1_Pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa6:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <Intserve+0x8c>)
 8000fa8:	f001 fd76 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO2_GPIO_Port, SDIO2_Pin, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 fd6f 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO3_GPIO_Port, SDIO3_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc4:	f001 fd68 	bl	8002a98 <HAL_GPIO_WritePin>
//    SDIO1 = 0;
//    SDIO2 = 0;
//    SDIO3 = 0;
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	48000800 	.word	0x48000800

08000fd0 <Write_ACR>:
void Write_ACR(uint16_t Ampli)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	uint32_t A_temp=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 8000fde:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <Write_ACR+0x50>)
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	8019      	strh	r1, [r3, #0]
 8000fea:	3302      	adds	r3, #2
 8000fec:	0c12      	lsrs	r2, r2, #16
 8000fee:	701a      	strb	r2, [r3, #0]
  A_temp=Ampli|0x1000;
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	60fb      	str	r3, [r7, #12]

	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	727b      	strb	r3, [r7, #9]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72bb      	strb	r3, [r7, #10]
  AD9959_WriteData(0x06,3,ACR_DATA); //ACR address 0x06.CHn设定幅度
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	461a      	mov	r2, r3
 800100e:	2103      	movs	r1, #3
 8001010:	2006      	movs	r0, #6
 8001012:	f7ff fe9f 	bl	8000d54 <AD9959_WriteData>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	080040bc 	.word	0x080040bc

08001024 <AD9959_Set_Amp>:

void AD9959_Set_Amp(uint8_t Channel, uint16_t Ampli)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 8001034:	2300      	movs	r3, #0
 8001036:	733b      	strb	r3, [r7, #12]

	CHANNEL[0]=Channel;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，�?�择CHn
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	461a      	mov	r2, r3
 8001042:	2101      	movs	r1, #1
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fe85 	bl	8000d54 <AD9959_WriteData>
	Write_ACR(Ampli);							//	CHn设定幅度
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffbf 	bl	8000fd0 <Write_ACR>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Write_CPOW0>:
void Write_CPOW0(uint16_t Phase)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	80fb      	strh	r3, [r7, #6]
	uint8_t CPOW0_data[2] = {0x00,0x00};
 8001064:	2300      	movs	r3, #0
 8001066:	81bb      	strh	r3, [r7, #12]
	CPOW0_data[1]=(uint8_t)Phase;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]
	CPOW0_data[0]=(uint8_t)(Phase>>8);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]

	AD9959_WriteData(0x05,2,CPOW0_data);//CPOW0 address 0x05.CHn设定相位
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	461a      	mov	r2, r3
 800107e:	2102      	movs	r1, #2
 8001080:	2005      	movs	r0, #5
 8001082:	f7ff fe67 	bl	8000d54 <AD9959_WriteData>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <AD9959_Set_Phase>:

void AD9959_Set_Phase(uint8_t Channel,uint16_t Phase)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	460a      	mov	r2, r1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	4613      	mov	r3, r2
 800109c:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 800109e:	2300      	movs	r3, #0
 80010a0:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	733b      	strb	r3, [r7, #12]

	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，�?�择CHn
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	461a      	mov	r2, r3
 80010ac:	2101      	movs	r1, #1
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fe50 	bl	8000d54 <AD9959_WriteData>
	Write_CPOW0(Phase);//CHn设定相位
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffcf 	bl	800105a <Write_CPOW0>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AD9959_Init>:

void AD9959_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;	//初始化管脚PC0
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;		 //IO口�?�度�??????2MHz
//	GPIO_Init(GPIOC, &GPIO_InitStructure);					 //根据设定参数初始化GPIOC
//
	Intserve();  //IO口电平状态初始化
 80010ca:	f7ff ff39 	bl	8000f40 <Intserve>
  IntReset();  //AD9959复位
 80010ce:	f7ff ff1b 	bl	8000f08 <IntReset>

	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 80010d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <AD9959_Init+0x44>)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4611      	mov	r1, r2
 80010da:	8019      	strh	r1, [r3, #0]
 80010dc:	3302      	adds	r3, #2
 80010de:	0c12      	lsrs	r2, r2, #16
 80010e0:	701a      	strb	r2, [r3, #0]


  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 80010e2:	2300      	movs	r3, #0
 80010e4:	803b      	strh	r3, [r7, #0]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	461a      	mov	r2, r3
 80010ea:	2103      	movs	r1, #3
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff fe31 	bl	8000d54 <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);//
 80010f2:	463b      	mov	r3, r7
 80010f4:	461a      	mov	r2, r3
 80010f6:	2102      	movs	r1, #2
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fe2b 	bl	8000d54 <AD9959_WriteData>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	080040c0 	.word	0x080040c0

0800110c <IO_Update>:
void IO_Update(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	UPDATE_LOW;
 8001110:	2200      	movs	r2, #0
 8001112:	2108      	movs	r1, #8
 8001114:	480a      	ldr	r0, [pc, #40]	@ (8001140 <IO_Update+0x34>)
 8001116:	f001 fcbf 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fce8 	bl	8001af0 <HAL_Delay>
	UPDATE_HIGH;
 8001120:	2201      	movs	r2, #1
 8001122:	2108      	movs	r1, #8
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <IO_Update+0x34>)
 8001126:	f001 fcb7 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 fce0 	bl	8001af0 <HAL_Delay>
	UPDATE_LOW;
 8001130:	2200      	movs	r2, #0
 8001132:	2108      	movs	r1, #8
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <IO_Update+0x34>)
 8001136:	f001 fcaf 	bl	8002a98 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	48000800 	.word	0x48000800

08001144 <set_dac>:
#define length 10
uint32_t hsdac_buffer[10] = {714, 791, 803, 745, 640, 527, 450, 438, 496, 601};
void set_dac(uint16_t offset)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
//	  for (int i= 0 ; i < length; ++i)
//	  {
//		  hsdac_buffer[i] = (temp2[i] + (1<< 31))>>21 / 10;
//		  hsdac_buffer[i] += offset;
//	  }
	  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, hsdac_buffer, length, DAC_ALIGN_12B_R);
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	230a      	movs	r3, #10
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <set_dac+0x34>)
 8001156:	2100      	movs	r1, #0
 8001158:	4808      	ldr	r0, [pc, #32]	@ (800117c <set_dac+0x38>)
 800115a:	f000 fe23 	bl	8001da4 <HAL_DAC_Start_DMA>
//	  }
//	  uint16_t dither[10] = {4,4,4,4,5,4,4,4,4,5};
//	  HAL_TIM_Base_Start_DMA(&htim15 ,dither , 1000 );
	  //(&htim15)->Instance->ARR = (uint32_t)(4);
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	  HAL_OPAMP_Start(&hopamp4);
 800115e:	4808      	ldr	r0, [pc, #32]	@ (8001180 <set_dac+0x3c>)
 8001160:	f001 fd82 	bl	8002c68 <HAL_OPAMP_Start>
	  HAL_OPAMP_Start(&hopamp6);
 8001164:	4807      	ldr	r0, [pc, #28]	@ (8001184 <set_dac+0x40>)
 8001166:	f001 fd7f 	bl	8002c68 <HAL_OPAMP_Start>
	  HAL_TIM_Base_Start(&htim15);
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <set_dac+0x44>)
 800116c:	f002 fc02 	bl	8003974 <HAL_TIM_Base_Start>

}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000078 	.word	0x20000078
 8001180:	20000160 	.word	0x20000160
 8001184:	2000019c 	.word	0x2000019c
 8001188:	200001d8 	.word	0x200001d8
 800118c:	00000000 	.word	0x00000000

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fc3a 	bl	8001a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f85b 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 f9f3 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a2:	f000 f9cd 	bl	8001540 <MX_DMA_Init>
  MX_DAC3_Init();
 80011a6:	f000 f8bb 	bl	8001320 <MX_DAC3_Init>
  MX_OPAMP6_Init();
 80011aa:	f000 f953 	bl	8001454 <MX_OPAMP6_Init>
  MX_TIM15_Init();
 80011ae:	f000 f977 	bl	80014a0 <MX_TIM15_Init>
  MX_CORDIC_Init();
 80011b2:	f000 f8a1 	bl	80012f8 <MX_CORDIC_Init>
  MX_DAC4_Init();
 80011b6:	f000 f8ed 	bl	8001394 <MX_DAC4_Init>
  MX_OPAMP4_Init();
 80011ba:	f000 f925 	bl	8001408 <MX_OPAMP4_Init>
  /* USER CODE BEGIN 2 */
//  ad9959_init();
//  ad9959_freq(30000000, 0x10);
//  ad9959_update();
  uint32_t x, y;
  x = 30000000;
 80011be:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <main+0xb8>)
 80011c0:	607b      	str	r3, [r7, #4]
  AD9959_Init();
 80011c2:	f7ff ff7f 	bl	80010c4 <AD9959_Init>
  AD9959_Set_Fre(0xf0, x);
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	20f0      	movs	r0, #240	@ 0xf0
 80011ca:	f7ff fe85 	bl	8000ed8 <AD9959_Set_Fre>
  y = 48 * (x / 1e6) + 560;
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff f964 	bl	800049c <__aeabi_ui2d>
 80011d4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001240 <main+0xb0>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fb03 	bl	80007e4 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <main+0xbc>)
 80011ec:	f7ff f9d0 	bl	8000590 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <main+0xc0>)
 80011fe:	f7ff f811 	bl	8000224 <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fbd3 	bl	80009b4 <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	603b      	str	r3, [r7, #0]
  AD9959_Set_Amp(0xf0, 600);
 8001212:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001216:	20f0      	movs	r0, #240	@ 0xf0
 8001218:	f7ff ff04 	bl	8001024 <AD9959_Set_Amp>
  AD9959_Set_Phase(0x10, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f7ff ff35 	bl	800108e <AD9959_Set_Phase>
  AD9959_Set_Phase(0x20, 0);
 8001224:	2100      	movs	r1, #0
 8001226:	2020      	movs	r0, #32
 8001228:	f7ff ff31 	bl	800108e <AD9959_Set_Phase>
  IO_Update();
 800122c:	f7ff ff6e 	bl	800110c <IO_Update>
  set_dac(0);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff ff87 	bl	8001144 <set_dac>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001236:	bf00      	nop
 8001238:	e7fd      	b.n	8001236 <main+0xa6>
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	00000000 	.word	0x00000000
 8001244:	412e8480 	.word	0x412e8480
 8001248:	01c9c380 	.word	0x01c9c380
 800124c:	40480000 	.word	0x40480000
 8001250:	40818000 	.word	0x40818000

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	@ 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	2238      	movs	r2, #56	@ 0x38
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fef2 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800127a:	f001 fd27 	bl	8002ccc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128c:	2303      	movs	r3, #3
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001294:	2310      	movs	r3, #16
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fdc3 	bl	8002e34 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012b4:	f000 f9f0 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2303      	movs	r3, #3
 80012be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2103      	movs	r1, #3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f8c1 	bl	8003458 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f9dc 	bl	8001698 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80012e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80012ea:	f002 f9f1 	bl	80036d0 <HAL_RCC_MCOConfig>
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_CORDIC_Init+0x20>)
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <MX_CORDIC_Init+0x24>)
 8001300:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_CORDIC_Init+0x20>)
 8001304:	f000 fc16 	bl	8001b34 <HAL_CORDIC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800130e:	f000 f9c3 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000050 	.word	0x20000050
 800131c:	40020c00 	.word	0x40020c00

08001320 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001326:	463b      	mov	r3, r7
 8001328:	2230      	movs	r2, #48	@ 0x30
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fe8d 	bl	800404c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_DAC3_Init+0x6c>)
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <MX_DAC3_Init+0x70>)
 8001336:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001338:	4814      	ldr	r0, [pc, #80]	@ (800138c <MX_DAC3_Init+0x6c>)
 800133a:	f000 fd10 	bl	8001d5e <HAL_DAC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001344:	f000 f9a8 	bl	8001698 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001348:	2302      	movs	r3, #2
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 800134c:	2301      	movs	r3, #1
 800134e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 8001358:	230e      	movs	r3, #14
 800135a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_DAC3_Init+0x6c>)
 8001374:	f000 fe08 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800137e:	f000 f98b 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	@ 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000078 	.word	0x20000078
 8001390:	50001000 	.word	0x50001000

08001394 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2230      	movs	r2, #48	@ 0x30
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fe53 	bl	800404c <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_DAC4_Init+0x6c>)
 80013a8:	4a16      	ldr	r2, [pc, #88]	@ (8001404 <MX_DAC4_Init+0x70>)
 80013aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 80013ac:	4814      	ldr	r0, [pc, #80]	@ (8001400 <MX_DAC4_Init+0x6c>)
 80013ae:	f000 fcd6 	bl	8001d5e <HAL_DAC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 80013b8:	f000 f96e 	bl	8001698 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013bc:	2302      	movs	r3, #2
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80013cc:	230e      	movs	r3, #14
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <MX_DAC4_Init+0x6c>)
 80013e8:	f000 fdce 	bl	8001f88 <HAL_DAC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 80013f2:	f000 f951 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	@ 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000008c 	.word	0x2000008c
 8001404:	50001400 	.word	0x50001400

08001408 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_OPAMP4_Init+0x44>)
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <MX_OPAMP4_Init+0x48>)
 8001410:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_OPAMP4_Init+0x44>)
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_OPAMP4_Init+0x44>)
 800141a:	2260      	movs	r2, #96	@ 0x60
 800141c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_OPAMP4_Init+0x44>)
 8001420:	220c      	movs	r2, #12
 8001422:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_OPAMP4_Init+0x44>)
 8001426:	2200      	movs	r2, #0
 8001428:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_OPAMP4_Init+0x44>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_OPAMP4_Init+0x44>)
 8001432:	2200      	movs	r2, #0
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_OPAMP4_Init+0x44>)
 8001438:	f001 fb46 	bl	8002ac8 <HAL_OPAMP_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001442:	f000 f929 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000160 	.word	0x20000160
 8001450:	4001030c 	.word	0x4001030c

08001454 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <MX_OPAMP6_Init+0x48>)
 800145c:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 8001466:	2260      	movs	r2, #96	@ 0x60
 8001468:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 800146c:	220c      	movs	r2, #12
 800146e:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_OPAMP6_Init+0x44>)
 8001484:	f001 fb20 	bl	8002ac8 <HAL_OPAMP_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 800148e:	f000 f903 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000019c 	.word	0x2000019c
 800149c:	40010314 	.word	0x40010314

080014a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014c0:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <MX_TIM15_Init+0x9c>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014d2:	2213      	movs	r2, #19
 80014d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80014e8:	4813      	ldr	r0, [pc, #76]	@ (8001538 <MX_TIM15_Init+0x98>)
 80014ea:	f002 f9eb 	bl	80038c4 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 f8d0 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <MX_TIM15_Init+0x98>)
 8001506:	f002 faa5 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001510:	f000 f8c2 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001514:	2320      	movs	r3, #32
 8001516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_TIM15_Init+0x98>)
 8001522:	f002 fcfd 	bl	8003f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800152c:	f000 f8b4 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200001d8 	.word	0x200001d8
 800153c:	40014000 	.word	0x40014000

08001540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_DMA_Init+0x44>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154a:	4a0e      	ldr	r2, [pc, #56]	@ (8001584 <MX_DMA_Init+0x44>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6493      	str	r3, [r2, #72]	@ 0x48
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_DMA_Init+0x44>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_DMA_Init+0x44>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <MX_DMA_Init+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6493      	str	r3, [r2, #72]	@ 0x48
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_DMA_Init+0x44>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a35      	ldr	r2, [pc, #212]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a29      	ldr	r2, [pc, #164]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <MX_GPIO_Init+0x108>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 80015fe:	2200      	movs	r2, #0
 8001600:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001604:	4823      	ldr	r0, [pc, #140]	@ (8001694 <MX_GPIO_Init+0x10c>)
 8001606:	f001 fa47 	bl	8002a98 <HAL_GPIO_WritePin>
                          |PWR_Pin|PS0_Pin|PS1_Pin|PS2_Pin
                          |PS3_Pin|SDIO1_Pin|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SDIO3_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f240 2102 	movw	r1, #514	@ 0x202
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f001 fa40 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDIO4_GPIO_Port, SDIO4_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f001 fa39 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCLK_Pin CS_Pin SDIO0_Pin UPDATE_Pin
                           PWR_Pin PS0_Pin PS1_Pin PS2_Pin
                           PS3_Pin SDIO1_Pin PC10 PC11 */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8001626:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800162a:	617b      	str	r3, [r7, #20]
                          |PWR_Pin|PS0_Pin|PS1_Pin|PS2_Pin
                          |PS3_Pin|SDIO1_Pin|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4815      	ldr	r0, [pc, #84]	@ (8001694 <MX_GPIO_Init+0x10c>)
 8001640:	f001 f8a8 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin SDIO3_Pin SDIO4_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SDIO3_Pin|SDIO4_Pin;
 8001644:	f240 6302 	movw	r3, #1538	@ 0x602
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f001 f898 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO2_Pin */
  GPIO_InitStruct.Pin = SDIO2_Pin;
 8001664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDIO2_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f001 f886 	bl	8002794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	48000800 	.word	0x48000800

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_MspInit+0x44>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_MspInit+0x44>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_MspInit+0x44>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016da:	f001 fb9b 	bl	8002e14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_CORDIC_MspInit+0x38>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_CORDIC_MspInit+0x3c>)
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <HAL_CORDIC_MspInit+0x3c>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6493      	str	r3, [r2, #72]	@ 0x48
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_CORDIC_MspInit+0x3c>)
 800170c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a3d      	ldr	r2, [pc, #244]	@ (8001830 <HAL_DAC_MspInit+0x104>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d137      	bne.n	80017ae <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a3c      	ldr	r2, [pc, #240]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001758:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_DAC_MspInit+0x110>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 800175e:	2266      	movs	r2, #102	@ 0x66
 8001760:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001764:	2210      	movs	r2, #16
 8001766:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800176e:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001774:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177a:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177c:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 800177e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001782:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8001784:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001786:	2220      	movs	r2, #32
 8001788:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8001790:	4829      	ldr	r0, [pc, #164]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 8001792:	f000 fe3b 	bl	800240c <HAL_DMA_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 800179c:	f7ff ff7c 	bl	8001698 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a25      	ldr	r2, [pc, #148]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	4a24      	ldr	r2, [pc, #144]	@ (8001838 <HAL_DAC_MspInit+0x10c>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80017ac:	e03b      	b.n	8001826 <HAL_DAC_MspInit+0xfa>
  else if(hdac->Instance==DAC4)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a23      	ldr	r2, [pc, #140]	@ (8001840 <HAL_DAC_MspInit+0x114>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d136      	bne.n	8001826 <HAL_DAC_MspInit+0xfa>
    __HAL_RCC_DAC4_CLK_ENABLE();
 80017b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 80017be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <HAL_DAC_MspInit+0x108>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    hdma_dac4_ch1.Instance = DMA1_Channel2;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <HAL_DAC_MspInit+0x11c>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_dac4_ch1.Init.Request = DMA_REQUEST_DAC4_CHANNEL1;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017d8:	2268      	movs	r2, #104	@ 0x68
 80017da:	605a      	str	r2, [r3, #4]
    hdma_dac4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017de:	2210      	movs	r2, #16
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_dac4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_dac4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017ea:	2280      	movs	r2, #128	@ 0x80
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_dac4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_dac4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 80017f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_dac4_ch1.Init.Mode = DMA_CIRCULAR;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]
    hdma_dac4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac4_ch1) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 800180c:	f000 fdfe 	bl	800240c <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_DAC_MspInit+0xee>
      Error_Handler();
 8001816:	f7ff ff3f 	bl	8001698 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac4_ch1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <HAL_DAC_MspInit+0x118>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	50001000 	.word	0x50001000
 8001834:	40021000 	.word	0x40021000
 8001838:	200000a0 	.word	0x200000a0
 800183c:	40020008 	.word	0x40020008
 8001840:	50001400 	.word	0x50001400
 8001844:	20000100 	.word	0x20000100
 8001848:	4002001c 	.word	0x4002001c

0800184c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP4)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <HAL_OPAMP_MspInit+0x9c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d119      	bne.n	80018a2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP4_MspInit 0 */

  /* USER CODE END OPAMP4_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    /**OPAMP4 GPIO Configuration
    PB12     ------> OPAMP4_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188c:	2303      	movs	r3, #3
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4815      	ldr	r0, [pc, #84]	@ (80018f0 <HAL_OPAMP_MspInit+0xa4>)
 800189c:	f000 ff7a 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80018a0:	e01d      	b.n	80018de <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP6)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <HAL_OPAMP_MspInit+0xa8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d118      	bne.n	80018de <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_OPAMP_MspInit+0xa0>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ca:	2303      	movs	r3, #3
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <HAL_OPAMP_MspInit+0xa4>)
 80018da:	f000 ff5b 	bl	8002794 <HAL_GPIO_Init>
}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	4001030c 	.word	0x4001030c
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	40010314 	.word	0x40010314

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_TIM_Base_MspInit+0x38>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10b      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_TIM_Base_MspInit+0x3c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_TIM_Base_MspInit+0x3c>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6613      	str	r3, [r2, #96]	@ 0x60
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_TIM_Base_MspInit+0x3c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40014000 	.word	0x40014000
 8001934:	40021000 	.word	0x40021000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f000 f891 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ffea 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 fb37 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ee:	f7ff fbcf 	bl	8001190 <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   r0, =_estack
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001a00:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8001a04:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001a08:	20000228 	.word	0x20000228

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>

08001a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f96f 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f80e 	bl	8001a40 <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	e001      	b.n	8001a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a30:	f7ff fe38 	bl	80016a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a34:	79fb      	ldrb	r3, [r7, #7]

}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_InitTick+0x68>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d022      	beq.n	8001a9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <HAL_InitTick+0x68>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f96c 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d809      	bhi.n	8001a8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a82:	f000 f946 	bl	8001d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_InitTick+0x70>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e007      	b.n	8001a9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e004      	b.n	8001a9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000030 	.word	0x20000030
 8001aac:	20000028 	.word	0x20000028
 8001ab0:	2000002c 	.word	0x2000002c

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a03      	ldr	r2, [pc, #12]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001ac4:	6013      	str	r3, [r2, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000224 	.word	0x20000224
 8001ad4:	20000030 	.word	0x20000030

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000224 	.word	0x20000224

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d004      	beq.n	8001b14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_Delay+0x40>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b14:	bf00      	nop
 8001b16:	f7ff ffdf 	bl	8001ad8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d8f7      	bhi.n	8001b16 <HAL_Delay+0x26>
  {
  }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000030 	.word	0x20000030

08001b34 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e023      	b.n	8001b8e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fdc6 	bl	80016ec <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff8e 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff47 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff90 	bl	8001c50 <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5f 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb2 	bl	8001cb8 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e014      	b.n	8001d9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fcd3 	bl	800172c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b2      	b.n	8001f22 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	795b      	ldrb	r3, [r3, #5]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DAC_Start_DMA+0x24>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0ac      	b.n	8001f22 <HAL_DAC_Start_DMA+0x17e>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d129      	bne.n	8001e2e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a53      	ldr	r2, [pc, #332]	@ (8001f2c <HAL_DAC_Start_DMA+0x188>)
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_DAC_Start_DMA+0x18c>)
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4a51      	ldr	r2, [pc, #324]	@ (8001f34 <HAL_DAC_Start_DMA+0x190>)
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DAC_Start_DMA+0x6c>
 8001e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d005      	beq.n	8001e1a <HAL_DAC_Start_DMA+0x76>
 8001e0e:	e009      	b.n	8001e24 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3308      	adds	r3, #8
 8001e16:	61bb      	str	r3, [r7, #24]
        break;
 8001e18:	e033      	b.n	8001e82 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	330c      	adds	r3, #12
 8001e20:	61bb      	str	r3, [r7, #24]
        break;
 8001e22:	e02e      	b.n	8001e82 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	61bb      	str	r3, [r7, #24]
        break;
 8001e2c:	e029      	b.n	8001e82 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4a41      	ldr	r2, [pc, #260]	@ (8001f38 <HAL_DAC_Start_DMA+0x194>)
 8001e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4a40      	ldr	r2, [pc, #256]	@ (8001f3c <HAL_DAC_Start_DMA+0x198>)
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a3f      	ldr	r2, [pc, #252]	@ (8001f40 <HAL_DAC_Start_DMA+0x19c>)
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DAC_Start_DMA+0xc0>
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d005      	beq.n	8001e6e <HAL_DAC_Start_DMA+0xca>
 8001e62:	e009      	b.n	8001e78 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3314      	adds	r3, #20
 8001e6a:	61bb      	str	r3, [r7, #24]
        break;
 8001e6c:	e009      	b.n	8001e82 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3318      	adds	r3, #24
 8001e74:	61bb      	str	r3, [r7, #24]
        break;
 8001e76:	e004      	b.n	8001e82 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	331c      	adds	r3, #28
 8001e7e:	61bb      	str	r3, [r7, #24]
        break;
 8001e80:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d111      	bne.n	8001eac <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	f000 fb5b 	bl	800255c <HAL_DMA_Start_IT>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	77fb      	strb	r3, [r7, #31]
 8001eaa:	e010      	b.n	8001ece <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001eba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68d8      	ldr	r0, [r3, #12]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f000 fb49 	bl	800255c <HAL_DMA_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ed4:	7ffb      	ldrb	r3, [r7, #31]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d11c      	bne.n	8001f14 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_DAC_Start_DMA+0x1a0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <HAL_DAC_Start_DMA+0x1a4>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f04:	e002      	b.n	8001f0c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_DAC_Start_DMA+0x162>
 8001f12:	e005      	b.n	8001f20 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	080022f9 	.word	0x080022f9
 8001f30:	0800231b 	.word	0x0800231b
 8001f34:	08002337 	.word	0x08002337
 8001f38:	080023a1 	.word	0x080023a1
 8001f3c:	080023c3 	.word	0x080023c3
 8001f40:	080023df 	.word	0x080023df
 8001f44:	20000028 	.word	0x20000028
 8001f48:	053e2d63 	.word	0x053e2d63

08001f4c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_DAC_ConfigChannel+0x1c>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e19e      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_DAC_ConfigChannel+0x2c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e198      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d17a      	bne.n	80020be <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff fd86 	bl	8001ad8 <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13d      	bne.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fd4:	e018      	b.n	8002008 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fd6:	f7ff fd7f 	bl	8001ad8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d911      	bls.n	8002008 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f043 0208 	orr.w	r2, r3, #8
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2203      	movs	r2, #3
 8002002:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e16e      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1df      	bne.n	8001fd6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002020:	e020      	b.n	8002064 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002022:	f7ff fd59 	bl	8001ad8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d90f      	bls.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	da0a      	bge.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f043 0208 	orr.w	r2, r3, #8
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2203      	movs	r2, #3
 800204a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e14a      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	dbe3      	blt.n	8002022 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	ea02 0103 	and.w	r1, r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	21ff      	movs	r1, #255	@ 0xff
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	ea02 0103 	and.w	r1, r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d11d      	bne.n	8002102 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	221f      	movs	r2, #31
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020de:	4013      	ands	r3, r2
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f6:	4313      	orrs	r3, r2
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002100:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2207      	movs	r2, #7
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211a:	4013      	ands	r3, r2
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	e00f      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d102      	bne.n	800213a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002134:	2301      	movs	r3, #1
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	e008      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002142:	2301      	movs	r3, #1
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	e001      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	6a3a      	ldr	r2, [r7, #32]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216e:	4013      	ands	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_DAC_ConfigChannel+0x1f8>
 800217a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800217e:	e000      	b.n	8002182 <HAL_DAC_ConfigChannel+0x1fa>
 8002180:	2300      	movs	r3, #0
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219a:	4013      	ands	r3, r2
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	795b      	ldrb	r3, [r3, #5]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_DAC_ConfigChannel+0x224>
 80021a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021aa:	e000      	b.n	80021ae <HAL_DAC_ConfigChannel+0x226>
 80021ac:	2300      	movs	r3, #0
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d114      	bne.n	80021ee <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80021c4:	f001 fb2c 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 80021c8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_DAC_ConfigChannel+0x368>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d904      	bls.n	80021dc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021da:	e00f      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4a45      	ldr	r2, [pc, #276]	@ (80022f4 <HAL_DAC_ConfigChannel+0x36c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d90a      	bls.n	80021fa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ec:	e006      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	4313      	orrs	r3, r2
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f8:	e000      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80021fa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220a:	4313      	orrs	r3, r2
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224e:	4013      	ands	r3, r2
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002266:	4313      	orrs	r3, r2
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002270:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	22c0      	movs	r2, #192	@ 0xc0
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	ea02 0103 	and.w	r1, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80022e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	09896800 	.word	0x09896800
 80022f4:	04c4b400 	.word	0x04c4b400

080022f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fe20 	bl	8001f4c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	711a      	strb	r2, [r3, #4]
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe19 	bl	8001f60 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fe0f 	bl	8001f74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	711a      	strb	r2, [r3, #4]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ffd8 	bl	8002364 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	711a      	strb	r2, [r3, #4]
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff ffd1 	bl	8002378 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff ffc7 	bl	800238c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	711a      	strb	r2, [r3, #4]
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e08d      	b.n	800253a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_DMA_Init+0x138>)
 8002426:	429a      	cmp	r2, r3
 8002428:	d80f      	bhi.n	800244a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	4b45      	ldr	r3, [pc, #276]	@ (8002548 <HAL_DMA_Init+0x13c>)
 8002432:	4413      	add	r3, r2
 8002434:	4a45      	ldr	r2, [pc, #276]	@ (800254c <HAL_DMA_Init+0x140>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a42      	ldr	r2, [pc, #264]	@ (8002550 <HAL_DMA_Init+0x144>)
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40
 8002448:	e00e      	b.n	8002468 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b40      	ldr	r3, [pc, #256]	@ (8002554 <HAL_DMA_Init+0x148>)
 8002452:	4413      	add	r3, r2
 8002454:	4a3d      	ldr	r2, [pc, #244]	@ (800254c <HAL_DMA_Init+0x140>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a3c      	ldr	r2, [pc, #240]	@ (8002558 <HAL_DMA_Init+0x14c>)
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800247e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f908 	bl	80026d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024c8:	d102      	bne.n	80024d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_DMA_Init+0x104>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d80c      	bhi.n	8002510 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f928 	bl	800274c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	e008      	b.n	8002522 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40020407 	.word	0x40020407
 8002548:	bffdfff8 	.word	0xbffdfff8
 800254c:	cccccccd 	.word	0xcccccccd
 8002550:	40020000 	.word	0x40020000
 8002554:	bffdfbf8 	.word	0xbffdfbf8
 8002558:	40020400 	.word	0x40020400

0800255c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_DMA_Start_IT+0x20>
 8002578:	2302      	movs	r3, #2
 800257a:	e066      	b.n	800264a <HAL_DMA_Start_IT+0xee>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d155      	bne.n	800263c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f84c 	bl	8002652 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 020e 	orr.w	r2, r2, #14
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00f      	b.n	80025f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 020a 	orr.w	r2, r2, #10
 80025f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002610:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002628:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e005      	b.n	8002648 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002644:	2302      	movs	r3, #2
 8002646:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002668:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800267a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b10      	cmp	r3, #16
 800269e:	d108      	bne.n	80026b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026b0:	e007      	b.n	80026c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	60da      	str	r2, [r3, #12]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d802      	bhi.n	80026ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80026e4:	4b15      	ldr	r3, [pc, #84]	@ (800273c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e001      	b.n	80026ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3b08      	subs	r3, #8
 80026fa:	4a12      	ldr	r2, [pc, #72]	@ (8002744 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	461a      	mov	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a0b      	ldr	r2, [pc, #44]	@ (8002748 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800271a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2201      	movs	r2, #1
 8002724:	409a      	lsls	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40020407 	.word	0x40020407
 800273c:	40020800 	.word	0x40020800
 8002740:	40020820 	.word	0x40020820
 8002744:	cccccccd 	.word	0xcccccccd
 8002748:	40020880 	.word	0x40020880

0800274c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800276e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3b01      	subs	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	1000823f 	.word	0x1000823f
 8002790:	40020940 	.word	0x40020940

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027a2:	e15a      	b.n	8002a5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 814c 	beq.w	8002a54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d005      	beq.n	80027d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d130      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800280a:	2201      	movs	r2, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0201 	and.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b03      	cmp	r3, #3
 8002840:	d017      	beq.n	8002872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80a6 	beq.w	8002a54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	4b5b      	ldr	r3, [pc, #364]	@ (8002a78 <HAL_GPIO_Init+0x2e4>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290c:	4a5a      	ldr	r2, [pc, #360]	@ (8002a78 <HAL_GPIO_Init+0x2e4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6613      	str	r3, [r2, #96]	@ 0x60
 8002914:	4b58      	ldr	r3, [pc, #352]	@ (8002a78 <HAL_GPIO_Init+0x2e4>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002920:	4a56      	ldr	r2, [pc, #344]	@ (8002a7c <HAL_GPIO_Init+0x2e8>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800294a:	d01f      	beq.n	800298c <HAL_GPIO_Init+0x1f8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a80 <HAL_GPIO_Init+0x2ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d019      	beq.n	8002988 <HAL_GPIO_Init+0x1f4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <HAL_GPIO_Init+0x2f0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x1f0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a88 <HAL_GPIO_Init+0x2f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1ec>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a49      	ldr	r2, [pc, #292]	@ (8002a8c <HAL_GPIO_Init+0x2f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1e8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a48      	ldr	r2, [pc, #288]	@ (8002a90 <HAL_GPIO_Init+0x2fc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002974:	2305      	movs	r3, #5
 8002976:	e00a      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002978:	2306      	movs	r3, #6
 800297a:	e008      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 800297c:	2304      	movs	r3, #4
 800297e:	e006      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002980:	2303      	movs	r3, #3
 8002982:	e004      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002984:	2302      	movs	r3, #2
 8002986:	e002      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_GPIO_Init+0x1fa>
 800298c:	2300      	movs	r3, #0
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	f002 0203 	and.w	r2, r2, #3
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	4093      	lsls	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800299e:	4937      	ldr	r1, [pc, #220]	@ (8002a7c <HAL_GPIO_Init+0x2e8>)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ac:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d0:	4a30      	ldr	r2, [pc, #192]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029fa:	4a26      	ldr	r2, [pc, #152]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a24:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_GPIO_Init+0x300>)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f47f ae9d 	bne.w	80027a4 <HAL_GPIO_Init+0x10>
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	48000400 	.word	0x48000400
 8002a84:	48000800 	.word	0x48000800
 8002a88:	48000c00 	.word	0x48000c00
 8002a8c:	48001000 	.word	0x48001000
 8002a90:	48001400 	.word	0x48001400
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0bb      	b.n	8002c56 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d101      	bne.n	8002aee <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0b3      	b.n	8002c56 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d101      	bne.n	8002afe <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0ab      	b.n	8002c56 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	4b58      	ldr	r3, [pc, #352]	@ (8002c60 <HAL_OPAMP_Init+0x198>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b02:	4a57      	ldr	r2, [pc, #348]	@ (8002c60 <HAL_OPAMP_Init+0x198>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b0a:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <HAL_OPAMP_Init+0x198>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fe8e 	bl	800184c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	d003      	beq.n	8002b40 <HAL_OPAMP_Init+0x78>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b60      	cmp	r3, #96	@ 0x60
 8002b3e:	d133      	bne.n	8002ba8 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0110 	bic.w	r1, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b41      	ldr	r3, [pc, #260]	@ (8002c64 <HAL_OPAMP_Init+0x19c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6851      	ldr	r1, [r2, #4]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6912      	ldr	r2, [r2, #16]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	7d09      	ldrb	r1, [r1, #20]
 8002b74:	2901      	cmp	r1, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_OPAMP_Init+0xb6>
 8002b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b7c:	e000      	b.n	8002b80 <HAL_OPAMP_Init+0xb8>
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b92:	04d2      	lsls	r2, r2, #19
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b9a:	0612      	lsls	r2, r2, #24
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e035      	b.n	8002c14 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0110 	bic.w	r1, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <HAL_OPAMP_Init+0x19c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6851      	ldr	r1, [r2, #4]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6912      	ldr	r2, [r2, #16]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	7d09      	ldrb	r1, [r1, #20]
 8002be2:	2901      	cmp	r1, #1
 8002be4:	d102      	bne.n	8002bec <HAL_OPAMP_Init+0x124>
 8002be6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bea:	e000      	b.n	8002bee <HAL_OPAMP_Init+0x126>
 8002bec:	2100      	movs	r1, #0
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c00:	04d2      	lsls	r2, r2, #19
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c08:	0612      	lsls	r2, r2, #24
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db10      	blt.n	8002c40 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	e0003e11 	.word	0xe0003e11

08002c68 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e01d      	b.n	8002cbc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d102      	bne.n	8002c92 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e014      	b.n	8002cbc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002cb6:	e001      	b.n	8002cbc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d141      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cda:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d131      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce8:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cee:	4a46      	ldr	r2, [pc, #280]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf8:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d00:	4a41      	ldr	r2, [pc, #260]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d08:	4b40      	ldr	r3, [pc, #256]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2232      	movs	r2, #50	@ 0x32
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a3f      	ldr	r2, [pc, #252]	@ (8002e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	0c9b      	lsrs	r3, r3, #18
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1e:	e002      	b.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d102      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f2      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	d158      	bne.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e057      	b.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d52:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d5c:	e04d      	b.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d64:	d141      	bne.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d66:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d72:	d131      	bne.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2232      	movs	r2, #50	@ 0x32
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	0c9b      	lsrs	r3, r3, #18
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002daa:	e002      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbe:	d102      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f2      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd2:	d112      	bne.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e011      	b.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002de8:	e007      	b.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dea:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002df2:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002df8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	20000028 	.word	0x20000028
 8002e10:	431bde83 	.word	0x431bde83

08002e14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e22:	6093      	str	r3, [r2, #8]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40007000 	.word	0x40007000

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e2fe      	b.n	8003444 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e52:	4b97      	ldr	r3, [pc, #604]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e5c:	4b94      	ldr	r3, [pc, #592]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3e>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b8d      	ldr	r3, [pc, #564]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e2d9      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a84      	ldr	r2, [pc, #528]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b78      	ldr	r3, [pc, #480]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a77      	ldr	r2, [pc, #476]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a74      	ldr	r2, [pc, #464]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fdf4 	bl	8001ad8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fdf0 	bl	8001ad8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e29e      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fde0 	bl	8001ad8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fddc 	bl	8001ad8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e28a      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f2e:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d075      	beq.n	8003036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	4b56      	ldr	r3, [pc, #344]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_OscConfig+0x136>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_OscConfig+0x13c>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11f      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f70:	4b4f      	ldr	r3, [pc, #316]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x154>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e25d      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b49      	ldr	r3, [pc, #292]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	4946      	ldr	r1, [pc, #280]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f9c:	4b45      	ldr	r3, [pc, #276]	@ (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fd4d 	bl	8001a40 <HAL_InitTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d043      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e249      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fd88 	bl	8001ad8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fd84 	bl	8001ad8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e232      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fde:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	492d      	ldr	r1, [pc, #180]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
 8002ffe:	e01a      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003000:	4b2b      	ldr	r3, [pc, #172]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2a      	ldr	r2, [pc, #168]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fd64 	bl	8001ad8 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe fd60 	bl	8001ad8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e20e      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003026:	4b22      	ldr	r3, [pc, #136]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1e0>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d041      	beq.n	80030c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01c      	beq.n	8003084 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b19      	ldr	r3, [pc, #100]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800304c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003050:	4a17      	ldr	r2, [pc, #92]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fd3d 	bl	8001ad8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fd39 	bl	8001ad8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1e7      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ef      	beq.n	8003062 <HAL_RCC_OscConfig+0x22e>
 8003082:	e020      	b.n	80030c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003084:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308a:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800308c:	f023 0301 	bic.w	r3, r3, #1
 8003090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fd20 	bl	8001ad8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309a:	e00d      	b.n	80030b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe fd1c 	bl	8001ad8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d906      	bls.n	80030b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1ca      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b8:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ea      	bne.n	800309c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a6 	beq.w	8003220 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030d8:	4b84      	ldr	r3, [pc, #528]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2b4>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x2b6>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fa:	4b7c      	ldr	r3, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	4b79      	ldr	r3, [pc, #484]	@ (80032f0 <HAL_RCC_OscConfig+0x4bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003116:	4b76      	ldr	r3, [pc, #472]	@ (80032f0 <HAL_RCC_OscConfig+0x4bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	@ (80032f0 <HAL_RCC_OscConfig+0x4bc>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fe fcd9 	bl	8001ad8 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fe fcd5 	bl	8001ad8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e183      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b6c      	ldr	r3, [pc, #432]	@ (80032f0 <HAL_RCC_OscConfig+0x4bc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d108      	bne.n	8003162 <HAL_RCC_OscConfig+0x32e>
 8003150:	4b66      	ldr	r3, [pc, #408]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	4a65      	ldr	r2, [pc, #404]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003160:	e024      	b.n	80031ac <HAL_RCC_OscConfig+0x378>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d110      	bne.n	800318c <HAL_RCC_OscConfig+0x358>
 800316a:	4b60      	ldr	r3, [pc, #384]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003180:	4a5a      	ldr	r2, [pc, #360]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800318a:	e00f      	b.n	80031ac <HAL_RCC_OscConfig+0x378>
 800318c:	4b57      	ldr	r3, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	4a56      	ldr	r2, [pc, #344]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800319c:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	4a52      	ldr	r2, [pc, #328]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fc90 	bl	8001ad8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fc8c 	bl	8001ad8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e138      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ed      	beq.n	80031bc <HAL_RCC_OscConfig+0x388>
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fc79 	bl	8001ad8 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe fc75 	bl	8001ad8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e121      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003200:	4b3a      	ldr	r3, [pc, #232]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ed      	bne.n	80031ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d105      	bne.n	8003220 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	4a34      	ldr	r2, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d03c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01c      	beq.n	800326e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003234:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800323a:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fc48 	bl	8001ad8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800324c:	f7fe fc44 	bl	8001ad8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0f2      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800325e:	4b23      	ldr	r3, [pc, #140]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ef      	beq.n	800324c <HAL_RCC_OscConfig+0x418>
 800326c:	e01b      	b.n	80032a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800326e:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003274:	4a1d      	ldr	r2, [pc, #116]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe fc2b 	bl	8001ad8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003286:	f7fe fc27 	bl	8001ad8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0d5      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 800329a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ef      	bne.n	8003286 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80c9 	beq.w	8003442 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	f000 8083 	beq.w	80033c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d15e      	bne.n	8003384 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fc01 	bl	8001ad8 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	e00c      	b.n	80032f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fbfd 	bl	8001ad8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d905      	bls.n	80032f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0ab      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f4:	4b55      	ldr	r3, [pc, #340]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ec      	bne.n	80032da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003300:	4b52      	ldr	r3, [pc, #328]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	4b52      	ldr	r3, [pc, #328]	@ (8003450 <HAL_RCC_OscConfig+0x61c>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6a11      	ldr	r1, [r2, #32]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003310:	3a01      	subs	r2, #1
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800331a:	0212      	lsls	r2, r2, #8
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003322:	0852      	lsrs	r2, r2, #1
 8003324:	3a01      	subs	r2, #1
 8003326:	0552      	lsls	r2, r2, #21
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800332e:	0852      	lsrs	r2, r2, #1
 8003330:	3a01      	subs	r2, #1
 8003332:	0652      	lsls	r2, r2, #25
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800333a:	06d2      	lsls	r2, r2, #27
 800333c:	430a      	orrs	r2, r1
 800333e:	4943      	ldr	r1, [pc, #268]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003340:	4313      	orrs	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b41      	ldr	r3, [pc, #260]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a40      	ldr	r2, [pc, #256]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003350:	4b3e      	ldr	r3, [pc, #248]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a3d      	ldr	r2, [pc, #244]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800335a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fbbc 	bl	8001ad8 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fbb8 	bl	8001ad8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e066      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x530>
 8003382:	e05e      	b.n	8003442 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a30      	ldr	r2, [pc, #192]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fba2 	bl	8001ad8 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fb9e 	bl	8001ad8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04c      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	4b28      	ldr	r3, [pc, #160]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033b6:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4924      	ldr	r1, [pc, #144]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_RCC_OscConfig+0x620>)
 80033be:	4013      	ands	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
 80033c2:	e03e      	b.n	8003442 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e039      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <HAL_RCC_OscConfig+0x618>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d12c      	bne.n	800343e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	3b01      	subs	r3, #1
 80033f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d123      	bne.n	800343e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d11b      	bne.n	800343e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d113      	bne.n	800343e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d109      	bne.n	800343e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	019f800c 	.word	0x019f800c
 8003454:	feeefffc 	.word	0xfeeefffc

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e11e      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b91      	ldr	r3, [pc, #580]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b8e      	ldr	r3, [pc, #568]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 020f 	bic.w	r2, r3, #15
 8003486:	498c      	ldr	r1, [pc, #560]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b8a      	ldr	r3, [pc, #552]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e106      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d073      	beq.n	8003594 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d129      	bne.n	8003508 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b4:	4b81      	ldr	r3, [pc, #516]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0f4      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034c4:	f000 f9b8 	bl	8003838 <RCC_GetSysClockFreqFromPLLSource>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4a7c      	ldr	r2, [pc, #496]	@ (80036c0 <HAL_RCC_ClockConfig+0x268>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d93f      	bls.n	8003552 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034d2:	4b7a      	ldr	r3, [pc, #488]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d033      	beq.n	8003552 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12f      	bne.n	8003552 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034f2:	4b72      	ldr	r3, [pc, #456]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034fa:	4a70      	ldr	r2, [pc, #448]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80034fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003500:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e024      	b.n	8003552 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d107      	bne.n	8003520 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003510:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0c6      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003520:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0be      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003530:	f000 f914 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4a61      	ldr	r2, [pc, #388]	@ (80036c0 <HAL_RCC_ClockConfig+0x268>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d909      	bls.n	8003552 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800353e:	4b5f      	ldr	r3, [pc, #380]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003546:	4a5d      	ldr	r2, [pc, #372]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b5a      	ldr	r3, [pc, #360]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4957      	ldr	r1, [pc, #348]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe fab8 	bl	8001ad8 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe fab4 	bl	8001ad8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e095      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b4e      	ldr	r3, [pc, #312]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d023      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035c4:	4b3d      	ldr	r3, [pc, #244]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035cc:	4a3b      	ldr	r2, [pc, #236]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4936      	ldr	r1, [pc, #216]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
 80035e6:	e008      	b.n	80035fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b80      	cmp	r3, #128	@ 0x80
 80035ec:	d105      	bne.n	80035fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035ee:	4b33      	ldr	r3, [pc, #204]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a32      	ldr	r2, [pc, #200]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 80035f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fa:	4b2f      	ldr	r3, [pc, #188]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d21d      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003608:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 020f 	bic.w	r2, r3, #15
 8003610:	4929      	ldr	r1, [pc, #164]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003618:	f7fe fa5e 	bl	8001ad8 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fe fa5a 	bl	8001ad8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e03b      	b.n	80036ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b20      	ldr	r3, [pc, #128]	@ (80036b8 <HAL_RCC_ClockConfig+0x260>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d1ed      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4917      	ldr	r1, [pc, #92]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490f      	ldr	r1, [pc, #60]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003682:	f000 f86b 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <HAL_RCC_ClockConfig+0x264>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490c      	ldr	r1, [pc, #48]	@ (80036c4 <HAL_RCC_ClockConfig+0x26c>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x270>)
 80036a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_RCC_ClockConfig+0x274>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe f9ca 	bl	8001a40 <HAL_InitTick>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	04c4b400 	.word	0x04c4b400
 80036c4:	080040c4 	.word	0x080040c4
 80036c8:	20000028 	.word	0x20000028
 80036cc:	2000002c 	.word	0x2000002c

080036d0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	@ 0x30
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800370a:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <HAL_RCC_MCOConfig+0x88>)
 800370c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800370e:	2101      	movs	r1, #1
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	4910      	ldr	r1, [pc, #64]	@ (8003758 <HAL_RCC_MCOConfig+0x88>)
 8003718:	4313      	orrs	r3, r2
 800371a:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	b29b      	uxth	r3, r3
 8003720:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0d1b      	lsrs	r3, r3, #20
 8003726:	b2db      	uxtb	r3, r3
 8003728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800372a:	f107 0310 	add.w	r3, r7, #16
 800372e:	4619      	mov	r1, r3
 8003730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003732:	f7ff f82f 	bl	8002794 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_RCC_MCOConfig+0x88>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	430b      	orrs	r3, r1
 800374a:	4903      	ldr	r1, [pc, #12]	@ (8003758 <HAL_RCC_MCOConfig+0x88>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]
  }
}
 8003750:	bf00      	nop
 8003752:	3730      	adds	r7, #48	@ 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003762:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d102      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800376e:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e047      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003774:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d102      	bne.n	8003786 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003780:	4b26      	ldr	r3, [pc, #152]	@ (800381c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e03e      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003786:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d136      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b0:	4a1a      	ldr	r2, [pc, #104]	@ (800381c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ba:	68d2      	ldr	r2, [r2, #12]
 80037bc:	0a12      	lsrs	r2, r2, #8
 80037be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e00c      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ca:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d2:	4a10      	ldr	r2, [pc, #64]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	0a12      	lsrs	r2, r2, #8
 80037d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
      break;
 80037e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0e5b      	lsrs	r3, r3, #25
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	3301      	adds	r3, #1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e001      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003804:	693b      	ldr	r3, [r7, #16]
}
 8003806:	4618      	mov	r0, r3
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	00f42400 	.word	0x00f42400
 800381c:	017d7840 	.word	0x017d7840

08003820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000028 	.word	0x20000028

08003838 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800383e:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003848:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d10c      	bne.n	8003876 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800385c:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003866:	68d2      	ldr	r2, [r2, #12]
 8003868:	0a12      	lsrs	r2, r2, #8
 800386a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	617b      	str	r3, [r7, #20]
    break;
 8003874:	e00c      	b.n	8003890 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003876:	4a12      	ldr	r2, [pc, #72]	@ (80038c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	4a0e      	ldr	r2, [pc, #56]	@ (80038b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	0a12      	lsrs	r2, r2, #8
 8003884:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    break;
 800388e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003890:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038aa:	687b      	ldr	r3, [r7, #4]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40021000 	.word	0x40021000
 80038bc:	017d7840 	.word	0x017d7840
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e049      	b.n	800396a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe f804 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 f9bc 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04c      	b.n	8003a26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a26      	ldr	r2, [pc, #152]	@ (8003a34 <HAL_TIM_Base_Start+0xc0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a6:	d01d      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_TIM_Base_Start+0xc4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_TIM_Base_Start+0xc8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_TIM_Base_Start+0xcc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <HAL_TIM_Base_Start+0xd0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_TIM_Base_Start+0xd4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_Base_Start+0x70>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_TIM_Base_Start+0xd8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d115      	bne.n	8003a10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_TIM_Base_Start+0xdc>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d015      	beq.n	8003a22 <HAL_TIM_Base_Start+0xae>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fc:	d011      	beq.n	8003a22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	e008      	b.n	8003a22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e000      	b.n	8003a24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40015000 	.word	0x40015000
 8003a50:	00010007 	.word	0x00010007

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_ConfigClockSource+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e0f6      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x20a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6f      	ldr	r2, [pc, #444]	@ (8003c68 <HAL_TIM_ConfigClockSource+0x214>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f000 80c1 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003ab0:	4a6d      	ldr	r2, [pc, #436]	@ (8003c68 <HAL_TIM_ConfigClockSource+0x214>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f200 80c6 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c6c <HAL_TIM_ConfigClockSource+0x218>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f000 80b9 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c6c <HAL_TIM_ConfigClockSource+0x218>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f200 80be 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac8:	4a69      	ldr	r2, [pc, #420]	@ (8003c70 <HAL_TIM_ConfigClockSource+0x21c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f000 80b1 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003ad0:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f200 80b6 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad8:	4a66      	ldr	r2, [pc, #408]	@ (8003c74 <HAL_TIM_ConfigClockSource+0x220>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 80a9 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003ae0:	4a64      	ldr	r2, [pc, #400]	@ (8003c74 <HAL_TIM_ConfigClockSource+0x220>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f200 80ae 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae8:	4a63      	ldr	r2, [pc, #396]	@ (8003c78 <HAL_TIM_ConfigClockSource+0x224>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f000 80a1 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003af0:	4a61      	ldr	r2, [pc, #388]	@ (8003c78 <HAL_TIM_ConfigClockSource+0x224>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f200 80a6 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af8:	4a60      	ldr	r2, [pc, #384]	@ (8003c7c <HAL_TIM_ConfigClockSource+0x228>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f000 8099 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b00:	4a5e      	ldr	r2, [pc, #376]	@ (8003c7c <HAL_TIM_ConfigClockSource+0x228>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f200 809e 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b0c:	f000 8091 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b14:	f200 8096 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b1c:	f000 8089 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b24:	f200 808e 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b2c:	d03e      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0x158>
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b32:	f200 8087 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3a:	f000 8086 	beq.w	8003c4a <HAL_TIM_ConfigClockSource+0x1f6>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b42:	d87f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b44:	2b70      	cmp	r3, #112	@ 0x70
 8003b46:	d01a      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x12a>
 8003b48:	2b70      	cmp	r3, #112	@ 0x70
 8003b4a:	d87b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b4c:	2b60      	cmp	r3, #96	@ 0x60
 8003b4e:	d050      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x19e>
 8003b50:	2b60      	cmp	r3, #96	@ 0x60
 8003b52:	d877      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b54:	2b50      	cmp	r3, #80	@ 0x50
 8003b56:	d03c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x17e>
 8003b58:	2b50      	cmp	r3, #80	@ 0x50
 8003b5a:	d873      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d058      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x1be>
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d86f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b64:	2b30      	cmp	r3, #48	@ 0x30
 8003b66:	d064      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b68:	2b30      	cmp	r3, #48	@ 0x30
 8003b6a:	d86b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d060      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d867      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05c      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d05a      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1de>
 8003b7c:	e062      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	f000 f9a7 	bl	8003ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	609a      	str	r2, [r3, #8]
      break;
 8003baa:	e04f      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	f000 f990 	bl	8003ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bce:	609a      	str	r2, [r3, #8]
      break;
 8003bd0:	e03c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 f902 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2150      	movs	r1, #80	@ 0x50
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f95b 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e02c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f000 f921 	bl	8003e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2160      	movs	r1, #96	@ 0x60
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f94b 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 8003c10:	e01c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f000 f8e2 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2140      	movs	r1, #64	@ 0x40
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f93b 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 8003c30:	e00c      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f000 f932 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 8003c42:	e003      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      break;
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	00100070 	.word	0x00100070
 8003c6c:	00100060 	.word	0x00100060
 8003c70:	00100050 	.word	0x00100050
 8003c74:	00100040 	.word	0x00100040
 8003c78:	00100030 	.word	0x00100030
 8003c7c:	00100020 	.word	0x00100020

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d017      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a49      	ldr	r2, [pc, #292]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a48      	ldr	r2, [pc, #288]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a47      	ldr	r2, [pc, #284]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a46      	ldr	r2, [pc, #280]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x48>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a45      	ldr	r2, [pc, #276]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a39      	ldr	r2, [pc, #228]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d023      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d01f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a36      	ldr	r2, [pc, #216]	@ (8003dc8 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	@ (8003dcc <TIM_Base_SetConfig+0x14c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d017      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	@ (8003dd0 <TIM_Base_SetConfig+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a33      	ldr	r2, [pc, #204]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00f      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a32      	ldr	r2, [pc, #200]	@ (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a31      	ldr	r2, [pc, #196]	@ (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_Base_SetConfig+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <TIM_Base_SetConfig+0x144>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <TIM_Base_SetConfig+0x154>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	@ (8003ddc <TIM_Base_SetConfig+0x15c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	@ (8003de0 <TIM_Base_SetConfig+0x160>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <TIM_Base_SetConfig+0x164>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x110>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <TIM_Base_SetConfig+0x158>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]
  }
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40015000 	.word	0x40015000
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f023 0210 	bic.w	r2, r3, #16
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f043 0307 	orr.w	r3, r3, #7
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e074      	b.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a34      	ldr	r2, [pc, #208]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a33      	ldr	r2, [pc, #204]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a31      	ldr	r2, [pc, #196]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a11      	ldr	r2, [pc, #68]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10c      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4313      	orrs	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40015000 	.word	0x40015000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000

0800404c <memset>:
 800404c:	4402      	add	r2, r0
 800404e:	4603      	mov	r3, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	f803 1b01 	strb.w	r1, [r3], #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	@ (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	@ (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	@ (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	@ (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 f818 	bl	80040a4 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	080040dc 	.word	0x080040dc
 8004098:	080040dc 	.word	0x080040dc
 800409c:	080040dc 	.word	0x080040dc
 80040a0:	080040e0 	.word	0x080040e0

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
